; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	C:\duke4\D3DDrv\Src\Direct3D8.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_1HO@DOMN@?$AAG?$AAe?$AAt?$AAA?$AAl?$AAl?$AAo?$AAc?$AAs?$AAS?$AAt?$AAa?$AAt?$AAs?$AA?$CI?$AA?$CJ?$AA?5?$AAn?$AAo?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_11A@?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13HMCP@?$AA?2?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06DIHH@Pos?$DO?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@JEDA@Pos?$CLNum?$DM?$DNBytes?4Num?$CI?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NOIE@InPos?$DO?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@PKIF@InPos?$DM?$DNBytes?4Num?$CI?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BM@LKB@?$AAU?$AAn?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@CPAJ@?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@IPGH@?4?4?2?4?4?2Core?2Inc?2UnObjBas?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05LCAF@Class?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17HGCB@?$AAF?$AA?$CF?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@NOGP@?$AAA?$AAc?$AAt?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13NHLM@?$AAA?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13LOIM@?$AAU?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19FLGB@?$AA?$CF?$AAs?$AA?$CF?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DMLA@?4?4?2?4?4?2Core?2Inc?2UnClass?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@NIKO@Defaults?$FLCPD_Normal?$FN?4Num?$CI?$CJ?$DN?$DNGetP@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@BEPO@Defaults?$FLCPD_Normal?$FN?4Num?$CI?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19NGFL@?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BM@ECHK@?$AAU?$AAn?$AAh?$AAa?$AAs?$AAh?$AAe?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAm?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@IEJK@?4?4?2?4?4?2Core?2Inc?2UnMem?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@DFNF@TopChunk?$DN?$DNNULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@BION@?4?4?2?4?4?2Core?2Inc?2UnMath?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04JDHJ@i?$DO?91?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03FBPA@i?$DM3?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_03PLGH@i?$DM2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@BFE@?$AAR?$AAe?$AAs?$AAo?$AAl?$AAv?$AAi?$AAn?$AAg?$AA?5?$AA?$CF?$AAs?$AA?4?$AA?4?$AA?4?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BO@EDDF@?4?4?2?4?4?2Engine?2Inc?2UnNetStuff?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07GDHO@hThread?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15DEDE@?$AA?$CF?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@JICC@?4?4?2?4?4?2Engine?2Inc?2ABrush?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NJDM@Brush?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05DJGJ@Other?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@ELOE@Other?9?$DOBrush?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@NPJG@?$AAT?$AAi?$AAt?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BG@COBA@?$AAL?$AAe?$AAv?$AAe?$AAl?$AAI?$AAn?$AAf?$AAo?$AA0?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@JMMP@?$AAI?$AAd?$AAe?$AAa?$AAl?$AAP?$AAl?$AAa?$AAy?$AAe?$AAr?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@IIGF@?4?4?2?4?4?2Engine?2Inc?2UnLevel?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@DADJ@Actors?4Num?$CI?$CJ?$DO?$DN2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@OIOI@Actors?$CI1?$CJ?$CB?$DNNULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BH@EHGL@Actors?$CI1?$CJ?9?$DOBrush?$CB?$DNNULL?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CI@PENI@?$AAA?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09HBFO@Actors?$CI0?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CK@OLMN@Actors?$CI0?$CJ?9?$DOIsA?$CIALevelInfo?3?3Stati@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19PPKP@?$AAU?$AAs?$AAe?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@KAEM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BE@ECAA@?$AAH?$AAH?$AAi?$AAt?$AAP?$AAr?$AAo?$AAx?$AAy?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@BNHE@?$AAH?$AAA?$AAc?$AAt?$AAo?$AAr?$AAV?$AAe?$AAr?$AAt?$AAe?$AAx?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@GBLI@Tesselations?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@NDIM@?$AAH?$AAB?$AAs?$AAp?$AAS?$AAu?$AAr?$AAf?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@OHK@?$AAH?$AAA?$AAc?$AAt?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@POFM@?$AAH?$AAC?$AAo?$AAo?$AAr?$AAd?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15EGHP@?$AA?5?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FEJO@Direct3DDevice8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@BICI@Surface?4Texture?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KKDE@Surface?4LightMap?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09PNHJ@Stages?$FL0?$FN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09OLND@Stages?$FL1?$FN?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PDMC@V?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GHEP@V?9?$DOU?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05MGNJ@V?9?$DOU2?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01IJJ@c?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_09FJBK@Direct3D8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GCAE@Index?$DO?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DHAB@InDevice?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08MGPM@InLength?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@DFJN@VertexBuffer8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CAAP@Length?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@GIGE@Num?$DMLength?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06NBPC@Device?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@IADD@?$AAH?$AAa?$AAs?$AAh?$AAM?$AAa?$AAp?$AAH?$AAa?$AAs?$AAh?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR2@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@MMMMMMMMMMMMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXPLANE@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXCOLOR@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appRound@@YAHM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appCycles@@YAKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appRDTSC@@YA_JXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appSeconds@@YANXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Serialize@FOutputDevice@@UAEXPBDW4EName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Flush@FOutputDevice@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FConfigCache@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFConfigCache@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appToUpper@@YAGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appToLower@@YAGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appStrihash@@YAKPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appSin@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appCos@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appTan@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appAcos@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appPow@@YANNN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appSrand@@YAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appRand@@YAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appFrand@@YAMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appSqrt@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appFloor@@YAHM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appMemcpy@@YAXPAXPBXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?appMemzero@@YAXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_U@YAPAXIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_U@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_V@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FArchive@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SerializeBits@FArchive@@UAEXPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SerializeInt@FArchive@@UAEXAAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Preload@FArchive@@UAEXPAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CountBytes@FArchive@@UAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??6FArchive@@UAEAAV0@AAVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??6FArchive@@UAEAAV0@AAPAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MapName@FArchive@@UAEHPAVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MapObject@FArchive@@UAEHPAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?TotalSize@FArchive@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?AtEnd@FArchive@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?AttachLazyLoader@FArchive@@UAEXPAVFLazyLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?DetachLazyLoader@FArchive@@UAEXPAVFLazyLoader@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Precache@FArchive@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Flush@FArchive@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Close@FArchive@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetError@FArchive@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ByteOrderSerialize@FArchive@@QAEAAV1@PAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FArchive@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Ver@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsLoading@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsSaving@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsTrans@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsPersistent@FArchive@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AA_K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfo@E@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfo@H@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfo@G@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfo@VFName@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetData@FArray@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Num@FArray@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Insert@FArray@@QAEXHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Add@FArray@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?AddZeroed@FArray@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Shrink@FArray@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Empty@FArray@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Clear@FArray@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FArray@@QAE@W4ENoInit@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FArray@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CountBytes@FArray@@QAEXAAVFArchive@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FArray@@IAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FLazyLoader@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@QAE@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@QAE@W4ENoInit@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FString@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FString@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFString@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??YFString@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??HFString@@QAE?AV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFString@@QAEAAV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFString@@QBE?AV0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Len@FString@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Left@FString@@QBE?AV1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Mid@FString@@QBE?AV1@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?InStr@FString@@QBEHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?InStr@FString@@QBEHABV1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FString@@AAE@HPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FStringNoInit@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FStringNoInit@@QAEAAU0@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTypeHash@@YAKABVFString@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@FStringOutputDevice@@UAEXPBGW4EName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FOutputDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FBufferWriter@@QAE@AAV?$TArray@E@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@FBufferWriter@@UAEXPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tell@FBufferWriter@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Seek@FBufferWriter@@UAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TotalSize@FBufferWriter@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFBufferWriter@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FBufferWriter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFBufferArchive@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FBufferArchive@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FBufferReader@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FRainbowPtr@@QAE@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFName@@QBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetIndex@FName@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FName@@QAE@W4EName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FName@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTypeHash@@YAKVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FFrame@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FIteratorList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FIteratorList@@QAE@PAU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FGuid@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FGuid@@QAE@KKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAVFGuid@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UObject@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UObject@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticConfigName@UObject@@SAPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??3UObject@@SAXPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsPendingKill@UObject@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetFlags@UObject@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetName@UObject@@UBEPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetFName@UObject@@QBE?BVFName@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetOuter@UObject@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetIndex@UObject@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTypeHash@@YAKPBVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??EFObjectIterator@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPackageMap@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPackageMap@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPackageMap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMaxObjectIndex@UPackageMap@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPackageMap@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@PAVUObject@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@PAVUObject@@PAVFClassNetCache@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UPackageMap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@PAVUObject@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@PAVUObject@@PAVFClassNetCache@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPackage@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPackage@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPackage@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPackage@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@USubsystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1USubsystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0USubsystem@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Tick@USubsystem@@UAIXM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FExec@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UCommandlet@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UCommandlet@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UCommandlet@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUCommandlet@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FStringNoInit@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0UCommandlet_eventMain_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1UCommandlet_eventMain_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULanguage@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULanguage@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UTextBuffer@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UTextBuffer@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UTextBuffer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUTextBuffer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@USystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2USystem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1USystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUSystem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UField@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UField@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UField@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UStruct@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UStruct@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UStruct@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UStruct@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInheritanceSuper@UStruct@@UAEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetPropertiesSize@UStruct@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetNameCPP@UStruct@@UAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSuperStruct@UStruct@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUStruct@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFunction@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFunction@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFunction@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UFunction@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MergeBools@UFunction@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInheritanceSuper@UFunction@@UAEPAVUStruct@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFunction@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UState@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UState@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UState@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UState@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MergeBools@UState@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInheritanceSuper@UState@@UAEPAVUStruct@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSuperState@UState@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUState@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UEnum@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UEnum@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UEnum@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UEnum@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUEnum@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UClass@@SAPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UClass@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UClass@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MergeBools@UClass@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInheritanceSuper@UClass@@UAEPAVUStruct@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetNameCPP@UClass@@UAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSuperClass@UClass@@QBEPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetDefaultActor@UClass@@QAEPAVAActor@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUClass@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UConst@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UConst@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UConst@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UConst@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUConst@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Matches@UProperty@@QBEHPBX0H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UByteProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UByteProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UByteProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UByteProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUByteProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UIntProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UIntProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UIntProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UIntProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUIntProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UBoolProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UBoolProperty@@SAPAXIPAVUObject@@VFName@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UBoolProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UBoolProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UBoolProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUBoolProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFloatProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFloatProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFloatProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UFloatProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFloatProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UObjectProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UObjectProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UObjectProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UObjectProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UObjectProperty@@QAE@W4ECppProperty@@HPBGKPAVUClass@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUObjectProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UClassProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UClassProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UClassProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UClassProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetID@UClassProperty@@UBEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUClassProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UNameProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UNameProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UNameProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UNameProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUNameProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UStrProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UStrProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UStrProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UStrProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUStrProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFixedArrayProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFixedArrayProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFixedArrayProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UFixedArrayProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFixedArrayProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UArrayProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UArrayProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UArrayProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UArrayProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUArrayProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UMapProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UMapProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UMapProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UMapProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUMapProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UStructProperty@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UStructProperty@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UStructProperty@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UStructProperty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUStructProperty@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsA@UObject@@QBIHPAVUClass@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsProbing@UObject@@QAEHVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FFrame@@QAE@PAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FStateFrame@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFStateFrame@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FGenerationInfo@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFGenerationInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPackageFileSummary@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULinker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ULinker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULinker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ULinker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULinker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FPackageFileSummary@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StaticClass@ULinkerLoad@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2ULinkerLoad@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ULinkerLoad@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ULinkerLoad@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULinkerLoad@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StaticClass@ULinkerSave@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2ULinkerSave@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ULinkerSave@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ULinkerSave@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULinkerSave@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFactory@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFactory@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UExporter@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UExporter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Unlock@FCacheItem@FMemCache@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GHash@FMemCache@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PushBytes@FMemStack@@QAEPAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Tick@FMemStack@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAVFMemStack@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMemMark@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMemMark@@QAE@AAVFMemStack@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Pop@FMemMark@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FSnap@@YAMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FSheerSnap@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FAddAngleConfined@@YIGHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FVector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FVector@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??TFVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??UFVector@@QBEMABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D@YA?AVFVector@@MABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??HFVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??GFVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFVector@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??KFVector@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFVector@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??8FVector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??9FVector@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??GFVector@@QBE?AV0@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??YFVector@@QAE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??ZFVector@@QAE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFVector@@QAE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FVector@@QAE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFVector@@QAE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FVector@@QAE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Size@FVector@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SizeSquared@FVector@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Normalize@FVector@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?UnsafeNormal@FVector@@QBE?AV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?BoundToCube@FVector@@QAE?AV1@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToStd@FVector@@QBE?AV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToUnr@FVector@@QBE?AV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RotateAboutAxis@@YA?AVFVector@@AAV1@M0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FVectorDouble@@QAE@NNN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??HFVectorDouble@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?BoundToCube@FVectorDouble@@QAE?AV1@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FQuat@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FQuat@@QAE@ABVFVector@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FQuat@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SizeSquared@FQuat@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Size@FQuat@@QBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Normalize@FQuat@@QAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??GFQuat@@QBE?AV0@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFQuat@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??UFQuat@@QBEMABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??8FQuat@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPlane@@QAE@VFVector@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PlaneDot@FPlane@@QBEMABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??9FPlane@@QBEHABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAVFPlane@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSphere@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FScale@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Orientation@FScale@@QAEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FCoords@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FCoords@@QAE@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FCoords@@QAE@ABVFVector@@000@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FModelCoords@@QAE@ABVFCoords@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FRotator@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FRotator@@QAE@HHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??HFRotator@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFRotator@@QBE?AV0@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??D@YA?AVFRotator@@MABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FRange@@QAE@MM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FBox@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FBox@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FBox@@QAE@ABVFVector@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetExtrema@FBox@@QBEABVFVector@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Init@FBox@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??YFBox@@QAEAAV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??YFBox@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SinTab@FGlobalMath@@QAEMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CosTab@FGlobalMath@@QAEMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SinFloat@FGlobalMath@@QAEMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CosFloat@FGlobalMath@@QAEMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReduceAngle@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ASMTransformPoint@@YAXABVFCoords@@ABVFVector@@AAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ASMTransformVector@@YAXABVFCoords@@ABVFVector@@AAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?TransformPointBy@FVector@@QBE?AV1@ABVFCoords@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MirrorByVector@FVector@@QBE?AV1@ABV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MirrorByPlane@FVector@@QBE?AV1@ABVFPlane@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FPointPlaneDist@@YAMABVFVector@@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FParallel@@YAHABVFVector@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Transpose@FCoords@@QBE?AV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFCoords@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFCoords@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFCoords@@QAEAAV0@ABVFRotator@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFCoords@@QBE?AV0@ABVFRotator@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFCoords@@QAEAAV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFCoords@@QBE?AV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FCoords@@QAEAAV0@ABVFRotator@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??KFCoords@@QBE?AV0@ABVFRotator@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FCoords@@QAEAAV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??KFCoords@@QBE?AV0@ABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??XFCoords@@QAEAAV0@ABVFScale@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??DFCoords@@QBE?AV0@ABVFScale@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_0FCoords@@QAEAAV0@ABVFScale@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??KFCoords@@QBE?AV0@ABVFScale@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMatrix@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMatrix@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??_3FCoords@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??6FCoords@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??SFCoords@@QBE?AV0@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Splerp@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPointRegion@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsCsg@FBspNode@@QBEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPolys@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPolys@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPolys@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UPolys@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Serialize@UPolys@@UAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPolys@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFPoly@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FIteratorActorList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FIteratorActorList@@QAE@PAU0@PAVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPrimitive@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPrimitive@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPrimitive@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UPrimitive@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPrimitive@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UModel@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UModel@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UModel@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UModel@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUModel@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFBspNode@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFVert@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFVector@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@VFBspSurf@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FColor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FColor@@QAE@EEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FColor@@QAE@EEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FColor@@QAE@ABVFPlane@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FColor@@QAEAAV0@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?TrueColor@FColor@@QBEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Plane@FColor@@QBE?AVFVector@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPalette@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UPalette@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPalette@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUPalette@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMipmapBase@@QAE@EE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMipmapBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UBitmap@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UBitmap@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UTexture@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UTexture@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAPAVUTexture@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UTexture@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMip@UTexture@@UAEPAUFMipmapBase@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?MousePosition@UTexture@@UAEXKMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Click@UTexture@@UAEXKMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Get@UTexture@@QAEPAV1@N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUTexture@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFFontCharacter@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFont@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFont@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFont@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFont@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UFontTrueType@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UFontTrueType@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UFontTrueType@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUFontTrueType@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@GH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UProceduralTexture@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UProceduralTexture@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UMesh@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UMesh@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UMesh@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetInstanceClass@UMesh@@UAEPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUMesh@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UMeshInstance@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UMeshInstance@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UMeshInstance@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PointCheck@UMeshInstance@@UAEHAAUFCheckResult@@PAVAActor@@VFVector@@2K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?LineCheck@UMeshInstance@@UAEHAAUFCheckResult@@PAVAActor@@VFVector@@22KH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetRenderBoundingBox@UMeshInstance@@UAE?AVFBox@@PBVAActor@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetCollisionBoundingBox@UMeshInstance@@UBE?AVFBox@@PBVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMesh@UMeshInstance@@UAEPAVUMesh@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SetMesh@UMeshInstance@@UAEXPAVUMesh@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetActor@UMeshInstance@@UAEPAVAActor@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SetActor@UMeshInstance@@UAEXPAVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetNumSequences@UMeshInstance@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSequence@UMeshInstance@@UAEPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?FindSequence@UMeshInstance@@UAEPAXVFName@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqName@UMeshInstance@@UAE?AVFName@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SetSeqGroupName@UMeshInstance@@UAEXVFName@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqGroupName@UMeshInstance@@UAE?AVFName@@V2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqNumFrames@UMeshInstance@@UAEHPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqRate@UMeshInstance@@UAEMPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqNumEvents@UMeshInstance@@UAEHPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqEventType@UMeshInstance@@UAE?AW4EMeshSeqEvent@@PAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqEventTime@UMeshInstance@@UAEMPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetSeqEventString@UMeshInstance@@UAEPBGPAXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PlaySequence@UMeshInstance@@UAEHPAXEHMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?DriveSequences@UMeshInstance@@UAEXM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetTexture@UMeshInstance@@UAEPAVUTexture@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetStringValue@UMeshInstance@@UAEXAAVFOutputDevice@@PBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SendStringCommand@UMeshInstance@@UAEXPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetBasisCoords@UMeshInstance@@UAE?AVFCoords@@V2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetFrame@UMeshInstance@@UAEHPAVFVector@@PAEHVFCoords@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMountCoords@UMeshInstance@@UAEHVFName@@HAAVFCoords@@PAVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Draw@UMeshInstance@@UAEXPAX0VFCoords@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUMeshInstance@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UMeshInstance@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMeshChannel@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AActor@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AActor@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAPAVAActor@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AActor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ShouldDoScriptReplication@AActor@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetLevel@AActor@@QBEPAVULevel@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?WorldLightRadius@AActor@@UBEMXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PostEditMove@AActor@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PreRaytrace@AActor@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PostRaytrace@AActor@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Spawned@AActor@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToLocal@AActor@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToWorld@AActor@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsPendingKill@AActor@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetMeshInstance@AActor@@QAEPAVUMeshInstance@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventCalcView_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventGlobalTrigger_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventEnumSurfsInRadiusCB_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventBroadcastMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AActor_eventBroadcastMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventTakeDamage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventPushedByMover_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventLanded_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AActor_eventHitWall_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAActor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInfoActor@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInfoActor@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInfoActor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInfoActor@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInfoActor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInternetInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInternetInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInternetInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInternetInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInternetInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInternetLink@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInternetLink@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInternetLink@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInternetLink@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AUdpLink@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AUdpLink@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AUdpLink@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AUdpLink_eventReceivedLine_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AUdpLink_eventReceivedLine_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AUdpLink_eventReceivedText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AUdpLink_eventReceivedText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAUdpLink@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATcpLink@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATcpLink@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATcpLink@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ATcpLink_eventReceivedLine_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ATcpLink_eventReceivedLine_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ATcpLink_eventReceivedText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ATcpLink_eventReceivedText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATcpLink@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMapLocations@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMapLocations@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMapLocations@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMapLocations@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMapLocations@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FMapInfoData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FMapInfoData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADOTAffector@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADOTAffector@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADOTAffector@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADOTAffector@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADOTAffector@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AActorDamageEffect@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AActorDamageEffect@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AActorDamageEffect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AActorDamageEffect@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAActorDamageEffect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMutator@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMutator@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMutator@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMutator@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMutator@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AReplicationInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AReplicationInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AReplicationInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AReplicationInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAReplicationInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AGameReplicationInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AGameReplicationInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AGameReplicationInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AGameReplicationInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAGameReplicationInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APlayerReplicationInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APlayerReplicationInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APlayerReplicationInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APlayerReplicationInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPlayerReplicationInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASavedMove@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASavedMove@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASavedMove@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASavedMove@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASavedMove@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AZoneInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AZoneInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AZoneInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AZoneInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAZoneInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AWarpZoneInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AWarpZoneInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AWarpZoneInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AWarpZoneInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAWarpZoneInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASkyZoneInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASkyZoneInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASkyZoneInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASkyZoneInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASkyZoneInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ALevelInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ALevelInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ALevelInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ALevelInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ALevelInfo_eventServerTravel_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ALevelInfo_eventServerTravel_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GALevelInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FObjectiveInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FObjectiveInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AGameInfo@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AGameInfo@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AGameInfo@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AGameInfo@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventLoginNewClass_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventLoginNewClass_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventLogin_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventLogin_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventPreLogin_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventPreLogin_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventGetBeaconText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventGetBeaconText_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AGameInfo_eventInitGame_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1AGameInfo_eventInitGame_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAGameInfo@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMaterial@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMaterial@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMaterial@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMaterial@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMaterial@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FDamageCategoryEffectStruct@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AFocalPoint@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AFocalPoint@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AFocalPoint@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAFocalPoint@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AFocalPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ALight@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ALight@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ALight@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ALight@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GALight@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AFlareLight@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AFlareLight@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AFlareLight@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AFlareLight@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAFlareLight@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATriggerLight@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATriggerLight@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATriggerLight@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATriggerLight@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATriggerLight@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADamageType@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADamageType@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADamageType@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADamageType@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADamageType@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AKeypoint@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AKeypoint@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AKeypoint@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AKeypoint@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAKeypoint@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInterpolationStation@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInterpolationStation@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInterpolationStation@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInterpolationStation@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInterpolationStation@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@Alocationid@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2Alocationid@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1Alocationid@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0Alocationid@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAlocationid@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInterpolationPoint@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInterpolationPoint@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInterpolationPoint@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInterpolationPoint@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInterpolationPoint@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APolyMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APolyMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APolyMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APolyMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPolyMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AClipMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AClipMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AClipMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AClipMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAClipMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMeshEffect@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMeshEffect@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMeshEffect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMeshEffect@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0AMeshEffect_eventEvalVert_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMeshEffect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASpawnNotify@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASpawnNotify@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASpawnNotify@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASpawnNotify@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASpawnNotify@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ANavigationPoint@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ANavigationPoint@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ANavigationPoint@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ANavigationPoint@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GANavigationPoint@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ALiftExit@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ALiftExit@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ALiftExit@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ALiftExit@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GALiftExit@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ALiftCenter@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ALiftCenter@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ALiftCenter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ALiftCenter@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GALiftCenter@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AWarpZoneMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AWarpZoneMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AWarpZoneMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AWarpZoneMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAWarpZoneMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AButtonMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AButtonMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AButtonMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AButtonMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAButtonMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATriggerMarker@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATriggerMarker@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATriggerMarker@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATriggerMarker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATriggerMarker@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInventorySpot@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInventorySpot@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInventorySpot@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInventorySpot@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInventorySpot@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APlayerStart@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APlayerStart@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APlayerStart@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APlayerStart@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPlayerStart@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATeleporter@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATeleporter@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATeleporter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATeleporter@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATeleporter@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APathNode@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APathNode@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APathNode@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APathNode@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPathNode@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AHUD@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AHUD@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AHUD@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AHUD@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAHUD@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATriggers@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATriggers@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATriggers@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATriggers@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATriggers@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ATrigger@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ATrigger@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ATrigger@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ATrigger@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GATrigger@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADukeNet@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADukeNet@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADukeNet@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADukeNet@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ADukeNet_eventdncServerCommand_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1ADukeNet_eventdncServerCommand_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADukeNet@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ARenderActor@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ARenderActor@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ARenderActor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GARenderActor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ARenderActor@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APawn@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APawn@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APawn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APawn@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APawn_eventClientHearSound_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APawn_eventWalkTexture_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APawn_eventTeamMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1APawn_eventTeamMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APawn_eventClientMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1APawn_eventClientMessage_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPawn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSFacialExpression@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FFacialNoiseInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSFacialExpressionFrame@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@APlayerPawn@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2APlayerPawn@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1APlayerPawn@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APlayerPawn_eventPlayerCalcView_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0APlayerPawn_eventClientTravel_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1APlayerPawn_eventClientTravel_Parms@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAPlayerPawn@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0APlayerPawn@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ACamera@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ACamera@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ACamera@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ACamera@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GACamera@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AScout@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AScout@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AScout@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AScout@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAScout@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ABrush@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ABrush@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ABrush@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ABrush@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?OldBuildCoords@ABrush@@UAEMPAVFModelCoords@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToLocal@ABrush@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToWorld@ABrush@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?BuildCoords@ABrush@@UAEMPAVFModelCoords@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?CopyPosRotScaleFrom@ABrush@@UAEXPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GABrush@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMover@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMover@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMover@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToLocal@AMover@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?ToWorld@AMover@@UBE?AVFCoords@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?BuildCoords@AMover@@UAEMPAVFModelCoords@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMover@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADoorMover@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADoorMover@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADoorMover@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADoorMover@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADoorMover@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AMeshDecal@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AMeshDecal@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AMeshDecal@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AMeshDecal@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAMeshDecal@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AItem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AItem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AItem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AItem@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAItem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADecoration@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADecoration@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADecoration@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADecoration@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADecoration@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSThirdPersonInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ACarcass@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ACarcass@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ACarcass@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GACarcass@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ACarcass@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ABoneRope@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ABoneRope@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ABoneRope@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GABoneRope@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AParticleCollisionActor@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AParticleCollisionActor@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AParticleCollisionActor@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AParticleCollisionActor@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAParticleCollisionActor@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ADecal@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ADecal@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ADecal@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ADecal@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GADecal@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AInventory@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AInventory@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AInventory@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AInventory@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAInventory@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AWeapon@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AWeapon@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AWeapon@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AWeapon@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAWeapon@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FWAMEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FWAMEntry@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AProjectile@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AProjectile@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AProjectile@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AProjectile@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAProjectile@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@AParticleSystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2AParticleSystem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1AParticleSystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0AParticleSystem@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GAParticleSystem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASoftParticleAffector@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASoftParticleAffector@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASoftParticleAffector@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASoftParticleAffector@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASoftParticleAffector@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ASoftParticleSystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ASoftParticleSystem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ASoftParticleSystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ASoftParticleSystem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GASoftParticleSystem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FAdditionalSpawnStruct@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ABeamSystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ABeamSystem@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ABeamSystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ABeamSystem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GABeamSystem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSControlPoint@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ABreakableGlass@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ABreakableGlass@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ABreakableGlass@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GABreakableGlass@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULevelSummary@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ULevelSummary@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULevelSummary@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ULevelSummary@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PostLoad@ULevelSummary@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULevelSummary@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FCollisionHashBase@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFCollisionHashBase@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULevelBase@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULevelBase@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ULevelBase@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FURL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TTransArray@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FNetworkNotify@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@ULevel@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2ULevel@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1ULevel@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0ULevel@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetLevelInfo@ULevel@@QAEPAVALevelInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GULevel@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@VFName@@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@VFName@@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??EFStaticBrushIterator@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UInput@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UInput@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UInput@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUInput@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FAlias@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UPlayer@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UPlayer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UEngine@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UEngine@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad1@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad2@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad3@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?edSetClickLocation@UEngine@@UAEXAAVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?edcamMode@UEngine@@UAEHPAVUViewport@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad4@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad5@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?vtPad6@UEngine@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UGameEngine@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UGameEngine@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UGameEngine@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUGameEngine@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UCanvas@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UCanvas@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UCanvas@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UCanvas@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUCanvas@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMap@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UViewport@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UViewport@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetOuterUClient@UViewport@@QBEPAVUClient@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsOrtho@UViewport@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsA@HHitProxy@@UBEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?Click@HHitProxy@@UAEXABUFHitCause@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UClient@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UClient@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAVFMeshAnimNotify@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FMeshAnimNotify@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFMeshVertConnect@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FMeshVert@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFMeshVert@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFMeshUV@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAUFMeshTri@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UUnrealMesh@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UUnrealMesh@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UUnrealMesh@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUUnrealMesh@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UUnrealLodMesh@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UUnrealLodMesh@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UUnrealLodMesh@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UUnrealLodMesh@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUUnrealLodMesh@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UDukeMesh@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UDukeMesh@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UDukeMesh@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUDukeMesh@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMap@VFName@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsBrush@AActor@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?IsStaticBrush@AActor@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetPlayerPawn@AActor@@QBEPAVAPlayerPawn@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?GetPrimitive@AActor@@UBEPAVUPrimitive@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UAudioSubsystem@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UAudioSubsystem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FSoundData@@QAE@PAVUSound@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@USound@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2USound@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1USound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0USound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FSoundData@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UVoiceSound@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UVoiceSound@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UVoiceSound@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUVoiceSound@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UVoiceSound@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UMusic@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UMusic@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UMusic@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0UMusic@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUMusic@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FMovingBrushTrackerBase@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFMovingBrushTrackerBase@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@UScriptedTexture@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2UScriptedTexture@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1UScriptedTexture@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?PostEditChange@UScriptedTexture@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUScriptedTexture@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@URenderIterator@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2URenderIterator@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1URenderIterator@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GURenderIterator@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FActorNode@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFActorNode@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsA@HActorVertex@@UBEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0HHitProxy@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@URenderDevice@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1URenderDevice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?DrawStats@URenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?SetSceneNode@URenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?_Validate@URenderDevice@@UAIXPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Project@FTransform@@QAEXPBUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransform@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FOutVector@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransSample@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransSample@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransTexture@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTransTexture@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FSpan@@QAE@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FDynamicItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Filter@FDynamicItem@@UAIXPAVUViewport@@PAUFSceneNode@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PreRender@FDynamicItem@@UAIXPAVUViewport@@PAUFSceneNode@@PAVFSpanBuffer@@HPAUFVolActorLink@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@Profile@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Collapse@Profile@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_?StaticClass@URender@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??2URender@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1URender@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GURender@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E229
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E230
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E231
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E232
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E234
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E235
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E236
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E237
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E239
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E240
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E241
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E242
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E244
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E245
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E246
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E247
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E249
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E250
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E251
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E252
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E254
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E255
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E256
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E257
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E259
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E260
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E261
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E262
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E264
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E265
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E266
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E267
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E269
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E270
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E271
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E272
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E274
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E275
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E276
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E277
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E279
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E280
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E281
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E282
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E284
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E285
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E286
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E287
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E289
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E290
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E292
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E293
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E294
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E295
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E297
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E298
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E299
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E300
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FPixFormat@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetStats@FPixFormat@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1UD3DRenderDevice@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFillerDXT1@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFillerP8_P8@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_RGBA8@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_RGBA7@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_P8@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller1555_RGBA7@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller1555_P8@UD3DRenderDevice@@QAE@PAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BuildAlphaPalette@FTexFiller1555_P8@UD3DRenderDevice@@QAEXPAVFColor@@KKKKKKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StaticConstructor@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Destroy@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitD3D@UD3DRenderDevice@@SIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RestoreGamma@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Flush@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Validate@UD3DRenderDevice@@UAIXPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PushHit@UD3DRenderDevice@@UAIXPBEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PopHit@UD3DRenderDevice@@UAIXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStats@UD3DRenderDevice@@UAIXPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndFlash@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetZBias@UD3DRenderDevice@@QAIMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BeginScene@UD3DRenderDevice@@QAIJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndScene@UD3DRenderDevice@@QAIJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetBlending@UD3DRenderDevice@@QAIXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRes@UD3DRenderDevice@@UAIHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetProjectors@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0UD3DRenderDevice@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GUD3DRenderDevice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EUD3DRenderDevice@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0URenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexInfo@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FD3DTLVertex@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FTextureInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FD3DScreenVertex@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0ProjectorInfo@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0URenderDevice@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFillerDXT1@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_RGBA8@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_RGBA7@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller8888_P8@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller1555_RGBA7@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller1555_P8@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFillerP8_P8@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FD3DTLVertex@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4URenderDevice@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFillerDXT1@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller8888_RGBA8@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller8888_RGBA7@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller8888_P8@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller1555_RGBA7@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller1555_P8@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFillerP8_P8@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0USubsystem@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FTexFiller@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4USubsystem@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4FTexFiller@UD3DRenderDevice@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FExec@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??4FExec@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _DllMain@12
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E313
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E314
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E316
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E317
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E319
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E320
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@G@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@G@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@G@@QAE@W4ENoInit@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@G@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@G@@QAEAAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@G@@QBEABGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Shrink@?$TArray@G@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@G@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@G@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@E@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@E@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@E@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@E@@QAEAAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@E@@QBEABEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@E@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@E@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@E@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@E@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@PAUFNameEntry@@@@QAEAAPAUFNameEntry@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@H@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@H@@QAEAAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@H@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@H@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@H@@QAEHABH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFString@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFString@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@PAVUObject@@@@QAEAAPAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFFieldNetCache@@@@QAEAAVFFieldNetCache@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindRef@?$TMapBase@PAVUObject@@PAVFFieldNetCache@@@@QAEPAVFFieldNetCache@@ABQAVUObject@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFPackageInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFPackageInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@PAVUObject@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@PAVUObject@@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFName@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFName@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFRepRecord@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVUField@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFClassDependency@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFClassDependency@@@@QAEAAVFClassDependency@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TFieldIterator@VUProperty@@@@QAE@PAVUStruct@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$TFieldIterator@VUProperty@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??E?$TFieldIterator@VUProperty@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$TFieldIterator@VUProperty@@@@QAEPAVUProperty@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFGenerationInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFGenerationInfo@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFGenerationInfo@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFGenerationInfo@@@@QAEAAUFGenerationInfo@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFGenerationInfo@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UFGenerationInfo@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFObjectImport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFObjectImport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFObjectExport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFObjectExport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@PAVFLazyLoader@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVFLazyLoader@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFPoly@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TTransArray@VFPoly@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddZeroed@?$TTransArray@VFPoly@@@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TTransArray@VFPoly@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFPoly@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFPoly@@@@QAEAAVFPoly@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@VFPoly@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFBspNode@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFBspNode@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFBspNode@@@@QAEAAVFBspNode@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFVert@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFVert@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFVector@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFVector@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFVector@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFVector@@@@QAEAAVFVector@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddUniqueItem@?$TArray@VFVector@@@@QAEHABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@VFBspSurf@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFBspSurf@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFBspSurf@@@@QAEAAVFBspSurf@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFLightMapIndex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFLightMapIndex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFLightMapIndex@@@@QAEAAVFLightMapIndex@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFBox@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFBox@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFLeaf@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFLeaf@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@PAVAActor@@@@QAEAAPAVAActor@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFColor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFColor@@@@QAEAAVFColor@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TLazyArray@E@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@E@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@E@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@E@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TLazyArray@E@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMipmap@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFMipmap@@@@QAEAAUFMipmap@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@UFFontCharacter@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFFontPage@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@GH@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@M@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@M@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFMeshDecalTri@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshDecalTri@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@PAVAParticleCollisionActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVAParticleCollisionActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TTransArray@PAVAActor@@@@QAE@PAVUObject@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFReachSpec@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFReachSpec@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@VFName@@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@VFName@@PAVAActor@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TMapBase@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVUViewport@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFMeshAnimNotify@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFMeshAnimNotify@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@VFMeshAnimNotify@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@UFMeshVert@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@UFMeshVert@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@UFMeshVert@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@UFMeshTri@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@UFMeshTri@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@UFMeshTri@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFMeshAnimSeq@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@UFMeshVertConnect@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@UFMeshVertConnect@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@UFMeshVertConnect@@@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TLazyArray@H@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Load@?$TLazyArray@H@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unload@?$TLazyArray@H@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@PAVUTexture@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFMeshFace@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshFace@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFMeshWedge@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshWedge@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFMeshMaterial@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshMaterial@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TMapBase@VFName@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEAAU_D3DADAPTER_IDENTIFIER8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHABU_D3DADAPTER_IDENTIFIER8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@U_D3DDISPLAYMODE@@@@QAEAAU_D3DDISPLAYMODE@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@U_D3DDISPLAYMODE@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@U_D3DDISPLAYMODE@@@@QAEHABU_D3DDISPLAYMODE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0TIterator@?$TArray@U_D3DDISPLAYMODE@@@@QAE@AAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ETIterator@?$TArray@U_D3DDISPLAYMODE@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BTIterator@?$TArray@U_D3DDISPLAYMODE@@@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CTIterator@?$TArray@U_D3DDISPLAYMODE@@@@QBEPAU_D3DDISPLAYMODE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEAAUProjectorInfo@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHABUProjectorInfo@UD3DRenderDevice@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEAAURenderTargetInfo@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEHABURenderTargetInfo@UD3DRenderDevice@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXPAUIDirect3DDevice8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXPAUIDirect3DDevice8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXPAUIDirect3DDevice8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXPAUIDirect3DDevice8@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exit@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEAAUQueuedPolygon@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEAAUQueuedParticleByTexture@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddZeroed@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEAAUQueuedLineSegment@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFD3DVertex@@@@QAEAAUFD3DVertex@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$TArray@UFD3DVertex@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0QueuedPolygon@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0QueuedLineSegment@UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FD3DVertex@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@G@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@E@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@E@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@E@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@H@@QBEABHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@H@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@H@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@H@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFString@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFFieldNetCache@@@@@@QAEAAVTPair@?$TMapBase@PAVUObject@@PAVFFieldNetCache@@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFPackageInfo@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@PAVUObject@@H@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@PAVUObject@@H@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@PAVUObject@@H@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFName@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFRepRecord@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVUField@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFClassDependency@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IterateToNext@?$TFieldIterator@VUProperty@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFGenerationInfo@@@@QBEABUFGenerationInfo@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFGenerationInfo@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFObjectImport@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFObjectExport@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVFLazyLoader@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TTransArray@VFPoly@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SerializeItem@?$TTransArray@VFPoly@@@@KAXAAVFArchive@@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DestructItem@?$TTransArray@VFPoly@@@@KAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFPoly@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@VFPoly@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFPoly@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@VFPoly@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFBspNode@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFBspNode@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFVert@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFVert@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFVector@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFVector@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddItem@?$TArray@VFVector@@@@QAEHABVFVector@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VFBspSurf@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFBspSurf@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFLightMapIndex@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFBox@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFLeaf@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@PAVAActor@@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVAActor@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFColor@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMipmap@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFFontCharacter@@@@QAEAAUFFontCharacter@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@UFFontCharacter@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFFontCharacter@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFFontPage@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@GH@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@M@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshDecalTri@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVAParticleCollisionActor@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFReachSpec@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@VFString@@V1@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@VFString@@V1@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@VFString@@V1@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@VFName@@PAVAActor@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Rehash@?$TMapBase@VFString@@PAVUFont@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$TArray@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVUViewport@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFMeshAnimNotify@@@@QAEAAVFMeshAnimNotify@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@VFMeshAnimNotify@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFMeshAnimNotify@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@VFMeshAnimNotify@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshVert@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@UFMeshVert@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFMeshVert@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshTri@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@UFMeshTri@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFMeshTri@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFMeshAnimSeq@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFMeshVertConnect@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6@YAAAVFArchive@@AAV0@AAV?$TArray@UFMeshVertConnect@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFMeshVertConnect@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@PAVUTexture@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshFace@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshWedge@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshMaterial@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VTPair@?$TMapBase@VFName@@V1@@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@U_D3DDISPLAYMODE@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@U_D3DDISPLAYMODE@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QBEABUProjectorInfo@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QBEABURenderTargetInfo@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QBEABUQueuedPolygon@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QBEABUQueuedParticleByTexture@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QBEABUQueuedLineSegment@UD3DRenderDevice@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFD3DVertex@@@@QBEABUFD3DVertex@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFGenerationInfo@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@U_D3DADAPTER_IDENTIFIER8@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@U_D3DDISPLAYMODE@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UProjectorInfo@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@URenderTargetInfo@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UQueuedPolygon@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UQueuedParticleByTexture@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UQueuedLineSegment@UD3DRenderDevice@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFD3DVertex@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFString@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFPackageInfo@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??0FPoly@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFBspSurf@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFMipmap@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFFontPage@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFMeshAnimSeq@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FPackageInfo@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FBspSurf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FMipmap@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __imp_??1FFontPage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FMeshAnimSeq@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFString@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@H@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFString@@@@QAEAAVFString@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFPackageInfo@@@@QAEAAVFPackageInfo@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@PAVUObject@@H@@@@QAEAAVTPair@?$TMapBase@PAVUObject@@H@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@PAVUObject@@H@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@QAEAAVTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@VFDecal@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@VFPoly@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@VFVector@@@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$TArray@UFFontCharacter@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFFontPage@@@@QAEAAUFFontPage@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@GH@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@VFString@@V1@@@@@QAEAAVTPair@?$TMapBase@VFString@@V1@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@VFString@@V1@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVAActor@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@QAEAAVTPair@?$TMapBase@VFName@@PAVAActor@@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@QAEAAVTPair@?$TMapBase@VFString@@PAVUFont@@@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFMeshVert@@@@QAEAAUFMeshVert@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@UFMeshVert@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshVert@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFMeshTri@@@@QAEAAUFMeshTri@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@UFMeshTri@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshTri@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFMeshAnimSeq@@@@QAEAAVFMeshAnimSeq@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@UFMeshVertConnect@@@@QAEAAUFMeshVertConnect@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CountBytes@?$TArray@UFMeshVertConnect@@@@QAEXAAVFArchive@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFMeshVertConnect@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VTPair@?$TMapBase@VFName@@V1@@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFPackageInfo@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFRepRecord@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVUField@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFClassDependency@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFObjectImport@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFObjectExport@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVFLazyLoader@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFPoly@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFBspNode@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFVert@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFVector@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFBspSurf@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFLightMapIndex@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFBox@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFLeaf@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFColor@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMipmap@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFFontCharacter@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFFontPage@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@M@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshDecalTri@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVAParticleCollisionActor@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFReachSpec@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVUViewport@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFMeshAnimNotify@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshVert@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshTri@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFMeshAnimSeq@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshVertConnect@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@PAVUTexture@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshFace@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshWedge@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@UFMeshMaterial@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTPair@?$TMapBase@VFString@@V1@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GTPair@?$TMapBase@VFString@@PAVUFont@@@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TPair@?$TMapBase@VFString@@V1@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1TPair@?$TMapBase@VFString@@PAVUFont@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@VFDecal@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFFontCharacter@@@@QAEXHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@PAVUObject@@H@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@PAVUObject@@PAVFClassNetCache@@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@GH@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@VFString@@V1@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@VFName@@PAVAActor@@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@VFString@@PAVUFont@@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VTPair@?$TMapBase@VFName@@V1@@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GFDecal@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1FDecal@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$TArray@VFDecal@@@@QAEAAVFDecal@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?NeedsDestructor@?$TTypeInfoBase@VFDecal@@@@SAHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clamp@@YAHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clamp@@YAKKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@VFClassDependency@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFGenerationInfo@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Align@@YAPAEQAEH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Abs@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clamp@@YAMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Abs@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clamp@@YANNNN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Sgn@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Max@@YAMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Min@@YAMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Square@@YAMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Square@@YANN@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?New@@YAPAPAVFSpan@@AAVFMemStack@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?New@@YAPAVFSpan@@AAVFMemStack@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Max@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Min@@YAHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Min@@YAKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeDelete@@YAXAAPAUFTexInfo@UD3DRenderDevice@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Exchange@@YAXAAM0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Abs@@YAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@E@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@H@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFFontCharacter@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@VFMeshAnimNotify@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UProjectorInfo@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@VFPoly@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFMeshVert@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFMeshTri@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFMeshVertConnect@@@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EULinkerLoad@@WKE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EULinkerSave@@WKE@AEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_SULevel@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?OutXMinTab@?1??ComputeOutcode@FTransform@@QAEXPBUFSceneNode@@@Z@4QBEB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInternetLink@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SALight@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUCanvas@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ULinkerLoad@@6BULinker@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInventory@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ULinkerSave@@6BULinker@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPolyMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAlocationid@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SARenderActor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0PAX@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_SAInfoActor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@E@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?OutXMaxTab@?1??ComputeOutcode@FTransform@@QAEXPBUFSceneNode@@@Z@4QBEB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUObjectProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUState@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Half@?1??appFloor@@YAHM@Z@4MA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0PAX@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_SASpawnNotify@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUMeshInstance@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAActorDamageEffect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FMovingBrushTrackerBase@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATcpLink@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPawn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUUnrealLodMesh@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMutator@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMapLocations@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7UD3DRenderDevice@@6BFExec@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SABrush@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUSystem@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAClipMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPrimitive@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPlayerPawn@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPlayerStart@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAWeapon@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SABreakableGlass@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPathNode@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMover@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SABoneRope@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0PAG@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_SAActor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SULevelSummary@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FStringOutputDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUEnum@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ULinkerSave@@6BFArchive@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_R0PAG@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_SACarcass@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAUdpLink@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SASavedMove@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUStrProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7UD3DRenderDevice@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADecal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SANavigationPoint@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPackageMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUStructProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFunction@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUMesh@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAZoneInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAButtonMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FBufferArchive@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAGameInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATriggers@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@UFMeshTri@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAPlayerReplicationInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFontTrueType@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SASoftParticleAffector@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUClassProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SABeamSystem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUInput@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@H@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUDukeMesh@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAParticleSystem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATeleporter@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMeshEffect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAFocalPoint@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAScout@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInterpolationStation@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@UFMeshVert@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SASkyZoneInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFloatProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FDynamicSprite@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FDynamicItem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SURender@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUConst@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUGameEngine@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7HActorVertex@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUNameProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAParticleCollisionActor@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAKeypoint@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPackage@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFillerDXT1@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAItem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPalette@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FLazyLoader@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUMusic@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAHUD@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUCommandlet@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAWarpZoneMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATriggerMarker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FBufferWriter@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUBoolProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADecoration@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInterpolationPoint@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADamageType@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFont@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMaterial@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUPolys@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUUnrealMesh@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FConfigCache@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAReplicationInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUFixedArrayProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADOTAffector@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADoorMover@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAFlareLight@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7ULinkerLoad@@6BFArchive@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATrigger@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUArrayProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?OutYMaxTab@?1??ComputeOutcode@FTransform@@QAEXPBUFSceneNode@@@Z@4QBEB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUVoiceSound@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAGameReplicationInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAMeshDecal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SATriggerLight@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FCollisionHashBase@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$TLazyArray@UFMeshVertConnect@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUIntProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUStruct@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SULinker@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SADukeNet@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?OutYMinTab@?1??ComputeOutcode@FTransform@@QAEXPBUFSceneNode@@@Z@4QBEB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SASoftParticleSystem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAWarpZoneInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUTexture@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInventorySpot@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUModel@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUByteProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SALiftCenter@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA2PAG
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_SUScriptedTexture@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SURenderIterator@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUMapProperty@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SALevelInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI2PAG
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_SUTextBuffer@@6BUObject@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SACamera@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SALiftExit@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAProjectile@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SUClass@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_SAInternetInfo@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ, xdata$x
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?h@@3JA						; h
PUBLIC	?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A ; Adapters
PUBLIC	?BestAdapterIndex@@3HA				; BestAdapterIndex
PUBLIC	?DeviceCaps8@@3U_D3DCAPS8@@A			; DeviceCaps8
PUBLIC	?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A	; DeviceIdentifier
PUBLIC	?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A	; DisplayModes
PUBLIC	_GPackage
PUBLIC	?RScale@@3PAGA					; RScale
PUBLIC	?GScale@@3PAGA					; GScale
PUBLIC	?BScale@@3PAGA					; BScale
PUBLIC	?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A	; OriginalDisplayMode
PUBLIC	?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A ; UD3DRenderDevice::PrivateStaticClass
PUBLIC	_autoclassUD3DRenderDevice
PUBLIC	_hInstance
PUBLIC	?FogStart@@3MA					; FogStart
PUBLIC	?FogStart_ExecVar@@3VFExecVariable@@A		; FogStart_ExecVar
PUBLIC	?FogEnd@@3MA					; FogEnd
PUBLIC	?FogEnd_ExecVar@@3VFExecVariable@@A		; FogEnd_ExecVar
PUBLIC	?RenderParticles@@3HA				; RenderParticles
PUBLIC	?RenderParticles_ExecVar@@3VFExecVariable@@A	; RenderParticles_ExecVar
PUBLIC	?RenderMeshes@@3HA				; RenderMeshes
PUBLIC	?RenderMeshes_ExecVar@@3VFExecVariable@@A	; RenderMeshes_ExecVar
PUBLIC	?RenderSurfaces@@3HA				; RenderSurfaces
PUBLIC	?RenderSurfaces_ExecVar@@3VFExecVariable@@A	; RenderSurfaces_ExecVar
PUBLIC	?RenderLines@@3HA				; RenderLines
PUBLIC	?RenderLines_ExecVar@@3VFExecVariable@@A	; RenderLines_ExecVar
PUBLIC	?RenderTiles@@3HA				; RenderTiles
PUBLIC	?RenderTiles_ExecVar@@3VFExecVariable@@A	; RenderTiles_ExecVar
PUBLIC	?RenderPoints@@3HA				; RenderPoints
PUBLIC	?RenderPoints_ExecVar@@3VFExecVariable@@A	; RenderPoints_ExecVar
PUBLIC	?WorldDetail@@3HA				; WorldDetail
PUBLIC	?WorldDetail_ExecVar@@3VFExecVariable@@A	; WorldDetail_ExecVar
PUBLIC	?CacheBlending@@3HA				; CacheBlending
PUBLIC	?CacheBlending_ExecVar@@3VFExecVariable@@A	; CacheBlending_ExecVar
PUBLIC	?LodBias@@3MA					; LodBias
PUBLIC	?NearZ@@3MA					; NearZ
PUBLIC	?NearZ_ExecVar@@3VFExecVariable@@A		; NearZ_ExecVar
PUBLIC	?GetNearZ_ExecFunc@@3VFExecFunction@@A		; GetNearZ_ExecFunc
_BSS	SEGMENT
?h@@3JA	DD	01H DUP (?)				; h
_ErrorCalled DB	01H DUP (?)
	ALIGN	4

?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A DB 0cH DUP (?) ; Adapters
?BestAdapterIndex@@3HA DD 01H DUP (?)			; BestAdapterIndex
?DeviceCaps8@@3U_D3DCAPS8@@A DB 0d4H DUP (?)		; DeviceCaps8
?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A DB 042cH DUP (?) ; DeviceIdentifier
?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A DB 0cH DUP (?) ; DisplayModes
?RScale@@3PAGA DW 02040H DUP (?)			; RScale
?GScale@@3PAGA DW 02040H DUP (?)			; GScale
?BScale@@3PAGA DW 02040H DUP (?)			; BScale
?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A DB 010H DUP (?) ; OriginalDisplayMode
?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A DB 0528H DUP (?) ; UD3DRenderDevice::PrivateStaticClass
_autoclassUD3DRenderDevice DD 01H DUP (?)
_hInstance DD	01H DUP (?)
?FogStart_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?)	; FogStart_ExecVar
?FogEnd_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?)	; FogEnd_ExecVar
?RenderParticles_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderParticles_ExecVar
?RenderMeshes_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderMeshes_ExecVar
?RenderSurfaces_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderSurfaces_ExecVar
?RenderLines_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderLines_ExecVar
?RenderTiles_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderTiles_ExecVar
?RenderPoints_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; RenderPoints_ExecVar
?WorldDetail_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; WorldDetail_ExecVar
?CacheBlending_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?) ; CacheBlending_ExecVar
?NearZ_ExecVar@@3VFExecVariable@@A DB 01cH DUP (?)	; NearZ_ExecVar
?GetNearZ_ExecFunc@@3VFExecFunction@@A DB 014H DUP (?)	; GetNearZ_ExecFunc
_BSS	ENDS
_DATA	SEGMENT
?FogStart@@3MA DD 042480000r			; 50	; FogStart
_DATA	ENDS
CRT$XCU	SEGMENT
_$S233	DD	FLAT:_$E232
CRT$XCU	ENDS
_DATA	SEGMENT
?FogEnd@@3MA DD	042c80000r			; 100	; FogEnd
_DATA	ENDS
CRT$XCU	SEGMENT
_$S238	DD	FLAT:_$E237
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderParticles@@3HA DD 01H				; RenderParticles
_DATA	ENDS
CRT$XCU	SEGMENT
_$S243	DD	FLAT:_$E242
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderMeshes@@3HA DD 01H				; RenderMeshes
_DATA	ENDS
CRT$XCU	SEGMENT
_$S248	DD	FLAT:_$E247
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderSurfaces@@3HA DD 01H				; RenderSurfaces
_DATA	ENDS
CRT$XCU	SEGMENT
_$S253	DD	FLAT:_$E252
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderLines@@3HA DD 01H				; RenderLines
_DATA	ENDS
CRT$XCU	SEGMENT
_$S258	DD	FLAT:_$E257
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderTiles@@3HA DD 01H				; RenderTiles
_DATA	ENDS
CRT$XCU	SEGMENT
_$S263	DD	FLAT:_$E262
CRT$XCU	ENDS
_DATA	SEGMENT
?RenderPoints@@3HA DD 01H				; RenderPoints
_DATA	ENDS
CRT$XCU	SEGMENT
_$S268	DD	FLAT:_$E267
CRT$XCU	ENDS
_DATA	SEGMENT
?WorldDetail@@3HA DD 01H				; WorldDetail
_DATA	ENDS
CRT$XCU	SEGMENT
_$S273	DD	FLAT:_$E272
CRT$XCU	ENDS
_DATA	SEGMENT
?CacheBlending@@3HA DD 01H				; CacheBlending
_DATA	ENDS
CRT$XCU	SEGMENT
_$S278	DD	FLAT:_$E277
CRT$XCU	ENDS
_DATA	SEGMENT
?LodBias@@3MA DD 0bf19999ar			; -0.6	; LodBias
?NearZ@@3MA DD	043480000r			; 200	; NearZ
_DATA	ENDS
CRT$XCU	SEGMENT
_$S283	DD	FLAT:_$E282
_$S288	DD	FLAT:_$E287
CRT$XCU	ENDS
CONST	SEGMENT
_NEAR_CLIP DD	03f800000r			; 1
_FAR_CLIP DD	0477fff00r			; 65535
CONST	ENDS
CRT$XCU	SEGMENT
_$S291	DD	FLAT:_$E290
_$S296	DD	FLAT:_$E295
_$S301	DD	FLAT:_$E300
CRT$XCU	ENDS
_DATA	SEGMENT
_GPackage DB	'D', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'r', 00H, 'v', 00H
	DB	00H, 00H
_DATA	ENDS
CRT$XCU	SEGMENT
_$S318	DD	FLAT:_$E317
_$S321	DD	FLAT:_$E320
CRT$XCU	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
PUBLIC	??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@		; `string'
EXTRN	__imp_?GMalloc@@3PAVFMalloc@@A:DWORD
;	COMDAT ??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@
; File ..\..\Core\Inc\UnFile.h
_DATA	SEGMENT
??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@ DB 'n', 00H, 'e', 00H, 'w', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_Size$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 624  : 	return appMalloc( Size, TEXT("new") );

	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _Size$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@ ; `string'
	push	eax
	call	DWORD PTR [edx]

; 625  : }

	ret	0
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_Ptr$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 628  : 	appFree( Ptr );

	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _Ptr$[esp-4]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]

; 629  : }

	ret	0
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EX0@Z@Z				; `vector constructor iterator'
; Function compile flags: /Ogty
;	COMDAT ??_H@YGXPAXIHP6EX0@Z@Z
_TEXT	SEGMENT
___t$ = 8
___s$ = 12
___n$ = 16
___f$ = 20
??_H@YGXPAXIHP6EX0@Z@Z PROC NEAR			; `vector constructor iterator', COMDAT
	mov	eax, DWORD PTR ___n$[esp-4]
	dec	eax
	js	SHORT $L98187
	push	ebx
	mov	ebx, DWORD PTR ___f$[esp]
	push	ebp
	mov	ebp, DWORD PTR ___s$[esp+4]
	push	esi
	mov	esi, DWORD PTR ___t$[esp+8]
	push	edi
	lea	edi, DWORD PTR [eax+1]
	npad	6
$L98186:
	mov	ecx, esi
	call	ebx
	add	esi, ebp
	dec	edi
	jne	SHORT $L98186
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$L98187:
	ret	16					; 00000010H
??_H@YGXPAXIHP6EX0@Z@Z ENDP				; `vector constructor iterator'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E232
_TEXT	SEGMENT
_$E232	PROC NEAR					; COMDAT
	call	_$E229
	jmp	_$E231
_$E232	ENDP
_TEXT	ENDS
PUBLIC	??_C@_11A@?$AA?$AA@				; `string'
PUBLIC	??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; `string'
EXTRN	__imp_??0FExecVariable@@QAE@PAGKPAX00@Z:NEAR
;	COMDAT ??_C@_11A@?$AA?$AA@
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_BSS	SEGMENT
??_C@_11A@?$AA?$AA@ DW 01H DUP (?)			; `string'
_BSS	ENDS
;	COMDAT ??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ DB 'f', 00H, 'l', 00H, 'o'
	DB	00H, 'a', 00H, 't', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ DB 'F', 00H
	DB	'o', 00H, 'g', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E229
_TEXT	SEGMENT
_$E229	PROC NEAR					; COMDAT

; 23   : EXECVAR		(float,	FogStart,		 50.f  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?FogStart@@3MA		; FogStart
	push	0
	push	OFFSET FLAT:??_C@_1BC@CONI@?$AAF?$AAo?$AAg?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?FogStart_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E229	ENDP
_TEXT	ENDS
EXTRN	_atexit:NEAR
; Function compile flags: /Ogty
;	COMDAT _$E231
_TEXT	SEGMENT
_$E231	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E230
	call	_atexit
	pop	ecx
	ret	0
_$E231	ENDP
_TEXT	ENDS
EXTRN	__imp_??1FExecVariable@@QAE@XZ:NEAR
; Function compile flags: /Ogty
;	COMDAT _$E230
_TEXT	SEGMENT
_$E230	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?FogStart_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E230	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E237
_TEXT	SEGMENT
_$E237	PROC NEAR					; COMDAT
	call	_$E234
	jmp	_$E236
_$E237	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@ DB 'F', 00H, 'o', 00H
	DB	'g', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E234
_TEXT	SEGMENT
_$E234	PROC NEAR					; COMDAT

; 24   : EXECVAR		(float,	FogEnd,			 100.f );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?FogEnd@@3MA		; FogEnd
	push	0
	push	OFFSET FLAT:??_C@_1O@GJLM@?$AAF?$AAo?$AAg?$AAE?$AAn?$AAd?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?FogEnd_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E234	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E236
_TEXT	SEGMENT
_$E236	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E235
	call	_atexit
	pop	ecx
	ret	0
_$E236	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E235
_TEXT	SEGMENT
_$E235	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?FogEnd_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E235	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E242
_TEXT	SEGMENT
_$E242	PROC NEAR					; COMDAT
	call	_$E239
	jmp	_$E241
_$E242	ENDP
_TEXT	ENDS
PUBLIC	??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@		; `string'
PUBLIC	??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@
_DATA	SEGMENT
??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ DB 'I', 00H, 'N', 00H, 'T', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'P', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'l', 00H, 'e'
	DB	00H, 's', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E239
_TEXT	SEGMENT
_$E239	PROC NEAR					; COMDAT

; 25   : EXECVAR		(INT,   RenderParticles, true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderParticles@@3HA	; RenderParticles
	push	0
	push	OFFSET FLAT:??_C@_1CA@HBNN@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderParticles_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E239	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E241
_TEXT	SEGMENT
_$E241	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E240
	call	_atexit
	pop	ecx
	ret	0
_$E241	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E240
_TEXT	SEGMENT
_$E240	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderParticles_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E240	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E247
_TEXT	SEGMENT
_$E247	PROC NEAR					; COMDAT
	call	_$E244
	jmp	_$E246
_$E247	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'M', 00H
	DB	'e', 00H, 's', 00H, 'h', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E244
_TEXT	SEGMENT
_$E244	PROC NEAR					; COMDAT

; 26   : EXECVAR		(INT,	RenderMeshes,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderMeshes@@3HA		; RenderMeshes
	push	0
	push	OFFSET FLAT:??_C@_1BK@FPPB@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAM?$AAe?$AAs?$AAh?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderMeshes_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E244	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E246
_TEXT	SEGMENT
_$E246	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E245
	call	_atexit
	pop	ecx
	ret	0
_$E246	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E245
_TEXT	SEGMENT
_$E245	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderMeshes_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E245	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E252
_TEXT	SEGMENT
_$E252	PROC NEAR					; COMDAT
	call	_$E249
	jmp	_$E251
_$E252	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'S', 00H
	DB	'u', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, 's'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E249
_TEXT	SEGMENT
_$E249	PROC NEAR					; COMDAT

; 27   : EXECVAR		(INT,	RenderSurfaces,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderSurfaces@@3HA	; RenderSurfaces
	push	0
	push	OFFSET FLAT:??_C@_1BO@GOHM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAS?$AAu?$AAr?$AAf?$AAa?$AAc?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderSurfaces_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E249	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E251
_TEXT	SEGMENT
_$E251	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E250
	call	_atexit
	pop	ecx
	ret	0
_$E251	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E250
_TEXT	SEGMENT
_$E250	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderSurfaces_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E250	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E257
_TEXT	SEGMENT
_$E257	PROC NEAR					; COMDAT
	call	_$E254
	jmp	_$E256
_$E257	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'L', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E254
_TEXT	SEGMENT
_$E254	PROC NEAR					; COMDAT

; 28   : EXECVAR		(INT,	RenderLines,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderLines@@3HA		; RenderLines
	push	0
	push	OFFSET FLAT:??_C@_1BI@FDIM@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAL?$AAi?$AAn?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderLines_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E254	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E256
_TEXT	SEGMENT
_$E256	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E255
	call	_atexit
	pop	ecx
	ret	0
_$E256	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E255
_TEXT	SEGMENT
_$E255	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderLines_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E255	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E262
_TEXT	SEGMENT
_$E262	PROC NEAR					; COMDAT
	call	_$E259
	jmp	_$E261
_$E262	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E259
_TEXT	SEGMENT
_$E259	PROC NEAR					; COMDAT

; 29   : EXECVAR		(INT,	RenderTiles,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderTiles@@3HA		; RenderTiles
	push	0
	push	OFFSET FLAT:??_C@_1BI@PCCF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAi?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderTiles_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E259	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E261
_TEXT	SEGMENT
_$E261	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E260
	call	_atexit
	pop	ecx
	ret	0
_$E261	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E260
_TEXT	SEGMENT
_$E260	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderTiles_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E260	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E267
_TEXT	SEGMENT
_$E267	PROC NEAR					; COMDAT
	call	_$E264
	jmp	_$E266
_$E267	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'P', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E264
_TEXT	SEGMENT
_$E264	PROC NEAR					; COMDAT

; 30   : EXECVAR		(INT,	RenderPoints,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?RenderPoints@@3HA		; RenderPoints
	push	0
	push	OFFSET FLAT:??_C@_1BK@KAKF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAP?$AAo?$AAi?$AAn?$AAt?$AAs?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?RenderPoints_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E264	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E266
_TEXT	SEGMENT
_$E266	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E265
	call	_atexit
	pop	ecx
	ret	0
_$E266	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E265
_TEXT	SEGMENT
_$E265	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?RenderPoints_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E265	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E272
_TEXT	SEGMENT
_$E272	PROC NEAR					; COMDAT
	call	_$E269
	jmp	_$E271
_$E272	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@ DB 'W'
	DB	00H, 'o', 00H, 'r', 00H, 'l', 00H, 'd', 00H, 'D', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E269
_TEXT	SEGMENT
_$E269	PROC NEAR					; COMDAT

; 31   : EXECVAR		(INT,	WorldDetail,	 true  );

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?WorldDetail@@3HA		; WorldDetail
	push	0
	push	OFFSET FLAT:??_C@_1BI@OKEE@?$AAW?$AAo?$AAr?$AAl?$AAd?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?WorldDetail_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E269	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E271
_TEXT	SEGMENT
_$E271	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E270
	call	_atexit
	pop	ecx
	ret	0
_$E271	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E270
_TEXT	SEGMENT
_$E270	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?WorldDetail_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E270	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E277
_TEXT	SEGMENT
_$E277	PROC NEAR					; COMDAT
	call	_$E274
	jmp	_$E276
_$E277	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@ ; `string'
PUBLIC	??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@
_DATA	SEGMENT
??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@ DB 'W'
	DB	00H, 'h', 00H, 'e', 00H, 't', 00H, 'h', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, '''', 00H, 's', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	's', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'o', 00H, 'u', 00H, 'l'
	DB	00H, 'd', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, '.', 00H, ' '
	DB	00H, ' ', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'f', 00H, 'u', 00H
	DB	'l', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'd'
	DB	00H, 'e', 00H, 'b', 00H, 'u', 00H, 'g', 00H, 'g', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 'm', 00H, 's', 00H, '.', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT
??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ DB 'C'
	DB	00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'B', 00H, 'l', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E274
_TEXT	SEGMENT
_$E274	PROC NEAR					; COMDAT

; 32   : EXECVAR_HELP(INT,   CacheBlending,	 true, "Whether or not D3D's render states should be cached.  Useful for debugging render state problems." );

	push	OFFSET FLAT:??_C@_1ME@HHPG@?$AAW?$AAh?$AAe?$AAt?$AAh?$AAe?$AAr?$AA?5?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAD?$AA3?$AAD?$AA?8?$AAs@ ; `string'
	push	OFFSET FLAT:??_C@_17NLGL@?$AAI?$AAN?$AAT?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?CacheBlending@@3HA		; CacheBlending
	push	0
	push	OFFSET FLAT:??_C@_1BM@FL@?$AAC?$AAa?$AAc?$AAh?$AAe?$AAB?$AAl?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?CacheBlending_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E274	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E276
_TEXT	SEGMENT
_$E276	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E275
	call	_atexit
	pop	ecx
	ret	0
_$E276	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E275
_TEXT	SEGMENT
_$E275	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?CacheBlending_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E275	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E282
_TEXT	SEGMENT
_$E282	PROC NEAR					; COMDAT
	call	_$E279
	jmp	_$E281
_$E282	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@ ; `string'
PUBLIC	??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@
_DATA	SEGMENT
??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@ DB 'D'
	DB	00H, 'e', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, ' ', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 'Z', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, '.', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ DB 'N', 00H, 'e', 00H, 'a'
	DB	00H, 'r', 00H, 'Z', 00H, 00H, 00H		; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E279
_TEXT	SEGMENT
_$E279	PROC NEAR					; COMDAT

; 49   : EXECVAR_HELP(float, NearZ, 200.f, "Detail texture Z range.");

	push	OFFSET FLAT:??_C@_1DA@FCHG@?$AAD?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAZ?$AA?5?$AAr?$AAa?$AAn@ ; `string'
	push	OFFSET FLAT:??_C@_1M@IEEK@?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$AA@ ; `string'
	push	OFFSET FLAT:?NearZ@@3MA			; NearZ
	push	0
	push	OFFSET FLAT:??_C@_1M@BODI@?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?NearZ_ExecVar@@3VFExecVariable@@A
	call	DWORD PTR __imp_??0FExecVariable@@QAE@PAGKPAX00@Z
	ret	0
_$E279	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E281
_TEXT	SEGMENT
_$E281	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E280
	call	_atexit
	pop	ecx
	ret	0
_$E281	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E280
_TEXT	SEGMENT
_$E280	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?NearZ_ExecVar@@3VFExecVariable@@A
	jmp	DWORD PTR __imp_??1FExecVariable@@QAE@XZ
_$E280	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E287
_TEXT	SEGMENT
_$E287	PROC NEAR					; COMDAT
	call	_$E284
	jmp	_$E286
_$E287	ENDP
_TEXT	ENDS
PUBLIC	?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z ; GetNearZ_ExecFuncCall
PUBLIC	??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ ; `string'
EXTRN	__imp_??0FExecFunction@@QAE@PAGP6IXPAVFExecVariable@@HPAPAG@Z0@Z:NEAR
;	COMDAT ??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ DB 'G', 00H
	DB	'e', 00H, 't', 00H, 'N', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 'Z'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT _$E284
_TEXT	SEGMENT
_$E284	PROC NEAR					; COMDAT

; 50   : EXECFUNC(GetNearZ)

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	push	OFFSET FLAT:?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z ; GetNearZ_ExecFuncCall
	push	OFFSET FLAT:??_C@_1BC@MLDM@?$AAG?$AAe?$AAt?$AAN?$AAe?$AAa?$AAr?$AAZ?$AA?$AA@ ; `string'
	mov	ecx, OFFSET FLAT:?GetNearZ_ExecFunc@@3VFExecFunction@@A
	call	DWORD PTR __imp_??0FExecFunction@@QAE@PAGP6IXPAVFExecVariable@@HPAPAG@Z0@Z
	ret	0
_$E284	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E286
_TEXT	SEGMENT
_$E286	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E285
	call	_atexit
	pop	ecx
	ret	0
_$E286	ENDP
_TEXT	ENDS
EXTRN	__imp_??1FExecFunction@@QAE@XZ:NEAR
; Function compile flags: /Ogty
;	COMDAT _$E285
_TEXT	SEGMENT
_$E285	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?GetNearZ_ExecFunc@@3VFExecFunction@@A
	jmp	DWORD PTR __imp_??1FExecFunction@@QAE@XZ
_$E285	ENDP
_TEXT	ENDS
PUBLIC	??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@		; `string'
EXTRN	__fltused:NEAR
EXTRN	__imp_?GDnExec@@3PAVFDnExec@@A:DWORD
EXTRN	__imp_?Printf@FDnExec@@QAAXPAGZZ:NEAR
;	COMDAT ??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@
_DATA	SEGMENT
??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@ DB '%', 00H, 'f', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z
_TEXT	SEGMENT
?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z PROC NEAR ; GetNearZ_ExecFuncCall, COMDAT
; _argVar$ = ecx
; _argc$ = edx

; 52   : 	GDnExec->Printf(TEXT("%f"), NearZ);

	fld	DWORD PTR ?NearZ@@3MA			; NearZ
	mov	eax, DWORD PTR __imp_?GDnExec@@3PAVFDnExec@@A
	mov	ecx, DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET FLAT:??_C@_15PBC@?$AA?$CF?$AAf?$AA?$AA@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Printf@FDnExec@@QAAXPAGZZ
	add	esp, 16					; 00000010H

; 53   : }

	ret	4
?GetNearZ_ExecFuncCall@@YIXPAVFExecVariable@@HPAPAG@Z ENDP ; GetNearZ_ExecFuncCall
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E290
_TEXT	SEGMENT
_$E290	PROC NEAR					; COMDAT
	jmp	_$E289
_$E290	ENDP
_TEXT	ENDS
PUBLIC	__real@3f8147ae
_BSS	SEGMENT
_NEAR_CLIP_HACK DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __real@3f8147ae
CONST	SEGMENT
__real@3f8147ae DD 03f8147aer			; 1.01
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT _$E289
_TEXT	SEGMENT
_$E289	PROC NEAR					; COMDAT

; 57   : static const FLOAT NEAR_CLIP_HACK=NEAR_CLIP*1.01f; // vogel: workaround for precision issues

	fld	DWORD PTR _NEAR_CLIP
	fmul	DWORD PTR __real@3f8147ae
	fstp	DWORD PTR _NEAR_CLIP_HACK
	ret	0
_$E289	ENDP
_TEXT	ENDS
PUBLIC	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z		; GetFormatBPP
; Function compile flags: /Ogty
;	COMDAT ?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z
_TEXT	SEGMENT
_Format$ = 8
?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z PROC NEAR		; GetFormatBPP, COMDAT

; 95   : 	switch(Format)
; 96   : 	{

	mov	eax, DWORD PTR _Format$[esp-4]
	cmp	eax, 71					; 00000047H
	jg	SHORT $L135407
	je	SHORT $L122967
	add	eax, -21				; ffffffebH
	cmp	eax, 20					; 00000014H
	ja	SHORT $L122971
	xor	ecx, ecx
	mov	cl, BYTE PTR $L135408[eax]
	jmp	DWORD PTR $L135409[ecx*4]
$L122969:

; 108  : 
; 109  : 		case D3DFMT_P8:
; 110  : 			return 8;

	mov	eax, 8

; 117  : 	}
; 118  : }

	ret	0
$L135407:

; 95   : 	switch(Format)
; 96   : 	{

	cmp	eax, 75					; 0000004bH
	je	SHORT $L122967
	cmp	eax, 80					; 00000050H
	je	SHORT $L122968
	cmp	eax, 827611204				; 31545844H
	je	SHORT $L122970
$L122971:

; 114  : 	
; 115  : 		default:
; 116  : 			return 0;

	xor	eax, eax

; 117  : 	}
; 118  : }

	ret	0
$L122970:

; 111  : 	
; 112  : 		case D3DFMT_DXT1:
; 113  : 			return 4;

	mov	eax, 4

; 117  : 	}
; 118  : }

	ret	0
$L122968:

; 102  : 
; 103  : 		case D3DFMT_A1R5G5B5:
; 104  : 		case D3DFMT_R5G6B5:	
; 105  : 		case D3DFMT_X1R5G5B5:
; 106  : 		case D3DFMT_D16:
; 107  : 			return 16;

	mov	eax, 16					; 00000010H

; 117  : 	}
; 118  : }

	ret	0
$L122967:

; 97   : 		case D3DFMT_A8R8G8B8:
; 98   : 		case D3DFMT_X8R8G8B8:
; 99   : 		case D3DFMT_D24S8:
; 100  : 		case D3DFMT_D32:		
; 101  : 			return 32;

	mov	eax, 32					; 00000020H

; 117  : 	}
; 118  : }

	ret	0
	npad	2
$L135409:
	DD	$L122967
	DD	$L122968
	DD	$L122969
	DD	$L122971
$L135408:
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z ENDP			; GetFormatBPP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E295
_TEXT	SEGMENT
_$E295	PROC NEAR					; COMDAT
	call	_$E292
	jmp	_$E294
_$E295	ENDP
_TEXT	ENDS
PUBLIC	??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ	; TArray<_D3DADAPTER_IDENTIFIER8>::TArray<_D3DADAPTER_IDENTIFIER8>
; Function compile flags: /Ogty
;	COMDAT _$E292
_TEXT	SEGMENT
_$E292	PROC NEAR					; COMDAT

; 329  : TArray<D3DADAPTER_IDENTIFIER8> Adapters;

	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	jmp	??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ ; TArray<_D3DADAPTER_IDENTIFIER8>::TArray<_D3DADAPTER_IDENTIFIER8>
_$E292	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E294
_TEXT	SEGMENT
_$E294	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E293
	call	_atexit
	pop	ecx
	ret	0
_$E294	ENDP
_TEXT	ENDS
PUBLIC	??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ	; TArray<_D3DADAPTER_IDENTIFIER8>::~TArray<_D3DADAPTER_IDENTIFIER8>
; Function compile flags: /Ogty
;	COMDAT _$E293
_TEXT	SEGMENT
_$E293	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	jmp	??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ ; TArray<_D3DADAPTER_IDENTIFIER8>::~TArray<_D3DADAPTER_IDENTIFIER8>
_$E293	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E300
_TEXT	SEGMENT
_$E300	PROC NEAR					; COMDAT
	call	_$E297
	jmp	_$E299
_$E300	ENDP
_TEXT	ENDS
PUBLIC	??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ		; TArray<_D3DDISPLAYMODE>::TArray<_D3DDISPLAYMODE>
; Function compile flags: /Ogty
;	COMDAT _$E297
_TEXT	SEGMENT
_$E297	PROC NEAR					; COMDAT

; 333  : TArray<D3DDISPLAYMODE>	DisplayModes;

	mov	ecx, OFFSET FLAT:?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	jmp	??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ	; TArray<_D3DDISPLAYMODE>::TArray<_D3DDISPLAYMODE>
_$E297	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E299
_TEXT	SEGMENT
_$E299	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E298
	call	_atexit
	pop	ecx
	ret	0
_$E299	ENDP
_TEXT	ENDS
PUBLIC	??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ		; TArray<_D3DDISPLAYMODE>::~TArray<_D3DDISPLAYMODE>
; Function compile flags: /Ogty
;	COMDAT _$E298
_TEXT	SEGMENT
_$E298	PROC NEAR					; COMDAT
	mov	ecx, OFFSET FLAT:?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	jmp	??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ	; TArray<_D3DDISPLAYMODE>::~TArray<_D3DDISPLAYMODE>
_$E298	ENDP
_TEXT	ENDS
PUBLIC	?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ	; UD3DRenderDevice::StaticClass
; Function compile flags: /Ogty
;	COMDAT ?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ
_TEXT	SEGMENT
?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ PROC NEAR ; UD3DRenderDevice::StaticClass, COMDAT

; 380  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	mov	eax, OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A ; UD3DRenderDevice::PrivateStaticClass
	ret	0
?StaticClass@UD3DRenderDevice@@SAPAVUClass@@XZ ENDP	; UD3DRenderDevice::StaticClass
_TEXT	ENDS
PUBLIC	??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z ; UD3DRenderDevice::operator new
EXTRN	__imp_?StaticAllocateObject@UObject@@SAPAV1@PAVUClass@@PAV1@VFName@@K1PAVFOutputDevice@@1@Z:NEAR
EXTRN	__imp_?GError@@3PAVFOutputDeviceError@@A:DWORD
; Function compile flags: /Ogty
;	COMDAT ??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z
_TEXT	SEGMENT
_Outer$ = 12
_Name$ = 16
_SetFlags$ = 20
??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z PROC NEAR ; UD3DRenderDevice::operator new, COMDAT

; 380  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _SetFlags$[esp-4]
	mov	eax, DWORD PTR _Name$[esp-4]
	push	0
	push	ecx
	mov	ecx, DWORD PTR _Outer$[esp+4]
	push	0
	push	edx
	push	eax
	push	ecx
	push	OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A ; UD3DRenderDevice::PrivateStaticClass
	call	DWORD PTR __imp_?StaticAllocateObject@UObject@@SAPAV1@PAVUClass@@PAV1@VFName@@K1PAVFOutputDevice@@1@Z
	add	esp, 28					; 0000001cH
	ret	0
??2UD3DRenderDevice@@SAPAXIPAVUObject@@VFName@@K@Z ENDP	; UD3DRenderDevice::operator new
_TEXT	ENDS
PUBLIC	??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z	; UD3DRenderDevice::operator new
; Function compile flags: /Ogty
;	COMDAT ??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z
_TEXT	SEGMENT
_Mem$ = 12
??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z PROC NEAR	; UD3DRenderDevice::operator new, COMDAT

; 380  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	mov	eax, DWORD PTR _Mem$[esp-4]
	ret	0
??2UD3DRenderDevice@@SAPAXIPAW4EInternal@@@Z ENDP	; UD3DRenderDevice::operator new
_TEXT	ENDS
PUBLIC	?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z ; UD3DRenderDevice::Init
PUBLIC	?Exit@UD3DRenderDevice@@UAIXXZ			; UD3DRenderDevice::Exit
PUBLIC	?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ	; UD3DRenderDevice::ShutdownAfterError
PUBLIC	?Flush@UD3DRenderDevice@@UAIXH@Z		; UD3DRenderDevice::Flush
PUBLIC	?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ; UD3DRenderDevice::PreRender
PUBLIC	?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z ; UD3DRenderDevice::Lock
PUBLIC	?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z ; UD3DRenderDevice::PrecacheTexture
PUBLIC	?Unlock@UD3DRenderDevice@@UAIXH@Z		; UD3DRenderDevice::Unlock
PUBLIC	?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z ; UD3DRenderDevice::DrawComplexSurface
PUBLIC	??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
PUBLIC	?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Remove
PUBLIC	?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ	; UD3DRenderDevice::QueuePolygonDoes
PUBLIC	?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z ; UD3DRenderDevice::QueuePolygonBegin
PUBLIC	?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z	; UD3DRenderDevice::QueuePolygonEnd
PUBLIC	?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z ; UD3DRenderDevice::QueuePolygon
PUBLIC	?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z ; UD3DRenderDevice::QueuePolygonBeginFast
PUBLIC	?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z ; UD3DRenderDevice::QueuePolygonFast
PUBLIC	?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ	; UD3DRenderDevice::QueuePolygonEndFast
PUBLIC	?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z ; UD3DRenderDevice::DrawGouraudPolygon
PUBLIC	?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z	; UD3DRenderDevice::SetTextureClampMode
PUBLIC	?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z ; UD3DRenderDevice::DrawTile
PUBLIC	?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z ; UD3DRenderDevice::dnDrawBeam
PUBLIC	??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
PUBLIC	??1?$TArray@E@@QAE@XZ				; TArray<unsigned char>::~TArray<unsigned char>
PUBLIC	?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::Remove
PUBLIC	??1UD3DRenderDevice@@UAE@XZ			; UD3DRenderDevice::~UD3DRenderDevice
PUBLIC	?Remove@?$TArray@E@@QAEXHH@Z			; TArray<unsigned char>::Remove
PUBLIC	?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z ; UD3DRenderDevice::dnDrawParticles
PUBLIC	??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
PUBLIC	??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
PUBLIC	?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::ProjectorInfo>::Remove
PUBLIC	?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Remove
PUBLIC	?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z ; UD3DRenderDevice::Exec
PUBLIC	??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
PUBLIC	?_Validate@UD3DRenderDevice@@UAIXPADH@Z		; UD3DRenderDevice::_Validate
PUBLIC	??1?$TArray@UFD3DVertex@@@@QAE@XZ		; TArray<FD3DVertex>::~TArray<FD3DVertex>
PUBLIC	?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::RenderTargetInfo>::Remove
PUBLIC	?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z	; TArray<FD3DVertex>::Remove
PUBLIC	?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ; UD3DRenderDevice::Queue3DLine
PUBLIC	?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ; UD3DRenderDevice::Queued3DLinesFlush
PUBLIC	?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ; UD3DRenderDevice::Draw3DLine
PUBLIC	?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ; UD3DRenderDevice::Draw2DLine
PUBLIC	?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z ; UD3DRenderDevice::Draw2DPoint
PUBLIC	?PushHit@UD3DRenderDevice@@UAIXPBEH@Z		; UD3DRenderDevice::PushHit
PUBLIC	?PopHit@UD3DRenderDevice@@UAIXHH@Z		; UD3DRenderDevice::PopHit
PUBLIC	?GetStats@UD3DRenderDevice@@UAIXPAG@Z		; UD3DRenderDevice::GetStats
PUBLIC	?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z	; UD3DRenderDevice::ClearZ
PUBLIC	?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z ; UD3DRenderDevice::ReadPixels
PUBLIC	?EndFlash@UD3DRenderDevice@@UAIXXZ		; UD3DRenderDevice::EndFlash
PUBLIC	?SetRes@UD3DRenderDevice@@UAIHHHHH@Z		; UD3DRenderDevice::SetRes
PUBLIC	?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z ; UD3DRenderDevice::CreateRenderTarget
PUBLIC	?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z ; UD3DRenderDevice::DestroyRenderTarget
PUBLIC	?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z	; UD3DRenderDevice::SetRenderTarget
PUBLIC	?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ	; UD3DRenderDevice::RestoreRenderTarget
PUBLIC	?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z ; UD3DRenderDevice::AddProjector
PUBLIC	?ResetProjectors@UD3DRenderDevice@@UAIXXZ	; UD3DRenderDevice::ResetProjectors
PUBLIC	??_7UD3DRenderDevice@@6BUObject@@@		; UD3DRenderDevice::`vftable'
PUBLIC	??_7UD3DRenderDevice@@6BFExec@@@		; UD3DRenderDevice::`vftable'
PUBLIC	??_EUD3DRenderDevice@@UAEPAXI@Z			; UD3DRenderDevice::`vector deleting destructor'
PUBLIC	??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
PUBLIC	??1?$TArray@H@@QAE@XZ				; TArray<int>::~TArray<int>
PUBLIC	??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ	; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
PUBLIC	?Remove@?$TArray@H@@QAEXHH@Z			; TArray<int>::Remove
PUBLIC	??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ	; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
PUBLIC	??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ	; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
PUBLIC	?Destroy@UD3DRenderDevice@@UAEXXZ		; UD3DRenderDevice::Destroy
EXTRN	__imp_??_7URenderDevice@@6BUObject@@@:BYTE
EXTRN	__imp_??_7URenderDevice@@6BFExec@@@:DWORD
EXTRN	?ProcessEvent@UObject@@UAEXPAVUFunction@@PAX1@Z:NEAR ; UObject::ProcessEvent
EXTRN	?ProcessState@UObject@@UAEXM@Z:NEAR		; UObject::ProcessState
EXTRN	?ProcessRemoteFunction@UObject@@UAEHPAVUFunction@@PAXPAUFFrame@@@Z:NEAR ; UObject::ProcessRemoteFunction
EXTRN	?Modify@UObject@@UAEXXZ:NEAR			; UObject::Modify
EXTRN	?PostLoad@UObject@@UAEXXZ:NEAR			; UObject::PostLoad
EXTRN	?Serialize@UObject@@UAEXAAVFArchive@@@Z:NEAR	; UObject::Serialize
EXTRN	?GotoLabel@UObject@@UAEHVFName@@@Z:NEAR		; UObject::GotoLabel
EXTRN	?InitExecution@UObject@@UAEXXZ:NEAR		; UObject::InitExecution
EXTRN	?PostEditChange@UObject@@UAEXXZ:NEAR		; UObject::PostEditChange
EXTRN	?CallFunction@UObject@@UAEXAAUFFrame@@QAXPAVUFunction@@@Z:NEAR ; UObject::CallFunction
EXTRN	?ScriptConsoleExec@UObject@@UAEHPBGAAVFOutputDevice@@PAV1@@Z:NEAR ; UObject::ScriptConsoleExec
EXTRN	?Register@UObject@@UAEXXZ:NEAR			; UObject::Register
EXTRN	?LanguageChange@UObject@@UAEXXZ:NEAR		; UObject::LanguageChange
EXTRN	__imp_?ConditionalDestroy@UObject@@QAEHXZ:NEAR
EXTRN	?DrawStats@URenderDevice@@UAIXPAUFSceneNode@@@Z:NEAR ; URenderDevice::DrawStats
EXTRN	?SetSceneNode@URenderDevice@@UAIXPAUFSceneNode@@@Z:NEAR ; URenderDevice::SetSceneNode
EXTRN	__imp_??1USubsystem@@UAE@XZ:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	__imp_??1FArray@@QAE@XZ:NEAR
EXTRN	?IsPendingKill@UObject@@UAEHXZ:NEAR		; UObject::IsPendingKill
EXTRN	?GetName@UObject@@UBEPBGXZ:NEAR			; UObject::GetName
EXTRN	?Tick@USubsystem@@UAIXM@Z:NEAR			; USubsystem::Tick
EXTRN	__imp_??1URenderDevice@@UAE@XZ:NEAR
EXTRN	__imp_??1FString@@QAE@XZ:NEAR
EXTRN	?Draw2DClippedLine@URenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z:NEAR ; URenderDevice::Draw2DClippedLine
;	COMDAT xdata$x
; File ..\..\Engine\Inc\UnRenDev.h
xdata$x	SEGMENT
$T135629 DD	0ffffffffH
	DD	FLAT:$L135449
	DD	00H
	DD	FLAT:$L135450
	DD	01H
	DD	FLAT:$L135451
	DD	02H
	DD	FLAT:$L135452
	DD	03H
	DD	FLAT:$L135453
	DD	04H
	DD	FLAT:$L135454
	DD	05H
	DD	FLAT:$L135455
	DD	06H
	DD	FLAT:$L135456
	DD	07H
	DD	FLAT:$L135457
	DD	08H
	DD	FLAT:$L135458
	DD	09H
	DD	FLAT:$L135459
	DD	0aH
	DD	FLAT:$L135460
	DD	0bH
	DD	FLAT:$L135461
	DD	0bH
	DD	FLAT:$L135463
	DD	0aH
	DD	FLAT:$L135475
	DD	09H
	DD	FLAT:$L135487
	DD	08H
	DD	FLAT:$L135499
	DD	07H
	DD	FLAT:$L135504
	DD	02H
	DD	FLAT:$L135597
	DD	01H
	DD	FLAT:$L135609
	DD	00H
	DD	FLAT:$L135614
	DD	0ffffffffH
	DD	FLAT:$L135619
	DD	015H
	DD	FLAT:$L135620
$T135626 DD	019930520H
	DD	017H
	DD	FLAT:$T135629
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7UD3DRenderDevice@@6BUObject@@@
CONST	SEGMENT
??_7UD3DRenderDevice@@6BUObject@@@ DD FLAT:??_EUD3DRenderDevice@@UAEPAXI@Z ; UD3DRenderDevice::`vftable'
	DD	FLAT:?ProcessEvent@UObject@@UAEXPAVUFunction@@PAX1@Z
	DD	FLAT:?ProcessState@UObject@@UAEXM@Z
	DD	FLAT:?ProcessRemoteFunction@UObject@@UAEHPAVUFunction@@PAXPAUFFrame@@@Z
	DD	FLAT:?Modify@UObject@@UAEXXZ
	DD	FLAT:?PostLoad@UObject@@UAEXXZ
	DD	FLAT:?Destroy@UD3DRenderDevice@@UAEXXZ
	DD	FLAT:?Serialize@UObject@@UAEXAAVFArchive@@@Z
	DD	FLAT:?IsPendingKill@UObject@@UAEHXZ
	DD	FLAT:?GotoLabel@UObject@@UAEHVFName@@@Z
	DD	FLAT:?InitExecution@UObject@@UAEXXZ
	DD	FLAT:?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ
	DD	FLAT:?PostEditChange@UObject@@UAEXXZ
	DD	FLAT:?CallFunction@UObject@@UAEXAAUFFrame@@QAXPAVUFunction@@@Z
	DD	FLAT:?ScriptConsoleExec@UObject@@UAEHPBGAAVFOutputDevice@@PAV1@@Z
	DD	FLAT:?Register@UObject@@UAEXXZ
	DD	FLAT:?LanguageChange@UObject@@UAEXXZ
	DD	FLAT:?GetName@UObject@@UBEPBGXZ
	DD	FLAT:?Tick@USubsystem@@UAIXM@Z
	DD	FLAT:?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z
	DD	FLAT:?SetRes@UD3DRenderDevice@@UAIHHHHH@Z
	DD	FLAT:?Exit@UD3DRenderDevice@@UAIXXZ
	DD	FLAT:?Flush@UD3DRenderDevice@@UAIXH@Z
	DD	FLAT:?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z
	DD	FLAT:?Unlock@UD3DRenderDevice@@UAIXH@Z
	DD	FLAT:?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z
	DD	FLAT:?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z
	DD	FLAT:?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ
	DD	FLAT:?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
	DD	FLAT:?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z
	DD	FLAT:?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z
	DD	FLAT:?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
	DD	FLAT:?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ
	DD	FLAT:?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z
	DD	FLAT:?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z
	DD	FLAT:?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z
	DD	FLAT:?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z
	DD	FLAT:?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
	DD	FLAT:?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
	DD	FLAT:?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?Draw2DClippedLine@URenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
	DD	FLAT:?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
	DD	FLAT:?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z
	DD	FLAT:?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?PushHit@UD3DRenderDevice@@UAIXPBEH@Z
	DD	FLAT:?PopHit@UD3DRenderDevice@@UAIXHH@Z
	DD	FLAT:?GetStats@UD3DRenderDevice@@UAIXPAG@Z
	DD	FLAT:?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z
	DD	FLAT:?EndFlash@UD3DRenderDevice@@UAIXXZ
	DD	FLAT:?DrawStats@URenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?SetSceneNode@URenderDevice@@UAIXPAUFSceneNode@@@Z
	DD	FLAT:?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z
	DD	FLAT:?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z
	DD	FLAT:?_Validate@UD3DRenderDevice@@UAIXPADH@Z
	DD	FLAT:?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z
	DD	FLAT:?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z
	DD	FLAT:?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z
	DD	FLAT:?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ
	DD	FLAT:?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z
	DD	FLAT:?ResetProjectors@UD3DRenderDevice@@UAIXXZ
CONST	ENDS
;	COMDAT ??_7UD3DRenderDevice@@6BFExec@@@
CONST	SEGMENT
??_7UD3DRenderDevice@@6BFExec@@@ DD FLAT:?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z ; UD3DRenderDevice::`vftable'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ??1UD3DRenderDevice@@UAE@XZ
_TEXT	SEGMENT
$T135473 = -16
$T135485 = -16
$T135497 = -16
$T135502 = -16
$T135507 = -16
$T135607 = -16
$T135612 = -16
$T135617 = -16
__$EHRec$ = -12
_this$ = -20
??1UD3DRenderDevice@@UAE@XZ PROC NEAR			; UD3DRenderDevice::~UD3DRenderDevice, COMDAT
; _this$ = ecx

; 380  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	push	-1
	push	$L135627
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+36], esi
	mov	DWORD PTR [esi], OFFSET FLAT:??_7UD3DRenderDevice@@6BUObject@@@ ; UD3DRenderDevice::`vftable'
	mov	DWORD PTR [esi+40], OFFSET FLAT:??_7UD3DRenderDevice@@6BFExec@@@ ; UD3DRenderDevice::`vftable'
	mov	ebp, DWORD PTR __imp_?ConditionalDestroy@UObject@@QAEHXZ
	mov	DWORD PTR __$EHRec$[esp+44], 12		; 0000000cH
	call	ebp
	lea	edi, DWORD PTR [esi+675248]
	mov	DWORD PTR $T135473[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	xor	ebx, ebx
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 13		; 0000000dH
	call	?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z ; TArray<FD3DVertex>::Remove
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 11		; 0000000bH
	je	SHORT $L135471
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L135471:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
	lea	edi, DWORD PTR [esi+675236]
	mov	DWORD PTR $T135485[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 14		; 0000000eH
	call	?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Remove
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 10		; 0000000aH
	je	SHORT $L135483
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L135483:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
	lea	edi, DWORD PTR [esi+675224]
	mov	DWORD PTR $T135497[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 15		; 0000000fH
	call	?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::Remove
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 9
	je	SHORT $L135495
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L135495:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
	lea	edi, DWORD PTR [esi+675212]
	mov	DWORD PTR $T135502[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 16		; 00000010H
	call	?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Remove
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+44], 8
	call	DWORD PTR __imp_??1FArray@@QAE@XZ
	lea	edi, DWORD PTR [esi+675112]
	mov	DWORD PTR $T135507[esp+36], edi
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 17		; 00000011H
	call	?Remove@?$TArray@E@@QAEXHH@Z		; TArray<unsigned char>::Remove
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+44], 7
	call	DWORD PTR __imp_??1FArray@@QAE@XZ
	mov	eax, DWORD PTR [esi+16744]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 6
	je	SHORT $L135526
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16744], ebx
$L135526:
	mov	eax, DWORD PTR [esi+16724]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 5
	je	SHORT $L135548
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16724], ebx
$L135548:
	mov	eax, DWORD PTR [esi+16704]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 4
	je	SHORT $L135572
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16704], ebx
$L135572:
	mov	eax, DWORD PTR [esi+16684]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 3
	je	SHORT $L135594
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16684], ebx
$L135594:
	lea	edi, DWORD PTR [esi+224]
	mov	DWORD PTR $T135607[esp+36], edi
	mov	edx, DWORD PTR [edi+4]
	push	edx
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 18		; 00000012H
	call	?Remove@?$TArray@H@@QAEXHH@Z		; TArray<int>::Remove
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	mov	BYTE PTR __$EHRec$[esp+44], 2
	je	SHORT $L135605
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L135605:
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
	lea	edi, DWORD PTR [esi+212]
	mov	DWORD PTR $T135612[esp+36], edi
	mov	eax, DWORD PTR [edi+4]
	push	eax
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 19		; 00000013H
	call	?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::RenderTargetInfo>::Remove
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+44], 1
	call	DWORD PTR __imp_??1FArray@@QAE@XZ
	lea	edi, DWORD PTR [esi+200]
	mov	DWORD PTR $T135617[esp+36], edi
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	push	ebx
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+52], 20		; 00000014H
	call	?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z ; TArray<UD3DRenderDevice::ProjectorInfo>::Remove
	mov	ecx, edi
	mov	BYTE PTR __$EHRec$[esp+44], bl
	call	DWORD PTR __imp_??1FArray@@QAE@XZ
	mov	edx, DWORD PTR __imp_??_7URenderDevice@@6BUObject@@@
	mov	DWORD PTR [esi], edx
	mov	eax, DWORD PTR __imp_??_7URenderDevice@@6BFExec@@@
	mov	DWORD PTR [esi+40], eax
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+44], 22		; 00000016H
	call	ebp
	lea	ecx, DWORD PTR [esi+52]
	mov	BYTE PTR __$EHRec$[esp+44], 21		; 00000015H
	call	DWORD PTR __imp_??1FString@@QAE@XZ
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[esp+44], -1
	call	DWORD PTR __imp_??1USubsystem@@UAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[esp+36]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 20					; 00000014H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L135449:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1URenderDevice@@UAE@XZ
$L135450:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
$L135451:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
$L135452:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	jmp	??1?$TArray@H@@QAE@XZ			; TArray<int>::~TArray<int>
$L135453:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16680				; 00004128H
	jmp	??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
$L135454:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16700				; 0000413cH
	jmp	??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
$L135455:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16720				; 00004150H
	jmp	??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
$L135456:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16740				; 00004164H
	jmp	??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ ; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
$L135457:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675112				; 000a4d28H
	jmp	??1?$TArray@E@@QAE@XZ			; TArray<unsigned char>::~TArray<unsigned char>
$L135458:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675212				; 000a4d8cH
	jmp	??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
$L135459:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675224				; 000a4d98H
	jmp	??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
$L135460:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675236				; 000a4da4H
	jmp	??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
$L135461:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675248				; 000a4db0H
	jmp	??1?$TArray@UFD3DVertex@@@@QAE@XZ	; TArray<FD3DVertex>::~TArray<FD3DVertex>
$L135463:
	mov	ecx, DWORD PTR $T135473[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L135475:
	mov	ecx, DWORD PTR $T135485[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L135487:
	mov	ecx, DWORD PTR $T135497[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L135499:
	mov	ecx, DWORD PTR $T135502[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L135504:
	mov	ecx, DWORD PTR $T135507[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L135597:
	mov	ecx, DWORD PTR $T135607[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L135609:
	mov	ecx, DWORD PTR $T135612[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L135614:
	mov	ecx, DWORD PTR $T135617[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L135619:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1USubsystem@@UAE@XZ
$L135620:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	DWORD PTR __imp_??1FString@@QAE@XZ
$L135627:
	mov	eax, OFFSET FLAT:$T135626
	jmp	___CxxFrameHandler
text$x	ENDS
??1UD3DRenderDevice@@UAE@XZ ENDP			; UD3DRenderDevice::~UD3DRenderDevice
PUBLIC	?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z	; UD3DRenderDevice::InternalConstructor
PUBLIC	??0UD3DRenderDevice@@QAE@XZ			; UD3DRenderDevice::UD3DRenderDevice
; Function compile flags: /Ogty
;	COMDAT ?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z
_TEXT	SEGMENT
_X$ = 8
?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z PROC NEAR ; UD3DRenderDevice::InternalConstructor, COMDAT

; 380  :     DECLARE_CLASS(UD3DRenderDevice,URenderDevice,CLASS_Config)

	mov	ecx, DWORD PTR _X$[esp-4]
	test	ecx, ecx
	je	SHORT $L135637
	jmp	??0UD3DRenderDevice@@QAE@XZ		; UD3DRenderDevice::UD3DRenderDevice
$L135637:
	ret	0
?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z ENDP	; UD3DRenderDevice::InternalConstructor
_TEXT	ENDS
PUBLIC	?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ	; UD3DRenderDevice::CleanupVertexBuffers
; Function compile flags: /Ogty
;	COMDAT ?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ PROC NEAR ; UD3DRenderDevice::CleanupVertexBuffers, COMDAT
; _this$ = ecx

; 650  : 	{

	push	esi
	mov	esi, ecx

; 651  : 		WorldVertices.Exit();

	mov	eax, DWORD PTR [esi+16684]
	push	edi
	xor	edi, edi
	cmp	eax, edi
	je	SHORT $L135656
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16684], edi
$L135656:

; 652  : 		ActorVertices.Exit();

	mov	eax, DWORD PTR [esi+16704]
	cmp	eax, edi
	je	SHORT $L135669
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16704], edi
$L135669:

; 653  : 		LineVertices.Exit();

	mov	eax, DWORD PTR [esi+16724]
	cmp	eax, edi
	je	SHORT $L135682
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16724], edi
$L135682:

; 654  : 		ParticleVertices.Exit();

	mov	eax, DWORD PTR [esi+16744]
	cmp	eax, edi
	je	SHORT $L135695
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16744], edi
$L135695:
	pop	edi
	pop	esi

; 655  : 	
; 656  : 	#ifdef BATCH_PROJECTOR_POLYS
; 657  : 		ProjectorVertices.Exit();
; 658  : 	#endif
; 659  : 	}

	ret	0
?CleanupVertexBuffers@UD3DRenderDevice@@QAEXXZ ENDP	; UD3DRenderDevice::CleanupVertexBuffers
_TEXT	ENDS
PUBLIC	??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@ ; `string'
PUBLIC	??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_SUBoolProperty@@6B@				; UBoolProperty::`local vftable'
PUBLIC	??_GUBoolProperty@@UAEPAXI@Z			; UBoolProperty::`scalar deleting destructor'
PUBLIC	??_EUBoolProperty@@UAEPAXI@Z			; UBoolProperty::`vector deleting destructor'
PUBLIC	??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@ ; `string'
PUBLIC	??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	?StaticConstructor@UD3DRenderDevice@@QAEXXZ	; UD3DRenderDevice::StaticConstructor
EXTRN	?Serialize@UBoolProperty@@UAEXAAVFArchive@@@Z:NEAR ; UBoolProperty::Serialize
EXTRN	?Link@UBoolProperty@@UAEXAAVFArchive@@PAVUProperty@@@Z:NEAR ; UBoolProperty::Link
EXTRN	?Identical@UBoolProperty@@UBEHPBX0@Z:NEAR	; UBoolProperty::Identical
EXTRN	?SerializeItem@UBoolProperty@@UBEXAAVFArchive@@PAX@Z:NEAR ; UBoolProperty::SerializeItem
EXTRN	?NetSerializeItem@UBoolProperty@@UBEHAAVFArchive@@PAVUPackageMap@@PAX@Z:NEAR ; UBoolProperty::NetSerializeItem
EXTRN	?ExportCppItem@UBoolProperty@@UBEXAAVFOutputDevice@@@Z:NEAR ; UBoolProperty::ExportCppItem
EXTRN	?ExportTextItem@UBoolProperty@@UBEXPAGPAE1H@Z:NEAR ; UBoolProperty::ExportTextItem
EXTRN	?ImportText@UBoolProperty@@UBEPBGPBGPAEH@Z:NEAR	; UBoolProperty::ImportText
EXTRN	?CopySingleValue@UBoolProperty@@UBEXPAX0@Z:NEAR	; UBoolProperty::CopySingleValue
EXTRN	?ExportCpp@UProperty@@UBEXAAVFOutputDevice@@HH@Z:NEAR ; UProperty::ExportCpp
EXTRN	?ExportText@UProperty@@UBEHHPAGPAE1H@Z:NEAR	; UProperty::ExportText
EXTRN	?CopyCompleteValue@UProperty@@UBEXPAX0@Z:NEAR	; UProperty::CopyCompleteValue
EXTRN	?DestroyValue@UProperty@@UBEXPAX@Z:NEAR		; UProperty::DestroyValue
EXTRN	?Port@UProperty@@UBEHXZ:NEAR			; UProperty::Port
EXTRN	?GetID@UProperty@@UBEEXZ:NEAR			; UProperty::GetID
EXTRN	?Destroy@UObject@@UAEXXZ:NEAR			; UObject::Destroy
EXTRN	?ShutdownAfterError@UObject@@UAEXXZ:NEAR	; UObject::ShutdownAfterError
EXTRN	__imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A:BYTE
EXTRN	__imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z:NEAR
EXTRN	__imp_?GetClass@UObject@@QBEPAVUClass@@XZ:NEAR
EXTRN	?PostLoad@UField@@UAEXXZ:NEAR			; UField::PostLoad
EXTRN	?Register@UField@@UAEXXZ:NEAR			; UField::Register
EXTRN	?AddCppProperty@UField@@UAEXPAVUProperty@@@Z:NEAR ; UField::AddCppProperty
EXTRN	?MergeBools@UField@@UAEHXZ:NEAR			; UField::MergeBools
EXTRN	?Bind@UField@@UAEXXZ:NEAR			; UField::Bind
EXTRN	?GetOwnerClass@UField@@UAEPAVUClass@@XZ:NEAR	; UField::GetOwnerClass
EXTRN	?GetPropertiesSize@UField@@UAEHXZ:NEAR		; UField::GetPropertiesSize
EXTRN	__imp_??0FName@@QAE@PBGW4EFindName@@@Z:NEAR
;	COMDAT ??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@
; File ..\..\Core\Inc\UnClass.h
_DATA	SEGMENT
??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, 'T', 00H, 'r', 00H, 'i', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'a', 00H, 'r', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ DB 'O', 00H, 'p'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_SUBoolProperty@@6B@
CONST	SEGMENT
??_SUBoolProperty@@6B@ DD FLAT:??_EUBoolProperty@@UAEPAXI@Z ; UBoolProperty::`local vftable'
	DD	FLAT:?ProcessEvent@UObject@@UAEXPAVUFunction@@PAX1@Z
	DD	FLAT:?ProcessState@UObject@@UAEXM@Z
	DD	FLAT:?ProcessRemoteFunction@UObject@@UAEHPAVUFunction@@PAXPAUFFrame@@@Z
	DD	FLAT:?Modify@UObject@@UAEXXZ
	DD	FLAT:?PostLoad@UField@@UAEXXZ
	DD	FLAT:?Destroy@UObject@@UAEXXZ
	DD	FLAT:?Serialize@UBoolProperty@@UAEXAAVFArchive@@@Z
	DD	FLAT:?IsPendingKill@UObject@@UAEHXZ
	DD	FLAT:?GotoLabel@UObject@@UAEHVFName@@@Z
	DD	FLAT:?InitExecution@UObject@@UAEXXZ
	DD	FLAT:?ShutdownAfterError@UObject@@UAEXXZ
	DD	FLAT:?PostEditChange@UObject@@UAEXXZ
	DD	FLAT:?CallFunction@UObject@@UAEXAAUFFrame@@QAXPAVUFunction@@@Z
	DD	FLAT:?ScriptConsoleExec@UObject@@UAEHPBGAAVFOutputDevice@@PAV1@@Z
	DD	FLAT:?Register@UField@@UAEXXZ
	DD	FLAT:?LanguageChange@UObject@@UAEXXZ
	DD	FLAT:?GetName@UObject@@UBEPBGXZ
	DD	FLAT:?AddCppProperty@UField@@UAEXPAVUProperty@@@Z
	DD	FLAT:?MergeBools@UField@@UAEHXZ
	DD	FLAT:?Bind@UField@@UAEXXZ
	DD	FLAT:?GetOwnerClass@UField@@UAEPAVUClass@@XZ
	DD	FLAT:?GetPropertiesSize@UField@@UAEHXZ
	DD	FLAT:?Link@UBoolProperty@@UAEXAAVFArchive@@PAVUProperty@@@Z
	DD	FLAT:?Identical@UBoolProperty@@UBEHPBX0@Z
	DD	FLAT:?ExportCpp@UProperty@@UBEXAAVFOutputDevice@@HH@Z
	DD	FLAT:?ExportCppItem@UBoolProperty@@UBEXAAVFOutputDevice@@@Z
	DD	FLAT:?SerializeItem@UBoolProperty@@UBEXAAVFArchive@@PAX@Z
	DD	FLAT:?NetSerializeItem@UBoolProperty@@UBEHAAVFArchive@@PAVUPackageMap@@PAX@Z
	DD	FLAT:?ExportTextItem@UBoolProperty@@UBEXPAGPAE1H@Z
	DD	FLAT:?ImportText@UBoolProperty@@UBEPBGPBGPAEH@Z
	DD	FLAT:?ExportText@UProperty@@UBEHHPAGPAE1H@Z
	DD	FLAT:?CopySingleValue@UBoolProperty@@UBEXPAX0@Z
	DD	FLAT:?CopyCompleteValue@UProperty@@UBEXPAX0@Z
	DD	FLAT:?DestroyValue@UProperty@@UBEXPAX@Z
	DD	FLAT:?Port@UProperty@@UBEHXZ
	DD	FLAT:?GetID@UProperty@@UBEEXZ
CONST	ENDS
;	COMDAT ??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@
_DATA	SEGMENT
??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, 'E', 00H, 'd', 00H, 'i', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 'G', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'a'
	DB	00H, 'C', 00H, 'o', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT
??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, 'T', 00H, 'r', 00H, 'i', 00H, 'p', 00H
	DB	'l', 00H, 'e', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@ DB 'U', 00H
	DB	's', 00H, 'e', 00H, 'V', 00H, 'S', 00H, 'y', 00H, 'n', 00H, 'c'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, 'P', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@
_DATA	SEGMENT
??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, '2', 00H, 'n', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'c', 00H
	DB	'h', 00H, 'e', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, '3', 00H, '2', 00H, 'B', 00H, 'i', 00H
	DB	't', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, 00H, 00H		; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?StaticConstructor@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
$T135736 = -4
$T135746 = -4
$T135756 = -4
$T135766 = -4
$T135776 = -4
$T135786 = -4
$T135796 = -4
?StaticConstructor@UD3DRenderDevice@@QAEXXZ PROC NEAR	; UD3DRenderDevice::StaticConstructor, COMDAT
; _this$ = ecx

; 789  : 	{

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi

; 790  : 		new(GetClass(),TEXT("UseTrilinear"),            RF_Public)UBoolProperty( CPP_PROPERTY(UseTrilinear				), TEXT("Options"), CPF_Config );

	mov	edi, DWORD PTR __imp_??0FName@@QAE@PBGW4EFindName@@@Z
	push	1
	mov	esi, ecx
	push	OFFSET FLAT:??_C@_1BK@BJII@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAl?$AAi?$AAn?$AAe?$AAa?$AAr?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T135736[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T135736[esp+20]
	mov	ebx, DWORD PTR __imp_?StaticAllocateObject@UObject@@SAPAV1@PAVUClass@@PAV1@VFName@@K1PAVFOutputDevice@@1@Z
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L135702
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19128					; 00004ab8H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L135702:

; 791  : 		new(GetClass(),TEXT("UseEditorGammaCorrection"),RF_Public)UBoolProperty( CPP_PROPERTY(UseEditorGammaCorrection	), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1DC@NGFL@?$AAU?$AAs?$AAe?$AAE?$AAd?$AAi?$AAt?$AAo?$AAr?$AAG?$AAa?$AAm?$AAm?$AAa?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc@ ; `string'
	lea	ecx, DWORD PTR $T135746[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T135746[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L135706
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19132					; 00004abcH
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L135706:

; 792  : 		new(GetClass(),TEXT("UseTripleBuffering"),      RF_Public)UBoolProperty( CPP_PROPERTY(UseTripleBuffering		), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1CG@HKBJ@?$AAU?$AAs?$AAe?$AAT?$AAr?$AAi?$AAp?$AAl?$AAe?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T135756[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T135756[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L135710
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19140					; 00004ac4H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L135710:

; 793  : 		new(GetClass(),TEXT("UseVSync"),                RF_Public)UBoolProperty( CPP_PROPERTY(UseVSync					), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1BC@CAKA@?$AAU?$AAs?$AAe?$AAV?$AAS?$AAy?$AAn?$AAc?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T135766[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T135766[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L135714
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19144					; 00004ac8H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L135714:

; 794  : 		new(GetClass(),TEXT("UsePrecache"),             RF_Public)UBoolProperty( CPP_PROPERTY(UsePrecache				), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1BI@DADG@?$AAU?$AAs?$AAe?$AAP?$AAr?$AAe?$AAc?$AAa?$AAc?$AAh?$AAe?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T135776[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T135776[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L135718
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19152					; 00004ad0H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L135718:

; 795  : 		new(GetClass(),TEXT("Use2ndTierTextureCache"),	RF_Public)UBoolProperty( CPP_PROPERTY(Use2ndTierTextureCache	), TEXT("Options"), CPF_Config );

	push	1
	push	OFFSET FLAT:??_C@_1CO@LCJN@?$AAU?$AAs?$AAe?$AA2?$AAn?$AAd?$AAT?$AAi?$AAe?$AAr?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAC?$AAa?$AAc@ ; `string'
	lea	ecx, DWORD PTR $T135786[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T135786[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	ebp, eax
	add	esp, 28					; 0000001cH
	test	ebp, ebp
	je	SHORT $L135722
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19156					; 00004ad4H
	push	0
	mov	ecx, ebp
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [ebp], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L135722:

; 796  : 		new(GetClass(),TEXT("Use32BitTextures"),		RF_Public)UBoolProperty( CPP_PROPERTY(Use32BitTextures			), TEXT("Options"), CPF_Config );

	mov	ebp, 1
	push	ebp
	push	OFFSET FLAT:??_C@_1CC@FKDE@?$AAU?$AAs?$AAe?$AA3?$AA2?$AAB?$AAi?$AAt?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AAs?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR $T135796[esp+28]
	call	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?GetClass@UObject@@QBEPAVUClass@@XZ
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T135796[esp+20]
	push	0
	push	edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UBoolProperty@@0VUClass@@A
	push	0
	push	4
	push	ecx
	push	eax
	push	edx
	call	ebx
	mov	edi, eax
	add	esp, 28					; 0000001cH
	test	edi, edi
	je	SHORT $L135726
	push	16384					; 00004000H
	push	OFFSET FLAT:??_C@_1BA@HNBO@?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAs?$AA?$AA@ ; `string'
	push	19160					; 00004ad8H
	push	0
	mov	ecx, edi
	call	DWORD PTR __imp_??0UBoolProperty@@QAE@W4ECppProperty@@HPBGK@Z
	mov	DWORD PTR [edi], OFFSET FLAT:??_SUBoolProperty@@6B@ ; UBoolProperty::`local vftable'
$L135726:

; 797  : 
; 798  : 		DetailTextures			= TRUE;
; 799  : 		SpanBased				= FALSE;
; 800  : 		SupportsFogMaps			= TRUE;
; 801  : 		MaxResWidth				= MAXINT;

	mov	eax, 2147483647				; 7fffffffH
	pop	edi
	mov	DWORD PTR [esi+104], ebp
	mov	DWORD PTR [esi+72], ebp
	mov	DWORD PTR [esi+68], 0
	mov	DWORD PTR [esi+19164], eax

; 802  : 		MaxResHeight			= MAXINT;

	mov	DWORD PTR [esi+19168], eax
	pop	esi
	pop	ebp
	pop	ebx

; 803  : 	}

	pop	ecx
	ret	0
?StaticConstructor@UD3DRenderDevice@@QAEXXZ ENDP	; UD3DRenderDevice::StaticConstructor
_TEXT	ENDS
EXTRN	__imp_??1UBoolProperty@@UAE@XZ:NEAR
; Function compile flags: /Ogty
;	COMDAT ??_GUBoolProperty@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GUBoolProperty@@UAEPAXI@Z PROC NEAR			; UBoolProperty::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	DWORD PTR __imp_??1UBoolProperty@@UAE@XZ
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L135805
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [edx+8]
$L135805:
	mov	eax, esi
	pop	esi
	ret	4
??_GUBoolProperty@@UAEPAXI@Z ENDP			; UBoolProperty::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller::BeginUpload
PUBLIC	?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller::UploadMipmap
PUBLIC	?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFillerDXT1::UploadMipmap
PUBLIC	??_7FTexFillerDXT1@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFillerDXT1::`vftable'
PUBLIC	??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFillerP8_P8::`vftable'
PUBLIC	?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller8888_RGBA8::UploadMipmap
PUBLIC	??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller8888_RGBA8::`vftable'
PUBLIC	?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller8888_RGBA7::UploadMipmap
PUBLIC	??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller8888_RGBA7::`vftable'
PUBLIC	?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller8888_P8::UploadMipmap
PUBLIC	?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller8888_P8::BeginUpload
PUBLIC	??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller8888_P8::`vftable'
PUBLIC	?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller1555_RGBA7::UploadMipmap
PUBLIC	??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller1555_RGBA7::`vftable'
PUBLIC	?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ; UD3DRenderDevice::FTexFiller1555_P8::UploadMipmap
PUBLIC	?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller1555_P8::BeginUpload
PUBLIC	??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@	; UD3DRenderDevice::FTexFiller1555_P8::`vftable'
EXTRN	__imp_??0USubsystem@@IAE@XZ:NEAR
EXTRN	__imp_??0FArray@@QAE@XZ:NEAR
EXTRN	__imp_??0FString@@QAE@XZ:NEAR
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T136080 DD	0ffffffffH
	DD	FLAT:$L135823
	DD	0ffffffffH
	DD	FLAT:$L135809
	DD	01H
	DD	FLAT:$L135810
	DD	02H
	DD	FLAT:$L135811
	DD	03H
	DD	FLAT:$L135812
	DD	04H
	DD	FLAT:$L135813
	DD	05H
	DD	FLAT:$L135814
	DD	06H
	DD	FLAT:$L135815
	DD	07H
	DD	FLAT:$L135816
	DD	08H
	DD	FLAT:$L135817
	DD	09H
	DD	FLAT:$L135818
	DD	0aH
	DD	FLAT:$L135819
	DD	0bH
	DD	FLAT:$L135820
$T136076 DD	019930520H
	DD	0dH
	DD	FLAT:$T136080
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7FTexFillerDXT1@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFillerDXT1@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFillerDXT1::`vftable'
	DD	FLAT:?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller8888_RGBA8::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller8888_RGBA7::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller8888_P8::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller1555_RGBA7::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller1555_P8::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
CONST	ENDS
;	COMDAT ??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFillerP8_P8::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ??0UD3DRenderDevice@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??0UD3DRenderDevice@@QAE@XZ PROC NEAR			; UD3DRenderDevice::UD3DRenderDevice, COMDAT
; _this$ = ecx

; 814  : 	{

	push	-1
	push	$L136079
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+32], esi
	call	DWORD PTR __imp_??0USubsystem@@IAE@XZ
	xor	ebx, ebx
	lea	ecx, DWORD PTR [esi+52]
	mov	DWORD PTR __$EHRec$[esp+40], ebx
	call	DWORD PTR __imp_??0FString@@QAE@XZ
	mov	eax, DWORD PTR __imp_??_7URenderDevice@@6BUObject@@@
	mov	DWORD PTR [esi], eax
	mov	ecx, DWORD PTR __imp_??_7URenderDevice@@6BFExec@@@
	mov	DWORD PTR [esi+40], ecx
	lea	ecx, DWORD PTR [esi+200]
	mov	DWORD PTR __$EHRec$[esp+40], 1
	call	DWORD PTR __imp_??0FArray@@QAE@XZ
	lea	ecx, DWORD PTR [esi+212]
	mov	BYTE PTR __$EHRec$[esp+40], 2
	call	DWORD PTR __imp_??0FArray@@QAE@XZ
	lea	ecx, DWORD PTR [esi+224]
	mov	BYTE PTR __$EHRec$[esp+40], 3
	call	DWORD PTR __imp_??0FArray@@QAE@XZ
	mov	DWORD PTR [esi+16688], ebx
	mov	DWORD PTR [esi+16696], ebx
	mov	DWORD PTR [esi+16684], ebx
	mov	DWORD PTR [esi+16680], ebx
	mov	DWORD PTR [esi+16708], ebx
	mov	DWORD PTR [esi+16716], ebx
	mov	DWORD PTR [esi+16704], ebx
	mov	DWORD PTR [esi+16700], ebx
	mov	DWORD PTR [esi+16728], ebx
	mov	DWORD PTR [esi+16736], ebx
	mov	DWORD PTR [esi+16724], ebx
	mov	DWORD PTR [esi+16720], ebx
	mov	DWORD PTR [esi+16748], ebx
	mov	DWORD PTR [esi+16756], ebx
	mov	DWORD PTR [esi+16744], ebx
	mov	DWORD PTR [esi+16740], ebx
	xor	eax, eax
	lea	edi, DWORD PTR [esi+16780]
	mov	ecx, 13					; 0000000dH
	rep stosd
	lea	edx, DWORD PTR [esi+16884]
	lea	edi, DWORD PTR [esi+16832]
	mov	ecx, 13					; 0000000dH
	rep stosd
	lea	ebp, DWORD PTR [esi+16936]
	mov	ecx, 13					; 0000000dH
	mov	edi, edx
	rep stosd
	mov	ecx, 13					; 0000000dH
	mov	edi, ebp
	rep stosd
	mov	DWORD PTR [esi+16992], OFFSET FLAT:??_7FTexFillerDXT1@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFillerDXT1::`vftable'
	lea	eax, DWORD PTR [esi+16780]
	mov	DWORD PTR [esi+16996], eax
	mov	DWORD PTR [esi+17000], OFFSET FLAT:??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_RGBA8::`vftable'
	mov	DWORD PTR [esi+17004], edx
	mov	DWORD PTR [esi+17008], OFFSET FLAT:??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_RGBA7::`vftable'
	mov	DWORD PTR [esi+17012], edx
	mov	DWORD PTR [esi+17016], OFFSET FLAT:??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_P8::`vftable'
	mov	DWORD PTR [esi+17020], edx
	mov	DWORD PTR [esi+18048], OFFSET FLAT:??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller1555_RGBA7::`vftable'
	mov	DWORD PTR [esi+18052], ebp
	mov	DWORD PTR [esi+18056], OFFSET FLAT:??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller1555_P8::`vftable'
	mov	DWORD PTR [esi+18060], ebp
	lea	eax, DWORD PTR [esi+16832]
	mov	DWORD PTR [esi+19088], OFFSET FLAT:??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFillerP8_P8::`vftable'
	mov	DWORD PTR [esi+19092], eax
	mov	DWORD PTR [esi+675112], ebx
	mov	DWORD PTR [esi+675116], ebx
	mov	DWORD PTR [esi+675120], ebx
	mov	DWORD PTR [esi+675212], ebx
	mov	DWORD PTR [esi+675216], ebx
	mov	DWORD PTR [esi+675220], ebx
	mov	DWORD PTR [esi+675224], ebx
	mov	DWORD PTR [esi+675228], ebx
	mov	DWORD PTR [esi+675232], ebx
	lea	ecx, DWORD PTR [esi+675236]
	mov	BYTE PTR __$EHRec$[esp+40], 11		; 0000000bH
	call	DWORD PTR __imp_??0FArray@@QAE@XZ
	lea	ecx, DWORD PTR [esi+675248]
	mov	BYTE PTR __$EHRec$[esp+40], 12		; 0000000cH
	call	DWORD PTR __imp_??0FArray@@QAE@XZ

; 815  : 		VALIDATE;
; 816  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	pop	edi
	mov	DWORD PTR [esi], OFFSET FLAT:??_7UD3DRenderDevice@@6BUObject@@@ ; UD3DRenderDevice::`vftable'
	mov	DWORD PTR [esi+40], OFFSET FLAT:??_7UD3DRenderDevice@@6BFExec@@@ ; UD3DRenderDevice::`vftable'
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L135823:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1USubsystem@@UAE@XZ
$L135809:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1URenderDevice@@UAE@XZ
$L135810:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
$L135811:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
$L135812:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	jmp	??1?$TArray@H@@QAE@XZ			; TArray<int>::~TArray<int>
$L135813:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16680				; 00004128H
	jmp	??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
$L135814:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16700				; 0000413cH
	jmp	??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
$L135815:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16720				; 00004150H
	jmp	??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
$L135816:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16740				; 00004164H
	jmp	??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ ; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
$L135817:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675112				; 000a4d28H
	jmp	??1?$TArray@E@@QAE@XZ			; TArray<unsigned char>::~TArray<unsigned char>
$L135818:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675212				; 000a4d8cH
	jmp	??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
$L135819:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675224				; 000a4d98H
	jmp	??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
$L135820:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675236				; 000a4da4H
	jmp	??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
$L136079:
	mov	eax, OFFSET FLAT:$T136076
	jmp	___CxxFrameHandler
text$x	ENDS
??0UD3DRenderDevice@@QAE@XZ ENDP			; UD3DRenderDevice::UD3DRenderDevice
; Function compile flags: /Ogty
;	COMDAT ?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT
?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller::BeginUpload, COMDAT
; _this$ = ecx

; 423  : 		virtual void BeginUpload( FTexInfo* Tex, const FTextureInfo& Info, DWORD PolyFlags, DWORD PolyFlagsEx ) {}

	ret	16					; 00000010H
?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ENDP ; UD3DRenderDevice::FTexFiller::BeginUpload
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller::UploadMipmap, COMDAT
; _this$ = ecx

; 424  : 		virtual void UploadMipmap( FTexInfo* Tex, FRainbowPtr Dest, INT Stride, const FTextureInfo& Info, INT MipIndex, DWORD PolyFlags ) {}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Dest$ = 12
_Info$ = 20
_MipIndex$ = 24
$T136111 = 24
$T136112 = 20
?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFillerDXT1::UploadMipmap, COMDAT
; _this$ = ecx

; 452  : 			INT USize = Max(Info.Mips[MipIndex]->USize, 4);

	mov	eax, DWORD PTR _MipIndex$[esp-4]
	mov	ecx, DWORD PTR _Info$[esp-4]
	mov	ecx, DWORD PTR [ecx+eax*4+80]
	mov	eax, DWORD PTR [ecx+4]
	cmp	eax, 4
	mov	edx, eax
	jge	SHORT $L136098
	mov	edx, 4
$L136098:

; 453  : 			INT VSize = Max(Info.Mips[MipIndex]->VSize, 4);

	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, 4
	jge	SHORT $L136106
	mov	eax, 4
$L136106:

; 454  : 			appMemcpy( Dest.PtrVOID, Info.Mips[MipIndex]->DataPtr, (USize * VSize)/2 );

	imul	eax, edx
	cdq
	push	ebx
	sub	eax, edx
	mov	edx, DWORD PTR [ecx]
	push	esi
	sar	eax, 1
	push	edi
	mov	DWORD PTR $T136112[esp+8], eax
	mov	DWORD PTR $T136111[esp+8], edx
	mov	ecx, DWORD PTR $T136112[esp+8]
	mov	esi, DWORD PTR $T136111[esp+8]
	mov	edi, DWORD PTR _Dest$[esp+8]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb
	pop	edi
	pop	esi
	pop	ebx

; 455  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFillerDXT1@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFillerDXT1::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Dest$ = 12
_Stride$ = 16
_Info$ = 20
_MipIndex$ = 24
?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller8888_RGBA8::UploadMipmap, COMDAT
; _this$ = ecx

; 477  : 			INT  USize      = Info.Mips[MipIndex]->USize;

	mov	ecx, DWORD PTR _Info$[esp-4]
	mov	eax, DWORD PTR _MipIndex$[esp-4]
	mov	eax, DWORD PTR [ecx+eax*4+80]
	mov	edx, DWORD PTR [eax+4]

; 478  : 			INT  VSize      = Info.Mips[MipIndex]->VSize;
; 479  : 			FRainbowPtr Src = Info.Mips[MipIndex]->DataPtr;

	mov	ecx, DWORD PTR [eax]

; 480  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrDWORD += Stride-USize*sizeof(DWORD) )

	mov	eax, DWORD PTR [eax+8]
	dec	eax
	js	SHORT $L124756
	push	ebx
	push	ebp
	push	esi

; 481  : 				for( INT k=USize-1; k>=0; k--,Dest.PtrDWORD++ )

	mov	esi, DWORD PTR _Stride$[esp+8]
	push	edi
	lea	edi, DWORD PTR [edx-1]
	shl	edx, 2
	sub	esi, edx
	lea	ebx, DWORD PTR [eax+1]
	mov	eax, DWORD PTR _Dest$[esp+12]
	shl	esi, 2
$L124754:
	test	edi, edi
	jl	SHORT $L124755
	lea	edx, DWORD PTR [edi+1]
$L124758:

; 482  : 				{
; 483  : 					*Dest.PtrDWORD = *Src.PtrDWORD++;

	mov	ebp, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ebp
	add	ecx, 4
	add	eax, 4
	dec	edx
	jne	SHORT $L124758
$L124755:

; 480  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrDWORD += Stride-USize*sizeof(DWORD) )

	add	eax, esi
	dec	ebx
	jne	SHORT $L124754
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
$L124756:

; 484  : 					//*Dest.PtrDWORD|=0xFF000000; 
; 485  : 				}
; 486  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller8888_RGBA8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller8888_RGBA8::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Info$ = 20
_MipIndex$ = 24
_v$ = 20
?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller8888_RGBA7::UploadMipmap, COMDAT
; _this$ = ecx

; 492  : 		{

	push	ebx
	push	ebp
	push	esi

; 493  : 
; 494  : 			DWORD*		TempBuffer = new DWORD[Info.Mips[MipIndex]->USize * Info.Mips[MipIndex]->VSize];

	mov	esi, DWORD PTR _Info$[esp+8]
	push	edi
	mov	edi, DWORD PTR _MipIndex$[esp+12]
	mov	ecx, DWORD PTR [esi+edi*4+80]
	mov	eax, DWORD PTR [ecx+8]
	imul	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	shl	eax, 2
	push	OFFSET FLAT:??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@ ; `string'
	push	eax
	call	DWORD PTR [edx]

; 495  : 			FRainbowPtr	RealDest = Dest;
; 496  : 
; 497  : 			Dest.PtrDWORD = TempBuffer;
; 498  : 			Stride = Info.Mips[MipIndex]->USize * 4;

	mov	ecx, DWORD PTR [esi+edi*4+80]
	mov	ebx, DWORD PTR [ecx+4]

; 499  : 
; 500  : 			FRainbowPtr Src  = Info.Mips[MipIndex]->DataPtr;
; 501  : 			for( INT v=0; v<Info.VClamp; v++,Dest.PtrBYTE+=Stride-Info.UClamp*sizeof(DWORD),Src.PtrDWORD+=Info.USize-Info.UClamp )

	mov	edx, DWORD PTR [esi+60]
	mov	ecx, DWORD PTR [ecx]
	shl	ebx, 2
	xor	ebp, ebp
	test	edx, edx
	jle	SHORT $L124774
	mov	edi, DWORD PTR [esi+56]
$L124772:

; 502  : 				for( INT u=0; u<Info.UClamp; u++,Src.PtrDWORD++,Dest.PtrDWORD++ )

	xor	edx, edx
	test	edi, edi
	jle	SHORT $L124773

; 504  : 
; 505  : 		}

	npad	6
$L124776:

; 503  : 					*Dest.PtrDWORD = *Src.PtrDWORD*2;

	mov	edi, DWORD PTR [ecx]
	shl	edi, 1
	mov	DWORD PTR [eax], edi
	mov	edi, DWORD PTR [esi+56]
	inc	edx
	add	ecx, 4
	add	eax, 4
	cmp	edx, edi
	jl	SHORT $L124776
$L124773:

; 499  : 
; 500  : 			FRainbowPtr Src  = Info.Mips[MipIndex]->DataPtr;
; 501  : 			for( INT v=0; v<Info.VClamp; v++,Dest.PtrBYTE+=Stride-Info.UClamp*sizeof(DWORD),Src.PtrDWORD+=Info.USize-Info.UClamp )

	mov	edi, DWORD PTR [esi+56]
	inc	ebp
	mov	DWORD PTR _v$[esp+12], ebp
	lea	edx, DWORD PTR [edi*4]
	mov	ebp, ebx
	sub	ebp, edx
	mov	edx, DWORD PTR [esi+48]
	sub	edx, edi
	add	eax, ebp
	mov	ebp, DWORD PTR _v$[esp+12]
	lea	ecx, DWORD PTR [ecx+edx*4]
	cmp	ebp, DWORD PTR [esi+60]
	jl	SHORT $L124772
$L124774:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 504  : 
; 505  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller8888_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller8888_RGBA7::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Dest$ = 12
_Stride$ = 16
_Info$ = 20
_MipIndex$ = 24
?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller8888_P8::UploadMipmap, COMDAT
; _this$ = ecx

; 514  : 			INT		USize      = Info.Mips[MipIndex]->USize;

	mov	eax, DWORD PTR _MipIndex$[esp-4]
	push	esi
	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR _Info$[esp+4]
	mov	eax, DWORD PTR [ecx+eax*4+80]
	mov	esi, DWORD PTR [eax+4]

; 515  : 			INT		VSize      = Info.Mips[MipIndex]->VSize;
; 516  : 
; 517  : 			FRainbowPtr Src = Info.Mips[MipIndex]->DataPtr;

	mov	edx, DWORD PTR [eax]

; 518  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrBYTE+=Stride-USize*sizeof(DWORD) )

	mov	eax, DWORD PTR [eax+8]
	dec	eax
	js	SHORT $L124790
	push	ebx
	lea	ecx, DWORD PTR [esi-1]
	push	ebp

; 519  : 				for( INT k=USize-1; k>=0; k--,Dest.PtrDWORD++ )

	shl	esi, 2
	lea	ebp, DWORD PTR [eax+1]
	mov	eax, DWORD PTR _Dest$[esp+12]
	mov	DWORD PTR 24+[esp+12], esi

; 521  : 
; 522  : 		}

	npad	2

; 519  : 				for( INT k=USize-1; k>=0; k--,Dest.PtrDWORD++ )

$L124788:
	test	ecx, ecx
	jl	SHORT $L124789
	lea	esi, DWORD PTR [ecx+1]
$L124792:

; 520  : 					*Dest.PtrDWORD = AlphaPalette[*Src.PtrBYTE++];

	xor	ebx, ebx
	mov	bl, BYTE PTR [edx]
	inc	edx
	add	eax, 4
	dec	esi
	mov	ebx, DWORD PTR [edi+ebx*4+8]
	mov	DWORD PTR [eax-4], ebx
	jne	SHORT $L124792
$L124789:

; 518  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrBYTE+=Stride-USize*sizeof(DWORD) )

	mov	esi, DWORD PTR _Stride$[esp+12]
	sub	esi, DWORD PTR 24+[esp+12]
	add	eax, esi
	dec	ebp
	jne	SHORT $L124788
	pop	ebp
	pop	ebx
$L124790:
	pop	edi
	pop	esi

; 521  : 
; 522  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller8888_P8::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT
_Info$ = 12
_PolyFlags$ = 16
?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller8888_P8::BeginUpload, COMDAT
; _this$ = ecx

; 524  : 		{

	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _Info$[esp+4]
	push	esi

; 525  : 			// Compute the alpha palette:
; 526  : 			for( INT i=0; i<NUM_PAL_COLORS; i++ )

	xor	esi, esi
	add	ecx, 8
	push	edi
	mov	edi, ecx

; 531  : 		}

	npad	1

; 525  : 			// Compute the alpha palette:
; 526  : 			for( INT i=0; i<NUM_PAL_COLORS; i++ )

$L124798:

; 527  : 				AlphaPalette[i] = D3DCOLOR_RGBA(Info.Palette[i].R,Info.Palette[i].G,Info.Palette[i].B,Info.Palette[i].A);

	mov	eax, DWORD PTR [ebp+72]
	xor	edx, edx
	mov	dh, BYTE PTR [eax+esi+3]
	add	eax, esi
	xor	ebx, ebx
	mov	bl, BYTE PTR [eax+1]
	add	esi, 4
	add	edi, 4
	mov	dl, BYTE PTR [eax]
	shl	edx, 8
	or	edx, ebx
	xor	ebx, ebx
	mov	bl, BYTE PTR [eax+2]
	shl	edx, 8
	or	edx, ebx
	cmp	esi, 1024				; 00000400H
	mov	DWORD PTR [edi-4], edx
	jl	SHORT $L124798

; 528  : 			
; 529  : 			if( PolyFlags & PF_Masked )

	test	BYTE PTR _PolyFlags$[esp+12], 2
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	je	SHORT $L124802

; 530  : 				AlphaPalette[0] = 0;

	mov	DWORD PTR [ecx], 0
$L124802:

; 531  : 		}

	ret	16					; 00000010H
?BeginUpload@FTexFiller8888_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ENDP ; UD3DRenderDevice::FTexFiller8888_P8::BeginUpload
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Dest$ = 12
_Stride$ = 16
_Info$ = 20
_MipIndex$ = 24
_RPtr$ = -8
_GPtr$ = -12
_BPtr$ = -4
_v$ = 20
?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller1555_RGBA7::UploadMipmap, COMDAT
; _this$ = ecx

; 537  : 		{

	sub	esp, 12					; 0000000cH

; 538  : 			_WORD*      RPtr     = RScale + PYR(Info.MaxColor->R/2);

	mov	ecx, DWORD PTR _Info$[esp+8]
	xor	edx, edx
	push	esi
	mov	esi, DWORD PTR [ecx+32]
	mov	dl, BYTE PTR [esi]

; 539  : 			_WORD*      GPtr     = GScale + PYR(Info.MaxColor->G/2);
; 540  : 			_WORD*      BPtr     = BScale + PYR(Info.MaxColor->B/2);
; 541  : 			FRainbowPtr Src      = Info.Mips[MipIndex]->DataPtr;
; 542  : 			for( INT v=0; v<Info.VClamp; v++,Dest.PtrBYTE+=Stride-Info.UClamp*2,Src .PtrDWORD+=Info.USize-Info.UClamp )

	mov	DWORD PTR _v$[esp+12], 0
	shr	edx, 1
	lea	eax, DWORD PTR [edx+1]
	imul	eax, edx
	cdq
	sub	eax, edx
	xor	edx, edx
	mov	dl, BYTE PTR [esi+1]
	sar	eax, 1
	lea	eax, DWORD PTR ?RScale@@3PAGA[eax*2]
	mov	DWORD PTR _RPtr$[esp+16], eax
	shr	edx, 1
	lea	eax, DWORD PTR [edx+1]
	imul	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	lea	edx, DWORD PTR ?GScale@@3PAGA[eax*2]
	mov	DWORD PTR _GPtr$[esp+16], edx
	xor	edx, edx
	mov	dl, BYTE PTR [esi+2]
	shr	edx, 1
	lea	eax, DWORD PTR [edx+1]
	imul	eax, edx
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR _MipIndex$[esp+12]
	sar	eax, 1
	lea	eax, DWORD PTR ?BScale@@3PAGA[eax*2]
	mov	DWORD PTR _BPtr$[esp+16], eax
	mov	eax, DWORD PTR [ecx+edx*4+80]
	mov	edx, DWORD PTR [ecx+60]
	test	edx, edx
	mov	eax, DWORD PTR [eax]
	jle	SHORT $L124814
	mov	edx, DWORD PTR [ecx+56]
	mov	esi, DWORD PTR _Dest$[esp+12]
	push	ebx
	push	ebp
	push	edi
$L124812:

; 543  : 				for( INT u=0; u<Info.UClamp; u++,Src.PtrDWORD++ )

	xor	edi, edi
	test	edx, edx
	jle	SHORT $L124813

; 545  : 		}

	npad	6
$L124816:

; 544  : 					*Dest.PtrWORD++ = BPtr[Src.PtrBYTE[0]] + GPtr[Src.PtrBYTE[1]] + RPtr[Src.PtrBYTE[2]];

	mov	ebp, DWORD PTR _GPtr$[esp+28]
	xor	edx, edx
	mov	dl, BYTE PTR [eax+1]
	xor	ebx, ebx
	mov	bl, BYTE PTR [eax+2]
	add	esi, 2
	add	eax, 4
	mov	dx, WORD PTR [ebp+edx*2]
	mov	ebp, DWORD PTR _RPtr$[esp+28]
	add	dx, WORD PTR [ebp+ebx*2]
	mov	ebp, DWORD PTR _BPtr$[esp+28]
	xor	ebx, ebx
	mov	bl, BYTE PTR [eax-4]
	add	dx, WORD PTR [ebp+ebx*2]
	inc	edi
	mov	WORD PTR [esi-2], dx
	cmp	edi, DWORD PTR [ecx+56]
	jl	SHORT $L124816
$L124813:

; 539  : 			_WORD*      GPtr     = GScale + PYR(Info.MaxColor->G/2);
; 540  : 			_WORD*      BPtr     = BScale + PYR(Info.MaxColor->B/2);
; 541  : 			FRainbowPtr Src      = Info.Mips[MipIndex]->DataPtr;
; 542  : 			for( INT v=0; v<Info.VClamp; v++,Dest.PtrBYTE+=Stride-Info.UClamp*2,Src .PtrDWORD+=Info.USize-Info.UClamp )

	mov	edx, DWORD PTR [ecx+56]
	mov	ebp, DWORD PTR _Stride$[esp+24]
	mov	edi, DWORD PTR _v$[esp+24]
	lea	ebx, DWORD PTR [edx+edx]
	sub	ebp, ebx
	mov	ebx, DWORD PTR [ecx+48]
	sub	ebx, edx
	inc	edi
	lea	eax, DWORD PTR [eax+ebx*4]
	mov	ebx, DWORD PTR [ecx+60]
	add	esi, ebp
	cmp	edi, ebx
	mov	DWORD PTR _v$[esp+24], edi
	jl	SHORT $L124812
	pop	edi
	pop	ebp
	pop	ebx
$L124814:
	pop	esi

; 545  : 		}

	add	esp, 12					; 0000000cH
	ret	24					; 00000018H
?UploadMipmap@FTexFiller1555_RGBA7@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller1555_RGBA7::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
_TEXT	SEGMENT
_Dest$ = 12
_Stride$ = 16
_Info$ = 20
_MipIndex$ = 24
_k$124830 = 24
?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller1555_P8::UploadMipmap, COMDAT
; _this$ = ecx

; 553  : 		{

	push	ebx

; 554  : 			INT  USize      = Info.Mips[MipIndex]->USize;

	mov	ebx, DWORD PTR _MipIndex$[esp]
	push	ebp
	mov	ebp, DWORD PTR _Info$[esp+4]
	mov	eax, DWORD PTR [ebp+ebx*4+80]

; 555  : 			INT  VSize      = Info.Mips[MipIndex]->VSize;
; 556  : 			FRainbowPtr Src = Info.Mips[MipIndex]->DataPtr;

	mov	edx, DWORD PTR [eax]
	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR [eax+4]

; 557  : 
; 558  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrBYTE+=Stride-Info.Mips[MipIndex]->USize*2 )

	mov	eax, DWORD PTR [eax+8]
	dec	eax
	js	SHORT $L124829
	dec	ecx
	inc	eax
	mov	DWORD PTR 20+[esp+8], eax
	mov	eax, DWORD PTR _Dest$[esp+8]
	push	esi
	mov	DWORD PTR _k$124830[esp+12], ecx
	jmp	SHORT $L124827
$L136182:

; 554  : 			INT  USize      = Info.Mips[MipIndex]->USize;

	mov	ecx, DWORD PTR _k$124830[esp+12]
$L124827:

; 559  : 				for( INT k=USize-1; k>=0; k-- )

	test	ecx, ecx
	jl	SHORT $L124828
	lea	esi, DWORD PTR [ecx+1]
$L124831:

; 560  : 					*Dest.PtrWORD++ = AlphaPalette[*Src.PtrBYTE++];

	xor	ecx, ecx
	mov	cl, BYTE PTR [edx]
	add	eax, 2
	inc	edx
	dec	esi
	mov	cx, WORD PTR [edi+ecx*4+8]
	mov	WORD PTR [eax-2], cx
	jne	SHORT $L124831
$L124828:

; 557  : 
; 558  : 			for( INT j=VSize-1; j>=0; j--,Dest.PtrBYTE+=Stride-Info.Mips[MipIndex]->USize*2 )

	mov	ecx, DWORD PTR [ebp+ebx*4+80]
	mov	ecx, DWORD PTR [ecx+4]
	mov	esi, DWORD PTR _Stride$[esp+12]
	shl	ecx, 1
	sub	esi, ecx
	mov	ecx, DWORD PTR 20+[esp+12]
	add	eax, esi
	dec	ecx
	mov	DWORD PTR 20+[esp+12], ecx
	jne	SHORT $L136182
	pop	esi
$L124829:
	pop	edi
	pop	ebp
	pop	ebx

; 561  : 		}

	ret	24					; 00000018H
?UploadMipmap@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z ENDP ; UD3DRenderDevice::FTexFiller1555_P8::UploadMipmap
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z
_TEXT	SEGMENT
_End$136326 = -4
_ti$ = 8
_Info$ = 12
_PolyFlags$ = 16
_PolyFlagsEx$ = 20
?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z PROC NEAR ; UD3DRenderDevice::FTexFiller1555_P8::BeginUpload, COMDAT
; _this$ = ecx

; 578  : 			// Convert lighten and darknen modulate as a modulated texture, but don't add one.
; 579  : 			if(PolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	mov	al, BYTE PTR _PolyFlagsEx$[esp-4]
	sub	esp, 8
	test	al, 48					; 00000030H
	push	ebx
	push	ebp
	push	esi
	push	edi
	je	$L124860

; 580  : 			{
; 581  : 				FColor* Pal = Info.Palette;

	mov	eax, DWORD PTR _Info$[esp+20]
	mov	edx, DWORD PTR [eax+72]

; 582  : 				DWORD* Dest = AlphaPalette;

	add	ecx, 8

; 583  : 
; 584  : 				for( FColor *End=Pal+NUM_PAL_COLORS; Pal<End; Pal++ )

	lea	ebx, DWORD PTR [edx+1024]
	cmp	edx, ebx
	mov	DWORD PTR 12+[esp+20], ecx
	mov	ebp, ecx
	jae	$L136329
$L124864:

; 585  : 				{
; 586  : 					*Dest++
; 587  : 					=((Min<INT>(0x80000000,(Pal->A*0x01000000)&0x80000000))
; 588  : 					| (Min<INT>(0x7C000000,(Pal->R*0x007fffff)&0x7C000000))
; 589  : 					| (Min<INT>(0x03E00000,(Pal->G*0x0003ffff)&0x03E00000))
; 590  : 					| (Min<INT>(0x001F0000,(Pal->B*0x00001fff)&0x001F0000)) )>>16;

	xor	ecx, ecx
	mov	cl, BYTE PTR [edx+3]
	mov	eax, ecx
	shl	eax, 24					; 00000018H
	and	eax, -2147483648			; 80000000H
	cmp	eax, -2147483648			; 80000000H
	jl	SHORT $L136191
	mov	eax, -2147483648			; 80000000H
$L136191:
	xor	ecx, ecx
	mov	cl, BYTE PTR [edx]
	mov	edi, 2080374784				; 7c000000H
	imul	ecx, 8388607				; 007fffffH
	and	ecx, 2080374784				; 7c000000H
	cmp	ecx, 2080374784				; 7c000000H
	jge	SHORT $L136199
	mov	edi, ecx
$L136199:
	xor	ecx, ecx
	mov	cl, BYTE PTR [edx+1]
	mov	esi, 65011712				; 03e00000H
	imul	ecx, 262143				; 0003ffffH
	and	ecx, 65011712				; 03e00000H
	cmp	ecx, 65011712				; 03e00000H
	jge	SHORT $L136207
	mov	esi, ecx
$L136207:
	xor	ecx, ecx
	mov	cl, BYTE PTR [edx+2]
	imul	ecx, 8191				; 00001fffH
	and	ecx, 2031616				; 001f0000H
	cmp	ecx, 2031616				; 001f0000H
	jl	SHORT $L136215
	mov	ecx, 2031616				; 001f0000H
$L136215:
	or	eax, ecx
	or	eax, esi
	or	eax, edi
	sar	eax, 16					; 00000010H
	mov	DWORD PTR [ebp], eax
	add	edx, 4
	add	ebp, 4
	cmp	edx, ebx
	jb	$L124864

; 591  : 				}
; 592  : 			} else

	jmp	$L136329
$L124860:

; 593  : 			// Have to add one to the texture, so we can darken it down by half an element later.
; 594  : 			if((PolyFlags & (PF_Modulated|PF_Translucent)) == PF_Modulated)// Prevent brightness adjustment when modulating 

	mov	edx, DWORD PTR _PolyFlags$[esp+20]
	and	edx, 68					; 00000044H
	cmp	dl, 64					; 00000040H
	jne	$L124884

; 595  : 			{
; 596  : 				FColor* Pal = Info.Palette;

	mov	eax, DWORD PTR _Info$[esp+20]
	mov	edx, DWORD PTR [eax+72]

; 597  : 				DWORD* Dest = AlphaPalette;

	lea	eax, DWORD PTR [ecx+8]

; 598  : 
; 599  : 				for( FColor *End=Pal+NUM_PAL_COLORS; Pal<End; Pal++ )

	lea	ebx, DWORD PTR [edx+1024]
	cmp	edx, ebx
	mov	DWORD PTR 12+[esp+20], eax
	mov	edi, eax
	jae	$L136329
$L124888:

; 600  : 				{
; 601  : 					*Dest++
; 602  : 					=((Min<INT>(0x80000000,(Pal->A*0x01000000)&0x80000000))
; 603  : 					| (Min<INT>(0x7C000000,((Pal->R+1)*0x007fffff)&0x7C000000))
; 604  : 					| (Min<INT>(0x03E00000,((Pal->G+1)*0x0003ffff)&0x03E00000))
; 605  : 					| (Min<INT>(0x001F0000,((Pal->B+1)*0x00001fff)&0x001F0000)) )>>16;

	xor	ecx, ecx
	mov	cl, BYTE PTR [edx+3]
	mov	ebp, -2147483648			; 80000000H
	mov	eax, ecx
	shl	eax, 24					; 00000018H
	and	eax, -2147483648			; 80000000H
	cmp	eax, -2147483648			; 80000000H
	jge	SHORT $L136223
	mov	ebp, eax
$L136223:
	xor	eax, eax
	mov	al, BYTE PTR [edx]
	mov	esi, 2080374784				; 7c000000H
	inc	eax
	imul	eax, 8388607				; 007fffffH
	and	eax, 2080374784				; 7c000000H
	cmp	eax, 2080374784				; 7c000000H
	jge	SHORT $L136231
	mov	esi, eax
$L136231:
	xor	eax, eax
	mov	al, BYTE PTR [edx+1]
	mov	ecx, 65011712				; 03e00000H
	inc	eax
	imul	eax, 262143				; 0003ffffH
	and	eax, 65011712				; 03e00000H
	cmp	eax, 65011712				; 03e00000H
	jge	SHORT $L136239
	mov	ecx, eax
$L136239:
	xor	eax, eax
	mov	al, BYTE PTR [edx+2]
	inc	eax
	imul	eax, 8191				; 00001fffH
	and	eax, 2031616				; 001f0000H
	cmp	eax, 2031616				; 001f0000H
	jl	SHORT $L136247
	mov	eax, 2031616				; 001f0000H
$L136247:
	or	eax, ecx
	or	eax, esi
	or	eax, ebp
	sar	eax, 16					; 00000010H
	mov	DWORD PTR [edi], eax
	add	edx, 4
	add	edi, 4
	cmp	edx, ebx
	jb	$L124888

; 606  : 				}
; 607  : 			} else

	jmp	$L136329
$L124884:

; 608  : 			BuildAlphaPalette
; 609  : 			(
; 610  : 				Info.Palette,
; 611  : 				0x1000000, 0x80000000,
; 612  : 				/*appRound(*/0x07fffffff/Max<INT>(ti->MaxColor.R,1)/*)*/, 0x7C000000,
; 613  : 				/*appRound(*/0x003ffffff/Max<INT>(ti->MaxColor.G,1)/*)*/, 0x03E00000,
; 614  : 				/*appRound(*/0x0001fffff/Max<INT>(ti->MaxColor.B,1)/*)*/, 0x001F0000
; 615  : 				/* Adjustment of 1.4* for 16-bit rendering modes to make 
; 616  : 				   brightness scaling of world textures comparable to that of 3dfx.
; 617  : 				   NJS: removed the 1.4 scaling.
; 618  : 				*/
; 619  : 			);

	mov	edx, DWORD PTR _ti$[esp+20]
	xor	eax, eax
	mov	al, BYTE PTR [edx+34]
	mov	edi, 1
	cmp	eax, edi
	mov	DWORD PTR 20+[esp+20], eax
	jge	SHORT $L136255
	mov	DWORD PTR 20+[esp+20], edi
$L136255:
	xor	eax, eax
	mov	al, BYTE PTR [edx+33]
	cmp	eax, edi
	mov	ebp, eax
	jge	SHORT $L136263
	mov	ebp, edi
$L136263:
	xor	eax, eax
	mov	al, BYTE PTR [edx+32]
	cmp	eax, edi
	jl	SHORT $L136271
	mov	edi, eax
$L136271:
	mov	edx, DWORD PTR _Info$[esp+20]
	mov	esi, DWORD PTR [edx+72]
	lea	eax, DWORD PTR [esi+1024]
	cmp	esi, eax
	lea	ebx, DWORD PTR [ecx+8]
	mov	DWORD PTR 12+[esp+20], ebx
	mov	DWORD PTR _End$136326[esp+24], eax
	jae	$L136329
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	edi
	mov	DWORD PTR 8+[esp+20], eax
	mov	eax, 67108863				; 03ffffffH
	cdq
	idiv	ebp
	mov	DWORD PTR -8+[esp+24], eax
	mov	eax, 2097151				; 001fffffH
	cdq
	idiv	DWORD PTR 20+[esp+20]

; 622  : 		}

	npad	1

; 608  : 			BuildAlphaPalette
; 609  : 			(
; 610  : 				Info.Palette,
; 611  : 				0x1000000, 0x80000000,
; 612  : 				/*appRound(*/0x07fffffff/Max<INT>(ti->MaxColor.R,1)/*)*/, 0x7C000000,
; 613  : 				/*appRound(*/0x003ffffff/Max<INT>(ti->MaxColor.G,1)/*)*/, 0x03E00000,
; 614  : 				/*appRound(*/0x0001fffff/Max<INT>(ti->MaxColor.B,1)/*)*/, 0x001F0000
; 615  : 				/* Adjustment of 1.4* for 16-bit rendering modes to make 
; 616  : 				   brightness scaling of world textures comparable to that of 3dfx.
; 617  : 				   NJS: removed the 1.4 scaling.
; 618  : 				*/
; 619  : 			);

$L136327:
	xor	ecx, ecx
	mov	cl, BYTE PTR [esi+3]
	mov	ebp, ecx
	shl	ebp, 24					; 00000018H
	cmp	ebp, -2147483648			; 80000000H
	jb	SHORT $L136310
	mov	ebp, -2147483648			; 80000000H
$L136310:
	xor	edx, edx
	mov	dl, BYTE PTR [esi]
	mov	edi, edx
	imul	edi, DWORD PTR 8+[esp+20]
	cmp	edi, 2080374784				; 7c000000H
	jb	SHORT $L136314
	mov	edi, 2080374784				; 7c000000H
$L136314:
	xor	ecx, ecx
	mov	cl, BYTE PTR [esi+1]
	imul	ecx, DWORD PTR -8+[esp+24]
	cmp	ecx, 65011712				; 03e00000H
	jb	SHORT $L136318
	mov	ecx, 65011712				; 03e00000H
$L136318:
	xor	edx, edx
	mov	dl, BYTE PTR [esi+2]
	imul	edx, eax
	cmp	edx, 2031616				; 001f0000H
	jb	SHORT $L136322
	mov	edx, 2031616				; 001f0000H
$L136322:
	and	ecx, 65011712				; 03e00000H
	and	ebp, -2147418113			; 8000ffffH
	or	ecx, ebp
	and	edx, 2031616				; 001f0000H
	or	ecx, edx
	and	edi, 2080374784				; 7c000000H
	or	ecx, edi
	shr	ecx, 16					; 00000010H
	mov	DWORD PTR [ebx], ecx
	mov	ecx, DWORD PTR _End$136326[esp+24]
	add	esi, 4
	add	ebx, 4
	cmp	esi, ecx
	jb	$L136327
$L136329:

; 620  : 			if( PolyFlags & PF_Masked )

	test	BYTE PTR _PolyFlags$[esp+20], 2
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	je	SHORT $L124920

; 621  : 				AlphaPalette[0] = 0; //0x3DEF;

	mov	eax, DWORD PTR 12+[esp+4]
	mov	DWORD PTR [eax], 0
$L124920:

; 622  : 		}

	add	esp, 8
	ret	16					; 00000010H
?BeginUpload@FTexFiller1555_P8@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ENDP ; UD3DRenderDevice::FTexFiller1555_P8::BeginUpload
_TEXT	ENDS
EXTRN	__imp_?Destroy@UObject@@UAEXXZ:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Destroy@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT
?Destroy@UD3DRenderDevice@@UAEXXZ PROC NEAR		; UD3DRenderDevice::Destroy, COMDAT
; _this$ = ecx

; 820  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 821  : 		QueueParticleShutdown();

	mov	eax, DWORD PTR [esi+675228]
	xor	ebx, ebx
	test	eax, eax
	jle	SHORT $L136362
	push	edi
	xor	edi, edi
$L136360:
	mov	eax, DWORD PTR [esi+675224]
	mov	edx, DWORD PTR [eax+edi+4]
	add	eax, edi
	test	edx, edx
	je	SHORT $L136361
	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	je	SHORT $L136361
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+8]
$L136361:
	mov	eax, DWORD PTR [esi+675228]
	inc	ebx
	add	edi, 16					; 00000010H
	cmp	ebx, eax
	jl	SHORT $L136360
	pop	edi
$L136362:

; 822  : 
; 823  : 		// Punt to my superclass:  FIXME: don't think this is a good idea with virtual destructors.
; 824  : 		Super::Destroy();

	mov	ecx, esi
	pop	esi
	pop	ebx
	jmp	DWORD PTR __imp_?Destroy@UObject@@UAEXXZ
?Destroy@UD3DRenderDevice@@UAEXXZ ENDP			; UD3DRenderDevice::Destroy
_TEXT	ENDS
PUBLIC	??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
PUBLIC	??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@ ; `string'
PUBLIC	??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@ ; `string'
PUBLIC	??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@ ; `string'
PUBLIC	??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@ ; `string'
PUBLIC	??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@ ; `string'
PUBLIC	??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	?InitD3D@UD3DRenderDevice@@SIXXZ		; UD3DRenderDevice::InitD3D
EXTRN	_Direct3DCreate8@4:NEAR
EXTRN	__imp_?GLog@@3PAVFOutputDevice@@A:DWORD
EXTRN	__imp_?appFailAssert@@YAXPBD0H@Z:NEAR
EXTRN	?DXGetErrorString8W@@YGPBGJ@Z:NEAR		; DXGetErrorString8W
EXTRN	__imp_?appFromAnsi@@YAPBGPBD@Z:NEAR
EXTRN	__imp_?appStrstr@@YAPAGPBG0@Z:NEAR
EXTRN	__imp_?Add@FArray@@QAEHHH@Z:NEAR
EXTRN	__imp_?Realloc@FArray@@IAEXH@Z:NEAR
EXTRN	__imp_?Logf@FOutputDevice@@QAAXPBGZZ:NEAR
EXTRN	__imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ:NEAR
_BSS	SEGMENT
_Direct3D8 DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ DB 'C:\duke4\D3DDrv'
	DB	'\Src\Direct3D8.cpp', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@
_DATA	SEGMENT
??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@ DB 'Direct3D8=Dire'
	DB	'ct3DCreate8(D3D_SDK_VERSION)', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@
_DATA	SEGMENT
??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3', 00H
	DB	'D', 00H, ' ', 00H, 'a', 00H, 'd', 00H, 'a', 00H, 'p', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, ':'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, '8', 00H, '-', 00H, '>', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'A', 00H, 'd', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'I', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'r', 00H, '(', 00H, 'I'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ',', 00H, 'D', 00H
	DB	'3', 00H, 'D', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'M', 00H, '_'
	DB	00H, 'N', 00H, 'O', 00H, '_', 00H, 'W', 00H, 'H', 00H, 'Q', 00H
	DB	'L', 00H, '_', 00H, 'L', 00H, 'E', 00H, 'V', 00H, 'E', 00H, 'L'
	DB	00H, ',', 00H, '&', 00H, 'A', 00H, 'd', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'I', 00H, 'd', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, 'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'r', 00H
	DB	')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@
_DATA	SEGMENT
??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@ DB 'A'
	DB	00H, 'd', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'D', 00H, 'e', 00H, 't', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	'/', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@
_DATA	SEGMENT
??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@ DB 'N'
	DB	00H, 'o', 00H, ' ', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'a', 00H, 'd'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@ DB 'P', 00H, 'r'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, '8', 00H, '-', 00H, '>', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e'
	DB	00H, 'C', 00H, 'a', 00H, 'p', 00H, 's', 00H, '(', 00H, 'B', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'A', 00H, 'd', 00H, 'a', 00H, 'p'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, 'I', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'x', 00H, ',', 00H, 'D', 00H, '3', 00H, 'D', 00H, 'D'
	DB	00H, 'E', 00H, 'V', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'_', 00H, 'H', 00H, 'A', 00H, 'L', 00H, ',', 00H, '&', 00H, 'D'
	DB	00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'C', 00H
	DB	'a', 00H, 'p', 00H, 's', 00H, '8', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@
_DATA	SEGMENT
??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@ DB 'D'
	DB	00H, 'u', 00H, 'k', 00H, 'e', 00H, 'F', 00H, 'o', 00H, 'r', 00H
	DB	'e', 00H, 'v', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r'
	DB	00H, 't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '.', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, '8', 00H, '-', 00H, '>', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'A', 00H, 'd', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H
	DB	'a', 00H, 'y', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '('
	DB	00H, 'B', 00H, 'e', 00H, 's', 00H, 't', 00H, 'A', 00H, 'd', 00H
	DB	'a', 00H, 'p', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'I', 00H, 'n'
	DB	00H, 'd', 00H, 'e', 00H, 'x', 00H, ',', 00H, '&', 00H, 'O', 00H
	DB	'r', 00H, 'i', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l'
	DB	00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?InitD3D@UD3DRenderDevice@@SIXXZ
_TEXT	SEGMENT
_AdapterIdentifier$125019 = -1068
_A$ = -1084
?InitD3D@UD3DRenderDevice@@SIXXZ PROC NEAR		; UD3DRenderDevice::InitD3D, COMDAT

; 829  : 		// Have we already been initialized?
; 830  : 		if(Direct3D8) 

	mov	eax, DWORD PTR _Direct3D8
	sub	esp, 1084				; 0000043cH
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	jne	$L125069

; 831  : 			return;
; 832  : 
; 833  : 		// Create the Direct3D object.
; 834  : 		verify(Direct3D8=Direct3DCreate8(D3D_SDK_VERSION));

	push	120					; 00000078H
	call	_Direct3DCreate8@4
	cmp	eax, ebx
	mov	DWORD PTR _Direct3D8, eax
	jne	SHORT $L125010
	push	834					; 00000342H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	eax, DWORD PTR _Direct3D8
	add	esp, 12					; 0000000cH
$L125010:

; 835  : 
; 836  : 		// Enumerate Direct3D adapters.
; 837  : 		INT	NumAdapters = Direct3D8->GetAdapterCount();

	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	esi
	push	edi
	push	eax
	call	DWORD PTR [ecx+16]
	mov	ebp, eax

; 838  : 		Adapters.Empty(NumAdapters);

	push	1068					; 0000042cH
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	mov	DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4, ebx
	mov	DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+8, ebp
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 839  : 
; 840  : 		debugf(NAME_Init,TEXT("Direct3D adapters detected:"));

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@ ; `string'
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 841  : 
; 842  : 		for(INT Index=0;Index<NumAdapters;Index++)

	cmp	ebp, ebx
	jle	$L125018

; 884  : 	}

	npad	2
$L125020:

; 843  : 		{
; 844  : 			D3DADAPTER_IDENTIFIER8 AdapterIdentifier;
; 845  : 
; 846  : 			D3D_CHECK(Direct3D8->GetAdapterIdentifier(Index,D3DENUM_NO_WHQL_LEVEL,&AdapterIdentifier));

	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _AdapterIdentifier$125019[esp+1100]
	push	edx
	push	2
	push	ebx
	push	eax
	call	DWORD PTR [ecx+20]
	test	eax, eax
	jge	SHORT $L136504
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	846					; 0000034eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
	jmp	SHORT $L125021
$L136504:
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L125021:

; 847  : 
; 848  : 			debugf(TEXT("Adaptor Detected: %s/%s"),appFromAnsi(AdapterIdentifier.Driver),appFromAnsi(AdapterIdentifier.Description));

	lea	edx, DWORD PTR _AdapterIdentifier$125019[esp+1612]
	push	edx
	call	esi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _AdapterIdentifier$125019[esp+1104]
	push	eax
	call	esi
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 16					; 00000010H

; 849  : 			Adapters.AddItem(AdapterIdentifier);

	push	1068					; 0000042cH
	push	1
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	edx, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	mov	edi, eax
	imul	edi, 1068				; 0000042cH
	add	edi, edx
	inc	ebx
	cmp	ebx, ebp
	mov	ecx, 267				; 0000010bH
	lea	esi, DWORD PTR _AdapterIdentifier$125019[esp+1100]
	rep movsd
	jl	$L125020
$L125018:

; 850  : 		}
; 851  : 
; 852  : 		if(!Adapters.Num())

	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	test	eax, eax
	jne	SHORT $L125028

; 853  : 			appErrorf(TEXT("No Direct3D adapters found"));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L125028:

; 854  : 
; 855  : 		// Find best Direct3D adapter.
; 856  : 		for(Index = 0;Index < Adapters.Num();Index++)

	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	xor	edi, edi
	test	eax, eax
	jle	SHORT $L125035
	mov	ebx, DWORD PTR __imp_?appStrstr@@YAPAGPBG0@Z
	xor	esi, esi

; 884  : 	}

	npad	6

; 854  : 
; 855  : 		// Find best Direct3D adapter.
; 856  : 		for(Index = 0;Index < Adapters.Num();Index++)

$L125030:

; 857  : 			if(appStrstr(appFromAnsi(Adapters(Index).Description),TEXT("Primary")))

	mov	edx, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	lea	eax, DWORD PTR [esi+edx+512]
	push	OFFSET FLAT:??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@ ; `string'
	push	eax
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	call	ebx
	add	esp, 8
	test	eax, eax
	je	SHORT $L125031

; 858  : 				BestAdapterIndex = Index;

	mov	DWORD PTR ?BestAdapterIndex@@3HA, edi	; BestAdapterIndex
$L125031:

; 854  : 
; 855  : 		// Find best Direct3D adapter.
; 856  : 		for(Index = 0;Index < Adapters.Num();Index++)

	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	inc	edi
	add	esi, 1068				; 0000042cH
	cmp	edi, eax
	jl	SHORT $L125030

; 884  : 	}

	npad	4
$L125035:

; 859  : 
; 860  : 		// Get the Direct3D caps for the best adapter.
; 861  : 		D3D_CHECK(Direct3D8->GetDeviceCaps(BestAdapterIndex,D3DDEVTYPE_HAL,&DeviceCaps8));

	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:?DeviceCaps8@@3U_D3DCAPS8@@A ; DeviceCaps8
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+52]
	test	eax, eax
	jge	SHORT $L125036
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	861					; 0000035dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L125036:

; 862  : 
; 863  : 		// Get device identifier.
; 864  : 		// szDriver, szDescription aren't guaranteed consistent (might change by mfgr, distrubutor, language, etc). Don't do any compares on these.
; 865  : 		// liDriverVersion is safe to do QWORD comparisons on.
; 866  : 		// User has changed drivers/cards iff guidDeviceIdentifier changes.
; 867  : 		DeviceIdentifier = Adapters(BestAdapterIndex);

	mov	esi, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	edi, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	imul	esi, 1068				; 0000042cH

; 868  : 
; 869  : 		debugf(NAME_Init,TEXT("DukeForever Direct3D support initializing."));

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	add	esi, edi
	mov	ecx, 267				; 0000010bH
	mov	edi, OFFSET FLAT:?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A ; DeviceIdentifier
	push	OFFSET FLAT:??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@ ; `string'
	rep movsd
	mov	eax, DWORD PTR [edx]
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 870  : 
; 871  : 		// Init pyramic-compressed scaling tables.
; 872  : 		for( INT A=0; A<128; A++ )

	xor	ebp, ebp
	xor	edx, edx
	mov	DWORD PTR _A$[esp+1100], edx
$L125044:

; 873  : 		{
; 874  : 			for( INT B=0; B<=A; B++ )

	cmp	edx, ebp
	jl	$L125045
	lea	ecx, DWORD PTR [edx+1]
	mov	eax, ecx
	imul	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 1
	mov	DWORD PTR -1076+[esp+1100], ebp
	mov	DWORD PTR -1080+[esp+1100], ebp
	lea	esi, DWORD PTR ?BScale@@3PAGA[eax]
	lea	ebx, DWORD PTR ?GScale@@3PAGA[eax]
	lea	edi, DWORD PTR ?RScale@@3PAGA[eax]
	mov	DWORD PTR -1072+[esp+1100], ecx
$L125048:

; 875  : 			{
; 876  : 				INT M=Max(A,1);

	mov	ecx, DWORD PTR _A$[esp+1100]
	cmp	ecx, 1
	jge	SHORT $L136460
	mov	ecx, 1
$L136460:

; 877  : 				RScale[PYR(A)+B] = (Min((B*0x08000)/M,0x7C00) & 0xf800);

	mov	eax, DWORD PTR -1080+[esp+1100]
	cdq
	idiv	ecx
	cmp	eax, 31744				; 00007c00H
	jle	SHORT $L136467
	mov	eax, 31744				; 00007c00H
$L136467:
	and	eax, 63488				; 0000f800H
	mov	WORD PTR [edi], ax

; 878  : 				GScale[PYR(A)+B] = (Min((B*0x00400)/M,0x03e0) & 0x07e0);

	mov	eax, ebp
	cdq
	idiv	ecx
	cmp	eax, 992				; 000003e0H
	jle	SHORT $L136475
	mov	eax, 992				; 000003e0H
$L136475:
	and	eax, 2016				; 000007e0H
	mov	WORD PTR [ebx], ax

; 879  : 				BScale[PYR(A)+B] = (Min((B*0x00020)/M,0x001f) & 0x001f);

	mov	eax, DWORD PTR -1076+[esp+1100]
	cdq
	idiv	ecx
	cmp	eax, 31					; 0000001fH
	jle	SHORT $L136483
	mov	eax, 31					; 0000001fH
$L136483:
	mov	ecx, DWORD PTR -1076+[esp+1100]
	and	eax, 31					; 0000001fH
	mov	WORD PTR [esi], ax
	add	DWORD PTR -1080+[esp+1100], 32768	; 00008000H
	mov	eax, DWORD PTR -1072+[esp+1100]
	add	ecx, 32					; 00000020H
	add	edi, 2
	add	ebx, 2
	add	esi, 2
	add	ebp, 1024				; 00000400H
	dec	eax
	mov	DWORD PTR -1076+[esp+1100], ecx
	mov	DWORD PTR -1072+[esp+1100], eax
	jne	$L125048
	mov	edx, DWORD PTR _A$[esp+1100]
	xor	ebp, ebp
$L125045:
	inc	edx
	cmp	edx, 128				; 00000080H
	mov	DWORD PTR _A$[esp+1100], edx
	jl	$L125044

; 880  : 			}
; 881  : 		}
; 882  : 
; 883  : 		D3D_CHECK(Direct3D8->GetAdapterDisplayMode(BestAdapterIndex,&OriginalDisplayMode));

	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A ; OriginalDisplayMode
	push	edx
	push	eax
	call	DWORD PTR [ecx+32]
	pop	edi
	pop	esi
	cmp	eax, ebp
	pop	ebp
	jge	SHORT $L125069
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	883					; 00000373H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L125069:
	pop	ebx

; 884  : 	}

	add	esp, 1084				; 0000043cH
	ret	0
?InitD3D@UD3DRenderDevice@@SIXXZ ENDP			; UD3DRenderDevice::InitD3D
_TEXT	ENDS
PUBLIC	?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z ; TArray<_D3DADAPTER_IDENTIFIER8>::Add
EXTRN	__imp_?appStrlen@@YAHPBG@Z:NEAR
EXTRN	__imp_?Empty@FArray@@QAEXHH@Z:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z
_TEXT	SEGMENT
_this$ = -1080
_AdapterIdentifier$136585 = -1068
_A$136601 = -1088
$T136666 = -1084
$T136667 = -1092
$T136681 = -1088
_InViewport$ = -1072
_NewX$ = 8
_NewY$ = 12
_NewColorBytes$ = 16
_Fullscreen$ = 20
?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z PROC NEAR ; UD3DRenderDevice::Init, COMDAT
; _this$ = ecx
; _InViewport$ = edx

; 887  : 	{

	sub	esp, 1092				; 00000444H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 888  : 		DescFlags=RDDESCF_Certified;

	mov	DWORD PTR [edi+64], 1

; 889  : 
; 890  : 		// Ensure that D3D has been properly initialized:
; 891  : 		InitD3D();

	mov	eax, DWORD PTR _Direct3D8
	test	eax, eax
	mov	DWORD PTR _InViewport$[esp+1104], edx
	mov	DWORD PTR _this$[esp+1104], edi
	jne	$L136611
	push	120					; 00000078H
	call	_Direct3DCreate8@4
	test	eax, eax
	mov	DWORD PTR _Direct3D8, eax
	jne	SHORT $L136579
	push	834					; 00000342H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0CL@LFAA@Direct3D8?$DNDirect3DCreate8?$CID3D_SD@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	eax, DWORD PTR _Direct3D8
	add	esp, 12					; 0000000cH
$L136579:
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	eax
	call	DWORD PTR [ecx+16]
	mov	ebp, eax
	push	ebp
	push	1068					; 0000042cH
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DI@KLIH@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAd?$AAe@ ; `string'
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH
	xor	ebx, ebx
	test	ebp, ebp
	jle	$L136584
$L136586:
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _AdapterIdentifier$136585[esp+1108]
	push	edx
	push	2
	push	ebx
	push	eax
	call	DWORD PTR [ecx+20]
	test	eax, eax
	jge	SHORT $L136698
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	846					; 0000034eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1NE@JBN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
	jmp	SHORT $L136587
$L136698:
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L136587:
	lea	edx, DWORD PTR _AdapterIdentifier$136585[esp+1620]
	push	edx
	call	esi
	add	esp, 4
	push	eax
	lea	eax, DWORD PTR _AdapterIdentifier$136585[esp+1112]
	push	eax
	call	esi
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1DA@PCNO@?$AAA?$AAd?$AAa?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAs@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 16					; 00000010H
	push	1
	push	1
	mov	ecx, OFFSET FLAT:?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	call	?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z ; TArray<_D3DADAPTER_IDENTIFIER8>::Add
	mov	edx, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	mov	edi, eax
	imul	edi, 1068				; 0000042cH
	add	edi, edx
	inc	ebx
	cmp	ebx, ebp
	mov	ecx, 267				; 0000010bH
	lea	esi, DWORD PTR _AdapterIdentifier$136585[esp+1108]
	rep movsd
	jl	$L136586
$L136584:
	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	test	eax, eax
	jne	SHORT $L136591
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1DG@FNMM@?$AAN?$AAo?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD?$AA?5?$AAa?$AAd?$AAa?$AAp?$AAt?$AAe?$AAr?$AAs@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L136591:
	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	xor	edi, edi
	test	eax, eax
	jle	SHORT $L136596
	mov	ebx, DWORD PTR __imp_?appStrstr@@YAPAGPBG0@Z
	xor	esi, esi

; 900  : 	}

	npad	6

; 889  : 
; 890  : 		// Ensure that D3D has been properly initialized:
; 891  : 		InitD3D();

$L136592:
	mov	edx, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	lea	eax, DWORD PTR [esi+edx+512]
	push	OFFSET FLAT:??_C@_1BA@DMBD@?$AAP?$AAr?$AAi?$AAm?$AAa?$AAr?$AAy?$AA?$AA@ ; `string'
	push	eax
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	call	ebx
	add	esp, 8
	test	eax, eax
	je	SHORT $L136593
	mov	DWORD PTR ?BestAdapterIndex@@3HA, edi	; BestAdapterIndex
$L136593:
	mov	eax, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A+4
	inc	edi
	add	esi, 1068				; 0000042cH
	cmp	edi, eax
	jl	SHORT $L136592

; 900  : 	}

	npad	4

; 889  : 
; 890  : 		// Ensure that D3D has been properly initialized:
; 891  : 		InitD3D();

$L136596:
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:?DeviceCaps8@@3U_D3DCAPS8@@A ; DeviceCaps8
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+52]
	test	eax, eax
	jge	SHORT $L136597
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	861					; 0000035dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MC@CDHI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136597:
	mov	esi, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	edi, DWORD PTR ?Adapters@@3V?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@A
	imul	esi, 1068				; 0000042cH
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	add	esi, edi
	mov	ecx, 267				; 0000010bH
	mov	edi, OFFSET FLAT:?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A ; DeviceIdentifier
	push	OFFSET FLAT:??_C@_1FG@EPEG@?$AAD?$AAu?$AAk?$AAe?$AAF?$AAo?$AAr?$AAe?$AAv?$AAe?$AAr?$AA?5?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD@ ; `string'
	rep movsd
	mov	eax, DWORD PTR [edx]
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH
	xor	edx, edx
	mov	DWORD PTR _A$136601[esp+1108], edx
$L136602:
	xor	ebp, ebp
	cmp	edx, ebp
	jl	$L136603
	lea	ecx, DWORD PTR [edx+1]
	mov	eax, ecx
	imul	eax, edx
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 1
	mov	DWORD PTR -1092+[esp+1108], ebp
	mov	DWORD PTR -1076+[esp+1108], ebp
	lea	esi, DWORD PTR ?BScale@@3PAGA[eax]
	lea	ebx, DWORD PTR ?GScale@@3PAGA[eax]
	lea	edi, DWORD PTR ?RScale@@3PAGA[eax]
	mov	DWORD PTR -1084+[esp+1108], ecx
$L136606:
	mov	ecx, DWORD PTR _A$136601[esp+1108]
	cmp	ecx, 1
	jge	SHORT $L136641
	mov	ecx, 1
$L136641:
	mov	eax, DWORD PTR -1076+[esp+1108]
	cdq
	idiv	ecx
	cmp	eax, 31744				; 00007c00H
	jle	SHORT $L136645
	mov	eax, 31744				; 00007c00H
$L136645:
	and	eax, 63488				; 0000f800H
	mov	WORD PTR [edi], ax
	mov	eax, ebp
	cdq
	idiv	ecx
	cmp	eax, 992				; 000003e0H
	jle	SHORT $L136649
	mov	eax, 992				; 000003e0H
$L136649:
	and	eax, 2016				; 000007e0H
	mov	WORD PTR [ebx], ax
	mov	eax, DWORD PTR -1092+[esp+1108]
	cdq
	idiv	ecx
	cmp	eax, 31					; 0000001fH
	jle	SHORT $L136653
	mov	eax, 31					; 0000001fH
$L136653:
	mov	ecx, DWORD PTR -1092+[esp+1108]
	and	eax, 31					; 0000001fH
	mov	WORD PTR [esi], ax
	add	DWORD PTR -1076+[esp+1108], 32768	; 00008000H
	mov	eax, DWORD PTR -1084+[esp+1108]
	add	ecx, 32					; 00000020H
	add	edi, 2
	add	ebx, 2
	add	esi, 2
	add	ebp, 1024				; 00000400H
	dec	eax
	mov	DWORD PTR -1092+[esp+1108], ecx
	mov	DWORD PTR -1084+[esp+1108], eax
	jne	$L136606
	mov	edx, DWORD PTR _A$136601[esp+1108]
$L136603:
	inc	edx
	cmp	edx, 128				; 00000080H
	mov	DWORD PTR _A$136601[esp+1108], edx
	jl	$L136602
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A ; OriginalDisplayMode
	push	edx
	push	eax
	call	DWORD PTR [ecx+32]
	test	eax, eax
	pop	ebp
	jge	SHORT $L136703
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	883					; 00000373H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1ME@PLCP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L136703:
	mov	edi, DWORD PTR _this$[esp+1104]
$L136611:

; 892  : 
; 893  : 		Description=appFromAnsi(DeviceIdentifier.Description);

	push	OFFSET FLAT:?DeviceIdentifier@@3U_D3DADAPTER_IDENTIFIER8@@A+512
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR [edi+52]
	lea	esi, DWORD PTR [edi+52]
	add	esp, 4
	cmp	ecx, eax
	mov	DWORD PTR $T136681[esp+1104], eax
	je	SHORT $L136679
	cmp	WORD PTR [eax], 0
	je	SHORT $L136672
	push	eax
	call	DWORD PTR __imp_?appStrlen@@YAHPBG@Z
	add	esp, 4
	inc	eax
	jmp	SHORT $L136673
$L136672:
	xor	eax, eax
$L136673:
	push	2
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+4], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L136679
	lea	edx, DWORD PTR [eax+eax]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR $T136667[esp+1104], edx
	mov	DWORD PTR $T136666[esp+1104], eax
	mov	ecx, DWORD PTR $T136667[esp+1104]
	mov	esi, DWORD PTR $T136681[esp+1104]
	mov	edi, DWORD PTR $T136666[esp+1104]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb
	mov	edi, DWORD PTR _this$[esp+1104]
$L136679:

; 894  : 
; 895  : 		// Local settings:
; 896  : 		Viewport=InViewport;

	mov	ecx, DWORD PTR _InViewport$[esp+1104]

; 897  : 		DistanceFogEnabled=UseDistanceFog=FALSE;
; 898  : 
; 899  : 		return SetRes( NewX, NewY, NewColorBytes, Fullscreen );

	mov	edx, DWORD PTR _NewColorBytes$[esp+1100]
	mov	DWORD PTR [edi+48], ecx
	mov	ecx, DWORD PTR _Fullscreen$[esp+1100]
	push	ecx
	mov	ecx, DWORD PTR _NewY$[esp+1104]
	xor	eax, eax
	push	edx
	mov	edx, DWORD PTR _NewX$[esp+1108]
	mov	DWORD PTR [edi+675196], eax
	mov	DWORD PTR [edi+675192], eax
	mov	eax, DWORD PTR [edi]
	push	ecx
	mov	ecx, edi
	call	DWORD PTR [eax+80]
	pop	edi
	pop	esi
	pop	ebx

; 900  : 	}

	add	esp, 1092				; 00000444H
	ret	16					; 00000010H
?Init@UD3DRenderDevice@@UAIHPAVUViewport@@HHHH@Z ENDP	; UD3DRenderDevice::Init
_TEXT	ENDS
PUBLIC	??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@ ; `string'
PUBLIC	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
PUBLIC	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T136897 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T136899 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L136709
$T136898 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T136899
$T136891 DD	019930520H
	DD	02H
	DD	FLAT:$T136897
	DD	01H
	DD	FLAT:$T136898
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@
_DATA	SEGMENT
??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@ DB 'E'
	DB	00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'S'
	DB	00H, 'a', 00H, 'f', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'l', 00H
	DB	'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Exit@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT
_Ramp$136878 = -1552
__$EHRec$ = -16
?Exit@UD3DRenderDevice@@UAIXXZ PROC NEAR		; UD3DRenderDevice::Exit, COMDAT
; _this$ = ecx

; 903  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L136896
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 1540				; 00000604H
	push	ebx
	push	esi
	mov	esi, ecx

; 904  : 		UnSetRes(NULL,0);  

	mov	eax, DWORD PTR [esi+675184]
	test	eax, eax
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	je	SHORT $L136770
	dec	eax
	mov	DWORD PTR [esi+675184], eax
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L136770:
	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [esi+216]
	xor	edi, edi
	test	eax, eax
	jle	SHORT $L136784
	xor	ebx, ebx

; 913  : 		}
; 914  : 	}

	npad	3

; 904  : 		UnSetRes(NULL,0);  

$L136782:
	mov	ecx, DWORD PTR [esi+212]
	add	ecx, ebx
	push	ecx
	mov	ecx, esi
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [esi+216]
	inc	edi
	add	ebx, 20					; 00000014H
	cmp	edi, eax
	jl	SHORT $L136782
$L136784:
	mov	eax, DWORD PTR [esi+19112]
	test	eax, eax
	je	SHORT $L136778
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+19112], 0
$L136778:
	lea	edi, DWORD PTR [esi+16684]
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	ebx, DWORD PTR [esi+16704]
	push	ebx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [esi+16724]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [esi+16744]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease

; 905  : 
; 906  : 		if(Viewport) Flush(0); // (Unsetres calls flush anyways)

	mov	eax, DWORD PTR [esi+48]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $L125079
	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+88]

; 911  : 			
; 912  : 			SAFETRY(SafeRelease(Direct3DDevice8));

$L136887:

; 913  : 		}
; 914  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L125079:

; 907  : 		else
; 908  : 		{
; 909  : 			CleanupVertexBuffers();

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $L136854
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi], 0
$L136854:
	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $L136860
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [ebx], 0
$L136860:
	mov	eax, DWORD PTR [esi+16724]
	test	eax, eax
	je	SHORT $L136866
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16724], 0
$L136866:
	mov	eax, DWORD PTR [esi+16744]
	test	eax, eax
	je	SHORT $L136872
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16744], 0
$L136872:

; 910  : 			RestoreGamma();

	mov	edx, DWORD PTR [esi+19124]
	test	edx, edx
	je	SHORT $L136877
	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	SHORT $L136877
	xor	eax, eax

; 913  : 		}
; 914  : 	}

	npad	4

; 910  : 			RestoreGamma();

$L136880:
	mov	ecx, eax
	shl	ecx, 8
	mov	WORD PTR _Ramp$136878[ebp+eax*2+1024], cx
	mov	WORD PTR _Ramp$136878[ebp+eax*2+512], cx
	mov	WORD PTR _Ramp$136878[ebp+eax*2], cx
	inc	eax
	cmp	eax, 256				; 00000100H
	jl	SHORT $L136880
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR _Ramp$136878[ebp]
	push	ecx
	push	1
	push	edx
	call	DWORD PTR [eax+72]
$L136877:

; 911  : 			
; 912  : 			SAFETRY(SafeRelease(Direct3DDevice8));

	mov	eax, DWORD PTR [esi+19124]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	je	$L136887
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]

; 913  : 		}
; 914  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	mov	DWORD PTR [esi+19124], 0
	pop	esi
	mov	DWORD PTR fs:__except_list, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L136709:

; 911  : 			
; 912  : 			SAFETRY(SafeRelease(Direct3DDevice8));

	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	mov	eax, $L136887
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L136896:
	mov	eax, OFFSET FLAT:$T136891
	jmp	___CxxFrameHandler
text$x	ENDS
?Exit@UD3DRenderDevice@@UAIXXZ ENDP			; UD3DRenderDevice::Exit
PUBLIC	??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@ ; `string'
PUBLIC	??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
PUBLIC	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z	; SafeRelease
PUBLIC	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z	; SafeRelease
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T137074 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T137076 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L136905
$T137075 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T137076
$T137070 DD	019930520H
	DD	02H
	DD	FLAT:$T137074
	DD	01H
	DD	FLAT:$T137075
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@
_DATA	SEGMENT
??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@ DB 'U'
	DB	00H, 'D', 00H, '3', 00H, 'D', 00H, 'R', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i'
	DB	00H, 'c', 00H, 'e', 00H, ':', 00H, ':', 00H, 'S', 00H, 'h', 00H
	DB	'u', 00H, 't', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 'A'
	DB	00H, 'f', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'E', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@
_DATA	SEGMENT
??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ DB 'S'
	DB	00H, 'h', 00H, 'u', 00H, 't', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	'R', 00H, 'e', 00H, 's', 00H, ':', 00H, ' ', 00H, 'R', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 's'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, '.', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT
_i$137036 = -24
__$EHRec$ = -16
?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ PROC NEAR	; UD3DRenderDevice::ShutdownAfterError, COMDAT
; _this$ = ecx

; 916  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L137073
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 12					; 0000000cH

; 917  : 		ErrorCalled=true;
; 918  : 		debugf(NAME_Exit, TEXT("UD3DRenderDevice::ShutdownAfterError"));

	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	push	OFFSET FLAT:??_C@_1EK@CFJJ@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?3?$AA?3?$AAS?$AAh@ ; `string'
	mov	esi, ecx
	mov	BYTE PTR _ErrorCalled, 1
	mov	ecx, DWORD PTR [eax]
	push	763					; 000002fbH
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ

; 919  : 		UnSetRes(NULL,0);

	mov	eax, DWORD PTR [esi+675184]
	xor	ebx, ebx
	add	esp, 12					; 0000000cH
	cmp	eax, ebx
	je	SHORT $L137019
	dec	eax
	mov	DWORD PTR [esi+675184], eax
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+140]
$L137019:
	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+88]
	cmp	DWORD PTR [esi+216], ebx
	mov	DWORD PTR _i$137036[ebp], ebx
	jle	SHORT $L137039
	mov	DWORD PTR -20+[ebp], ebx

; 922  : 	}

	npad	2

; 919  : 		UnSetRes(NULL,0);

$L137037:
	mov	edi, DWORD PTR [esi+212]
	mov	ecx, DWORD PTR -20+[ebp]
	mov	eax, DWORD PTR [edi+ecx]
	add	edi, ecx
	cmp	eax, ebx
	jne	SHORT $L137027
	cmp	DWORD PTR [edi+8], ebx
	jne	SHORT $L137029
	cmp	DWORD PTR [edi+4], ebx
	je	SHORT $L137038
$L137029:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L137038
$L137027:
	lea	ebx, DWORD PTR [edi+8]
	push	ebx
	call	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ; SafeRelease
	add	edi, 4
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	add	esp, 8
	mov	DWORD PTR [ebx], 0
	mov	DWORD PTR [edi], 0
	xor	ebx, ebx
$L137038:
	mov	eax, DWORD PTR _i$137036[ebp]
	mov	edx, DWORD PTR -20+[ebp]
	mov	ecx, DWORD PTR [esi+216]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$137036[ebp], eax
	mov	DWORD PTR -20+[ebp], edx
	jl	SHORT $L137037
$L137039:
	mov	eax, DWORD PTR [esi+19112]
	cmp	eax, ebx
	je	SHORT $L137033
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+19112], ebx
$L137033:
	lea	edx, DWORD PTR [esi+16684]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR [esi+16704]
	add	esp, 4
	cmp	eax, ebx
	je	SHORT $L137047
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16704], ebx
$L137047:
	mov	eax, DWORD PTR [esi+16724]
	cmp	eax, ebx
	je	SHORT $L137053
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+16724], ebx
$L137053:
	mov	eax, DWORD PTR [esi+16744]
	cmp	eax, ebx
	je	SHORT $L137017
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+16744], ebx
$L137017:

; 920  : 
; 921  : 		SAFETRY(SafeRelease(Direct3DDevice8));

	mov	eax, DWORD PTR [esi+19124]
	cmp	eax, ebx
	mov	DWORD PTR __$EHRec$[ebp+12], ebx
	je	SHORT $L137066
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+19124], ebx
$L137066:

; 922  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:__except_list, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$L136905:

; 920  : 
; 921  : 		SAFETRY(SafeRelease(Direct3DDevice8));

	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1FE@FDHJ@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAS?$AAa?$AAf?$AAe?$AAR?$AAe?$AAl@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	mov	eax, $L137066
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L137073:
	mov	eax, OFFSET FLAT:$T137070
	jmp	___CxxFrameHandler
text$x	ENDS
?ShutdownAfterError@UD3DRenderDevice@@UAEXXZ ENDP	; UD3DRenderDevice::ShutdownAfterError
PUBLIC	?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z ; UD3DRenderDevice::UpdateGamma
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3f70101010101010
PUBLIC	__real@40efffe000000000
EXTRN	__imp_?GIsEditor@@3HA:DWORD
EXTRN	__CIpow:NEAR
EXTRN	__ftol:NEAR
;	COMDAT __real@00000000
; File ..\..\Core\Inc\UnTemplate.h
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f70101010101010
CONST	SEGMENT
__real@3f70101010101010 DQ 03f70101010101010r	; 0.00392157
CONST	ENDS
;	COMDAT __real@40efffe000000000
CONST	SEGMENT
__real@40efffe000000000 DQ 040efffe000000000r	; 65535
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z
_TEXT	SEGMENT
_Viewport$ = 8
_Ramp$125101 = -1536
_x$125102 = -1548
?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z PROC NEAR ; UD3DRenderDevice::UpdateGamma, COMDAT
; _this$ = ecx

; 926  : 		UBOOL UseWindowedGamma = UseEditorGammaCorrection && GIsEditor;

	mov	eax, DWORD PTR [ecx+19132]
	sub	esp, 1548				; 0000060cH
	test	eax, eax
	je	SHORT $L137081
	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [eax], 0
	je	SHORT $L137081
	mov	eax, 1
	jmp	SHORT $L137082
$L137081:
	xor	eax, eax
$L137082:
	push	edi

; 927  : 
; 928  : 		if( Direct3DDevice8 && (ViewportFullscreen||UseWindowedGamma) && (DeviceCaps8.Caps2 & D3DCAPS2_FULLSCREENGAMMA) )

	mov	edi, DWORD PTR [ecx+19124]
	test	edi, edi
	je	$L125097
	mov	edx, DWORD PTR [ecx+16776]
	test	edx, edx
	jne	SHORT $L125098
	test	eax, eax
	je	$L125097
$L125098:
	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	$L125097

; 929  : 		{
; 930  : 			FLOAT Brightness = Viewport->GetOuterUClient()->Brightness;
; 931  : 
; 932  : 			Brightness*=2;

	mov	ecx, DWORD PTR _Viewport$[esp+1548]
	mov	edx, DWORD PTR [ecx+24]
	fld	DWORD PTR [edx+112]
	fadd	ST(0), ST(0)

; 933  : 			if(Brightness<=0) Brightness=0.01f;

	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L125100
	fstp	ST(0)
	fld	DWORD PTR __real@3c23d70a
$L125100:
	fdivr	QWORD PTR __real@3ff0000000000000
	push	esi

; 934  : 			D3DGAMMARAMP Ramp;
; 935  : 			for( INT x=0; x<256; x++ )

	xor	esi, esi
	mov	DWORD PTR _x$125102[esp+1556], esi
	fstp	QWORD PTR -1544+[esp+1556]

; 940  : 		}
; 941  : 	}

	npad	7

; 934  : 			D3DGAMMARAMP Ramp;
; 935  : 			for( INT x=0; x<256; x++ )

$L125103:

; 936  : 			{
; 937  : 					Ramp.red[x] = Ramp.green[x] = Ramp.blue[x] = Clamp<INT>(appPow(x/255.0,1.0/Brightness)*65535.0,0,65535);

	fild	DWORD PTR _x$125102[esp+1556]
	fmul	QWORD PTR __real@3f70101010101010
	fld	QWORD PTR -1544+[esp+1556]
	call	__CIpow
	fmul	QWORD PTR __real@40efffe000000000
	call	__ftol
	test	eax, eax
	jge	SHORT $L137104
	xor	eax, eax
	jmp	SHORT $L137103
$L137104:
	cmp	eax, 65535				; 0000ffffH
	jl	SHORT $L137103
	mov	eax, 65535				; 0000ffffH
$L137103:
	mov	WORD PTR _Ramp$125101[esp+esi*2+2580], ax
	mov	WORD PTR _Ramp$125101[esp+esi*2+2068], ax
	mov	WORD PTR _Ramp$125101[esp+esi*2+1556], ax
	inc	esi
	cmp	esi, 256				; 00000100H
	mov	DWORD PTR _x$125102[esp+1556], esi
	jl	SHORT $L125103

; 938  : 			}
; 939  : 			Direct3DDevice8->SetGammaRamp(D3DSGR_CALIBRATE, &Ramp);

	mov	eax, DWORD PTR [edi]
	lea	ecx, DWORD PTR _Ramp$125101[esp+1556]
	push	ecx
	push	1
	push	edi
	call	DWORD PTR [eax+72]
	pop	esi
$L125097:
	pop	edi

; 940  : 		}
; 941  : 	}

	add	esp, 1548				; 0000060cH
	ret	4
?UpdateGamma@UD3DRenderDevice@@QAEXPAVUViewport@@@Z ENDP ; UD3DRenderDevice::UpdateGamma
_TEXT	ENDS
PUBLIC	?RestoreGamma@UD3DRenderDevice@@QAEXXZ		; UD3DRenderDevice::RestoreGamma
; Function compile flags: /Ogty
;	COMDAT ?RestoreGamma@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
_Ramp$125114 = -1536
?RestoreGamma@UD3DRenderDevice@@QAEXXZ PROC NEAR	; UD3DRenderDevice::RestoreGamma, COMDAT
; _this$ = ecx

; 945  : 		if( Direct3DDevice8 && (DeviceCaps8.Caps2 & D3DCAPS2_FULLSCREENGAMMA) )

	mov	edx, DWORD PTR [ecx+19124]
	sub	esp, 1536				; 00000600H
	test	edx, edx
	je	SHORT $L125113
	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	SHORT $L125113

; 946  : 		{
; 947  : 			D3DGAMMARAMP Ramp;
; 948  : 			for( INT x=0; x<256; x++ )

	xor	eax, eax

; 951  : 		}
; 952  : 	}

	npad	2
$L125116:

; 949  : 				Ramp.red[x] = Ramp.green[x] = Ramp.blue[x] = x << 8;

	mov	ecx, eax
	shl	ecx, 8
	mov	WORD PTR _Ramp$125114[esp+eax*2+2560], cx
	mov	WORD PTR _Ramp$125114[esp+eax*2+2048], cx
	mov	WORD PTR _Ramp$125114[esp+eax*2+1536], cx
	inc	eax
	cmp	eax, 256				; 00000100H
	jl	SHORT $L125116

; 950  : 			Direct3DDevice8->SetGammaRamp(D3DSGR_CALIBRATE, &Ramp);		

	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR _Ramp$125114[esp+1536]
	push	ecx
	push	1
	push	edx
	call	DWORD PTR [eax+72]
$L125113:

; 951  : 		}
; 952  : 	}

	add	esp, 1536				; 00000600H
	ret	0
?RestoreGamma@UD3DRenderDevice@@QAEXXZ ENDP		; UD3DRenderDevice::RestoreGamma
_TEXT	ENDS
PUBLIC	??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ ; `string'
;	COMDAT ??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ DB '('
	DB	'dwStage>=0)&&(dwStage<ARRAY_COUNT(Stages))', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'S', 00H, 'a', 00H, 'f', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, '(', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-'
	DB	00H, '>', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, '8', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Flush@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT
_AllowPrecache$ = -1548
_Ramp$125153 = -1536
_x$125155 = -1552
?Flush@UD3DRenderDevice@@UAIXH@Z PROC NEAR		; UD3DRenderDevice::Flush, COMDAT
; _this$ = ecx
; _AllowPrecache$ = edx

; 955  : 	{

	sub	esp, 1552				; 00000610H
	push	ebx
	mov	ebx, ecx

; 956  : 		if( Direct3DDevice8 )

	mov	eax, DWORD PTR [ebx+19124]
	test	eax, eax
	mov	DWORD PTR _AllowPrecache$[esp+1556], edx
	je	$L125121

; 957  : 		{
; 958  : 			for( DWORD i=0; i<DeviceCaps8.MaxSimultaneousTextures; i++ )

	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+152
	push	ebp
	push	esi
	xor	esi, esi
	test	eax, eax
	push	edi
	jbe	SHORT $L137180
	lea	ebp, DWORD PTR [ebx+16624]
	lea	edi, DWORD PTR [ebx+19712]
$L125123:

; 959  : 			{
; 960  : 				SetTextureNULL(i);

	cmp	esi, 8
	jb	SHORT $L137135
	push	4808					; 000012c8H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L137135:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	esi
	push	eax
	call	DWORD PTR [ecx+244]
	mov	DWORD PTR [edi], ebp
	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+152
	inc	esi
	add	edi, 4
	cmp	esi, eax
	jb	SHORT $L125123
$L137180:

; 961  : 			}
; 962  : 
; 963  : 			while(CachedTextures)

	mov	esi, DWORD PTR [ebx+236]
	test	esi, esi
	je	$L125128
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebp, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z

; 1008 : 	}

	npad	3

; 961  : 			}
; 962  : 
; 963  : 			while(CachedTextures)

$L125127:

; 964  : 			{
; 965  : 				FTexInfo*	TexInfo = CachedTextures;
; 966  : 
; 967  : 				CachedTextures = TexInfo->NextTexture;

	mov	edx, DWORD PTR [esi+52]
	mov	DWORD PTR [ebx+236], edx

; 968  : 
; 969  : 				TexInfo->Filler->PixelFormat->ActiveRAM=0; 

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [eax+4]
	xor	ecx, ecx
	mov	DWORD PTR [edx+36], ecx

; 970  : 				TexInfo->Filler->PixelFormat->BinnedRAM=0; 

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+24], ecx

; 971  : 				TexInfo->Filler->PixelFormat->Active=0; 

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+32], ecx

; 972  : 				TexInfo->Filler->PixelFormat->Binned=0; 

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+20], ecx

; 973  : 				if(TexInfo->Texture8)

	mov	eax, DWORD PTR [esi]
	cmp	eax, ecx
	je	SHORT $L125133

; 974  : 					D3D_CHECK(SafeRelease(TexInfo->Texture8));

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	test	eax, eax
	mov	DWORD PTR [esi], 0
	jge	SHORT $L125133
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	974					; 000003ceH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebp
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HC@JJLK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L125133:

; 975  : 
; 976  : 				SafeDelete(TexInfo);

	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [edx+8]
	mov	esi, DWORD PTR [ebx+236]
	test	esi, esi
	jne	$L125127
$L125128:

; 977  : 			};
; 978  : 
; 979  : 			PaletteIndex = 0;

	xor	esi, esi

; 980  : 
; 981  : 			for( i=0; i<ARRAY_COUNT(TextureHash); i++ )
; 982  : 				TextureHash[i]=NULL;

	xor	eax, eax
	lea	edi, DWORD PTR [ebx+240]
	mov	ecx, 4096				; 00001000H
	mov	DWORD PTR [ebx+675160], esi
	rep stosd

; 983  : 
; 984  : 			UBOOL UseWindowedGamma = UseEditorGammaCorrection && GIsEditor;

	cmp	DWORD PTR [ebx+19132], esi
	je	SHORT $L137131
	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [eax], esi
	je	SHORT $L137131
	mov	eax, 1
	jmp	SHORT $L137132
$L137131:
	xor	eax, eax
$L137132:

; 985  : 
; 986  : 			if( (ViewportFullscreen||UseWindowedGamma) && DeviceCaps8.Caps2 & D3DCAPS2_FULLSCREENGAMMA)

	cmp	DWORD PTR [ebx+16776], esi
	jne	SHORT $L125151
	cmp	eax, esi
	je	$L125150
$L125151:
	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	$L125150

; 987  : 			{
; 988  : 				FLOAT Brightness = Viewport->GetOuterUClient()->Brightness;
; 989  : 
; 990  : 				D3DGAMMARAMP Ramp;
; 991  : 				Brightness*=2;

	mov	ecx, DWORD PTR [ebx+48]
	mov	edx, DWORD PTR [ecx+24]
	fld	DWORD PTR [edx+112]
	fadd	ST(0), ST(0)

; 992  : 			    if(Brightness<=0) Brightness=0.01;

	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L125154
	fstp	ST(0)
	fld	DWORD PTR __real@3c23d70a
$L125154:
	fdivr	QWORD PTR __real@3ff0000000000000

; 993  : 
; 994  : 				for( INT x=0; x<256; x++ )

	mov	DWORD PTR _x$125155[esp+1568], esi
	fstp	QWORD PTR -1544+[esp+1568]

; 1008 : 	}

	npad	6

; 993  : 
; 994  : 				for( INT x=0; x<256; x++ )

$L125156:

; 995  : 				{
; 996  : 						Ramp.red[x] = Ramp.green[x] = Ramp.blue[x] = Clamp<INT>(appPow(x/255.0,1.0/Brightness)*65535.0,0,65535);

	fild	DWORD PTR _x$125155[esp+1568]
	fmul	QWORD PTR __real@3f70101010101010
	fld	QWORD PTR -1544+[esp+1568]
	call	__CIpow
	fmul	QWORD PTR __real@40efffe000000000
	call	__ftol
	test	eax, eax
	jge	SHORT $L137175
	xor	eax, eax
	jmp	SHORT $L137174
$L137175:
	cmp	eax, 65535				; 0000ffffH
	jl	SHORT $L137174
	mov	eax, 65535				; 0000ffffH
$L137174:
	mov	WORD PTR _Ramp$125153[esp+esi*2+2592], ax
	mov	WORD PTR _Ramp$125153[esp+esi*2+2080], ax
	mov	WORD PTR _Ramp$125153[esp+esi*2+1568], ax
	inc	esi
	cmp	esi, 256				; 00000100H
	mov	DWORD PTR _x$125155[esp+1568], esi
	jl	SHORT $L125156

; 997  : 
; 998  : 				}
; 999  : 				Direct3DDevice8->SetGammaRamp(D3DSGR_CALIBRATE, &Ramp);				

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _Ramp$125153[esp+1568]
	push	edx
	push	1
	push	eax
	call	DWORD PTR [ecx+72]
$L125150:

; 1000 : 			}
; 1001 : 
; 1002 : 			Direct3DDevice8->SetStreamSource(0,NULL,0);

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+332]

; 1003 : 			Direct3DDevice8->SetIndices(NULL,0);

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+340]
	pop	edi
	pop	esi
	pop	ebp
$L125121:

; 1004 : 		}
; 1005 : 
; 1006 : 		if( AllowPrecache )

	mov	eax, DWORD PTR _AllowPrecache$[esp+1556]
	test	eax, eax
	je	SHORT $L125164

; 1007 : 			PrecacheOnFlip = UsePrecache;

	mov	eax, DWORD PTR [ebx+19152]
	mov	DWORD PTR [ebx+100], eax
$L125164:
	pop	ebx

; 1008 : 	}

	add	esp, 1552				; 00000610H
	ret	0
?Flush@UD3DRenderDevice@@UAIXH@Z ENDP			; UD3DRenderDevice::Flush
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@3f81df46a2529d39
EXTRN	_D3DXMatrixMultiply@12:NEAR
EXTRN	_D3DXMatrixInverse@12:NEAR
;	COMDAT __real@3f800000
; File ..\..\Core\Inc\UnFile.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f81df46a2529d39
CONST	SEGMENT
__real@3f81df46a2529d39 DQ 03f81df46a2529d39r	; 0.00872665
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT
_View$ = -64
_wFar$125176 = -72
_NegativeMatrix$125178 = -64
?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::PreRender, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 1011 : 	{

	sub	esp, 72					; 00000048H
	push	ebx
	mov	ebx, ecx
	push	ebp
	mov	ebp, edx
	push	esi
	push	edi

; 1012 : 		// Setup view matrix.
; 1013 : 		memset( &ViewMatrix, 0, sizeof(ViewMatrix));

	lea	esi, DWORD PTR [ebx+19260]
	xor	eax, eax
	mov	ecx, 16					; 00000010H
	mov	edi, esi
	rep stosd

; 1014 : 		ViewMatrix._11 = Frame->Coords.XAxis.X;

	mov	eax, DWORD PTR [ebp+64]
	mov	DWORD PTR [esi], eax

; 1015 : 		ViewMatrix._12 = -Frame->Coords.YAxis.X;
; 1016 : 		ViewMatrix._13 = Frame->Coords.ZAxis.X;
; 1017 : 		ViewMatrix._21 = Frame->Coords.XAxis.Y;
; 1018 : 		ViewMatrix._22 = -Frame->Coords.YAxis.Y;
; 1019 : 		ViewMatrix._23 = Frame->Coords.ZAxis.Y;
; 1020 : 		ViewMatrix._31 = Frame->Coords.XAxis.Z;
; 1021 : 		ViewMatrix._32 = -Frame->Coords.YAxis.Z;
; 1022 : 		ViewMatrix._33 = Frame->Coords.ZAxis.Z;
; 1023 : 		ViewMatrix._41 = Frame->Coords.XAxis | -Frame->Coords.Origin;

	lea	edi, DWORD PTR [ebp+52]
	fld	DWORD PTR [ebp+76]

; 1024 : 		ViewMatrix._42 = Frame->Coords.YAxis | Frame->Coords.Origin;
; 1025 : 		ViewMatrix._43 = Frame->Coords.ZAxis | -Frame->Coords.Origin;
; 1026 : 		ViewMatrix._44 = 1;
; 1027 : 
; 1028 : 		// Setup inverse view matrix.
; 1029 : 		D3DXMatrixInverse( &InvViewMatrix, NULL, &ViewMatrix );

	push	esi
	fchs
	push	0
	fstp	DWORD PTR [ebx+19264]
	mov	ecx, DWORD PTR [ebp+88]
	mov	DWORD PTR [ebx+19268], ecx
	mov	edx, DWORD PTR [ebp+68]
	mov	DWORD PTR [ebx+19276], edx
	fld	DWORD PTR [ebp+80]
	fchs
	fstp	DWORD PTR [ebx+19280]
	mov	eax, DWORD PTR [ebp+92]
	mov	DWORD PTR [ebx+19284], eax
	mov	ecx, DWORD PTR [ebp+72]
	mov	DWORD PTR [ebx+19292], ecx
	fld	DWORD PTR [ebp+84]
	fchs
	lea	eax, DWORD PTR [ebx+19388]
	fstp	DWORD PTR [ebx+19296]
	mov	edx, DWORD PTR [ebp+96]
	mov	DWORD PTR [ebx+19300], edx
	fld	DWORD PTR [edi]
	fchs
	fld	DWORD PTR [edi+4]
	fchs
	fld	DWORD PTR [edi+8]
	fchs
	fmul	DWORD PTR [ebp+72]
	fxch	ST(1)
	fmul	DWORD PTR [ebp+68]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	DWORD PTR [ebp+64]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19308]
	fld	DWORD PTR [edi+8]
	fmul	DWORD PTR [ebp+84]
	fld	DWORD PTR [edi+4]
	fmul	DWORD PTR [ebp+80]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [ebp+76]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19312]
	fld	DWORD PTR [edi]
	fchs
	fld	DWORD PTR [edi+4]
	fchs
	fld	DWORD PTR [edi+8]
	fchs
	fmul	DWORD PTR [ebp+96]
	fxch	ST(1)
	fmul	DWORD PTR [ebp+92]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	DWORD PTR [ebp+88]
	mov	DWORD PTR [ebx+19320], 1065353216	; 3f800000H
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19316]
	push	eax
	call	_D3DXMatrixInverse@12

; 1030 : 		Direct3DDevice8->SetTransform( D3DTS_VIEW, &ViewMatrix );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	2
	push	eax
	call	DWORD PTR [ecx+148]

; 1031 : 
; 1032 : 		// ONLY X-movement seems correct...
; 1033 : 		// _Not_ just transpose of the Viewmatrix above ???
; 1034 : 		// Alternative arrangement for vertex shader.
; 1035 : 		// just output Y and Z reversed works!!!
; 1036 : 		FCoords View = Frame->Coords;

	mov	esi, edi
	mov	ecx, 12					; 0000000cH
	lea	edi, DWORD PTR _View$[esp+88]
	rep movsd

; 1037 : 		ViewMatrix4x3._11 =  View.XAxis.X;
; 1038 : 		ViewMatrix4x3._12 =  View.XAxis.Y;
; 1039 : 		ViewMatrix4x3._13 =  View.XAxis.Z;
; 1040 : 		ViewMatrix4x3._14 = -View.XAxis | View.Origin;

	fld	DWORD PTR _View$[esp+100]
	fchs
	fld	DWORD PTR _View$[esp+104]
	fchs
	fld	DWORD PTR _View$[esp+108]
	fchs
	fld	DWORD PTR _View$[esp+96]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _View$[esp+92]
	fmul	ST(0), ST(3)
	mov	eax, DWORD PTR _View$[esp+100]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _View$[esp+104]
	fxch	ST(3)
	lea	edx, DWORD PTR [ebx+19324]
	fmul	DWORD PTR _View$[esp+88]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _View$[esp+108]
	mov	DWORD PTR [ebx+19332], eax
	faddp	ST(3), ST(0)

; 1041 : 		ViewMatrix4x3._21 = -View.YAxis.X;
; 1042 : 		ViewMatrix4x3._22 = -View.YAxis.Y;
; 1043 : 		ViewMatrix4x3._23 = -View.YAxis.Z;
; 1044 : 		ViewMatrix4x3._24 =  View.YAxis | View.Origin;
; 1045 : 		ViewMatrix4x3._31 = -View.ZAxis.X;
; 1046 : 		ViewMatrix4x3._32 = -View.ZAxis.Y;
; 1047 : 		ViewMatrix4x3._33 = -View.ZAxis.Z;
; 1048 : 		ViewMatrix4x3._34 =  View.ZAxis | View.Origin;
; 1049 : 		ViewMatrix4x3._41 = 0.0f;

	xor	eax, eax
	fxch	ST(2)
	mov	DWORD PTR [ebx+19328], ecx
	fstp	DWORD PTR [ebx+19336]
	fstp	ST(1)
	mov	DWORD PTR [ebx+19372], eax
	fstp	ST(0)

; 1050 : 		ViewMatrix4x3._42 = 0.0f;

	mov	DWORD PTR [ebx+19376], eax
	fld	DWORD PTR _View$[esp+112]

; 1051 : 		ViewMatrix4x3._43 = 0.0f;

	mov	DWORD PTR [ebx+19380], eax
	fchs

; 1052 : 		ViewMatrix4x3._44 = 1.0f;

	mov	DWORD PTR [ebx+19384], 1065353216	; 3f800000H
	fstp	DWORD PTR [ebx+19340]
	fld	DWORD PTR _View$[esp+116]
	fchs
	fstp	DWORD PTR [ebx+19344]
	fld	DWORD PTR _View$[esp+120]
	fchs
	fstp	DWORD PTR [ebx+19348]
	fld	DWORD PTR _View$[esp+96]
	fmul	DWORD PTR _View$[esp+120]
	fld	DWORD PTR _View$[esp+92]
	fmul	DWORD PTR _View$[esp+116]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _View$[esp+88]
	fmul	DWORD PTR _View$[esp+112]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19352]
	fld	DWORD PTR _View$[esp+124]
	fchs
	fstp	DWORD PTR [ebx+19356]
	fld	DWORD PTR _View$[esp+128]
	fchs
	fstp	DWORD PTR [ebx+19360]
	fld	DWORD PTR _View$[esp+132]
	fchs
	fstp	DWORD PTR [ebx+19364]
	fld	DWORD PTR _View$[esp+96]
	fmul	DWORD PTR _View$[esp+132]
	fld	DWORD PTR _View$[esp+92]
	fmul	DWORD PTR _View$[esp+128]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _View$[esp+88]
	fmul	DWORD PTR _View$[esp+124]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [ebx+19368]

; 1053 : 
; 1054 : 		if(Frame->Viewport->IsOrtho())

	mov	eax, DWORD PTR [ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR [ecx+7504]
	cmp	eax, 13					; 0000000dH
	je	SHORT $L137256
	cmp	eax, 14					; 0000000eH
	je	SHORT $L137256
	cmp	eax, 15					; 0000000fH
	jne	SHORT $L125171
$L137256:

; 1055 : 		{
; 1056 : 			FLOAT	Width = Frame->Zoom * Frame->FX2,

	fld	DWORD PTR [ebp+200]

; 1057 : 					Height = Frame->Zoom * Frame->FY2;
; 1058 : 
; 1059 : 			appMemzero( &ProjectionMatrix, sizeof(ProjectionMatrix));

	lea	esi, DWORD PTR [ebx+19452]
	fmul	DWORD PTR [ebp+208]
	mov	ecx, 16					; 00000010H
	fld	DWORD PTR [ebp+204]
	xor	eax, eax
	fmul	DWORD PTR [ebp+208]
	mov	edi, esi

; 1060 : 			ProjectionMatrix._11 = 1.0f / Width;

	fld	DWORD PTR __real@3f800000
	rep stosd
	fdiv	ST(0), ST(2)

; 1061 : 			ProjectionMatrix._22 = 1.0f / Height;
; 1062 : 			ProjectionMatrix._44 = 1.0f;

	mov	DWORD PTR [ebx+19512], 1065353216	; 3f800000H
	fstp	DWORD PTR [esi]
	fld	DWORD PTR __real@3f800000
	fdiv	ST(0), ST(1)
	fstp	DWORD PTR [ebx+19472]
	fstp	ST(0)
	fstp	ST(0)

; 1063 : 		}
; 1064 : 		else

	jmp	$L125174
$L125171:

; 1065 : 		{
; 1066 : 			// Setup projection matrix.
; 1067 : 			appMemzero( &ProjectionMatrix, sizeof(ProjectionMatrix));

	xor	eax, eax
	lea	esi, DWORD PTR [ebx+19452]
	mov	ecx, 16					; 00000010H
	mov	edi, esi
	rep stosd

; 1068 : 			FLOAT wNear=NEAR_CLIP, wFar=FAR_CLIP;

	fld	DWORD PTR _NEAR_CLIP
	mov	eax, DWORD PTR _FAR_CLIP

; 1069 : 			FLOAT FOV = Frame->Viewport->Actor->FovAngle * PI/360.f;

	mov	ecx, DWORD PTR [ebp]
	mov	DWORD PTR _wFar$125176[esp+88], eax
	mov	eax, DWORD PTR [ecx+48]

; 1070 : 			ProjectionMatrix._11 = 1/appTan( FOV );
; 1071 : 			ProjectionMatrix._22 = Frame->FX / appTan( FOV ) / Frame->FY;
; 1072 : 			ProjectionMatrix._33 = wFar / (wFar - wNear);
; 1073 : 			ProjectionMatrix._34 = 1.f;
; 1074 : 			ProjectionMatrix._43 = -ProjectionMatrix._33 * wNear;
; 1075 : 			ProjectionMatrix._44 = 0.f;
; 1076 : 
; 1077 : 			// Hacked part-negative matrix for skeletal -> FIX at skeletal shader(viewmatrix?) level instead!
; 1078 : 			D3DXMATRIX NegativeMatrix;
; 1079 : 			appMemzero( &NegativeMatrix, sizeof(NegativeMatrix) );

	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR _NegativeMatrix$125178[esp+88]
	fld	DWORD PTR [eax+7240]
	xor	eax, eax
	fmul	QWORD PTR __real@3f81df46a2529d39
	rep stosd
	fptan

; 1080 : 			NegativeMatrix._11 = 1/appTan( FOV );
; 1081 : 			NegativeMatrix._22 = Frame->FX / appTan( FOV ) / Frame->FY;
; 1082 : 			NegativeMatrix._33 =- wFar / (wFar - wNear);
; 1083 : 			NegativeMatrix._34 =- 1.f;
; 1084 : 			NegativeMatrix._43 =- -NegativeMatrix._33 * wNear;
; 1085 : 			NegativeMatrix._44 =- 0.f;
; 1086 : 			D3DXMatrixMultiply(&ProjViewMatrix, &NegativeMatrix, &ViewMatrix4x3);

	push	edx
	lea	edx, DWORD PTR _NegativeMatrix$125178[esp+92]
	mov	DWORD PTR _NegativeMatrix$125178[esp+152], eax
	push	edx
	lea	eax, DWORD PTR [ebx+19516]
	push	eax
	mov	DWORD PTR _NegativeMatrix$125178[esp+144], -1082130432 ; bf800000H
	fstp	ST(0)
	fld	QWORD PTR __real@3ff0000000000000
	fdiv	ST(0), ST(1)
	fst	DWORD PTR -68+[esp+100]
	fstp	DWORD PTR [esi]
	mov	ecx, DWORD PTR -68+[esp+100]
	mov	DWORD PTR _NegativeMatrix$125178[esp+100], ecx
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR [ebp+184]
	fmul	ST(0), ST(1)
	fdiv	DWORD PTR [ebp+188]
	mov	DWORD PTR [ebx+19496], 1065353216	; 3f800000H
	mov	DWORD PTR [ebx+19512], 0
	fstp	DWORD PTR [ebx+19472]
	fld	DWORD PTR _wFar$125176[esp+100]
	fsub	ST(0), ST(2)
	fdivr	DWORD PTR _wFar$125176[esp+100]
	fst	DWORD PTR [ebx+19492]
	fld	ST(0)
	fmul	ST(0), ST(3)
	fchs
	fstp	DWORD PTR [ebx+19508]
	fld	DWORD PTR [ebp+184]
	fmul	ST(0), ST(2)
	fdiv	DWORD PTR [ebp+188]
	fstp	DWORD PTR _NegativeMatrix$125178[esp+120]
	fchs
	fstp	DWORD PTR _NegativeMatrix$125178[esp+140]
	fstp	ST(0)
	fld	DWORD PTR _NegativeMatrix$125178[esp+140]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _NegativeMatrix$125178[esp+156]
	fstp	ST(0)
	call	_D3DXMatrixMultiply@12
$L125174:

; 1087 : 		}
; 1088 : 
; 1089 : 		Direct3DDevice8->SetTransform( D3DTS_PROJECTION, &ProjectionMatrix );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	3
	push	eax
	call	DWORD PTR [ecx+148]

; 1090 : 
; 1091 : 		// disable hardware lighting mode
; 1092 : 		Direct3DDevice8->SetRenderState( D3DRS_LIGHTING, 0 ); 

	mov	ebx, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [ebx]
	push	0
	push	137					; 00000089H
	push	ebx
	call	DWORD PTR [edx+200]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 1093 : 	}

	add	esp, 72					; 00000048H
	ret	0
?PreRender@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ENDP	; UD3DRenderDevice::PreRender
_TEXT	ENDS
PUBLIC	__real@442f0000
PUBLIC	??_C@_0BA@FEJO@Direct3DDevice8?$AA@		; `string'
PUBLIC	??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@ ; `string'
PUBLIC	??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@ ; `string'
PUBLIC	??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
PUBLIC	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
PUBLIC	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
PUBLIC	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z	; UD3DRenderDevice::SetAlphaBlendEnable
PUBLIC	?SetBlending@UD3DRenderDevice@@QAIXKK@Z		; UD3DRenderDevice::SetBlending
PUBLIC	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z	; UD3DRenderDevice::SetDistanceFog
EXTRN	__imp_??0FColor@@QAE@ABVFPlane@@@Z:NEAR
;	COMDAT __real@442f0000
CONST	SEGMENT
__real@442f0000 DD 0442f0000r			; 700
CONST	ENDS
;	COMDAT ??_C@_0BA@FEJO@Direct3DDevice8?$AA@
_DATA	SEGMENT
??_C@_0BA@FEJO@Direct3DDevice8?$AA@ DB 'Direct3DDevice8', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@
_DATA	SEGMENT
??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@ DB 'T'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'C', 00H, 'o', 00H, 'o', 00H
	DB	'p', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'v'
	DB	00H, 'e', 00H, 'L', 00H, 'e', 00H, 'v', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
_DATA	SEGMENT
??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ DB 'R'
	DB	00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@
_DATA	SEGMENT
??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H
	DB	'e', 00H, '.', 00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@
_DATA	SEGMENT
??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@ DB 'B'
	DB	00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'S', 00H, 'c', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '(', 00H, '%', 00H
	DB	's', 00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z
_TEXT	SEGMENT
_FogColor$ = 8
_FogDensity$ = 12
_FogDistance$ = -4
_InFlashScale$ = 16
_InFlashFog$ = 32
_ScreenClear$ = 48
_InLockFlags$ = 64
_InHitData$ = 68
_InHitSize$ = 72
$T137299 = 64
_Xor$137308 = -12
_D$137370 = 8
_FailCount$ = -8
_BackBuffer$125216 = 12
_Rect$125217 = 16
?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z PROC NEAR ; UD3DRenderDevice::Lock, COMDAT
; _this$ = ecx
; _FogDistance$ = edx

; 1096 : 	{

	sub	esp, 12					; 0000000cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi

; 1097 : 		LockCount++; 

	mov	edi, DWORD PTR [esi+675188]
	mov	DWORD PTR _FogDistance$[esp+28], edx

; 1098 : 		if(!GIsEditor) 
; 1099 : 		{
; 1100 : 			//check(LockCount==1);
; 1101 : 		}
; 1102 : 
; 1103 : 		INT FailCount=0;
; 1104 : 		FrameCounter++;

	mov	edx, DWORD PTR [esi+675104]
	inc	edi
	xor	ebp, ebp
	inc	edx
	mov	DWORD PTR [esi+675188], edi
	mov	DWORD PTR [esi+675104], edx

; 1105 : 
; 1106 : 		// NJS: Deal with multi-viewport strangeness in the editor:
; 1107 : 		if(GIsEditor)

	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [eax], ebp
	mov	DWORD PTR _FailCount$[esp+28], ebp
	je	$L137359

; 1108 : 		{			
; 1109 : 			ZBias=-1.f;	// Set ZBias to an invalid state to force it to be reset next time SetZBias is called
; 1110 : 			AlphaBlendEnable=-1;
; 1111 : 			// BeginSceneCount=0;	// Should match up reguardless
; 1112 : 			SrcBlend=(D3DBLEND)0; // Setting Src Blending to an invalid state will force it to be reset next time SetSrcBlend is called.
; 1113 : 			DstBlend=(D3DBLEND)0; // Setting Dst Blending to an invalid state will force it to be reset next time SetSrcBlend is called.
; 1114 : 			SetBlending(0xFFFFFFFF,0xFFFFFFFF);	// NJS: FIXME

	mov	eax, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	eax, -1073741827			; bffffffdH
	or	edi, -1
	test	ah, 1
	mov	DWORD PTR [esi+675164], -1082130432	; bf800000H
	mov	DWORD PTR [esi+675176], edi
	mov	DWORD PTR [esi+675168], ebp
	mov	DWORD PTR [esi+675172], ebp
	mov	DWORD PTR _Xor$137308[esp+28], eax
	not	ebx
	je	SHORT $L137310
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$137308[esp+28]
$L137310:
	test	bl, 2
	je	SHORT $L137311
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$137308[esp+28]
$L137311:
	test	bl, 8
	je	SHORT $L137312
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$137308[esp+28]
$L137312:
	test	eax, -754972601				; d3000847H
	jne	SHORT $L137314
	test	bl, 113					; 00000071H
	je	$L137350
$L137314:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L137316
	test	bl, 113					; 00000071H
	je	SHORT $L137336
$L137316:
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$137308[esp+28]
$L137336:
	test	al, 1
	je	SHORT $L137337
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$137308[esp+28]
$L137337:
	test	eax, eax
	jns	SHORT $L137339
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$137308[esp+28]
$L137339:
	test	al, 2
	je	SHORT $L137342
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$137308[esp+28]
$L137342:
	test	ah, 8
	je	SHORT $L137343
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	16					; 00000010H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	17					; 00000011H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _Xor$137308[esp+28]
$L137343:
	test	eax, 1073741824				; 40000000H
	je	SHORT $L137344
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$137308[esp+28]
$L137344:
	test	eax, 50331648				; 03000000H
	je	SHORT $L137350
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L137350:

; 1115 : 			SetBlending(0,0);					// NJS: FIXME

	push	ebp
	xor	edx, edx
	mov	ecx, esi
	mov	DWORD PTR [esi+19616], -1073741827	; bffffffdH
	mov	DWORD PTR [esi+19620], edi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1116 : 			SetDistanceFog(true);

	push	1
	mov	ecx, esi
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 1117 : 			SetDistanceFog(false);

	push	ebp
	mov	ecx, esi
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 1118 : 			SetTextureNULL(0);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	ebp
	push	eax
	call	DWORD PTR [ecx+244]

; 1119 : 			SetTextureNULL(1);

	push	ebp
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+244]
	mov	DWORD PTR [esi+19716], edi
$L137359:

; 1120 : 		}
; 1121 : 
; 1122 : 		{
; 1123 : 			DistanceFogColor=FogColor;
; 1124 : 			DistanceFogBegin=FogDistance;

	fild	DWORD PTR _FogDistance$[esp+28]
	mov	eax, DWORD PTR _FogColor$[esp+24]
	mov	DWORD PTR [esi+675208], eax
	fst	DWORD PTR [esi+675200]

; 1125 : 			FLOAT FogDensitySquared=FogDensity*FogDensity;
; 1126 : 			if(!FogDensitySquared) FogDensitySquared=0.001f;
; 1127 : 			if(FogDensity<DistanceFogBegin) DistanceFogEnd=DistanceFogBegin+700.f;

	fld	DWORD PTR _FogDensity$[esp+24]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L125188
	fadd	DWORD PTR __real@442f0000
	fstp	DWORD PTR [esi+675204]

; 1128 : 			else DistanceFogEnd=FogDensity;

	jmp	SHORT $L125189
$L125188:
	mov	ecx, DWORD PTR _FogDensity$[esp+24]
	fstp	ST(0)
	mov	DWORD PTR [esi+675204], ecx
$L125189:

; 1129 : 		}
; 1130 : 
; 1131 : 		UseDistanceFog=(bool)((LockFlags&LOCKR_LightDiminish));

	mov	edx, DWORD PTR [esi+19612]
	shr	edx, 1
	and	edx, 1

; 1132 : 		SetDistanceFog(false);

	push	ebp
	mov	ecx, esi
	mov	DWORD PTR [esi+675196], edx
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 1133 : 
; 1134 : 		// Remember parameters.
; 1135 : 		LockFlags  = InLockFlags;

	mov	eax, DWORD PTR _InLockFlags$[esp+24]

; 1136 : 		FlashScale = InFlashScale;

	mov	edx, DWORD PTR _InFlashScale$[esp+24]
	mov	DWORD PTR [esi+19612], eax
	mov	eax, DWORD PTR _InFlashScale$[esp+28]
	lea	ecx, DWORD PTR [esi+19580]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _InFlashScale$[esp+32]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _InFlashScale$[esp+36]
	mov	DWORD PTR [ecx+8], edx

; 1137 : 		FlashFog   = InFlashFog;

	mov	edx, DWORD PTR _InFlashFog$[esp+24]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _InFlashFog$[esp+28]
	lea	ecx, DWORD PTR [esi+19596]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _InFlashFog$[esp+32]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _InFlashFog$[esp+36]
	mov	DWORD PTR [ecx+8], edx

; 1138 : 
; 1139 : 		// Hit detection.
; 1140 : 		HitCount   = 0;
; 1141 : 		HitData    = InHitData;
; 1142 : 		HitSize    = InHitSize;

	mov	edx, DWORD PTR _InHitSize$[esp+24]
	mov	DWORD PTR [ecx+12], eax

; 1143 : 
; 1144 : 		// Check cooperative level.
; 1145 : 		HRESULT hr=NULL, hr2=NULL;
; 1146 : 		verify(Direct3DDevice8);

	cmp	DWORD PTR [esi+19124], ebp
	mov	ecx, DWORD PTR _InHitData$[esp+24]
	mov	DWORD PTR [esi+675132], ebp
	mov	DWORD PTR [esi+675124], ecx
	mov	DWORD PTR [esi+675128], edx
	jne	SHORT $L125193
	push	1146					; 0000047aH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEJO@Direct3DDevice8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125193:

; 1147 : 		hr=Direct3DDevice8->TestCooperativeLevel();

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+12]

; 1148 : 		if( hr!=D3D_OK )

	cmp	eax, ebp
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	je	SHORT $L125213

; 1149 : 		{
; 1150 : 			debugf(TEXT("TestCooperativeLevel failed (%s)"),DXGetErrorString8(hr));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1EC@LPJP@?$AAT?$AAe?$AAs?$AAt?$AAC?$AAo?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAv?$AAe?$AAL?$AAe?$AAv?$AAe?$AAl@ ; `string'
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	jmp	$Failed$125198
$L125213:

; 1168 : 					}
; 1169 : 			}
; 1170 : 		}
; 1171 : 
; 1172 : 		// Lock the back buffer to prevent the driver from queueing frames, causing 'input lag':
; 1173 : 		if(!GIsEditor)

	mov	ecx, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [ecx], ebp
	jne	SHORT $L137366

; 1174 : 		{
; 1175 : 			IDirect3DSurface8 *BackBuffer;
; 1176 : 			Direct3DDevice8->GetBackBuffer(0,D3DBACKBUFFER_TYPE_MONO,&BackBuffer);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _BackBuffer$125216[esp+24]
	push	ecx
	push	ebp
	push	ebp
	push	eax
	call	DWORD PTR [edx+64]

; 1177 : 			D3DLOCKED_RECT Rect;
; 1178 : 			BackBuffer->LockRect(&Rect,NULL,D3DLOCK_READONLY|D3DLOCK_NO_DIRTY_UPDATE );

	mov	eax, DWORD PTR _BackBuffer$125216[esp+24]
	mov	edx, DWORD PTR [eax]
	push	32784					; 00008010H
	push	ebp
	lea	ecx, DWORD PTR _Rect$125217[esp+32]
	push	ecx
	push	eax
	call	DWORD PTR [edx+36]

; 1179 : 			BackBuffer->UnlockRect();

	mov	eax, DWORD PTR _BackBuffer$125216[esp+24]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+40]

; 1180 : 			SafeRelease(BackBuffer);

	mov	eax, DWORD PTR _BackBuffer$125216[esp+24]
	cmp	eax, ebp
	je	SHORT $L137366
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR _BackBuffer$125216[esp+24], ebp
$L137366:

; 1181 : 		}
; 1182 : 		
; 1183 : 		// Clear the Z-buffer.
; 1184 : 		Direct3DDevice8->Clear( 0, NULL, D3DCLEAR_ZBUFFER | ((LockFlags & LOCKR_ClearScreen) ? D3DCLEAR_TARGET : 0), (D3DCOLOR)FColor(ScreenClear).TrueColor(), 1.f, 0 );

	lea	edx, DWORD PTR _ScreenClear$[esp+24]
	push	edx
	lea	ecx, DWORD PTR $T137299[esp+28]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _D$137370[esp+24], eax
	xor	ebx, ebx
	mov	bl, BYTE PTR _D$137370[esp+26]
	mov	edi, eax
	and	edi, 255				; 000000ffH
	and	eax, 65280				; 0000ff00H
	push	ebp
	shl	edi, 16					; 00000010H
	push	1065353216				; 3f800000H
	add	ebx, edi
	add	ebx, eax
	mov	eax, DWORD PTR [esi+19612]
	push	ebx
	and	eax, 1
	or	eax, 2
	push	eax
	push	ebp
	push	ebp
	push	ecx
	call	DWORD PTR [edx+144]

; 1185 : 
; 1186 : 		// Init stats.
; 1187 : 		memset( &Stats, 0, sizeof(Stats) );

	xor	eax, eax
	mov	ecx, 22					; 00000016H
	lea	edi, DWORD PTR [esi+19624]
	rep stosd

; 1188 : 		for( FPixFormat* Fmt=FirstPixelFormat; Fmt; Fmt=Fmt->Next )

	mov	eax, DWORD PTR [esi+16988]
	cmp	eax, ebp
	je	SHORT $L125227
$L125225:

; 1189 : 			Fmt->ResetStats();

	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+36], ebp
	mov	DWORD PTR [eax+32], ebp
	mov	DWORD PTR [eax+48], ebp
	mov	DWORD PTR [eax+44], ebp
	mov	DWORD PTR [eax+40], ebp
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, ebp
	jne	SHORT $L125225
$L125227:

; 1190 : 
; 1191 : 		// Begin scene.
; 1192 : 		//check(BeginSceneCount==0);
; 1193 : 		if( FAILED(h=Direct3DDevice8->BeginScene()) )

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+136]
	cmp	eax, ebp
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	$L137380

; 1194 : 		{
; 1195 : 			if( ++FailCount==1 )

	mov	ecx, DWORD PTR _FailCount$[esp+28]
	inc	ecx
	cmp	ecx, 1
	mov	DWORD PTR _FailCount$[esp+28], ecx
	jne	$L125230
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
$Failed$125198:

; 1151 : 			Failed:
; 1152 : 			// D3DERR_DEVICELOST is returned if the device was lost, but exclusive mode isn't available again yet.
; 1153 : 			// D3DERR_DEVICENOTRESET is returned if the device was lost, but can be reset.
; 1154 : 
; 1155 : 			// Wait to regain exclusive access to the device.
; 1156 : 
; 1157 : 			do hr2=Direct3DDevice8->TestCooperativeLevel();

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+12]

; 1158 : 			while(hr2==D3DERR_DEVICELOST);

	cmp	eax, -2005530520			; 88760868H
	je	SHORT $Failed$125198

; 1159 : 
; 1160 : 			if(hr2==D3DERR_DEVICENOTRESET)

	cmp	eax, -2005530519			; 88760869H
	jne	$L125213

; 1161 : 			{
; 1162 : 				debugf(TEXT("Resetting mode (%s)"),DXGetErrorString8(hr2));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1CI@LMHM@?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	eax
	call	edi

; 1163 : 				if( !SetRes(ViewportX, ViewportY, ViewportColorBits/8, ViewportFullscreen) )

	mov	ecx, DWORD PTR [esi+16776]
	mov	edx, DWORD PTR [esi+16772]
	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR [esi+16764]
	shr	edx, 3
	push	edx
	mov	edx, DWORD PTR [esi+16760]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR [eax+80]
	test	eax, eax
	jne	$L125213

; 1164 : 					if(!ErrorCalled)

	mov	al, BYTE PTR _ErrorCalled
	test	al, al
	jne	$L125213

; 1165 : 					{
; 1166 : 						ErrorCalled=true;
; 1167 : 						appErrorf(TEXT("Failed resetting mode. (%s)"),DXGetErrorString8(hr2));

	push	-2005530519				; 88760869H
	mov	BYTE PTR _ErrorCalled, 1
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DI@DLMG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd@ ; `string'
	push	eax
	call	edi
	add	esp, 12					; 0000000cH
	jmp	$L125213
$L125230:

; 1196 : 				goto Failed;
; 1197 : 
; 1198 : 			appErrorf(TEXT("BeginScene failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	OFFSET FLAT:??_C@_1CO@DHDA@?$AAB?$AAe?$AAg?$AAi?$AAn?$AAS?$AAc?$AAe?$AAn?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
$L137380:

; 1199 : 		}
; 1200 : 
; 1201 : 		BeginSceneCount++;

	mov	eax, DWORD PTR [esi+675184]
	pop	edi
	inc	eax
	mov	DWORD PTR [esi+675184], eax
	pop	esi
	pop	ebp
	pop	ebx

; 1202 : 	}

	add	esp, 12					; 0000000cH
	ret	68					; 00000044H
?Lock@UD3DRenderDevice@@UAIXVFColor@@MHVFPlane@@11KPAEPAH@Z ENDP ; UD3DRenderDevice::Lock
_TEXT	ENDS
PUBLIC	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
; Function compile flags: /Ogty
;	COMDAT ?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z
_TEXT	SEGMENT
_PolyFlags$ = 8
_PolyFlagsEx$ = 12
?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z PROC NEAR ; UD3DRenderDevice::PrecacheTexture, COMDAT
; _this$ = ecx
; _Info$ = edx

; 1206 : 		SetTexture( 0, Info, PolyFlags|Info.Texture->PolyFlags, 1, PolyFlagsEx|Info.Texture->PolyFlagsEx );

	mov	eax, DWORD PTR [edx]
	push	esi
	push	edi
	mov	edi, DWORD PTR _PolyFlagsEx$[esp+4]
	mov	esi, ecx
	mov	ecx, DWORD PTR [eax+196]
	mov	eax, DWORD PTR [eax+132]
	push	0
	or	ecx, edi
	push	ecx
	mov	ecx, DWORD PTR _PolyFlags$[esp+12]
	push	1
	or	eax, ecx
	push	eax
	push	edx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	pop	edi

; 1207 : 		PrecacheCycle = 1;

	mov	DWORD PTR [esi+675108], 1
	pop	esi

; 1208 : 	}

	ret	8
?PrecacheTexture@UD3DRenderDevice@@UAIXAAUFTextureInfo@@KK@Z ENDP ; UD3DRenderDevice::PrecacheTexture
_TEXT	ENDS
PUBLIC	??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@ ; `string'
;	COMDAT ??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@ DB 'HitStack.Num()==0', 00H ; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Unlock@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT
?Unlock@UD3DRenderDevice@@UAIXH@Z PROC NEAR		; UD3DRenderDevice::Unlock, COMDAT
; _this$ = ecx
; _Blit$ = edx

; 1211 : 	{

	push	ebx

; 1212 : 		LockCount--; 
; 1213 : 		if(!GIsEditor)
; 1214 : 		{
; 1215 : 			//check(LockCount==0);
; 1216 : 		}
; 1217 : 
; 1218 : 		check(Direct3DDevice8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+675188]
	mov	eax, DWORD PTR [esi+19124]
	dec	ecx
	test	eax, eax
	push	edi
	mov	edi, edx
	mov	DWORD PTR [esi+675188], ecx
	jne	SHORT $L125237
	push	1218					; 000004c2H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEJO@Direct3DDevice8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L125237:

; 1219 : 
; 1220 : 	#ifdef BATCH_PROJECTOR_POLYS
; 1221 : 		FlushProjectorPolys();
; 1222 : 	#endif
; 1223 : 
; 1224 : 		//Direct3DDevice8->EndScene();
; 1225 : 		EndScene();

	dec	DWORD PTR [esi+675184]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]

; 1226 : 
; 1227 : 		if( PrecacheCycle )

	mov	eax, DWORD PTR [esi+675108]
	test	eax, eax
	je	SHORT $L125238

; 1228 : 		{
; 1229 : 			PrecacheCycle = 0;

	mov	DWORD PTR [esi+675108], 0
$L125238:

; 1230 : 		}
; 1231 : 		if( Blit )

	test	edi, edi
	je	SHORT $L125239

; 1232 : 			Direct3DDevice8->Present(NULL,NULL,NULL,NULL);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+60]
$L125239:

; 1233 : 
; 1234 : 		// Hit detection.
; 1235 : 		check(HitStack.Num()==0);

	mov	eax, DWORD PTR [esi+675116]
	test	eax, eax
	je	SHORT $L125240
	push	1235					; 000004d3H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BC@CHAC@HitStack?4Num?$CI?$CJ?$DN?$DN0?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L125240:

; 1236 : 		if( HitSize )

	mov	eax, DWORD PTR [esi+675128]
	test	eax, eax
	je	SHORT $L125242

; 1237 : 			*HitSize = HitCount;

	mov	ecx, DWORD PTR [esi+675132]
	mov	DWORD PTR [eax], ecx
$L125242:
	pop	edi
	pop	esi
	pop	ebx

; 1238 : 	}

	ret	0
?Unlock@UD3DRenderDevice@@UAIXH@Z ENDP			; UD3DRenderDevice::Unlock
_TEXT	ENDS
PUBLIC	?Clamp@@YAHHHH@Z				; Clamp
PUBLIC	?Clamp@@YAMMMM@Z				; Clamp
PUBLIC	??_C@_0O@DFJN@VertexBuffer8?$AA@		; `string'
PUBLIC	??_C@_06CAAP@Length?$AA@			; `string'
PUBLIC	??_C@_0L@GIGE@Num?$DMLength?$AA@		; `string'
PUBLIC	??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_06NBPC@Device?$AA@			; `string'
PUBLIC	??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_0BA@BICI@Surface?4Texture?$AA@		; `string'
PUBLIC	??_C@_0BB@KKDE@Surface?4LightMap?$AA@		; `string'
PUBLIC	??_C@_09PNHJ@Stages?$FL0?$FN?$AA@		; `string'
PUBLIC	??_C@_09OLND@Stages?$FL1?$FN?$AA@		; `string'
PUBLIC	??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_04GHEP@V?9?$DOU?$AA@			; `string'
PUBLIC	??_C@_05MGNJ@V?9?$DOU2?$AA@			; `string'
PUBLIC	??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@ ; `string'
PUBLIC	__real@3b808081
PUBLIC	__real@43800000
PUBLIC	__real@3f000000
PUBLIC	__real@3faaaa9f7b5aea31
PUBLIC	__real@42c80000
PUBLIC	?SetZBias@UD3DRenderDevice@@QAIMM@Z		; UD3DRenderDevice::SetZBias
PUBLIC	?Half@?1??appFloor@@YAHM@Z@4MA			; Half
PUBLIC	?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z ; FD3DVertexBuffer<FD3DScreenVertex>::Lock
PUBLIC	?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock
PUBLIC	?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Set
PUBLIC	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock
PUBLIC	?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DTLVertex>::Unlock
PUBLIC	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ	; FD3DVertexBuffer<FD3DTLVertex>::Set
EXTRN	__imp_?TrueColor@FColor@@QBEKXZ:NEAR
EXTRN	__imp__GTimestamp:DWORD
EXTRN	__imp_??0FPlane@@QAE@MMMM@Z:NEAR
EXTRN	__imp_??0FVector@@QAE@MMM@Z:NEAR
EXTRN	__imp_?TransformPointBy@FVector@@QBE?AV1@ABVFCoords@@@Z:NEAR
;	COMDAT ??_C@_06NBPC@Device?$AA@
; File ..\..\Core\Inc\UnVcWin32.h
_DATA	SEGMENT
??_C@_06NBPC@Device?$AA@ DB 'Device', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0O@DFJN@VertexBuffer8?$AA@
_DATA	SEGMENT
??_C@_0O@DFJN@VertexBuffer8?$AA@ DB 'VertexBuffer8', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, '(', 00H, 'D', 00H, '3', 00H, 'D', 00H
	DB	'R', 00H, 'S', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'F', 00H, 'T'
	DB	00H, 'W', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'V', 00H, 'E', 00H
	DB	'R', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'P', 00H, 'R', 00H, 'O'
	DB	00H, 'C', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, ',', 00H, 'F', 00H, 'A', 00H, 'L', 00H, 'S', 00H, 'E'
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'V', 00H, 'e', 00H
	DB	'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'S', 00H, 'h', 00H, 'a'
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, '(', 00H, 'T', 00H, ':', 00H
	DB	':', 00H, 'F', 00H, 'V', 00H, 'F', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'S', 00H, 't', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, 'm', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '(', 00H, '0', 00H, ',', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	',', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f'
	DB	00H, '(', 00H, 'T', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_06CAAP@Length?$AA@
_DATA	SEGMENT
??_C@_06CAAP@Length?$AA@ DB 'Length', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0L@GIGE@Num?$DMLength?$AA@
_DATA	SEGMENT
??_C@_0L@GIGE@Num?$DMLength?$AA@ DB 'Num<Length', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	'-', 00H, '>', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'R', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'*', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, '(', 00H, 'T', 00H, ')', 00H, ',', 00H, 'N', 00H
	DB	'u', 00H, 'm', 00H, ' ', 00H, '*', 00H, ' ', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'T', 00H
	DB	')', 00H, ',', 00H, '(', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E'
	DB	00H, '*', 00H, '*', 00H, ')', 00H, ' ', 00H, '&', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, ',', 00H, 'D', 00H, '3', 00H, 'D', 00H
	DB	'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, '_', 00H, 'N', 00H, 'O'
	DB	00H, 'O', 00H, 'V', 00H, 'E', 00H, 'R', 00H, 'W', 00H, 'R', 00H
	DB	'I', 00H, 'T', 00H, 'E', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	'-', 00H, '>', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, '0', 00H, ',', 00H, 'N', 00H, 'u', 00H, 'm', 00H, ' ', 00H
	DB	'*', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, '(', 00H, 'T', 00H, ')', 00H, ',', 00H, '(', 00H
	DB	'B', 00H, 'Y', 00H, 'T', 00H, 'E', 00H, '*', 00H, '*', 00H, ')'
	DB	00H, ' ', 00H, '&', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ','
	DB	00H, 'D', 00H, '3', 00H, 'D', 00H, 'L', 00H, 'O', 00H, 'C', 00H
	DB	'K', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'S', 00H, 'C', 00H, 'A'
	DB	00H, 'R', 00H, 'D', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT ?Half@?1??appFloor@@YAHM@Z@4MA
_DATA	SEGMENT
?Half@?1??appFloor@@YAHM@Z@4MA DD 03f000000r	; 0.5	; Half
_DATA	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_C@_0BA@BICI@Surface?4Texture?$AA@
_DATA	SEGMENT
??_C@_0BA@BICI@Surface?4Texture?$AA@ DB 'Surface.Texture', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@KKDE@Surface?4LightMap?$AA@
_DATA	SEGMENT
??_C@_0BB@KKDE@Surface?4LightMap?$AA@ DB 'Surface.LightMap', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_09PNHJ@Stages?$FL0?$FN?$AA@
_DATA	SEGMENT
??_C@_09PNHJ@Stages?$FL0?$FN?$AA@ DB 'Stages[0]', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_09OLND@Stages?$FL1?$FN?$AA@
_DATA	SEGMENT
??_C@_09OLND@Stages?$FL1?$FN?$AA@ DB 'Stages[1]', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_04GHEP@V?9?$DOU?$AA@
_DATA	SEGMENT
??_C@_04GHEP@V?9?$DOU?$AA@ DB 'V->U', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_05MGNJ@V?9?$DOU2?$AA@
_DATA	SEGMENT
??_C@_05MGNJ@V?9?$DOU2?$AA@ DB 'V->U2', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@
_DATA	SEGMENT
??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@ DB 'n<ARRAY_COUNT(Verts'
	DB	')', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	'-', 00H, '>', 00H, 'U', 00H, 'n', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT __real@3faaaa9f7b5aea31
CONST	SEGMENT
__real@3faaaa9f7b5aea31 DQ 03faaaa9f7b5aea31r	; 0.052083
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z
_TEXT	SEGMENT
_D$138187 = -256
$T138191 = -256
_VertexData$138200 = -264
_Frame$ = -220
_Surface$ = 8
_Facet$ = 12
_Xor$138244 = -268
$T138291 = -160
$T138307 = -256
_VertexData$138319 = -264
_VertexData$138371 = -264
_I$138408 = -164
$T138409 = -184
$T137406 = -264
$T137407 = -260
$T137411 = -200
$T137412 = -256
$T137417 = -180
$T137419 = -224
$T137422 = -200
_D$138442 = -256
_L$137428 = -212
_H$137429 = -256
_VertexData$138449 = -264
_bHeatVision$ = -236
_bNightVision$ = -216
_myFinalColor$ = -268
_VertexCount$ = -204
_Poly$ = -220
_IsSelected$ = -212
_SurfPolyFlags$ = -224
_SurfPolyFlagsEx$ = -244
_StoreVertInfo$ = -208
_clr$125269 = -260
_n$125283 = -248
_Poly$125284 = -268
_i$125288 = -264
_R$125293 = -236
_Z$125294 = -256
_Y$125295 = -184
_X$125296 = -164
_u$125300 = -244
_v$125301 = -216
$T138535 = -256
_ModulateThings$125327 = -248
_FinalColor$125328 = -200
_Clr$125331 = -260
_XorEx$137525 = -248
_I$138543 = -184
_n$125342 = -240
_i$125347 = -268
_L$138558 = -264
_H$138559 = -256
_R$125354 = -236
_Z$125355 = -256
_u$125359 = -232
_v$125360 = -216
_Clr$125368 = -236
_Clr$125386 = -236
_Xor$137590 = -260
_XorEx$137591 = -248
_LocalNearZ$125406 = -208
_AreDetailing$125408 = -240
_InvZ$125412 = -224
_SZ$125413 = -256
_n$125414 = -260
_Poly$125415 = -268
_IsNear$125419 = -128
_NumNear$125426 = -252
_i$125430 = -228
_VertexData$137639 = -232
_Clr$125455 = -228
$T137681 = -160
_First$125504 = -256
_i$125506 = -228
_Mask$125510 = -236
$T137703 = -180
_n$125516 = -248
_j$125521 = -264
_P$125525 = -160
$T137730 = -264
$T137748 = -264
$T137766 = -264
$T137773 = -264
_I$137780 = -232
_I$137790 = -232
_I$137800 = -232
_I$137804 = -232
_XorEx$137882 = -240
_Xor$137932 = -260
$T137976 = -252
_VertexData$137990 = -264
$T138028 = -180
$T138051 = -256
_D$138057 = -256
_Xor$138107 = -268
$T138163 = -180
?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z PROC NEAR ; UD3DRenderDevice::DrawComplexSurface, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 1241 : 	{

	sub	esp, 268				; 0000010cH

; 1242 : 		if(!RenderSurfaces) 

	mov	eax, DWORD PTR ?RenderSurfaces@@3HA	; RenderSurfaces
	push	ebp
	push	esi
	push	edi
	xor	ebp, ebp
	cmp	eax, ebp
	mov	edi, edx
	mov	DWORD PTR _Frame$[esp+280], edi
	mov	esi, ecx
	je	$L125244

; 1243 : 			return;
; 1244 : 
; 1245 : 		clock(Stats.SurfTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebp
	mov	DWORD PTR _L$137428[esp+280], ebp
	je	SHORT $L137430
	rdtsc
	mov	DWORD PTR _L$137428[esp+280], eax
	mov	DWORD PTR _H$137429[esp+280], edx
$L137430:
	mov	edx, DWORD PTR [esi+19624]
	mov	ecx, DWORD PTR _L$137428[esp+280]

; 1246 : 		Stats.Surfs++;

	mov	eax, DWORD PTR [esi+19664]
	sub	edx, ecx
	inc	eax
	mov	DWORD PTR [esi+19624], edx
	mov	DWORD PTR [esi+19664], eax

; 1247 : 
; 1248 : 		PreRender(Frame);

	mov	eax, DWORD PTR [esi]
	push	ebx
	mov	edx, edi
	mov	ecx, esi
	call	DWORD PTR [eax+140]

; 1249 : 		UBOOL bHeatVision  = (Frame->Viewport->Actor->CameraStyle == PCS_HeatVision);  

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [ecx+48]
	mov	al, BYTE PTR [edx+7280]

; 1250 : 		UBOOL bNightVision = (Frame->Viewport->Actor->CameraStyle == PCS_NightVision); 
; 1251 : 		
; 1252 : 		FColor myFinalColor( 255, 255, 255, 0 );
; 1253 : 		if(bHeatVision)

	mov	ebx, DWORD PTR _Surface$[esp+280]
	xor	ecx, ecx
	cmp	al, 1
	sete	cl
	xor	edx, edx
	cmp	al, 2
	sete	dl
	mov	BYTE PTR _myFinalColor$[esp+284], 255	; 000000ffH
	mov	BYTE PTR _myFinalColor$[esp+285], 255	; 000000ffH
	mov	BYTE PTR _myFinalColor$[esp+286], 255	; 000000ffH
	cmp	ecx, ebp
	mov	DWORD PTR _bHeatVision$[esp+284], ecx
	mov	BYTE PTR _myFinalColor$[esp+287], 0
	mov	eax, edx
	mov	DWORD PTR _bNightVision$[esp+284], eax
	je	SHORT $L125249

; 1254 : 		{
; 1255 : 			myFinalColor.R = 7.5f;

	mov	BYTE PTR _myFinalColor$[esp+284], 7

; 1256 : 			myFinalColor.G = 0.f;

	mov	BYTE PTR _myFinalColor$[esp+285], 0

; 1257 : 			myFinalColor.B = 38.f;

	mov	BYTE PTR _myFinalColor$[esp+286], 38	; 00000026H

; 1258 : 			Surface.PolyFlags&=~PF_FlatShaded;
; 1259 : 		} else if(bNightVision) 

	jmp	SHORT $L138744
$L125249:
	cmp	eax, ebp
	je	SHORT $L125251

; 1260 : 		{
; 1261 : 			myFinalColor.R = 0.f;

	mov	BYTE PTR _myFinalColor$[esp+284], 0

; 1262 : 			myFinalColor.G = 128.f;

	mov	BYTE PTR _myFinalColor$[esp+285], 128	; 00000080H

; 1263 : 			myFinalColor.B = 0.f;

	mov	BYTE PTR _myFinalColor$[esp+286], 0
$L138744:

; 1264 : 			Surface.PolyFlags&=~PF_FlatShaded;

	and	DWORD PTR [ebx], -1073741825		; bfffffffH
$L125251:

; 1265 : 		}
; 1266 : 
; 1267 : 		// Mutually exclusive effects.
; 1268 : 		if((Surface.DetailTexture && Surface.FogMap) || (!DetailTextures))

	cmp	DWORD PTR [ebx+28], ebp
	je	SHORT $L125254
	cmp	DWORD PTR [ebx+32], ebp
	jne	SHORT $L125253
$L125254:
	cmp	DWORD PTR [esi+104], ebp
	jne	SHORT $L125252
$L125253:

; 1269 : 			Surface.DetailTexture = NULL;

	mov	DWORD PTR [ebx+28], ebp
$L125252:

; 1270 : 
; 1271 : 		INT VertexCount=0;
; 1272 : 		for( FSavedPoly* Poly=Facet.Polys; Poly; Poly = Poly->Next )

	mov	eax, DWORD PTR _Facet$[esp+280]
	mov	eax, DWORD PTR [eax+100]
	xor	ecx, ecx
	cmp	eax, ebp
	mov	DWORD PTR _VertexCount$[esp+284], ecx
	je	SHORT $L125259
$L125257:

; 1273 : 			VertexCount += Poly->NumPts;

	mov	edi, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax]
	add	ecx, edi
	cmp	eax, ebp
	jne	SHORT $L125257
	mov	DWORD PTR _VertexCount$[esp+284], ecx
$L125259:

; 1274 : 		UBOOL IsSelected = GIsEditor && (( Surface.PolyFlags & PF_Selected )!= 0);

	mov	ecx, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [ecx], ebp
	je	SHORT $L137404
	test	DWORD PTR [ebx], 33554432		; 02000000H
	mov	DWORD PTR _IsSelected$[esp+284], 1
	jne	SHORT $L137405
$L137404:
	mov	DWORD PTR _IsSelected$[esp+284], ebp
$L137405:

; 1275 : 		DWORD SurfPolyFlags   = ( Surface.PolyFlags & ~PF_Selected ) | PF_TwoSided | (Surface.Texture->Texture->PolyFlags);

	mov	edx, DWORD PTR [ebx+16]
	mov	eax, DWORD PTR [edx]
	mov	ebp, DWORD PTR [eax+132]
	mov	ecx, DWORD PTR [ebx]

; 1276 : 		DWORD SurfPolyFlagsEx = Surface.PolyFlagsEx | (Surface.Texture->Texture->PolyFlagsEx);

	mov	eax, DWORD PTR [eax+196]
	and	ecx, -33554433				; fdffffffH
	or	ebp, ecx
	mov	ecx, DWORD PTR [ebx+4]
	or	ebp, 256				; 00000100H
	or	eax, ecx

; 1277 : 
; 1278 : 		SetDistanceFog(!(SurfPolyFlags&PF_Unlit));

	mov	edi, ebp
	not	edi
	shr	edi, 22					; 00000016H
	mov	DWORD PTR _SurfPolyFlagsEx$[esp+284], eax
	mov	eax, DWORD PTR [esi+675196]
	and	edi, 1
	test	eax, eax
	mov	DWORD PTR _SurfPolyFlags$[esp+284], ebp
	je	$L137438
	cmp	edi, DWORD PTR [esi+675192]
	je	$L137438
	test	edi, edi
	mov	eax, DWORD PTR [esi+19124]
	je	$L137439
	mov	edx, DWORD PTR [eax]
	push	1
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	xor	ecx, ecx
	mov	ch, BYTE PTR [esi+675208]
	xor	ebx, ebx
	mov	bl, BYTE PTR [esi+675210]
	mov	cl, BYTE PTR [esi+675209]
	shl	ecx, 8
	or	ecx, ebx
	push	ecx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [edx+200]
	mov	edx, DWORD PTR [esi+675200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR [esi+675204]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ebx, DWORD PTR _Surface$[esp+280]
	jmp	SHORT $L137440
$L137439:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
$L137440:
	mov	DWORD PTR [esi+675192], edi
$L137438:

; 1279 : 		SetZBias(0);

	fld	DWORD PTR [esi+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L137465
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L137464
$L137465:
	mov	eax, DWORD PTR [esi+19124]
	push	0
	push	47					; 0000002fH
	mov	DWORD PTR [esi+675164], 0
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+200]
$L137464:

; 1280 : 
; 1281 : 		INT StoreVertInfo = (IsSelected) + (Surface.LightMap!=NULL) + (Surface.MacroTexture!=NULL) + (Surface.DetailTexture!=NULL) + (Surface.FogMap!=NULL) + (ProjectorArray.Num() > 0);		

	mov	ecx, DWORD PTR [ebx+20]
	mov	edi, DWORD PTR [esi+204]
	xor	eax, eax
	test	ecx, ecx
	setne	al
	xor	ecx, ecx
	test	edi, edi
	mov	edi, DWORD PTR [ebx+32]
	setg	cl
	xor	edx, edx

; 1932 : 
; 1933 : 		VALIDATE;
; 1934 : 
; 1935 : 		unclock(Stats.SurfTime);

	add	eax, ecx
	test	edi, edi
	mov	edi, DWORD PTR [ebx+28]
	setne	dl
	xor	ecx, ecx
	add	eax, edx
	mov	edx, DWORD PTR _IsSelected$[esp+284]
	test	edi, edi
	mov	edi, DWORD PTR [ebx+24]
	setne	cl
	add	ecx, edx
	xor	edx, edx
	test	edi, edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	setne	dl
	add	ecx, eax
	mov	eax, DWORD PTR [esi+16680]
	add	edx, ecx
	test	eax, eax
	mov	DWORD PTR _StoreVertInfo$[esp+284], edx
	jne	SHORT $L137474
	push	317					; 0000013dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L137474:
	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L137476
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L137476:
	mov	eax, DWORD PTR [esi+16680]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	jge	SHORT $L137477
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	321					; 00000141H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L137477:
	mov	eax, DWORD PTR [esi+16680]
	mov	ecx, DWORD PTR [eax]
	push	580					; 00000244H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L137482
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L137482:
	mov	edx, DWORD PTR [esi+16684]
	mov	eax, DWORD PTR [esi+16680]
	mov	ecx, DWORD PTR [eax]
	push	36					; 00000024H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L137487
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L137487:
	mov	eax, DWORD PTR [ebx+20]
	test	eax, eax
	je	$L125264
	mov	eax, DWORD PTR [ebx+24]
	test	eax, eax
	jne	$L125264
	mov	edx, DWORD PTR _StoreVertInfo$[esp+284]
	dec	edx
	mov	eax, ebp
	and	eax, 1073741824				; 40000000H
	mov	DWORD PTR _StoreVertInfo$[esp+284], edx
	mov	DWORD PTR -228+[esp+284], eax
	je	$L125265
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	xor	ebp, ebp
	push	ebp
	push	ebp
	push	eax
	call	DWORD PTR [edx+244]
	push	ebp
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [ecx+244]
	mov	DWORD PTR [esi+19716], edi
	mov	ebx, DWORD PTR [esi+19616]
	mov	edx, DWORD PTR [esi+19620]
	xor	ebx, -2147483648			; 80000000H
	test	bh, 1
	mov	DWORD PTR _XorEx$137525[esp+284], edx
	je	SHORT $L137526
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
$L137526:
	mov	al, BYTE PTR _XorEx$137525[esp+284]
	test	al, 2
	je	SHORT $L137527
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	al, BYTE PTR _XorEx$137525[esp+284]
$L137527:

; 1282 : 
; 1283 : 		WorldVertices.Set();
; 1284 : 
; 1285 : 		// Render texture and lightmap. 
; 1286 : 		if( /*UseMultitexture &&*/ Surface.LightMap!=NULL && Surface.MacroTexture==NULL )
; 1287 : 		{
; 1288 : 			StoreVertInfo--;
; 1289 : 			// Use multitexturing when rendering base + lightmap.			
; 1290 : 			if(SurfPolyFlags&PF_FlatShaded)
; 1291 : 			{
; 1292 : 				SetTextureNULL( 0 );
; 1293 : 				SetTextureNULL( 1 );
; 1294 : 				SetBlending();

	test	al, 8
	je	SHORT $L137528
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	al, BYTE PTR _XorEx$137525[esp+284]
$L137528:
	test	ebx, -754972601				; d3000847H
	jne	SHORT $L137530
	test	al, 113					; 00000071H
	je	$L137566
$L137530:
	test	ebx, 268435525				; 10000045H
	jne	SHORT $L137532
	test	al, 113					; 00000071H
	je	SHORT $L137516
$L137532:
	test	al, 1
	je	SHORT $L137533
	cmp	DWORD PTR [esi+19128], ebp
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L137534
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L137535
$L137534:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
$L137535:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L137533:
	cmp	DWORD PTR [esi+675176], ebp
	jne	SHORT $L137517
	cmp	DWORD PTR ?CacheBlending@@3HA, ebp	; CacheBlending
	jne	SHORT $L137516
$L137517:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], ebp
$L137516:
	test	bl, 1
	je	SHORT $L137553
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L137553:
	test	ebx, ebx
	jns	SHORT $L137555
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [ecx+200]
$L137555:
	test	bl, 2
	je	SHORT $L137558
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L137558:
	test	bh, 8
	je	SHORT $L137559
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
$L137559:
	test	ebx, 1073741824				; 40000000H
	je	SHORT $L137560
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [ecx+200]
$L137560:
	test	ebx, 50331648				; 03000000H
	je	SHORT $L137566
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L137566:
	mov	DWORD PTR [esi+19616], -2147483648	; 80000000H
	mov	DWORD PTR [esi+19620], ebp

; 1295 : 			}
; 1296 : 			else

	jmp	$L137584
$L125265:

; 1297 : 			{
; 1298 : 				SetTexture( 0, *Surface.Texture, SurfPolyFlags, 0, SurfPolyFlagsEx );

	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [ebx+16]
	push	0
	push	edx
	push	0
	push	ebp
	push	eax
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1299 : 				SetTexture( 1, *Surface.LightMap, 0, 0, true );

	mov	ecx, DWORD PTR [ebx+20]
	push	0
	push	1
	push	0
	push	0
	push	ecx
	mov	edx, 1
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1300 : 				// PF_Memorize to signify multitexturing.
; 1301 : 				SetBlending( SurfPolyFlags|PF_Memorized, SurfPolyFlagsEx );

	mov	ebx, ebp
	or	ebx, 16777216				; 01000000H
	mov	edx, ebx
	and	edx, 1073741892				; 40000044H
	cmp	edx, 1073741824				; 40000000H
	jne	SHORT $L137586
	mov	eax, DWORD PTR [esi+19148]
	test	eax, eax
	jne	SHORT $L137585
$L137586:
	and	ebx, -1073741825			; bfffffffH
$L137585:
	test	bl, 68					; 00000044H
	jne	SHORT $L137587
	test	BYTE PTR _SurfPolyFlagsEx$[esp+284], 113 ; 00000071H
	jne	SHORT $L137587
	or	ebx, -2147483648			; 80000000H
	jmp	SHORT $L137589
$L137587:
	test	bl, 4
	je	SHORT $L137589
	and	ebx, -3					; fffffffdH
$L137589:
	mov	ecx, DWORD PTR [esi+19616]
	mov	eax, DWORD PTR [esi+19620]
	mov	edi, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	xor	ecx, ebx
	xor	eax, edi
	test	ch, 1
	mov	DWORD PTR _Xor$137590[esp+284], ecx
	mov	DWORD PTR _XorEx$137591[esp+284], eax
	je	SHORT $L137592
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ebx
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$137591[esp+284]
$L137592:
	test	al, 2
	je	SHORT $L137593
	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$137591[esp+284]
$L137593:
	test	al, 8
	je	SHORT $L137594
	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$137591[esp+284]
$L137594:
	mov	ecx, DWORD PTR _Xor$137590[esp+284]
	test	ecx, -754972601				; d3000847H
	jne	SHORT $L137596
	test	al, 113					; 00000071H
	je	$L137632
$L137596:
	test	ecx, 268435525				; 10000045H
	jne	SHORT $L137598
	test	al, 113					; 00000071H
	je	$L137618
$L137598:
	test	al, 1
	je	SHORT $L137599
	test	BYTE PTR _SurfPolyFlagsEx$[esp+284], 1
	jne	SHORT $L137599
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L137600
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L137601
$L137600:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L137601:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L137599:
	test	ebx, 268435525				; 10000045H
	mov	al, BYTE PTR _SurfPolyFlagsEx$[esp+284]
	jne	SHORT $L137602
	test	al, 113					; 00000071H
	jne	SHORT $L137602
	mov	eax, DWORD PTR [esi+675176]
	test	eax, eax
	jne	SHORT $L137583
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L137618
$L137583:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], 0
	jmp	$L137618
$L137602:
	test	al, 64					; 00000040H
	je	SHORT $L137604
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L138745:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137618
$L137604:
	test	bl, 1
	je	SHORT $L137606
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L138747:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137618
$L137606:
	test	al, 32					; 00000020H
	je	SHORT $L137608
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137618
$L137608:
	test	al, 16					; 00000010H
	je	SHORT $L137610
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L138747
$L137610:
	test	bl, 4
	je	SHORT $L137612
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L138745
$L137612:
	test	bl, 64					; 00000040H
	je	SHORT $L137614
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137618
$L137614:
	test	ebx, 268435456				; 10000000H
	je	SHORT $L137616
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137618
$L137616:
	test	al, 1
	je	$L137618
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L137618:
	test	BYTE PTR _Xor$137590[esp+284], 1
	je	SHORT $L137619
	mov	edx, ebx
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L137619:
	mov	eax, DWORD PTR _Xor$137590[esp+284]
	test	eax, eax
	jns	SHORT $L137621
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ebx
	shr	edx, 31					; 0000001fH
	push	edx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [ecx+200]
$L137621:
	test	BYTE PTR _Xor$137590[esp+284], 2
	je	SHORT $L137624
	test	bl, 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L137623
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	jmp	SHORT $L137624
$L137623:
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L137624:
	mov	eax, DWORD PTR _Xor$137590[esp+284]
	test	ah, 8
	je	SHORT $L137625
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L137625:
	test	DWORD PTR _Xor$137590[esp+284], 1073741824 ; 40000000H
	je	SHORT $L137626
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ebx
	shr	edx, 30					; 0000001eH
	and	edx, 1
	push	edx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [ecx+200]
$L137626:
	test	DWORD PTR _Xor$137590[esp+284], 50331648 ; 03000000H
	je	SHORT $L137632
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	je	SHORT $L137629
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	3
	jmp	SHORT $L138748
$L137629:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L137631
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	2
	jmp	SHORT $L138748
$L137631:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	1
$L138748:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L137632:
	mov	eax, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	DWORD PTR [esi+19616], ebx
	mov	DWORD PTR [esi+19620], eax
	xor	ebp, ebp
$L137584:

; 1302 : 			}
; 1303 : 			// Set up all poly vertices.
; 1304 : 			FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	cmp	DWORD PTR [esi+16684], ebp
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L137636
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L137636:
	cmp	DWORD PTR [esi+16688], ebp
	jne	SHORT $L137637
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L137637:
	mov	edi, DWORD PTR _VertexCount$[esp+284]
	cmp	edi, DWORD PTR [esi+16688]
	jl	SHORT $L137640
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L137640:
	mov	eax, DWORD PTR [esi+16696]
	mov	edx, DWORD PTR [esi+16688]
	lea	ecx, DWORD PTR [eax+edi]
	cmp	ecx, edx
	jge	SHORT $L137654
	mov	edx, DWORD PTR [esi+16684]
	mov	ebx, DWORD PTR [edx]
	push	4096					; 00001000H
	lea	ecx, DWORD PTR [edi+edi*8]
	shl	ecx, 2
	lea	ebp, DWORD PTR _VertexData$137639[esp+288]
	push	ebp
	lea	eax, DWORD PTR [eax+eax*8]
	push	ecx
	shl	eax, 2
	push	eax
	push	edx
	mov	DWORD PTR -252+[esp+304], ecx
	call	DWORD PTR [ebx+44]
	xor	ebp, ebp
	cmp	eax, ebp
	jge	SHORT $L137649
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L137649:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, edi
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L137653
$L137654:
	mov	ecx, DWORD PTR [esi+16684]
	mov	edx, DWORD PTR [ecx]
	push	8192					; 00002000H
	lea	eax, DWORD PTR [edi+edi*8]
	shl	eax, 2
	lea	ebx, DWORD PTR _VertexData$137639[esp+288]
	push	ebx
	push	eax
	push	ebp
	push	ecx
	mov	DWORD PTR -252+[esp+304], eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebp
	jge	SHORT $L137655
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L137655:
	mov	DWORD PTR [esi+16692], ebp
	mov	DWORD PTR [esi+16696], edi
$L137653:

; 1305 : 			D3DCOLOR clr;
; 1306 : 
; 1307 : 			if(Surface.PolyFlags&PF_FlatShaded)

	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ecx, DWORD PTR [eax]
	mov	edi, DWORD PTR _VertexData$137639[esp+284]

; 1308 : 				clr = FColor( Surface.FlatColor).TrueColor() | 0xff000000;

	xor	edx, edx
	test	ecx, 1073741824				; 40000000H
	je	SHORT $L125270
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T137406[esp+284], eax
	mov	dl, BYTE PTR $T137406[esp+286]
	mov	ecx, eax
	shl	ecx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	edx, ecx
	add	edx, eax
	or	edx, -16777216				; ff000000H
	mov	DWORD PTR _clr$125269[esp+284], edx

; 1309 : 			else

	jmp	$L125272
$L125270:

; 1310 : 				clr = FColor(Stages[0]->MaxColor.Plane() * Stages[1]->MaxColor.Plane()).TrueColor() | 0xff000000;

	mov	eax, DWORD PTR [esi+19716]
	mov	dl, BYTE PTR [eax+32]
	add	eax, 32					; 00000020H
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+1]
	mov	DWORD PTR -264+[esp+284], edx
	fild	DWORD PTR -264+[esp+284]
	xor	edx, edx
	mov	dl, BYTE PTR [eax+2]
	fmul	DWORD PTR __real@3b808081
	mov	eax, DWORD PTR [esi+19712]
	mov	DWORD PTR -264+[esp+284], ecx
	fild	DWORD PTR -264+[esp+284]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+32]
	fmul	DWORD PTR __real@3b808081
	add	eax, 32					; 00000020H
	mov	DWORD PTR -264+[esp+284], edx
	fild	DWORD PTR -264+[esp+284]
	xor	edx, edx
	mov	dl, BYTE PTR [eax+1]
	fmul	DWORD PTR __real@3b808081
	mov	DWORD PTR -264+[esp+284], ecx
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+2]
	fstp	DWORD PTR $T137681[esp+292]
	fild	DWORD PTR -264+[esp+284]
	mov	DWORD PTR -264+[esp+284], edx
	fmul	DWORD PTR __real@3b808081
	fild	DWORD PTR -264+[esp+284]
	mov	DWORD PTR -264+[esp+284], ecx
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR $T137703[esp+288]
	fild	DWORD PTR -264+[esp+284]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR $T137703[esp+292]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T137411[esp+284]
	fld	DWORD PTR $T137703[esp+288]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T137411[esp+288]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR $T137703[esp+292]
	fmul	DWORD PTR $T137681[esp+292]
	fstp	DWORD PTR $T137411[esp+292]
	fld	DWORD PTR $T137411[esp+284]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T137730[esp+284]
	fld	DWORD PTR $T137730[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$137780[esp+284]
	mov	eax, DWORD PTR _I$137780[esp+284]
	cmp	eax, ebp
	jge	SHORT $L137785
	mov	BYTE PTR $T137407[esp+284], 0
	jmp	SHORT $L137784
$L137785:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T137407[esp+284], al
	jl	SHORT $L137784
	mov	BYTE PTR $T137407[esp+284], 255		; 000000ffH
$L137784:
	fld	DWORD PTR $T137411[esp+288]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T137748[esp+284]
	fld	DWORD PTR $T137748[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$137790[esp+284]
	mov	eax, DWORD PTR _I$137790[esp+284]
	cmp	eax, ebp
	jge	SHORT $L137795
	mov	BYTE PTR $T137407[esp+285], 0
	jmp	SHORT $L137794
$L137795:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T137407[esp+285], al
	jl	SHORT $L137794
	mov	BYTE PTR $T137407[esp+285], 255		; 000000ffH
$L137794:
	fld	DWORD PTR $T137411[esp+292]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T137766[esp+284]
	fld	DWORD PTR $T137766[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$137800[esp+284]
	mov	edx, DWORD PTR _I$137800[esp+284]
	push	255					; 000000ffH
	push	ebp
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T137407[esp+286], bl
	mov	DWORD PTR $T137773[esp+284], 0
	fld	DWORD PTR $T137773[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$137804[esp+284]
	mov	eax, DWORD PTR _I$137804[esp+284]
	push	255					; 000000ffH
	push	ebp
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	xor	ecx, ecx
	mov	cl, bl
	mov	BYTE PTR $T137407[esp+299], al
	mov	eax, DWORD PTR $T137407[esp+296]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	esp, 12					; 0000000cH
	add	ecx, edx
	add	ecx, eax
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR _clr$125269[esp+284], ecx
$L125272:

; 1311 : 
; 1312 : 			if(bHeatVision||bNightVision)

	cmp	DWORD PTR _bHeatVision$[esp+284], ebp
	jne	SHORT $L125279
	cmp	DWORD PTR _bNightVision$[esp+284], ebp
	je	SHORT $L125278
$L125279:

; 1313 : 			{
; 1314 : 				clr=myFinalColor.TrueColor() | 0xFF000000;

	mov	ecx, DWORD PTR _myFinalColor$[esp+284]
	xor	eax, eax
	mov	al, BYTE PTR _myFinalColor$[esp+286]
	shl	ecx, 16					; 00000010H
	mov	ah, BYTE PTR _myFinalColor$[esp+285]
	add	eax, ecx
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _clr$125269[esp+284], eax
$L125278:

; 1315 : 			}
; 1316 : 
; 1317 : 			if(SurfPolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	test	BYTE PTR _SurfPolyFlagsEx$[esp+284], 48	; 00000030H
	je	SHORT $L125280

; 1318 : 			{
; 1319 : 				clr=0xFFFFFFFF;

	mov	DWORD PTR _clr$125269[esp+284], -1

; 1320 : 			}
; 1321 : 			else if(SurfPolyFlags&PF_Modulated)

	jmp	SHORT $L125282
$L125280:
	test	BYTE PTR _SurfPolyFlags$[esp+284], 64	; 00000040H
	je	SHORT $L125282

; 1322 : 			{
; 1323 : 				clr = (0xFF<<24)|(248<<16)|(248<<8)|248;	// NJS: 248 is the darkening correction needed to remove boxes from modulated decals, etc

	mov	DWORD PTR _clr$125269[esp+284], -460552	; fff8f8f8H
$L125282:

; 1324 : 			}
; 1325 : 
; 1326 : 			INT n=0;
; 1327 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	eax, DWORD PTR [edx+100]
	cmp	eax, ebp
	mov	DWORD PTR _n$125283[esp+284], ebp
	mov	DWORD PTR _Poly$125284[esp+284], eax
	je	$L125287
$L125285:

; 1328 : 			{
; 1329 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	eax, DWORD PTR _Poly$125284[esp+284]
	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	mov	DWORD PTR _i$125288[esp+284], 0
	jle	$L125286
	mov	eax, DWORD PTR _n$125283[esp+284]
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR _Poly$125284[esp+284]
	lea	edx, DWORD PTR [esi+ecx*8+19748]
	mov	DWORD PTR -240+[esp+284], edx
	lea	ebp, DWORD PTR [eax+16]
$L125289:

; 1330 : 				{
; 1331 : 					GET_COLOR_DWORD(V->Color)   = clr;

	mov	ecx, DWORD PTR _clr$125269[esp+284]

; 1332 : 					FLOAT R = V->Position.W   = Poly->Pts[i]->RZ * Frame->RProj.Z;

	mov	eax, DWORD PTR _Frame$[esp+284]
	mov	DWORD PTR [edi+16], ecx
	mov	edx, DWORD PTR [ebp]
	fld	DWORD PTR [edx+28]

; 1333 : 					FLOAT Z = V->Position.Z    = ProjectionMatrix._33 + ProjectionMatrix._43 * R;					
; 1334 : 					FLOAT Y = V->Position.Y    = Poly->Pts[i]->ScreenY + Frame->YB - 0.5f; 
; 1335 : 					FLOAT X = V->Position.X    = Poly->Pts[i]->ScreenX + Frame->XB - 0.5f;
; 1336 : 					
; 1337 : 					//X=V->Position.X+= (appSin(Poly->Pts[i]->Point.Y+appSeconds()*2.2f)*3.1f);  // NJS: Caustics simulation
; 1338 : 					
; 1339 : 					FVector TexPlane = (*(FVector*)Poly->Pts[i] - Facet.MapCoords.Origin);
; 1340 : 					FLOAT u  = Facet.MapCoords.XAxis | TexPlane;
; 1341 : 					FLOAT v  = Facet.MapCoords.YAxis | TexPlane;
; 1342 : 
; 1343 : 					// *************************
; 1344 : 					// NJS: Been getting random crashes around here recently, so just be sure of a few things:
; 1345 : 					check(Surface.Texture);

	mov	ebx, DWORD PTR _Surface$[esp+280]
	fmul	DWORD PTR [eax+232]
	fst	DWORD PTR [edi+12]
	fst	DWORD PTR _R$125293[esp+284]
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fst	DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [ebp]
	fstp	DWORD PTR _Z$125294[esp+284]
	fild	DWORD PTR [eax+180]
	fadd	DWORD PTR [ecx+20]
	mov	ecx, DWORD PTR _Facet$[esp+280]
	fsub	DWORD PTR __real@3f000000
	fst	DWORD PTR [edi+4]
	mov	edx, DWORD PTR [ebp]
	fstp	DWORD PTR _Y$125295[esp+284]
	fild	DWORD PTR [eax+176]
	fadd	DWORD PTR [edx+16]
	fsub	DWORD PTR __real@3f000000
	fst	DWORD PTR [edi]
	mov	eax, DWORD PTR [ebp]
	fstp	DWORD PTR _X$125296[esp+284]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+16]
	test	eax, eax
	fsub	DWORD PTR [ecx+8]
	fld	ST(2)
	fmul	DWORD PTR [ecx+12]
	fld	ST(1)
	fmul	DWORD PTR [ecx+20]
	faddp	ST(1), ST(0)
	fld	ST(2)
	fmul	DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _u$125300[esp+284]
	fmul	DWORD PTR [ecx+32]
	fxch	ST(1)
	fmul	DWORD PTR [ecx+28]
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fmul	DWORD PTR [ecx+24]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v$125301[esp+284]
	jne	SHORT $L125302
	push	1345					; 00000541H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@BICI@Surface?4Texture?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125302:

; 1346 : 					check(Surface.LightMap);

	mov	eax, DWORD PTR [ebx+20]
	test	eax, eax
	jne	SHORT $L125304
	push	1346					; 00000542H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BB@KKDE@Surface?4LightMap?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125304:

; 1347 : 					check(Stages[0]);

	mov	eax, DWORD PTR [esi+19712]
	test	eax, eax
	jne	SHORT $L125306
	push	1347					; 00000543H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_09PNHJ@Stages?$FL0?$FN?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125306:

; 1348 : 					check(Stages[1]);

	mov	eax, DWORD PTR [esi+19716]
	test	eax, eax
	jne	SHORT $L125308
	push	1348					; 00000544H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_09OLND@Stages?$FL1?$FN?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125308:
	lea	eax, DWORD PTR [edi+20]

; 1349 : 					check(V);
; 1350 : 					check(V->U);

	test	eax, eax
	jne	SHORT $L125312
	push	1350					; 00000546H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_04GHEP@V?9?$DOU?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125312:
	lea	ebx, DWORD PTR [edi+28]

; 1351 : 					check(V->U2);

	test	ebx, ebx
	jne	SHORT $L125314
	push	1351					; 00000547H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_05MGNJ@V?9?$DOU2?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125314:

; 1352 : 					// *************************
; 1353 : 
; 1354 : 					V->U [0] = (u - Surface.Texture->Pan.X                                   ) * Stages[0]->UScale;

	mov	ecx, DWORD PTR _Surface$[esp+280]
	fld	DWORD PTR _u$125300[esp+284]
	mov	eax, DWORD PTR [ecx+16]
	fsub	DWORD PTR [eax+20]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [edx+24]
	fstp	DWORD PTR [edi+20]

; 1355 : 					V->U [1] = (v - Surface.Texture->Pan.Y                                   ) * Stages[0]->VScale;

	mov	eax, DWORD PTR [ecx+16]
	fld	DWORD PTR _v$125301[esp+284]
	mov	edx, DWORD PTR [esi+19712]
	fsub	DWORD PTR [eax+24]
	fmul	DWORD PTR [edx+28]
	fstp	DWORD PTR [edi+24]

; 1356 : 					V->U2[0] = (u - Surface.LightMap->Pan.X + 0.5f * Surface.LightMap->UScale) * Stages[1]->UScale;

	mov	eax, DWORD PTR [ecx+20]
	fld	DWORD PTR _u$125300[esp+284]
	fsub	DWORD PTR [eax+20]
	fld	DWORD PTR [eax+40]
	mov	eax, DWORD PTR [esi+19716]
	fmul	DWORD PTR __real@3f000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [eax+24]
	fstp	DWORD PTR [ebx]

; 1357 : 					V->U2[1] = (v - Surface.LightMap->Pan.Y + 0.5f * Surface.LightMap->VScale) * Stages[1]->VScale;

	mov	eax, DWORD PTR [ecx+20]
	fld	DWORD PTR _v$125301[esp+284]
	mov	ecx, DWORD PTR [esi+19716]
	fsub	DWORD PTR [eax+24]
	fld	DWORD PTR [eax+44]

; 1358 : 
; 1359 : 					//V->U[2] = 1.0f;
; 1360 : 					//V->U[3] = 1.0f;
; 1361 : 					
; 1362 : 					if( StoreVertInfo ) 

	mov	eax, DWORD PTR _StoreVertInfo$[esp+284]
	test	eax, eax
	fmul	DWORD PTR __real@3f000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [ecx+28]
	fstp	DWORD PTR [edi+32]
	je	SHORT $L138679

; 1363 : 					{
; 1364 : 						check(n<ARRAY_COUNT(Verts));

	cmp	DWORD PTR _n$125283[esp+284], 16384	; 00004000H
	jb	SHORT $L125317
	push	1364					; 00000554H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BF@MPKE@n?$DMARRAY_COUNT?$CIVerts?$CJ?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125317:

; 1365 : 						Verts[n].Position.X = X;    

	mov	eax, DWORD PTR -240+[esp+284]
	mov	edx, DWORD PTR _X$125296[esp+284]

; 1366 : 						Verts[n].Position.Y = Y;

	mov	ecx, DWORD PTR _Y$125295[esp+284]
	mov	DWORD PTR [eax-4], edx

; 1367 : 						Verts[n].Position.Z = Z;

	mov	edx, DWORD PTR _Z$125294[esp+284]
	mov	DWORD PTR [eax], ecx

; 1368 : 						Verts[n].Position.W = R;

	mov	ecx, DWORD PTR _R$125293[esp+284]
	mov	DWORD PTR [eax+4], edx

; 1369 : 						Verts[n].U[0]= u;

	mov	edx, DWORD PTR _u$125300[esp+284]
	mov	DWORD PTR [eax+8], ecx

; 1370 : 						Verts[n].U[1]= v;

	mov	ecx, DWORD PTR _v$125301[esp+284]
	mov	DWORD PTR [eax+20], edx
	mov	DWORD PTR [eax+24], ecx
	jmp	SHORT $L125290
$L138679:
	mov	eax, DWORD PTR -240+[esp+284]
$L125290:

; 1328 : 			{
; 1329 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	ecx, DWORD PTR _i$125288[esp+284]
	mov	edx, DWORD PTR _n$125283[esp+284]
	inc	ecx
	add	ebp, 4
	inc	edx
	add	eax, 40					; 00000028H
	mov	DWORD PTR _n$125283[esp+284], edx
	mov	edx, DWORD PTR _Poly$125284[esp+284]
	mov	DWORD PTR -240+[esp+284], eax
	mov	eax, DWORD PTR [edx+12]
	add	edi, 36					; 00000024H
	cmp	ecx, eax
	mov	DWORD PTR _i$125288[esp+284], ecx
	jl	$L125289
$L125286:

; 1324 : 			}
; 1325 : 
; 1326 : 			INT n=0;
; 1327 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	eax, DWORD PTR _Poly$125284[esp+284]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	mov	DWORD PTR _Poly$125284[esp+284], eax
	jne	$L125285
$L125287:

; 1371 : 					}			
; 1372 : 				}
; 1373 : 			}
; 1374 : 
; 1375 : 			// Draw base texture + lightmap.
; 1376 : 			INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L137837
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 1936 : 	}

	npad	7

; 1371 : 					}			
; 1372 : 				}
; 1373 : 			}
; 1374 : 
; 1375 : 			// Draw base texture + lightmap.
; 1376 : 			INT First = WorldVertices.Unlock();

$L137837:
	mov	eax, DWORD PTR [esi+16684]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L137838
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L137838:

; 1377 : 		
; 1378 : 			for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [ecx+100]
	test	edi, edi
	mov	ebp, DWORD PTR [esi+16692]
	je	SHORT $L125322
$L125320:

; 1379 : 			{
; 1380 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 2
	push	ecx
	push	ebp
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 1381 : 				First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1382 : 				Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebp, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L125320
$L125322:

; 1383 : 			}
; 1384 : 
; 1385 : 			SetTextureNULL(1);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	1
	push	eax
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19716], eax

; 1386 : 			// Handle depth buffering the appropriate areas of masked textures.
; 1387 : 			if( SurfPolyFlags & PF_Masked )

	mov	eax, DWORD PTR _SurfPolyFlags$[esp+284]
	and	eax, 2
	mov	DWORD PTR -232+[esp+284], eax
	je	$L125402

; 1388 : 				Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_EQUAL );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]

; 1389 : 		}
; 1390 : 		else

	jmp	$L125402
$L125264:

; 1391 : 		{
; 1392 : 			// Set up all poly vertices.
; 1393 : 			if(SurfPolyFlags&PF_FlatShaded)

	mov	eax, ebp
	and	eax, 1073741824				; 40000000H
	mov	DWORD PTR -228+[esp+284], eax
	je	$L125325

; 1394 : 			{
; 1395 : 				SetTextureNULL(0);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	xor	ebp, ebp
	push	ebp
	push	ebp
	push	eax
	call	DWORD PTR [edx+244]

; 1396 : 				SetTextureNULL(1);

	push	ebp
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [ecx+244]
	mov	DWORD PTR [esi+19716], edi

; 1397 : 				SetBlending();

	mov	ebx, DWORD PTR [esi+19616]
	mov	edx, DWORD PTR [esi+19620]
	xor	ebx, -2147483648			; 80000000H
	test	bh, 1
	mov	DWORD PTR _XorEx$137882[esp+284], edx
	je	SHORT $L137883
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
$L137883:
	mov	al, BYTE PTR _XorEx$137882[esp+284]
	test	al, 2
	je	SHORT $L137884
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	al, BYTE PTR _XorEx$137882[esp+284]
$L137884:
	test	al, 8
	je	SHORT $L137885
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	al, BYTE PTR _XorEx$137882[esp+284]
$L137885:
	test	ebx, -754972601				; d3000847H
	jne	SHORT $L137887
	test	al, 113					; 00000071H
	je	$L137923
$L137887:
	test	ebx, 268435525				; 10000045H
	jne	SHORT $L137889
	test	al, 113					; 00000071H
	je	$L137873
$L137889:
	test	al, 1
	je	SHORT $L137890
	cmp	DWORD PTR [esi+19128], ebp
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L137891
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L137892
$L137891:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
$L137892:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L137890:
	cmp	DWORD PTR [esi+675176], ebp
	jne	SHORT $L137874
	cmp	DWORD PTR ?CacheBlending@@3HA, ebp	; CacheBlending
	jne	SHORT $L137873
$L137874:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], ebp
$L137873:
	test	bl, 1
	je	SHORT $L137910
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L137910:
	test	ebx, ebx
	jns	SHORT $L137912
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [ecx+200]
$L137912:
	test	bl, 2
	je	SHORT $L137915
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L137915:
	test	bh, 8
	je	SHORT $L137916
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
$L137916:
	test	ebx, 1073741824				; 40000000H
	je	SHORT $L137917
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [ecx+200]
$L137917:
	test	ebx, 50331648				; 03000000H
	je	SHORT $L137923
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L137923:
	mov	DWORD PTR [esi+19616], -2147483648	; 80000000H
	mov	DWORD PTR [esi+19620], ebp

; 1398 : 			} else

	jmp	$L137926
$L125325:

; 1399 : 			{
; 1400 : 				SetTexture( 0, *Surface.Texture, SurfPolyFlags, 0 );

	mov	edx, DWORD PTR [ebx+16]
	push	0
	push	0
	push	0
	push	ebp
	push	edx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1401 : 				SetBlending( SurfPolyFlags&~PF_Memorized, SurfPolyFlagsEx );

	and	ebp, -16777217				; feffffffH
	mov	DWORD PTR $T137976[esp+284], ebp
	and	ebp, 1073741892				; 40000044H
	cmp	ebp, 1073741824				; 40000000H
	jne	SHORT $L137928
	mov	eax, DWORD PTR [esi+19148]
	test	eax, eax
	jne	SHORT $L138708
$L137928:
	mov	eax, DWORD PTR $T137976[esp+284]
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR $T137976[esp+284], eax
	jmp	SHORT $L137927
$L138708:
	mov	eax, DWORD PTR $T137976[esp+284]
$L137927:
	test	al, 68					; 00000044H
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	jne	SHORT $L137929
	test	cl, 113					; 00000071H
	jne	SHORT $L137929
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L138749
$L137929:
	test	al, 4
	je	SHORT $L137931
	and	eax, -3					; fffffffdH
$L138749:
	mov	DWORD PTR $T137976[esp+284], eax
$L137931:
	mov	edx, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	edx, eax
	xor	ebx, ecx
	test	dh, 1
	mov	DWORD PTR _Xor$137932[esp+284], edx
	je	SHORT $L137935
	mov	edx, DWORD PTR $T137976[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T137976[esp+284]
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
$L137935:
	test	bl, 2
	je	SHORT $L137936
	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T137976[esp+284]
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
$L137936:
	test	bl, 8
	je	SHORT $L137937
	mov	edx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T137976[esp+284]
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
$L137937:
	test	DWORD PTR _Xor$137932[esp+284], -754972601 ; d3000847H
	jne	SHORT $L137939
	test	bl, 113					; 00000071H
	je	$L137975
	mov	eax, DWORD PTR $T137976[esp+284]
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
$L137939:
	test	DWORD PTR _Xor$137932[esp+284], 268435525 ; 10000045H
	jne	SHORT $L137941
	test	bl, 113					; 00000071H
	je	$L137961
$L137941:
	test	bl, 1
	je	SHORT $L137942
	test	cl, 1
	jne	SHORT $L137942
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L137943
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L137944
$L137943:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L137944:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR $T137976[esp+284]
	mov	ecx, DWORD PTR _SurfPolyFlagsEx$[esp+284]
$L137942:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L137945
	test	cl, 113					; 00000071H
	jne	SHORT $L137945
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L137961
$L137945:
	test	cl, 64					; 00000040H
	je	SHORT $L137947
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L138750:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137961
$L137947:
	test	al, 1
	je	SHORT $L137949
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L138752:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137961
$L137949:
	test	cl, 32					; 00000020H
	je	SHORT $L137951
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137961
$L137951:
	test	cl, 16					; 00000010H
	je	SHORT $L137953
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L138752
$L137953:
	test	al, 4
	je	SHORT $L137955
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L138750
$L137955:
	test	al, 64					; 00000040H
	je	SHORT $L137957
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137961
$L137957:
	test	eax, 268435456				; 10000000H
	je	SHORT $L137959
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L137961
$L137959:
	test	cl, 1
	je	$L137961
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L137961:
	test	BYTE PTR _Xor$137932[esp+284], 1
	je	SHORT $L137962
	mov	edx, DWORD PTR $T137976[esp+284]
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L137962:
	mov	eax, DWORD PTR _Xor$137932[esp+284]
	test	eax, eax
	jns	SHORT $L137964
	mov	ecx, DWORD PTR $T137976[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L137964:
	test	BYTE PTR _Xor$137932[esp+284], 2
	je	SHORT $L137967
	test	BYTE PTR $T137976[esp+284], 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L137966
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L137967
$L137966:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L137967:
	mov	ebp, DWORD PTR _Xor$137932[esp+284]
	test	ebp, 2048				; 00000800H
	mov	ebx, DWORD PTR $T137976[esp+284]
	je	SHORT $L137968
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L137968:
	test	ebp, 1073741824				; 40000000H
	je	SHORT $L137969
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L137969:
	test	ebp, 50331648				; 03000000H
	je	SHORT $L137975
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L137972
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L138753
$L137972:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L137974
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L138753
$L137974:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L138753:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L137975:
	mov	edx, DWORD PTR $T137976[esp+284]
	mov	eax, DWORD PTR _SurfPolyFlagsEx$[esp+284]
	mov	DWORD PTR [esi+19616], edx
	mov	DWORD PTR [esi+19620], eax
$L137926:

; 1402 : 			}
; 1403 : 
; 1404 : 			// Count things to draw to plan when to do the final color-scaling pass.
; 1405 : 			INT ModulateThings = (Surface.Texture!=NULL) + (Surface.LightMap!=NULL) + (Surface.MacroTexture!=NULL);

	mov	ebp, DWORD PTR _Surface$[esp+280]
	mov	edx, DWORD PTR [ebp+20]
	mov	eax, DWORD PTR [ebp+24]
	mov	edi, DWORD PTR [ebp+16]
	xor	ecx, ecx
	test	edx, edx
	setne	cl

; 1406 : 			FPlane FinalColor(1,1,1,1);			
; 1407 : 			FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	xor	edx, edx
	test	eax, eax
	setne	dl
	xor	eax, eax
	mov	DWORD PTR _FinalColor$125328[esp+284], 1065353216 ; 3f800000H
	mov	DWORD PTR _FinalColor$125328[esp+288], 1065353216 ; 3f800000H
	mov	DWORD PTR _FinalColor$125328[esp+292], 1065353216 ; 3f800000H
	mov	DWORD PTR _FinalColor$125328[esp+296], 1065353216 ; 3f800000H
	add	ecx, edx
	test	edi, edi
	setne	al
	add	ecx, eax
	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	mov	DWORD PTR _ModulateThings$125327[esp+284], ecx
	jne	SHORT $L137987
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L137987:
	mov	eax, DWORD PTR [esi+16688]
	test	eax, eax
	jne	SHORT $L137988
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L137988:
	mov	edi, DWORD PTR _VertexCount$[esp+284]
	cmp	edi, DWORD PTR [esi+16688]
	jl	SHORT $L137991
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L137991:
	mov	eax, DWORD PTR [esi+16696]
	mov	edx, DWORD PTR [esi+16688]
	lea	ecx, DWORD PTR [eax+edi]
	cmp	ecx, edx
	jge	$L138005
	mov	ecx, DWORD PTR [esi+16684]
	mov	ebx, DWORD PTR [ecx]
	push	4096					; 00001000H
	lea	edx, DWORD PTR [edi+edi*8]
	shl	edx, 2
	lea	ebp, DWORD PTR _VertexData$137990[esp+288]
	push	ebp
	push	edx
	mov	DWORD PTR -252+[esp+296], edx
	lea	edx, DWORD PTR [eax+eax*8]
	shl	edx, 2
	push	edx
	push	ecx
	call	DWORD PTR [ebx+44]
	test	eax, eax
	jge	SHORT $L138000
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138000:
	mov	eax, DWORD PTR [esi+16696]
	mov	ebp, DWORD PTR _Surface$[esp+280]
	mov	DWORD PTR [esi+16692], eax
	add	eax, edi
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L138004

; 1936 : 	}

	npad	1

; 1406 : 			FPlane FinalColor(1,1,1,1);			
; 1407 : 			FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

$L138005:
	mov	eax, DWORD PTR [esi+16684]
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR [edi+edi*8]
	shl	ecx, 2
	lea	ebx, DWORD PTR _VertexData$137990[esp+288]
	push	ebx
	push	ecx
	push	0
	push	eax
	mov	DWORD PTR -252+[esp+304], ecx
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L138006
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138006:
	mov	DWORD PTR [esi+16692], 0
	mov	DWORD PTR [esi+16696], edi
$L138004:

; 1408 : 			D3DCOLOR Clr;
; 1409 : 			if( SurfPolyFlags & PF_FlatShaded )

	mov	eax, DWORD PTR -228+[esp+284]
	mov	edi, DWORD PTR _VertexData$137990[esp+284]
	or	ebx, -1

; 1410 : 				Clr = FColor( Surface.FlatColor).TrueColor() | 0xff000000;

	xor	edx, edx
	test	eax, eax
	je	SHORT $L125332
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR $T137412[esp+284], eax
	mov	dl, BYTE PTR $T137412[esp+286]
	mov	ecx, eax
	shl	ecx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	edx, ecx
	add	edx, eax
	or	edx, -16777216				; ff000000H
	mov	DWORD PTR _Clr$125331[esp+284], edx

; 1411 : 			else

	jmp	$L138053
$L125332:

; 1412 : 				Clr = UpdateModulation( ModulateThings, FinalColor, Stages[0]->MaxColor.Plane() );

	mov	eax, DWORD PTR [esi+19712]
	mov	dl, BYTE PTR [eax+34]
	add	eax, 32					; 00000020H
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+1]
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR -256+[esp+296], edx
	fild	DWORD PTR -256+[esp+296]
	xor	edx, edx
	mov	dl, BYTE PTR [eax]
	fmul	DWORD PTR __real@3b808081
	mov	DWORD PTR -256+[esp+296], ecx
	lea	ecx, DWORD PTR $T138028[esp+296]
	fstp	DWORD PTR [esp+8]
	fild	DWORD PTR -256+[esp+296]
	mov	DWORD PTR -256+[esp+296], edx
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp+4]
	fild	DWORD PTR -256+[esp+296]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T138028[esp+284]
	fmul	DWORD PTR _FinalColor$125328[esp+284]
	mov	eax, DWORD PTR _ModulateThings$125327[esp+284]
	dec	eax
	mov	DWORD PTR _ModulateThings$125327[esp+284], eax
	fstp	DWORD PTR _FinalColor$125328[esp+284]
	fld	DWORD PTR $T138028[esp+288]
	fmul	DWORD PTR _FinalColor$125328[esp+288]
	fstp	DWORD PTR _FinalColor$125328[esp+288]
	fld	DWORD PTR $T138028[esp+292]
	fmul	DWORD PTR _FinalColor$125328[esp+292]
	fstp	DWORD PTR _FinalColor$125328[esp+292]
	je	SHORT $L138052
	mov	DWORD PTR _Clr$125331[esp+284], ebx
	jmp	SHORT $L138053
$L138052:
	lea	eax, DWORD PTR _FinalColor$125328[esp+284]
	push	eax
	lea	ecx, DWORD PTR $T138051[esp+288]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	eax, DWORD PTR [eax]
	xor	ecx, ecx
	mov	DWORD PTR _D$138057[esp+284], eax
	mov	cl, BYTE PTR _D$138057[esp+286]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	ecx, edx
	add	ecx, eax
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR _Clr$125331[esp+284], ecx
$L138053:

; 1413 : 
; 1414 : 			if(bHeatVision||bNightVision)

	mov	eax, DWORD PTR _bHeatVision$[esp+284]
	test	eax, eax
	jne	SHORT $L125338
	mov	eax, DWORD PTR _bNightVision$[esp+284]
	test	eax, eax
	je	SHORT $L125337
$L125338:

; 1415 : 			{
; 1416 : 				Clr=myFinalColor.TrueColor() | 0xFF000000;

	mov	ecx, DWORD PTR _myFinalColor$[esp+284]
	xor	eax, eax
	mov	al, BYTE PTR _myFinalColor$[esp+286]
	shl	ecx, 16					; 00000010H
	mov	ah, BYTE PTR _myFinalColor$[esp+285]
	add	eax, ecx
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _Clr$125331[esp+284], eax
$L125337:

; 1417 : 			}
; 1418 : 
; 1419 : 			if(SurfPolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	test	BYTE PTR _SurfPolyFlagsEx$[esp+284], 48	; 00000030H
	je	SHORT $L125339

; 1420 : 			{
; 1421 : 				Clr=0xFFFFFFFF;

	mov	DWORD PTR _Clr$125331[esp+284], ebx

; 1422 : 			}
; 1423 : 			else if(SurfPolyFlags&PF_Modulated)

	jmp	SHORT $L125341
$L125339:
	test	BYTE PTR _SurfPolyFlags$[esp+284], 64	; 00000040H
	je	SHORT $L125341

; 1424 : 			{
; 1425 : 				Clr = (0xFF<<24)|(248<<16)|(248<<8)|248;

	mov	DWORD PTR _Clr$125331[esp+284], -460552	; fff8f8f8H
$L125341:

; 1426 : 			}
; 1427 : 
; 1428 : 			INT n=0;
; 1429 : 			//Queued3DLinesFlush(Frame);
; 1430 : 
; 1431 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	ebp, DWORD PTR [edx+100]
	test	ebp, ebp
	mov	DWORD PTR _n$125342[esp+284], 0
	je	$L125346
$L125344:

; 1432 : 			{
; 1433 : 				// Set up vertices.
; 1434 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	eax, DWORD PTR [ebp+12]
	test	eax, eax
	mov	DWORD PTR _i$125347[esp+284], 0
	jle	$L125345
	mov	eax, DWORD PTR _n$125342[esp+284]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	edx, DWORD PTR [esi+eax*8+19748]
	lea	eax, DWORD PTR [ebp+16]
$L125348:

; 1435 : 				{
; 1436 : 					GET_COLOR_DWORD(V->Color) = Clr;

	mov	ecx, DWORD PTR _Clr$125331[esp+284]
	mov	DWORD PTR [edi+16], ecx

; 1437 : 					//GET_COLOR_DWORD(V->Color) =appRand() ^ (appRand()<<16);
; 1438 : 					FLOAT X = V->Position.X  = Poly->Pts[i]->ScreenX + Frame->XB - 0.5f;

	mov	ebx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _Frame$[esp+284]
	fild	DWORD PTR [ecx+176]
	fadd	DWORD PTR [ebx+16]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi]

; 1439 : 					FLOAT Y = V->Position.Y  = Poly->Pts[i]->ScreenY + Frame->YB - 0.5f;

	mov	ebx, DWORD PTR [eax]
	fild	DWORD PTR [ecx+180]
	fadd	DWORD PTR [ebx+20]
	fsub	DWORD PTR __real@3f000000
	fst	DWORD PTR [edi+4]

; 1440 : 					FLOAT R = V->Position.W = Poly->Pts[i]->RZ * Frame->RProj.Z;

	mov	ebx, DWORD PTR [eax]
	fld	DWORD PTR [ebx+28]

; 1441 : 					FLOAT Z = V->Position.Z  = ProjectionMatrix._33 + ProjectionMatrix._43 * R;
; 1442 : 					FVector TexPlane = (*(FVector*)Poly->Pts[i] - Facet.MapCoords.Origin);

	mov	ebx, DWORD PTR _Facet$[esp+280]
	fmul	DWORD PTR [ecx+232]
	fst	DWORD PTR [edi+12]
	fst	DWORD PTR _R$125354[esp+284]
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fst	DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [eax]
	fstp	DWORD PTR _Z$125355[esp+284]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [ebx]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [ebx+4]
	fld	DWORD PTR [ecx+8]

; 1443 : 					FLOAT u  = Facet.MapCoords.XAxis | TexPlane;
; 1444 : 					FLOAT v  = Facet.MapCoords.YAxis | TexPlane;
; 1445 : 					V->U[0] = (u - Surface.Texture->Pan.X) * Stages[0]->UScale;

	mov	ecx, DWORD PTR _Surface$[esp+280]
	fsub	DWORD PTR [ebx+8]
	fld	ST(0)
	fmul	DWORD PTR [ebx+20]
	fld	ST(2)
	fmul	DWORD PTR [ebx+16]
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmul	DWORD PTR [ebx+12]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _u$125359[esp+284]
	fxch	ST(2)
	fmul	DWORD PTR [ebx+24]
	fxch	ST(2)
	fmul	DWORD PTR [ebx+32]
	faddp	ST(2), ST(0)
	fmul	DWORD PTR [ebx+28]
	mov	ebx, DWORD PTR [ecx+16]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _v$125360[esp+284]
	fld	DWORD PTR _u$125359[esp+284]
	fsub	DWORD PTR [ebx+20]
	mov	ebx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [ebx+24]
	fstp	DWORD PTR [edi+20]

; 1446 : 					V->U[1] = (v - Surface.Texture->Pan.Y) * Stages[0]->VScale;

	mov	ecx, DWORD PTR [ecx+16]
	fld	DWORD PTR _v$125360[esp+284]
	fsub	DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [ecx+28]

; 1447 : 
; 1448 : 					if( StoreVertInfo )

	mov	ecx, DWORD PTR _StoreVertInfo$[esp+284]
	test	ecx, ecx
	fstp	DWORD PTR [edi+24]
	je	SHORT $L138659

; 1449 : 					{
; 1450 : 						Verts[n].Position.X = X;    

	fld	DWORD PTR [edi]

; 1451 : 						Verts[n].Position.Y = Y;
; 1452 : 						Verts[n].Position.Z = Z;

	mov	ecx, DWORD PTR _Z$125355[esp+284]
	mov	DWORD PTR [edx+4], ecx

; 1453 : 						Verts[n].Position.W = R;

	mov	ecx, DWORD PTR _R$125354[esp+284]
	mov	DWORD PTR [edx+8], ecx

; 1454 : 						Verts[n].U[0]= u;

	mov	ecx, DWORD PTR _u$125359[esp+284]
	fstp	DWORD PTR [edx-4]
	mov	DWORD PTR [edx+20], ecx

; 1455 : 						Verts[n].U[1]= v;

	mov	ecx, DWORD PTR _v$125360[esp+284]
	fstp	DWORD PTR [edx]
	mov	DWORD PTR [edx+24], ecx
	jmp	SHORT $L125349
$L138659:
	fstp	ST(0)
$L125349:

; 1432 : 			{
; 1433 : 				// Set up vertices.
; 1434 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	ecx, DWORD PTR _i$125347[esp+284]
	mov	ebx, DWORD PTR _n$125342[esp+284]
	inc	ecx
	add	eax, 4
	inc	ebx
	mov	DWORD PTR _n$125342[esp+284], ebx
	mov	ebx, DWORD PTR [ebp+12]
	add	edx, 40					; 00000028H
	add	edi, 36					; 00000024H
	cmp	ecx, ebx
	mov	DWORD PTR _i$125347[esp+284], ecx
	jl	$L125348
$L125345:

; 1426 : 			}
; 1427 : 
; 1428 : 			INT n=0;
; 1429 : 			//Queued3DLinesFlush(Frame);
; 1430 : 
; 1431 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	ebp, DWORD PTR [ebp]
	test	ebp, ebp
	jne	$L125344
$L125346:

; 1456 : 					}
; 1457 : 				}
; 1458 : 			}
; 1459 : 
; 1460 : 			// Draw bare base texture.
; 1461 : 			INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L138086
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L138086:
	mov	eax, DWORD PTR [esi+16684]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L138087
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138087:

; 1462 : 			//WorldVertices.Set();
; 1463 : 			for( Poly=Facet.Polys; Poly; n+=Poly->NumPts,Poly=Poly->Next)

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [edx+100]
	test	edi, edi
	mov	ebp, DWORD PTR [esi+16692]
	je	SHORT $L125365

; 1936 : 	}

	npad	4
$L125363:

; 1464 : 			{
; 1465 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	sub	edx, 2
	push	edx
	push	ebp
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 1466 : 				First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1467 : 				Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebp, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L125363
$L125365:

; 1468 : 			}
; 1469 : 
; 1470 : 			SetDistanceFog(false);

	mov	eax, DWORD PTR [esi+675196]
	test	eax, eax
	je	SHORT $L138096
	mov	eax, DWORD PTR [esi+675192]
	test	eax, eax
	je	SHORT $L138096
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675192], 0
$L138096:

; 1471 : 
; 1472 : 			// Handle depth buffering the appropriate areas of masked textures.
; 1473 : 			if( SurfPolyFlags & PF_Masked )

	mov	eax, DWORD PTR _SurfPolyFlags$[esp+284]
	and	eax, 2
	mov	DWORD PTR -232+[esp+284], eax
	je	SHORT $L125366

; 1474 : 				Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_EQUAL );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]
$L125366:

; 1475 : 			
; 1476 : 			// Macrotexture.
; 1477 : 			if( Surface.MacroTexture )

	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	$L125384

; 1478 : 			{
; 1479 : 				// Set the macrotexture.
; 1480 : 				SetBlending( PF_Modulated );

	mov	eax, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	eax, 64					; 00000040H
	test	ah, 1
	mov	DWORD PTR _Xor$138107[esp+284], eax
	je	SHORT $L138109
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$138107[esp+284]
$L138109:
	test	bl, 2
	je	SHORT $L138110
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$138107[esp+284]
$L138110:
	test	bl, 8
	je	SHORT $L138111
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$138107[esp+284]
$L138111:
	test	eax, -754972601				; d3000847H
	jne	SHORT $L138113
	test	bl, 113					; 00000071H
	je	$L138149
$L138113:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L138115
	test	bl, 113					; 00000071H
	je	$L138133
$L138115:
	test	bl, 1
	je	SHORT $L138116
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L138117
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L138118
$L138117:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L138118:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L138116:
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$138107[esp+284]
$L138133:
	test	al, 1
	je	SHORT $L138136
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$138107[esp+284]
$L138136:
	test	eax, eax
	jns	SHORT $L138138
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$138107[esp+284]
$L138138:
	test	al, 2
	je	SHORT $L138141
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$138107[esp+284]
$L138141:
	test	ah, 8
	je	SHORT $L138142
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _Xor$138107[esp+284]
$L138142:
	test	eax, 1073741824				; 40000000H
	je	SHORT $L138143
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$138107[esp+284]
$L138143:
	test	eax, 50331648				; 03000000H
	je	SHORT $L138149
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L138149:

; 1481 : 				SetTexture( 0, *Surface.MacroTexture, 0, 0 );

	mov	eax, DWORD PTR _Surface$[esp+280]
	xor	ebp, ebp
	push	ebp
	push	ebp
	push	ebp
	mov	DWORD PTR [esi+19616], 64		; 00000040H
	mov	DWORD PTR [esi+19620], ebp
	mov	ecx, DWORD PTR [eax+24]
	push	ebp
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1482 : 				D3DCOLOR Clr = UpdateModulation( ModulateThings, FinalColor, Stages[0]->MaxColor.Plane() );

	mov	eax, DWORD PTR [esi+19712]
	xor	edx, edx
	mov	dl, BYTE PTR [eax+34]
	add	eax, 32					; 00000020H
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+1]
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR -256+[esp+296], edx
	fild	DWORD PTR -256+[esp+296]
	xor	edx, edx
	mov	dl, BYTE PTR [eax]
	fmul	DWORD PTR __real@3b808081
	mov	DWORD PTR -256+[esp+296], ecx
	lea	ecx, DWORD PTR $T138163[esp+296]
	fstp	DWORD PTR [esp+8]
	fild	DWORD PTR -256+[esp+296]
	mov	DWORD PTR -256+[esp+296], edx
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp+4]
	fild	DWORD PTR -256+[esp+296]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T138163[esp+284]
	fmul	DWORD PTR _FinalColor$125328[esp+284]
	mov	eax, DWORD PTR _ModulateThings$125327[esp+284]
	dec	eax
	mov	DWORD PTR _ModulateThings$125327[esp+284], eax
	fstp	DWORD PTR _FinalColor$125328[esp+284]
	fld	DWORD PTR $T138163[esp+288]
	fmul	DWORD PTR _FinalColor$125328[esp+288]
	fstp	DWORD PTR _FinalColor$125328[esp+288]
	fld	DWORD PTR $T138163[esp+292]
	fmul	DWORD PTR _FinalColor$125328[esp+292]
	fstp	DWORD PTR _FinalColor$125328[esp+292]
	je	SHORT $L138192
	mov	DWORD PTR _Clr$125368[esp+284], -1
	jmp	SHORT $L138193
$L138192:
	lea	eax, DWORD PTR _FinalColor$125328[esp+284]
	push	eax
	lea	ecx, DWORD PTR $T138191[esp+288]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	eax, DWORD PTR [eax]
	xor	ecx, ecx
	mov	DWORD PTR _D$138187[esp+284], eax
	mov	cl, BYTE PTR _D$138187[esp+286]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	ecx, edx
	add	ecx, eax
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR _Clr$125368[esp+284], ecx
$L138193:

; 1483 : 				FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	cmp	DWORD PTR [esi+16684], ebp
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L138197
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138197:
	cmp	DWORD PTR [esi+16688], ebp
	jne	SHORT $L138198
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138198:
	mov	ebx, DWORD PTR _VertexCount$[esp+284]
	cmp	ebx, DWORD PTR [esi+16688]
	jl	SHORT $L138201
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138201:
	mov	ecx, DWORD PTR [esi+16696]
	mov	edx, DWORD PTR [esi+16688]
	lea	eax, DWORD PTR [ecx+ebx]
	cmp	eax, edx
	mov	eax, DWORD PTR [esi+16684]
	jge	SHORT $L138215
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$138200[esp+288]
	push	edi
	mov	edi, DWORD PTR -252+[esp+292]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	push	edi
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebp
	jge	SHORT $L138210
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138210:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, ebx
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L138214
$L138215:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$138200[esp+288]
	push	edx
	mov	edx, DWORD PTR -252+[esp+292]
	push	edx
	push	ebp
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebp
	jge	SHORT $L138216
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138216:
	mov	DWORD PTR [esi+16692], ebp
	mov	DWORD PTR [esi+16696], ebx
$L138214:

; 1484 : 				INT n=0;
; 1485 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [edx+100]
	cmp	edi, ebp
	mov	eax, DWORD PTR _VertexData$138200[esp+284]
	je	$L125376

; 1936 : 	}

	npad	3
$L125374:

; 1486 : 				{
; 1487 : 					for( INT i=0; i<Poly->NumPts; i++,n++,V++ )

	mov	ecx, DWORD PTR [edi+12]
	xor	edx, edx
	test	ecx, ecx
	jle	$L125375
	lea	ecx, DWORD PTR [ebp+ebp*4]
	lea	ecx, DWORD PTR [esi+ecx*8+19748]
$L125378:

; 1488 : 					{
; 1489 : 						V->Color = Clr;

	mov	ebx, DWORD PTR _Clr$125368[esp+284]
	mov	DWORD PTR [eax+16], ebx

; 1490 : 						V->Position.X = Verts[n].Position.X;    

	mov	ebx, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax], ebx

; 1491 : 						V->Position.Y = Verts[n].Position.Y;

	mov	ebx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ebx

; 1492 : 						V->Position.W = Verts[n].Position.W;

	mov	ebx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], ebx

; 1493 : 						V->Position.Z = Verts[n].Position.Z;

	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], ebx

; 1494 : 						V->U[0] = (Verts[n].U[0] - Surface.MacroTexture->Pan.X) * Stages[0]->UScale;

	fld	DWORD PTR [ecx+20]
	mov	ebx, DWORD PTR _Surface$[esp+280]
	mov	ebx, DWORD PTR [ebx+24]
	fsub	DWORD PTR [ebx+20]
	mov	ebx, DWORD PTR [esi+19712]
	inc	edx
	inc	ebp
	fmul	DWORD PTR [ebx+24]

; 1495 : 						V->U[1] = (Verts[n].U[1] - Surface.MacroTexture->Pan.Y) * Stages[0]->VScale;

	mov	ebx, DWORD PTR _Surface$[esp+280]
	add	ecx, 40					; 00000028H
	fstp	DWORD PTR [eax+20]
	mov	ebx, DWORD PTR [ebx+24]
	fld	DWORD PTR [ecx-16]
	add	eax, 36					; 00000024H
	fsub	DWORD PTR [ebx+24]
	mov	ebx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [ebx+28]
	fstp	DWORD PTR [eax-12]
	mov	ebx, DWORD PTR [edi+12]
	cmp	edx, ebx
	jl	SHORT $L125378
$L125375:

; 1484 : 				INT n=0;
; 1485 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	$L125374
$L125376:

; 1496 : 					}
; 1497 : 				}
; 1498 : 
; 1499 : 				// Draw.
; 1500 : 				INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L138230
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L138230:
	mov	eax, DWORD PTR [esi+16684]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L138231
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138231:

; 1501 : 
; 1502 : 				for( Poly=Facet.Polys; Poly; n+=Poly->NumPts,Poly=Poly->Next)

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [edx+100]
	test	edi, edi
	mov	ebx, DWORD PTR [esi+16692]
	je	SHORT $L125384

; 1936 : 	}

	npad	3
$L125382:

; 1503 : 				{
; 1504 : 					Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN,  First, Poly->NumPts - 2 );

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	sub	edx, 2
	push	edx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 1505 : 					First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1506 : 					Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebx, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L125382
$L125384:

; 1507 : 				}
; 1508 : 			}
; 1509 : 
; 1510 : 			// Non-multitextured light map.
; 1511 : 			if( Surface.LightMap )

	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	$L125402

; 1512 : 			{
; 1513 : 				// Set the light map.
; 1514 : 				SetBlending( PF_Modulated );

	mov	eax, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	eax, 64					; 00000040H
	test	ah, 1
	mov	DWORD PTR _Xor$138244[esp+284], eax
	je	SHORT $L138246
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$138244[esp+284]
$L138246:
	test	bl, 2
	je	SHORT $L138247
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$138244[esp+284]
$L138247:
	test	bl, 8
	je	SHORT $L138248
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$138244[esp+284]
$L138248:
	test	eax, -754972601				; d3000847H
	jne	SHORT $L138250
	test	bl, 113					; 00000071H
	je	$L138286
$L138250:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L138252
	test	bl, 113					; 00000071H
	je	$L138270
$L138252:
	test	bl, 1
	je	SHORT $L138253
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L138254
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L138255
$L138254:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L138255:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L138253:
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$138244[esp+284]
$L138270:
	test	al, 1
	je	SHORT $L138273
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$138244[esp+284]
$L138273:
	test	eax, eax
	jns	SHORT $L138275
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$138244[esp+284]
$L138275:
	test	al, 2
	je	SHORT $L138278
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$138244[esp+284]
$L138278:
	test	ah, 8
	je	SHORT $L138279
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _Xor$138244[esp+284]
$L138279:
	test	eax, 1073741824				; 40000000H
	je	SHORT $L138280
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$138244[esp+284]
$L138280:
	test	eax, 50331648				; 03000000H
	je	SHORT $L138286
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L138286:

; 1515 : 				SetTexture( 0, *Surface.LightMap, 0, 0 );

	mov	eax, DWORD PTR _Surface$[esp+280]
	xor	ebp, ebp
	push	ebp
	push	ebp
	push	ebp
	mov	DWORD PTR [esi+19616], 64		; 00000040H
	mov	DWORD PTR [esi+19620], ebp
	mov	ecx, DWORD PTR [eax+20]
	push	ebp
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1516 : 				D3DCOLOR Clr = UpdateModulation( ModulateThings, FinalColor, Stages[0]->MaxColor.Plane() );

	mov	eax, DWORD PTR [esi+19712]
	add	eax, 32					; 00000020H
	xor	edx, edx
	mov	dl, BYTE PTR [eax+3]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+2]
	sub	esp, 16					; 00000010H
	mov	DWORD PTR -256+[esp+300], edx
	fild	DWORD PTR -256+[esp+300]
	xor	edx, edx
	mov	dl, BYTE PTR [eax+1]
	fmul	QWORD PTR __real@3f70101010101010
	mov	DWORD PTR -256+[esp+300], ecx
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax]
	fstp	DWORD PTR [esp+12]
	fild	DWORD PTR -256+[esp+300]
	mov	DWORD PTR -256+[esp+300], edx
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp+8]
	fild	DWORD PTR -256+[esp+300]
	mov	DWORD PTR -256+[esp+300], ecx
	lea	ecx, DWORD PTR $T138291[esp+300]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp+4]
	fild	DWORD PTR -256+[esp+300]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FPlane@@QAE@MMMM@Z
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T137417[esp+284], edx
	fld	DWORD PTR $T137417[esp+284]
	fmul	DWORD PTR _FinalColor$125328[esp+284]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _ModulateThings$125327[esp+284]
	mov	DWORD PTR $T137417[esp+288], ecx
	fstp	DWORD PTR _FinalColor$125328[esp+284]
	mov	DWORD PTR $T137417[esp+292], edx
	fld	DWORD PTR $T137417[esp+288]
	dec	eax
	test	eax, eax
	fmul	DWORD PTR _FinalColor$125328[esp+288]
	fstp	DWORD PTR _FinalColor$125328[esp+288]
	fld	DWORD PTR $T137417[esp+292]
	fmul	DWORD PTR _FinalColor$125328[esp+292]
	fstp	DWORD PTR _FinalColor$125328[esp+292]
	je	SHORT $L138308
	mov	DWORD PTR _Clr$125386[esp+284], -1
	jmp	SHORT $L138309
$L138308:
	lea	ecx, DWORD PTR _FinalColor$125328[esp+284]
	push	ecx
	lea	ecx, DWORD PTR $T138307[esp+288]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR _Clr$125386[esp+284], eax
$L138309:

; 1517 : 				FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	cmp	DWORD PTR [esi+16684], ebp
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L138316
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138316:
	cmp	DWORD PTR [esi+16688], ebp
	jne	SHORT $L138317
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138317:
	mov	ebx, DWORD PTR _VertexCount$[esp+284]
	cmp	ebx, DWORD PTR [esi+16688]
	jl	SHORT $L138320
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138320:
	mov	ecx, DWORD PTR [esi+16696]
	mov	eax, DWORD PTR [esi+16688]
	lea	edx, DWORD PTR [ecx+ebx]
	cmp	edx, eax
	mov	eax, DWORD PTR [esi+16684]
	jge	SHORT $L138334
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$138319[esp+288]
	push	edi
	mov	edi, DWORD PTR -252+[esp+292]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	push	edi
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebp
	jge	SHORT $L138329
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138329:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, ebx
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L138333
$L138334:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$138319[esp+288]
	push	edx
	mov	edx, DWORD PTR -252+[esp+292]
	push	edx
	push	ebp
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebp
	jge	SHORT $L138335
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138335:
	mov	DWORD PTR [esi+16692], ebp
	mov	DWORD PTR [esi+16696], ebx
$L138333:

; 1518 : 				INT n=0;
; 1519 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	ebp, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _VertexData$138319[esp+284]
	xor	ebx, ebx
	test	ebp, ebp
	je	$L125394
$L125392:

; 1520 : 				{
; 1521 : 					for( INT i=0; i<Poly->NumPts; i++,n++,V++ )

	mov	ecx, DWORD PTR [ebp+12]
	xor	edi, edi
	test	ecx, ecx
	jle	$L125393
	lea	ecx, DWORD PTR [ebx+ebx*4]
	lea	ecx, DWORD PTR [esi+ecx*8+19748]

; 1936 : 	}

	npad	2

; 1520 : 				{
; 1521 : 					for( INT i=0; i<Poly->NumPts; i++,n++,V++ )

$L125396:

; 1522 : 					{
; 1523 : 						V->Color = Clr;

	mov	edx, DWORD PTR _Clr$125386[esp+284]
	mov	DWORD PTR [eax+16], edx

; 1524 : 						V->Position.X  = Verts[n].Position.X;    

	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax], edx

; 1525 : 						V->Position.Y  = Verts[n].Position.Y;

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 1526 : 						V->Position.W = Verts[n].Position.W;

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1527 : 						V->Position.Z  = Verts[n].Position.Z;

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 1528 : 						V->U[0] = (Verts[n].U[0] - Surface.LightMap->Pan.X + 0.5f * Surface.LightMap->UScale) * Stages[0]->UScale;

	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _Surface$[esp+280]
	mov	edx, DWORD PTR [edx+20]
	fsub	DWORD PTR [edx+20]
	inc	edi
	fld	DWORD PTR [edx+40]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR __real@3f000000
	inc	ebx
	add	ecx, 40					; 00000028H
	add	eax, 36					; 00000024H
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [edx+24]

; 1529 : 						V->U[1] = (Verts[n].U[1] - Surface.LightMap->Pan.Y + 0.5f * Surface.LightMap->VScale) * Stages[0]->VScale;

	mov	edx, DWORD PTR _Surface$[esp+280]
	fstp	DWORD PTR [eax-16]
	mov	edx, DWORD PTR [edx+20]
	fld	DWORD PTR [ecx-16]
	fsub	DWORD PTR [edx+24]
	fld	DWORD PTR [edx+44]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR __real@3f000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [edx+28]
	fstp	DWORD PTR [eax-12]
	mov	edx, DWORD PTR [ebp+12]
	cmp	edi, edx
	jl	SHORT $L125396
$L125393:

; 1518 : 				INT n=0;
; 1519 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	ebp, DWORD PTR [ebp]
	test	ebp, ebp
	jne	$L125392
$L125394:

; 1530 : 					}
; 1531 : 				}
; 1532 : 
; 1533 : 				// Draw.
; 1534 : 				INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	jne	SHORT $L138349
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L138349:
	mov	eax, DWORD PTR [esi+16684]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L138350
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138350:

; 1535 : 
; 1536 : 				for( Poly=Facet.Polys; Poly; n+=Poly->NumPts,Poly=Poly->Next)

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [ecx+100]
	test	edi, edi
	mov	ebx, DWORD PTR [esi+16692]
	je	SHORT $L125402

; 1936 : 	}

	npad	3
$L125400:

; 1537 : 				{
; 1538 : 					Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 2
	push	ecx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 1539 : 					First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1540 : 					Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebx, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L125400
$L125402:

; 1541 : 				}
; 1542 : 			}
; 1543 : 		}
; 1544 : 
; 1545 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [esi+675196]
	xor	ebx, ebx
	cmp	eax, ebx
	je	SHORT $L138358
	cmp	DWORD PTR [esi+675192], ebx
	je	SHORT $L138358
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675192], ebx
$L138358:

; 1546 : 
; 1547 : 		// Draw detail texture overlaid.
; 1548 : 		if(Surface.DetailTexture&&!(SurfPolyFlags&PF_FlatShaded)) 

	mov	edi, DWORD PTR _Surface$[esp+280]
	mov	eax, DWORD PTR [edi+28]
	cmp	eax, ebx
	je	$L125403
	cmp	DWORD PTR -228+[esp+284], ebx
	jne	$L125403

; 1549 : 		{			
; 1550 : 			INT DetailMax = 1; 
; 1551 : 
; 1552 : 			FLOAT DetailScale=1.f; 
; 1553 : 			FLOAT LocalNearZ=NearZ; //380.0f;

	mov	ecx, DWORD PTR ?NearZ@@3MA

; 1554 : 			//if( !GIsEditor )
; 1555 : 				*Surface.DetailTexture->MaxColor = FColor(255,255,255,255);
; 1556 : 			
; 1557 : 			INT AreDetailing = 0;			
; 1558 : 			while( DetailMax-- > 0 )			
; 1559 : 			{				
; 1560 : 				FLOAT InvZ = (1.f/LocalNearZ);

	fld	DWORD PTR __real@3f800000
	mov	DWORD PTR _LocalNearZ$125406[esp+284], ecx
	fdiv	DWORD PTR _LocalNearZ$125406[esp+284]
	mov	edx, DWORD PTR [eax+32]

; 1561 : 				FLOAT SZ = ProjectionMatrix._33 + ProjectionMatrix._43 * InvZ;
; 1562 : 
; 1563 : 				INT n=0;
; 1564 : 				for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	BYTE PTR $T137419[esp+284], 255		; 000000ffH
	mov	BYTE PTR $T137419[esp+285], 255		; 000000ffH
	mov	BYTE PTR $T137419[esp+286], 255		; 000000ffH
	mov	BYTE PTR $T137419[esp+287], 255		; 000000ffH
	mov	eax, DWORD PTR $T137419[esp+284]
	mov	DWORD PTR [edx], eax
	mov	ebp, DWORD PTR [ecx+100]
	cmp	ebp, ebx
	mov	DWORD PTR _AreDetailing$125408[esp+284], ebx
	mov	DWORD PTR _n$125414[esp+284], ebx
	mov	DWORD PTR _Poly$125415[esp+284], ebp
	fst	DWORD PTR _InvZ$125412[esp+284]
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fstp	DWORD PTR _SZ$125413[esp+284]
	je	$L125418
	jmp	SHORT $L125416
$L138694:
	mov	ebp, DWORD PTR _Poly$125415[esp+284]
$L125416:

; 1567 : 					// Any textures close enough that they need detail texturing ?
; 1568 : 					for( INT i=0; i<Poly->NumPts; i++ )

	mov	edx, DWORD PTR [ebp+12]
	xor	ebx, ebx
	xor	ecx, ecx
	test	edx, edx
	jle	$L125425

; 1565 : 				{
; 1566 : 					UBOOL IsNear[32], CountNear = 0;				

	lea	edi, DWORD PTR [ebp+16]
$L125422:

; 1569 : 					{
; 1570 : 						IsNear[i] = Poly->Pts[i]->Point.Z < LocalNearZ;

	mov	eax, DWORD PTR [edi]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR _LocalNearZ$125406[esp+284]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L137420
	mov	eax, 1
	jmp	SHORT $L137421
$L137420:
	xor	eax, eax
$L137421:

; 1571 : 						CountNear += IsNear[i];

	add	ebx, eax
	mov	DWORD PTR _IsNear$125419[esp+ecx*4+284], eax
	inc	ecx
	add	edi, 4
	cmp	ecx, edx
	jl	SHORT $L125422

; 1572 : 					}										
; 1573 : 					if( CountNear )

	test	ebx, ebx
	je	$L125425

; 1574 : 					{
; 1575 : 						INT NumNear = 0;
; 1576 : 						FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(32);  // Safe upper limit for (clipped) facet's triangles * 3						

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR _NumNear$125426[esp+284], 0
	jne	SHORT $L138368
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138368:
	mov	eax, DWORD PTR [esi+16688]
	test	eax, eax
	jne	SHORT $L138369
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138369:
	mov	eax, DWORD PTR [esi+16688]
	mov	ebx, 32					; 00000020H
	cmp	eax, ebx
	jg	SHORT $L138372
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138372:
	mov	ecx, DWORD PTR [esi+16696]
	mov	eax, DWORD PTR [esi+16688]
	lea	edx, DWORD PTR [ecx+32]
	cmp	edx, eax
	mov	eax, DWORD PTR [esi+16684]
	jge	$L138386
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$138371[esp+288]
	push	edi
	lea	ecx, DWORD PTR [ecx+ecx*8]
	push	1152					; 00000480H
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L138381
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138381:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, 32					; 00000020H
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L138385

; 1936 : 	}

	npad	7

; 1574 : 					{
; 1575 : 						INT NumNear = 0;
; 1576 : 						FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(32);  // Safe upper limit for (clipped) facet's triangles * 3						

$L138386:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$138371[esp+288]
	push	edx
	push	1152					; 00000480H
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L138387
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138387:
	mov	DWORD PTR [esi+16692], 0
	mov	DWORD PTR [esi+16696], ebx
$L138385:

; 1577 : 						// Prepare state, minimize changes.
; 1578 : 						if( AreDetailing==0 ) 

	mov	eax, DWORD PTR _AreDetailing$125408[esp+284]
	test	eax, eax
	mov	edi, DWORD PTR _VertexData$138371[esp+284]
	jne	$L125429

; 1579 : 						{
; 1580 : 							SetBlending( PF_Modulated );

	push	0
	mov	edx, 64					; 00000040H
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1581 : 							Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_BLENDDIFFUSEALPHA );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	12					; 0000000cH
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 1582 : 							SetZBias(15.f);

	push	1098907648				; 41800000H
	push	0
	push	1097859072				; 41700000H
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L138399
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L138660
$L138399:
	mov	ebx, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebp, DWORD PTR [ebx]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	ebx
	call	DWORD PTR [ebp+200]
	mov	ebp, DWORD PTR _Poly$125415[esp+284]
	jmp	SHORT $L138398
$L138660:
	fstp	ST(0)
$L138398:

; 1583 : 							SetTexture( 0, *Surface.DetailTexture, 0, 0 );

	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ecx, DWORD PTR [eax+28]
	push	0
	push	0
	push	0
	push	0
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1584 : 							AreDetailing = 1;

	mov	DWORD PTR _AreDetailing$125408[esp+284], 1
$L125429:

; 1585 : 						}
; 1586 : 						// j = one before i; m is one before n;  n is the index into serialized predigested vertex MasterU/V
; 1587 : 						for( INT i=0, j=Poly->NumPts-1, m=n+Poly->NumPts-1; i<Poly->NumPts; j=i++, m=n++ )

	mov	eax, DWORD PTR [ebp+12]
	test	eax, eax
	mov	edx, DWORD PTR _n$125414[esp+284]
	mov	DWORD PTR _i$125430[esp+284], 0
	lea	edx, DWORD PTR [edx+eax-1]
	jle	$L125435
	lea	ecx, DWORD PTR [ebp+16]
	mov	ebx, -19768				; ffffb2c8H
	sub	ebx, esi
	mov	DWORD PTR -248+[esp+284], ecx
	mov	ecx, DWORD PTR _n$125414[esp+284]
	mov	DWORD PTR -216+[esp+284], ebx
	lea	edx, DWORD PTR [edx+edx*4]
	mov	ebx, -16				; fffffff0H
	shl	edx, 3
	sub	ebx, ebp
	mov	ebp, DWORD PTR _i$125430[esp+284]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	eax, DWORD PTR [eax*4-4]
	lea	ecx, DWORD PTR [esi+ecx*8+19768]
	mov	DWORD PTR -236+[esp+284], ebx

; 1936 : 	}

	npad	7

; 1585 : 						}
; 1586 : 						// j = one before i; m is one before n;  n is the index into serialized predigested vertex MasterU/V
; 1587 : 						for( INT i=0, j=Poly->NumPts-1, m=n+Poly->NumPts-1; i<Poly->NumPts; j=i++, m=n++ )

$L125433:

; 1588 : 						{	
; 1589 : 							// Extra vertex if needed to create a new boundary of visible detailing.
; 1590 : 							if( IsNear[i] ^ IsNear[j] )

	mov	ebp, DWORD PTR _IsNear$125419[esp+ebp*4+284]
	mov	ebx, DWORD PTR _IsNear$125419[esp+eax+284]
	xor	ebx, ebp

; 1591 : 							{
; 1592 : 								// near-point-to-detailboundary distance divided by full edge Z distance.
; 1593 : 								// slip Z, X and Y up to that point.
; 1594 : 								FLOAT G    = (Poly->Pts[i]->Point.Z - LocalNearZ) / (Poly->Pts[i]->Point.Z - Poly->Pts[j]->Point.Z);

	mov	ebx, DWORD PTR -248+[esp+284]
	je	$L138663
	mov	ebx, DWORD PTR [ebx]
	fld	DWORD PTR [ebx+8]
	mov	ebp, DWORD PTR _Poly$125415[esp+284]
	fsub	DWORD PTR _LocalNearZ$125406[esp+284]
	mov	ebp, DWORD PTR [eax+ebp+16]
	fld	DWORD PTR [ebx+8]

; 1595 : 								FLOAT F    = 1.f - G;
; 1596 : 								V->Position.W = InvZ;

	mov	ebx, DWORD PTR _InvZ$125412[esp+284]
	fsub	DWORD PTR [ebp+8]
	mov	DWORD PTR [edi+12], ebx

; 1597 : 								V->Position.Z = SZ;

	mov	ebx, DWORD PTR _SZ$125413[esp+284]
	fdivp	ST(1), ST(0)
	mov	DWORD PTR [edi+8], ebx

; 1598 : 								V->Position.X = (F * Poly->Pts[i]->ScreenX * Poly->Pts[i]->Point.Z + G * Poly->Pts[j]->ScreenX * Poly->Pts[j]->Point.Z) * InvZ + Frame->XB - 0.5f;

	mov	ebx, DWORD PTR _Poly$125415[esp+284]
	mov	ebp, DWORD PTR [ebx+eax+16]
	mov	ebx, ebp
	fld	DWORD PTR __real@3f800000
	fsub	ST(0), ST(1)
	fld	DWORD PTR [ebp+16]
	fmul	DWORD PTR [ebx+8]
	mov	ebx, DWORD PTR -248+[esp+284]
	mov	ebx, DWORD PTR [ebx]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [ebx+16]
	fmul	DWORD PTR [ebx+8]
	mov	ebx, DWORD PTR _Frame$[esp+284]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _InvZ$125412[esp+284]
	fiadd	DWORD PTR [ebx+176]

; 1599 : 								V->Position.Y = (F * Poly->Pts[i]->ScreenY * Poly->Pts[i]->Point.Z + G * Poly->Pts[j]->ScreenY * Poly->Pts[j]->Point.Z) * InvZ + Frame->YB - 0.5f;

	mov	ebx, DWORD PTR _Poly$125415[esp+284]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi]
	mov	ebp, DWORD PTR [ebx+eax+16]
	fld	DWORD PTR [ebp+20]
	mov	ebx, DWORD PTR -248+[esp+284]
	mov	eax, ebp
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx]
	fmul	ST(0), ST(2)
	fld	DWORD PTR [eax+20]
	fmul	DWORD PTR [eax+8]
	mov	eax, DWORD PTR _Frame$[esp+284]
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fmul	DWORD PTR _InvZ$125412[esp+284]
	fiadd	DWORD PTR [eax+180]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi+4]

; 1600 : 								if(!WorldDetail)

	mov	eax, DWORD PTR ?WorldDetail@@3HA	; WorldDetail

; 1601 : 								{
; 1602 : 									V->U[0] = (F * Verts[n].U[0] + G * Verts[m].U[0] - Surface.DetailTexture->Pan.X) * Stages[0]->UScale * DetailScale;

	fld	ST(1)
	test	eax, eax
	fmul	DWORD PTR [edx+esi+19768]
	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ebp, DWORD PTR [eax+28]
	fld	ST(1)
	fmul	DWORD PTR [ecx]
	faddp	ST(1), ST(0)
	fsub	DWORD PTR [ebp+20]
	jne	SHORT $L125439
	mov	ebp, DWORD PTR [esi+19712]
	fmul	DWORD PTR [ebp+24]
	fstp	DWORD PTR [edi+20]

; 1603 : 									V->U[1] = (F * Verts[n].U[1] + G * Verts[m].U[1] - Surface.DetailTexture->Pan.Y) * Stages[0]->VScale * DetailScale;

	fxch	ST(1)
	fmul	DWORD PTR [edx+esi+19772]
	mov	edx, DWORD PTR [eax+28]
	fxch	ST(1)
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fsub	DWORD PTR [edx+24]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [edx+28]

; 1604 : 								} else

	jmp	SHORT $L138754
$L125439:

; 1605 : 								{
; 1606 : 									V->U[0] = (F * Verts[n].U[0] + G * Verts[m].U[0] - Surface.DetailTexture->Pan.X) * DetailScale * 0.052083;

	fmul	QWORD PTR __real@3faaaa9f7b5aea31
	fstp	DWORD PTR [edi+20]

; 1607 : 									V->U[1] = (F * Verts[n].U[1] + G * Verts[m].U[1] - Surface.DetailTexture->Pan.Y) * DetailScale * 0.052083 ;

	fxch	ST(1)
	fmul	DWORD PTR [edx+esi+19772]
	mov	edx, DWORD PTR [eax+28]
	fxch	ST(1)
	fmul	DWORD PTR [ecx+4]
	faddp	ST(1), ST(0)
	fsub	DWORD PTR [edx+24]
	fmul	QWORD PTR __real@3faaaa9f7b5aea31
$L138754:

; 1608 : 
; 1609 : 								}
; 1610 : 
; 1611 : 								V->Color = D3DCOLOR_RGBA(0x7F, 0x7F, 0x7F, 0);
; 1612 : 								V++;
; 1613 : 								NumNear++;

	mov	edx, DWORD PTR _NumNear$125426[esp+284]
	fstp	DWORD PTR [edi+24]
	mov	DWORD PTR [edi+16], 8355711		; 007f7f7fH
	add	edi, 36					; 00000024H
	inc	edx
	mov	DWORD PTR _NumNear$125426[esp+284], edx
	jmp	SHORT $L125436
$L138663:
	mov	eax, DWORD PTR _Surface$[esp+280]
$L125436:

; 1614 : 							}
; 1615 : 							if( IsNear[i] )

	mov	ebp, DWORD PTR _i$125430[esp+284]
	mov	edx, DWORD PTR _IsNear$125419[esp+ebp*4+284]
	test	edx, edx
	je	$L125434

; 1616 : 							{
; 1617 : 								V->Position.W =Verts[n].Position.W;

	mov	edx, DWORD PTR [ecx-12]
	mov	DWORD PTR [edi+12], edx

; 1618 : 								V->Position.Z =Verts[n].Position.Z;

	mov	edx, DWORD PTR [ecx-16]
	mov	DWORD PTR [edi+8], edx

; 1619 : 								V->Position.X =Verts[n].Position.X;

	mov	edx, DWORD PTR [ecx-24]
	mov	DWORD PTR [edi], edx

; 1620 : 								V->Position.Y =Verts[n].Position.Y;

	mov	edx, DWORD PTR [ecx-20]
	mov	DWORD PTR [edi+4], edx

; 1621 : 								if(!WorldDetail)
; 1622 : 								{
; 1623 : 									V->U[0] = (Verts[n].U[0] - Surface.DetailTexture->Pan.X) * Stages[0]->UScale * DetailScale;

	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR ?WorldDetail@@3HA	; WorldDetail
	test	edx, edx
	mov	edx, DWORD PTR [eax+28]
	fsub	DWORD PTR [edx+20]
	jne	SHORT $L125443
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR [edx+24]
	fstp	DWORD PTR [edi+20]

; 1624 : 									V->U[1] = (Verts[n].U[1] - Surface.DetailTexture->Pan.Y) * Stages[0]->VScale * DetailScale;

	mov	eax, DWORD PTR [eax+28]
	fld	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [esi+19712]
	fsub	DWORD PTR [eax+24]
	fmul	DWORD PTR [edx+28]

; 1625 : 								} else

	jmp	SHORT $L138755
$L125443:

; 1626 : 								{
; 1627 : 									V->U[0] = (Verts[n].U[0] - Surface.DetailTexture->Pan.X) * DetailScale * 0.052083;

	fmul	QWORD PTR __real@3faaaa9f7b5aea31
	fstp	DWORD PTR [edi+20]

; 1628 : 									V->U[1] = (Verts[n].U[1] - Surface.DetailTexture->Pan.Y) * DetailScale * 0.052083;

	mov	eax, DWORD PTR [eax+28]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [eax+24]
	fmul	QWORD PTR __real@3faaaa9f7b5aea31
$L138755:
	fstp	DWORD PTR [edi+24]

; 1629 : 
; 1630 : 								}
; 1631 : 								DWORD A               = Min<DWORD>( appRound(100.f * (LocalNearZ / Poly->Pts[i]->Point.Z - 1.f)), 255 );

	mov	edx, DWORD PTR [ebx]
	fld	DWORD PTR _LocalNearZ$125406[esp+284]
	fdiv	DWORD PTR [edx+8]
	fsub	DWORD PTR __real@3f800000
	fmul	DWORD PTR __real@42c80000
	fstp	DWORD PTR $T138409[esp+284]
	fld	DWORD PTR $T138409[esp+284]
	fistp	DWORD PTR _I$138408[esp+284]
	mov	eax, DWORD PTR _I$138408[esp+284]
	cmp	eax, 255				; 000000ffH
	jbe	SHORT $L138417
	mov	eax, 255				; 000000ffH
$L138417:

; 1632 : 								V->Color = D3DCOLOR_RGBA( 0x7F, 0x7F, 0x7F, A );

	shl	eax, 24					; 00000018H
	or	eax, 8355711				; 007f7f7fH
	mov	DWORD PTR [edi+16], eax

; 1633 : 								V++;
; 1634 : 								NumNear++;

	mov	eax, DWORD PTR _NumNear$125426[esp+284]
	add	edi, 36					; 00000024H
	inc	eax
	mov	DWORD PTR _NumNear$125426[esp+284], eax
$L125434:
	mov	eax, DWORD PTR -236+[esp+284]
	mov	edx, DWORD PTR -216+[esp+284]
	add	eax, ebx
	add	ebx, 4
	mov	DWORD PTR -248+[esp+284], ebx
	mov	ebx, DWORD PTR _n$125414[esp+284]
	inc	ebp
	add	edx, ecx
	inc	ebx
	mov	DWORD PTR _n$125414[esp+284], ebx
	mov	ebx, DWORD PTR _Poly$125415[esp+284]
	add	ecx, 40					; 00000028H
	cmp	ebp, DWORD PTR [ebx+12]
	mov	DWORD PTR _i$125430[esp+284], ebp
	jl	$L125433

; 1585 : 						}
; 1586 : 						// j = one before i; m is one before n;  n is the index into serialized predigested vertex MasterU/V
; 1587 : 						for( INT i=0, j=Poly->NumPts-1, m=n+Poly->NumPts-1; i<Poly->NumPts; j=i++, m=n++ )

	mov	ebp, ebx
$L125435:

; 1635 : 							}
; 1636 : 
; 1637 : 						}
; 1638 : 						n -= Poly->NumPts;

	mov	eax, DWORD PTR [ebp+12]
	mov	ecx, DWORD PTR _n$125414[esp+284]
	sub	ecx, eax

; 1639 : 						
; 1640 : 						INT First = WorldVertices.Unlock();

	mov	eax, DWORD PTR [esi+16684]
	test	eax, eax
	mov	DWORD PTR _n$125414[esp+284], ecx
	jne	SHORT $L138426
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L138426:
	mov	eax, DWORD PTR [esi+16684]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L138427
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138427:

; 1641 : 
; 1642 : 						Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, NumNear - 2 );

	mov	edx, DWORD PTR _NumNear$125426[esp+284]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	add	edx, -2					; fffffffeH
	push	edx
	mov	edx, DWORD PTR [esi+16692]
	push	edx
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 1643 : 						Stats.Polys++;

	inc	DWORD PTR [esi+19668]
$L125425:

; 1644 : 					}							
; 1645 : 					n += Poly->NumPts;

	mov	eax, DWORD PTR [ebp+12]
	mov	edx, DWORD PTR _n$125414[esp+284]
	add	edx, eax
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	mov	DWORD PTR _n$125414[esp+284], edx
	mov	DWORD PTR _Poly$125415[esp+284], eax
	jne	$L138694

; 1561 : 				FLOAT SZ = ProjectionMatrix._33 + ProjectionMatrix._43 * InvZ;
; 1562 : 
; 1563 : 				INT n=0;
; 1564 : 				for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	xor	ebx, ebx
$L125418:

; 1646 : 				}
; 1647 : 				DetailScale *= 4.223f;
; 1648 : 				LocalNearZ  /= 4.223f;
; 1649 : 			}		
; 1650 : 			if( AreDetailing )

	cmp	DWORD PTR _AreDetailing$125408[esp+284], ebx
	je	$L125472

; 1651 : 			{
; 1652 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 1653 : 				SetZBias(0);

	push	1098907648				; 41800000H
	push	ebx
	push	ebx
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L138437
	cmp	DWORD PTR ?CacheBlending@@3HA, ebx	; CacheBlending
	jne	$L138661
$L138437:
	mov	edi, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebx, DWORD PTR [edi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	edi
	call	DWORD PTR [ebx+200]

; 1654 : 				AreDetailing = 0;
; 1655 : 			}
; 1656 : 		}
; 1657 : 		else if( Surface.FogMap )

	jmp	$L125472
$L125403:
	cmp	DWORD PTR [edi+32], ebx
	je	$L125472

; 1658 : 		{
; 1659 : 			SetBlending( PF_Highlighted );

	push	ebx
	mov	edx, 268435456				; 10000000H
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1660 : 			SetTexture( 0, *Surface.FogMap, 0, 0 );

	mov	edx, DWORD PTR [edi+32]
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	edx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1661 : 			D3DCOLOR Clr = Stages[0]->MaxColor.TrueColor() | 0xff000000;

	mov	eax, DWORD PTR [esi+19712]
	mov	eax, DWORD PTR [eax+32]
	xor	ecx, ecx
	mov	DWORD PTR _D$138442[esp+284], eax
	mov	cl, BYTE PTR _D$138442[esp+286]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	ecx, edx
	add	ecx, eax

; 1662 : 			if( !Format8888.Supported ) // Texture has no alpha.

	mov	al, BYTE PTR [esi+16884]
	or	ecx, -16777216				; ff000000H
	test	al, al
	mov	DWORD PTR _Clr$125455[esp+284], ecx
	jne	SHORT $L125456

; 1663 : 				Clr&=~0xff000000;

	mov	eax, ecx
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR _Clr$125455[esp+284], eax
$L125456:

; 1664 : 
; 1665 : 			FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	cmp	DWORD PTR [esi+16684], ebx
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L138446
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138446:
	cmp	DWORD PTR [esi+16688], ebx
	jne	SHORT $L138447
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138447:
	mov	ebp, DWORD PTR _VertexCount$[esp+284]
	cmp	ebp, DWORD PTR [esi+16688]
	jl	SHORT $L138450
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138450:
	mov	ecx, DWORD PTR [esi+16696]
	mov	edx, DWORD PTR [esi+16688]
	lea	eax, DWORD PTR [ecx+ebp]
	cmp	eax, edx
	mov	eax, DWORD PTR [esi+16684]
	jge	SHORT $L138464
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$138449[esp+288]
	push	edi
	mov	edi, DWORD PTR -252+[esp+292]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	push	edi
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebx
	jge	SHORT $L138459
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138459:
	mov	eax, DWORD PTR [esi+16696]
	mov	DWORD PTR [esi+16692], eax
	add	eax, ebp
	mov	DWORD PTR [esi+16696], eax
	jmp	SHORT $L138463
$L138464:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$138449[esp+288]
	push	edx
	mov	edx, DWORD PTR -252+[esp+292]
	push	edx
	push	ebx
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebx
	jge	SHORT $L138465
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138465:
	mov	DWORD PTR [esi+16692], ebx
	mov	DWORD PTR [esi+16696], ebp
$L138463:

; 1666 : 			INT n = 0;
; 1667 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	ebp, DWORD PTR [edx+100]
	mov	eax, DWORD PTR _VertexData$138449[esp+284]
	xor	ebx, ebx
	test	ebp, ebp
	je	$L125463
$L125461:

; 1668 : 			{
; 1669 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	ecx, DWORD PTR [ebp+12]
	xor	edi, edi
	test	ecx, ecx
	jle	$L125462
	lea	ecx, DWORD PTR [ebx+ebx*4]
	lea	ecx, DWORD PTR [esi+ecx*8+19748]

; 1936 : 	}

	npad	5

; 1668 : 			{
; 1669 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

$L125465:

; 1670 : 				{
; 1671 : 					GET_COLOR_DWORD(V->Color) = Clr;

	mov	edx, DWORD PTR _Clr$125455[esp+284]
	mov	DWORD PTR [eax+16], edx

; 1672 : 					V->Position.X  = Verts[n].Position.X;    

	mov	edx, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax], edx

; 1673 : 					V->Position.Y  = Verts[n].Position.Y;

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 1674 : 					V->Position.W = Verts[n].Position.W;

	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 1675 : 					V->Position.Z  = Verts[n].Position.Z;

	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 1676 : 					V->U[0] = (Verts[n].U[0] - Surface.FogMap->Pan.X + 0.5f * Surface.FogMap->UScale) * Stages[0]->UScale;

	fld	DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _Surface$[esp+280]
	mov	edx, DWORD PTR [edx+32]
	fsub	DWORD PTR [edx+20]
	inc	edi
	fld	DWORD PTR [edx+40]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR __real@3f000000
	inc	ebx
	add	ecx, 40					; 00000028H
	add	eax, 36					; 00000024H
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [edx+24]

; 1677 : 					V->U[1] = (Verts[n].U[1] - Surface.FogMap->Pan.Y + 0.5f * Surface.FogMap->VScale) * Stages[0]->VScale;

	mov	edx, DWORD PTR _Surface$[esp+280]
	fstp	DWORD PTR [eax-16]
	mov	edx, DWORD PTR [edx+32]
	fld	DWORD PTR [ecx-16]
	fsub	DWORD PTR [edx+24]
	fld	DWORD PTR [edx+44]
	mov	edx, DWORD PTR [esi+19712]
	fmul	DWORD PTR __real@3f000000
	faddp	ST(1), ST(0)
	fmul	DWORD PTR [edx+28]
	fstp	DWORD PTR [eax-12]
	mov	edx, DWORD PTR [ebp+12]
	cmp	edi, edx
	jl	SHORT $L125465
$L125462:

; 1666 : 			INT n = 0;
; 1667 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	ebp, DWORD PTR [ebp]
	test	ebp, ebp
	jne	$L125461
$L125463:

; 1678 : 				}
; 1679 : 			}
; 1680 : 			// Draw 
; 1681 : 			INT First = WorldVertices.Unlock();

	lea	ecx, DWORD PTR [esi+16680]
	call	?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock
	mov	ebx, eax

; 1682 : 
; 1683 : 			for( Poly=Facet.Polys; Poly; n+=Poly->NumPts,Poly=Poly->Next)

	mov	eax, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [eax+100]
	test	edi, edi
	je	SHORT $L125472
$L125470:

; 1684 : 			{
; 1685 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	sub	edx, 2
	push	edx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 1686 : 				First += Poly->NumPts;

	mov	edx, DWORD PTR [edi+12]

; 1687 : 				Stats.Polys++;

	mov	ecx, DWORD PTR [esi+19668]
	add	ebx, edx
	inc	ecx
	mov	DWORD PTR [esi+19668], ecx
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L125470

; 1653 : 				SetZBias(0);

	jmp	SHORT $L125472
$L138661:
	fstp	ST(0)
$L125472:

; 1688 : 			}		
; 1689 : 		}
; 1690 : 
; 1691 : 		if( Surface.PolyFlags & PF_FlatShaded )  // Wireframe Overlay

	mov	eax, DWORD PTR _Surface$[esp+280]
	test	DWORD PTR [eax], 1073741824		; 40000000H
	je	$L125473

; 1692 : 		{
; 1693 : 			SetZBias(16.f);

	push	1098907648				; 41800000H
	mov	ecx, esi
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)

; 1694 : 						// Set up all poly vertices.
; 1695 : 			FD3DScreenVertex* V=(FD3DScreenVertex*) WorldVertices.Lock(VertexCount);

	mov	ecx, DWORD PTR _VertexCount$[esp+284]
	push	-1
	push	ecx
	lea	ecx, DWORD PTR [esi+16680]
	call	?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z ; FD3DVertexBuffer<FD3DScreenVertex>::Lock

; 1696 : 			
; 1697 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR _Facet$[esp+280]
	mov	edx, DWORD PTR [edx+100]
	test	edx, edx
	je	SHORT $L125479
$L125477:

; 1698 : 			{
; 1699 : 				for( INT i=0; i<Poly->NumPts; i++, V++ )

	mov	ecx, DWORD PTR [edx+12]
	xor	edi, edi
	test	ecx, ecx
	jle	SHORT $L125478
	mov	ebx, DWORD PTR _Frame$[esp+284]
	lea	ecx, DWORD PTR [edx+16]
$L125481:

; 1700 : 				{
; 1701 : 					GET_COLOR_DWORD(V->Color)   = 0; //clr;

	mov	DWORD PTR [eax+16], 0

; 1702 : 					V->Position.X    = Poly->Pts[i]->ScreenX + Frame->XB - 0.5f;

	fild	DWORD PTR [ebx+176]
	mov	ebp, DWORD PTR [ecx]
	inc	edi
	fadd	DWORD PTR [ebp+16]
	add	ecx, 4
	add	eax, 36					; 00000024H
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [eax-36]

; 1703 : 					V->Position.Y    = Poly->Pts[i]->ScreenY + Frame->YB - 0.5f;

	mov	ebp, DWORD PTR [ecx-4]
	fild	DWORD PTR [ebx+180]
	fadd	DWORD PTR [ebp+20]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [eax-32]

; 1704 : 					FLOAT R = V->Position.W   = Poly->Pts[i]->RZ * Frame->RProj.Z;

	mov	ebp, DWORD PTR [ecx-4]
	fld	DWORD PTR [ebp+28]
	fmul	DWORD PTR [ebx+232]
	fst	DWORD PTR [eax-24]

; 1705 : 					V->Position.Z    = ProjectionMatrix._33 + ProjectionMatrix._43 * R;								

	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fstp	DWORD PTR [eax-28]
	mov	ebp, DWORD PTR [edx+12]
	cmp	edi, ebp
	jl	SHORT $L125481
$L125478:

; 1696 : 			
; 1697 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	edx, DWORD PTR [edx]
	test	edx, edx
	jne	SHORT $L125477
$L125479:

; 1706 : 				}
; 1707 : 			}
; 1708 : 
; 1709 : 			// Draw base texture + lightmap.
; 1710 : 			INT First = WorldVertices.Unlock();

	lea	edi, DWORD PTR [esi+16680]
	mov	ecx, edi
	call	?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock

; 1711 : 			WorldVertices.Set();

	mov	ecx, edi
	mov	ebx, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Set

; 1712 : 
; 1713 : 			
; 1714 : 			//First=OriginalFirst;
; 1715 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 1716 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 1717 : 			
; 1718 : 			for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	eax, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [eax+100]
	test	edi, edi
	je	SHORT $L125489
$L125487:

; 1719 : 			{
; 1720 : 				Direct3DDevice8->DrawPrimitive( D3DPT_LINESTRIP,First,Poly->NumPts-1); 

	mov	edx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	dec	edx
	push	edx
	push	ebx
	push	3
	push	eax
	call	DWORD PTR [ecx+280]

; 1721 : 				First += Poly->NumPts;

	mov	ecx, DWORD PTR [edi+12]
	mov	edi, DWORD PTR [edi]
	add	ebx, ecx
	test	edi, edi
	jne	SHORT $L125487
$L125489:

; 1722 : 			}
; 1723 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 1724 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 1725 : 			
; 1726 : 			SetZBias(0.f);

	push	0
	mov	ecx, esi
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
$L125473:

; 1727 : 		}
; 1728 : 
; 1729 : 		//	Draw selection markings on a surface: specular overlay.
; 1730 : 		if( IsSelected )

	mov	eax, DWORD PTR _IsSelected$[esp+284]
	test	eax, eax
	je	$L125495

; 1731 : 		{
; 1732 : 			SetBlending(PF_Translucent);

	push	0
	mov	edx, 4
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1733 : 			SetTextureNULL( 0 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 1734 : 			SetTextureNULL( 1 );

	push	0
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+244]

; 1735 : 
; 1736 : 			INT n=0;
; 1737 : 			for( FSavedPoly* Poly=Facet.Polys; Poly; Poly=Poly->Next )

	mov	eax, DWORD PTR _Facet$[esp+280]
	mov	DWORD PTR [esi+19716], edi
	mov	edi, DWORD PTR [eax+100]
	xor	ebx, ebx
	test	edi, edi
	je	$L125495
	lea	ebp, DWORD PTR [esi+16700]

; 1936 : 	}

	npad	7
$L125493:

; 1738 : 			{
; 1739 : 				// draw per facet...
; 1740 : 				FD3DTLVertex* V=(FD3DTLVertex*) ActorVertices.Lock(Poly->NumPts);

	mov	ecx, DWORD PTR [edi+12]
	push	-1
	push	ecx
	mov	ecx, ebp
	call	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock

; 1741 : 				for( INT i=0; i<Poly->NumPts; i++, n++, V++ )

	mov	ecx, DWORD PTR [edi+12]
	xor	edx, edx
	test	ecx, ecx
	jle	SHORT $L125501
	lea	ecx, DWORD PTR [ebx+ebx*4]
	lea	ecx, DWORD PTR [esi+ecx*8+19748]
$L125499:

; 1742 : 				{
; 1743 : 					V->Position.X = Verts[n].Position.X;

	mov	ebp, DWORD PTR [ecx-4]
	mov	DWORD PTR [eax], ebp

; 1744 : 					V->Position.Y = Verts[n].Position.Y;

	mov	ebp, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], ebp

; 1745 : 					V->Position.Z = Verts[n].Position.Z;

	mov	ebp, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], ebp

; 1746 : 					V->Position.W = Verts[n].Position.W;

	mov	ebp, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], ebp

; 1747 : 
; 1748 : 					V->Specular   = D3DCOLOR_RGBA( 255,255,255,255);

	mov	DWORD PTR [eax+20], -1

; 1749 : 					V->Diffuse    = D3DCOLOR_RGBA( 10,5,60,255);		 // Arbitrary marker color.

	mov	DWORD PTR [eax+16], -16120516		; ff0a053cH
	mov	ebp, DWORD PTR [edi+12]
	inc	edx
	inc	ebx
	add	ecx, 40					; 00000028H
	add	eax, 40					; 00000028H
	cmp	edx, ebp
	jl	SHORT $L125499
$L125501:

; 1750 : 				}
; 1751 : 
; 1752 : 				INT	First = ActorVertices.Unlock();

	lea	ebp, DWORD PTR [esi+16700]
	mov	ecx, ebp
	call	?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DTLVertex>::Unlock

; 1753 : 
; 1754 : 				ActorVertices.Set();

	mov	ecx, ebp
	mov	DWORD PTR _First$125504[esp+284], eax
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 1755 : 
; 1756 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 2
	push	ecx
	mov	ecx, DWORD PTR _First$125504[esp+288]
	push	ecx
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 1757 : 				Stats.Polys++;

	inc	DWORD PTR [esi+19668]
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	$L125493
$L125495:

; 1758 : 			}
; 1759 : 		}
; 1760 : 
; 1761 : 		// JEP... Project all projector textures onto surface
; 1762 : 		if (ProjectorArray.Num() > 0 && Frame->Recursion == 0 && Surface.ProjectorFlags)

	mov	eax, DWORD PTR [esi+204]
	test	eax, eax
	jle	$L125505
	mov	edx, DWORD PTR _Frame$[esp+284]
	mov	eax, DWORD PTR [edx+28]
	test	eax, eax
	jne	$L125505
	mov	eax, DWORD PTR _Surface$[esp+280]
	mov	ecx, DWORD PTR [eax+36]
	test	ecx, ecx
	je	$L125505

; 1763 : 		{
; 1764 : 		#ifdef BATCH_PROJECTOR_POLYS
; 1765 : 			ProjectorSurf		*ProjSurf;
; 1766 : 
; 1767 : 			ProjSurf = &ProjectorSurfs[NumProjectorSurfs];
; 1768 : 
; 1769 : 			ProjSurf->ProjectorFlags = Surface.ProjectorFlags;
; 1770 : 			ProjSurf->FirstVert = NumProjectorVerts;
; 1771 : 			ProjSurf->NumVerts = 0;
; 1772 : 			ProjSurf->FirstPoly = NumProjectorPolys;
; 1773 : 			ProjSurf->NumPolys = 0;
; 1774 : 
; 1775 : 			INT		*PPoly = &ProjectorPolys[ProjSurf->FirstPoly];
; 1776 : 			FVector *PP = &ProjectorPoints[ProjSurf->FirstVert];
; 1777 : 
; 1778 : 			for( Poly=Facet.Polys; Poly; Poly=Poly->Next)
; 1779 : 			{
; 1780 : 				//if (!Frame->Level->Model->Nodes(Poly->iNode).ProjectorFlags)
; 1781 : 				//	continue;
; 1782 : 
; 1783 : 				PPoly[ProjSurf->NumPolys++] = Poly->NumPts;
; 1784 : 
; 1785 : 				// Copy camera space verts over (need them to generate uv's during rendering pass)
; 1786 : 				for (INT j=0; j< Poly->NumPts; j++)
; 1787 : 					PP[ProjSurf->NumVerts++] = Poly->Pts[j]->Point;
; 1788 : 			}
; 1789 : 
; 1790 : 			memcpy(&ProjectorVerts[ProjSurf->FirstVert], &Verts[0], ProjSurf->NumVerts*sizeof(Verts[0]));
; 1791 : 			
; 1792 : 			NumProjectorVerts += ProjSurf->NumVerts;
; 1793 : 			NumProjectorPolys += ProjSurf->NumPolys;
; 1794 : 			
; 1795 : 			NumProjectorSurfs++;
; 1796 : 
; 1797 : 			if (NumProjectorSurfs > 64)
; 1798 : 				FlushProjectorPolys();
; 1799 : 		#else
; 1800 : 			SetTextureNULL( 0 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 1801 : 			SetTextureNULL( 1 );

	push	0
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+244]

; 1802 : 			SetBlending( PF_Modulated );

	push	0
	mov	edx, 64					; 00000040H
	mov	ecx, esi
	mov	DWORD PTR [esi+19716], edi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 1803 : 			SetDistanceFog(false);

	push	0
	mov	ecx, esi
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 1804 : 
; 1805 : 			SetTextureClampMode(1);

	mov	eax, DWORD PTR [esi]
	mov	edx, 1
	mov	ecx, esi
	call	DWORD PTR [eax+212]

; 1806 : 
; 1807 : 			//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 1808 : 			//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND,  D3DBLEND_DESTCOLOR );
; 1809 : 			//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ZERO );
; 1810 : 			SetAlphaBlendEnable(TRUE);

	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable

; 1811 : 			SetSrcBlend(D3DBLEND_DESTCOLOR);

	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend

; 1812 : 			SetDstBlend(D3DBLEND_ZERO);

	mov	edx, 1
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend

; 1813 : 
; 1814 : 			// Setup clipper texture (also used for fade out)
; 1815 : 			Direct3DDevice8->SetTexture(1, ClipperTexture);

	mov	edx, DWORD PTR [esi+19112]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	1
	push	eax
	call	DWORD PTR [ecx+244]

; 1816 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1817 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_ADD);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	7
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1818 : 			//Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE);
; 1819 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1820 : 
; 1821 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	13					; 0000000dH
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1822 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	14					; 0000000eH
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1823 : 
; 1824 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_POINT);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	16					; 00000010H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1825 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_POINT);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	17					; 00000011H
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1826 : 			
; 1827 : 			for (int i=ProjectorArray.Num()-1; i>=0 ; i--)

	mov	eax, DWORD PTR [esi+204]
	dec	eax
	mov	DWORD PTR _i$125506[esp+284], eax
	js	$L125509
	imul	eax, 84					; 00000054H
	mov	DWORD PTR -240+[esp+284], eax

; 1936 : 	}

	npad	4

; 1826 : 			
; 1827 : 			for (int i=ProjectorArray.Num()-1; i>=0 ; i--)

$L125507:

; 1828 : 			{
; 1829 : 				DWORD Mask = 1<<i;

	mov	ecx, DWORD PTR _i$125506[esp+284]

; 1830 : 
; 1831 : 				if (!(Surface.ProjectorFlags & Mask))

	mov	edx, DWORD PTR _Surface$[esp+280]
	mov	eax, 1
	shl	eax, cl
	test	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _Mask$125510[esp+284], eax
	je	$L125508

; 1832 : 					continue;
; 1833 : 
; 1834 : 				ProjectorInfo *pProjector = &ProjectorArray(i);

	mov	ebp, DWORD PTR [esi+200]
	mov	ecx, DWORD PTR -240+[esp+284]

; 1835 : 
; 1836 : 				if (!pProjector->GNodes)

	mov	eax, DWORD PTR [ebp+ecx+12]
	add	ebp, ecx
	test	eax, eax
	je	$L125508

; 1837 : 					continue;
; 1838 : 
; 1839 : 				// Set the texture to the render target that belongs to this projector
; 1840 : 				Direct3DDevice8->SetTexture(0, pProjector->pRenderTargetTex);

	mov	edx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 1841 : 
; 1842 : 				// Lock the world verts
; 1843 : 				FD3DScreenVertex* V=(FD3DScreenVertex*)WorldVertices.Lock(VertexCount);

	mov	eax, DWORD PTR _VertexCount$[esp+284]
	push	-1
	push	eax
	lea	ecx, DWORD PTR [esi+16680]
	call	?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z ; FD3DVertexBuffer<FD3DScreenVertex>::Lock

; 1844 : 
; 1845 : 				INT n = 0;
; 1846 : 
; 1847 : 				// For each poly, project the verts onto the projector front plane to get the UV's
; 1848 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	edi, eax
	mov	eax, DWORD PTR [ecx+100]
	test	eax, eax
	mov	DWORD PTR _n$125516[esp+284], 0
	mov	DWORD PTR _Poly$[esp+284], eax
	je	$L125519

; 1936 : 	}

	npad	2
$L125517:

; 1849 : 				{
; 1850 : 					if (!(pProjector->GNodes[Poly->iNode].ProjectorFlags & Mask))

	mov	ecx, DWORD PTR _Poly$[esp+284]
	mov	eax, DWORD PTR [ecx+4]
	mov	ebx, DWORD PTR _Mask$125510[esp+284]
	lea	edx, DWORD PTR [eax+eax*8]
	mov	eax, DWORD PTR [ebp+12]
	test	DWORD PTR [eax+edx*8+68], ebx
	jne	SHORT $L125520

; 1851 : 					{
; 1852 : 						n += Poly->NumPts;

	mov	eax, DWORD PTR _n$125516[esp+284]
	mov	ecx, DWORD PTR [ecx+12]
	add	eax, ecx
	mov	DWORD PTR _n$125516[esp+284], eax

; 1853 : 						continue;

	jmp	$L125518
$L125520:

; 1854 : 					}
; 1855 : 
; 1856 : 					for( INT j=0; j<Poly->NumPts; j++, n++, V++ )

	mov	eax, DWORD PTR [ecx+12]
	test	eax, eax
	mov	DWORD PTR _j$125521[esp+284], 0
	jle	$L125518
	mov	edx, DWORD PTR _Poly$[esp+284]
	mov	eax, DWORD PTR _n$125516[esp+284]
	add	edx, 16					; 00000010H
	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR -212+[esp+284], edx
	lea	ebx, DWORD PTR [esi+eax*8+19748]
$L125522:

; 1857 : 					{
; 1858 : 						V->Position.X = Verts[n].Position.X;    

	mov	ecx, DWORD PTR [ebx-4]
	mov	DWORD PTR [edi], ecx

; 1859 : 						V->Position.Y = Verts[n].Position.Y;

	mov	edx, DWORD PTR [ebx]
	mov	DWORD PTR [edi+4], edx

; 1860 : 						V->Position.Z = Verts[n].Position.Z;

	mov	eax, DWORD PTR [ebx+4]
	mov	DWORD PTR [edi+8], eax

; 1861 : 						V->Position.W = Verts[n].Position.W;

	mov	ecx, DWORD PTR [ebx+8]

; 1862 : 						V->Color = 0xffffffff;
; 1863 : 
; 1864 : 						// Grab a copy of the vert
; 1865 : 						FTransform		P;
; 1866 : 
; 1867 : 						// Transform point into projector space
; 1868 : 						P.Point = Poly->Pts[j]->Point.TransformPointBy(pProjector->CameraToLight);

	lea	eax, DWORD PTR [ebp+16]
	push	eax
	mov	eax, DWORD PTR -212+[esp+288]
	mov	DWORD PTR [edi+12], ecx
	lea	edx, DWORD PTR $T137422[esp+288]
	mov	DWORD PTR [edi+16], -1
	mov	ecx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp_?TransformPointBy@FVector@@QBE?AV1@ABVFCoords@@@Z

; 1869 : 						
; 1870 : 					#if 1	
; 1871 : 						// Project point onto projector front plane
; 1872 : 						P.Point.Z = max(1.0f, P.Point.Z);

	fld	DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _P$125525[esp+292], eax
	fcomp	DWORD PTR _P$125525[esp+292]
	mov	DWORD PTR _P$125525[esp+284], ecx
	mov	DWORD PTR _P$125525[esp+288], edx
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L137423
	mov	DWORD PTR _P$125525[esp+292], 1065353216 ; 3f800000H
$L137423:

; 1873 : 						P.Project(pProjector->Frame);

	fld	DWORD PTR _P$125525[esp+292]
	mov	ecx, DWORD PTR [ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L138538
	mov	DWORD PTR _P$125525[esp+292], 981668463	; 3a83126fH
$L138538:
	fld	DWORD PTR [ecx+220]
	fdiv	DWORD PTR _P$125525[esp+292]
	fst	DWORD PTR _P$125525[esp+312]
	fmul	DWORD PTR _P$125525[esp+284]
	fadd	DWORD PTR [ecx+192]
	fstp	DWORD PTR _P$125525[esp+300]
	fld	DWORD PTR _P$125525[esp+312]
	fmul	DWORD PTR _P$125525[esp+288]
	fadd	DWORD PTR [ecx+196]
	fst	DWORD PTR _P$125525[esp+304]
	fstp	DWORD PTR $T138535[esp+284]
	fld	DWORD PTR $T138535[esp+284]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$138543[esp+284]

; 1874 : 
; 1875 : 						// Snag UV's
; 1876 : 						V->U[0] = P.ScreenX*pProjector->OneOverX;

	fld	DWORD PTR _P$125525[esp+300]
	mov	eax, DWORD PTR _j$125521[esp+284]
	fmul	DWORD PTR [ebp+64]
	mov	edx, DWORD PTR _n$125516[esp+284]
	inc	eax
	add	ebx, 40					; 00000028H
	fstp	DWORD PTR [edi+20]
	add	edi, 36					; 00000024H

; 1877 : 						V->U[1] = P.ScreenY*pProjector->OneOverY; 

	fld	DWORD PTR _P$125525[esp+304]
	mov	DWORD PTR _j$125521[esp+284], eax
	fmul	DWORD PTR [ebp+68]
	fstp	DWORD PTR [edi-12]

; 1878 : 						
; 1879 : 						V->Position.W *= P.Point.Z;

	fld	DWORD PTR _P$125525[esp+292]
	fmul	DWORD PTR [edi-24]
	fstp	DWORD PTR [edi-24]

; 1880 : 					#else
; 1881 : 						// Ortho projection
; 1882 : 						V->U[0] = (P.Point.X/125)+0.5f;
; 1883 : 						V->U[1] = (P.Point.Y/125)+0.5f;
; 1884 : 					#endif
; 1885 : 
; 1886 : 						// Clip and fade out (this is the UV's for the clipper/fade out texture layer)
; 1887 : 					#if 1
; 1888 : 						FLOAT R = P.RZ * pProjector->Frame->RProj.Z;		// (1.0f/Z)

	mov	ecx, DWORD PTR [ebp]
	fld	DWORD PTR _P$125525[esp+312]
	fmul	DWORD PTR [ecx+232]
	mov	ecx, DWORD PTR -212+[esp+284]
	add	ecx, 4
	inc	edx

; 1889 : 						V->U2[0] = (pProjector->_33 + pProjector->_43 * R)*pProjector->FadeScale;

	fmul	DWORD PTR [ebp+76]
	mov	DWORD PTR _n$125516[esp+284], edx
	mov	edx, DWORD PTR _Poly$[esp+284]
	fadd	DWORD PTR [ebp+72]
	mov	DWORD PTR -212+[esp+284], ecx
	fmul	DWORD PTR [ebp+80]

; 1890 : 						V->U2[1] = 0.0f;

	mov	DWORD PTR [edi-4], 0
	fstp	DWORD PTR [edi-8]
	mov	ecx, DWORD PTR [edx+12]
	cmp	eax, ecx
	jl	$L125522
$L125518:

; 1844 : 
; 1845 : 				INT n = 0;
; 1846 : 
; 1847 : 				// For each poly, project the verts onto the projector front plane to get the UV's
; 1848 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	eax, DWORD PTR _Poly$[esp+284]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	mov	DWORD PTR _Poly$[esp+284], eax
	jne	$L125517
$L125519:

; 1891 : 					#endif
; 1892 : 					}
; 1893 : 				}
; 1894 : 
; 1895 : 				// Unlock world verts
; 1896 : 				INT First = WorldVertices.Unlock();

	lea	ecx, DWORD PTR [esi+16680]
	call	?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock

; 1897 : 
; 1898 : 				for( Poly=Facet.Polys; Poly; Poly=Poly->Next)

	mov	ecx, DWORD PTR _Facet$[esp+280]
	mov	edi, DWORD PTR [ecx+100]
	test	edi, edi
	mov	ebx, eax
	je	SHORT $L125508

; 1936 : 	}

	npad	3
$L125529:

; 1899 : 				{
; 1900 : 					if (!(pProjector->GNodes[Poly->iNode].ProjectorFlags & Mask))

	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR _Mask$125510[esp+284]
	lea	edx, DWORD PTR [eax+eax*8]
	mov	eax, DWORD PTR [ebp+12]
	test	DWORD PTR [eax+edx*8+68], ecx
	je	SHORT $L125530

; 1901 : 						continue;
; 1902 : 					Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, Poly->NumPts - 2 );

	mov	ecx, DWORD PTR [edi+12]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	sub	ecx, 2
	push	ecx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 1903 : 					First += Poly->NumPts;

	add	ebx, DWORD PTR [edi+12]
$L125530:
	mov	edi, DWORD PTR [edi]
	test	edi, edi
	jne	SHORT $L125529
$L125508:

; 1826 : 			
; 1827 : 			for (int i=ProjectorArray.Num()-1; i>=0 ; i--)

	mov	eax, DWORD PTR _i$125506[esp+284]
	mov	edx, DWORD PTR -240+[esp+284]
	dec	eax
	sub	edx, 84					; 00000054H
	test	eax, eax
	mov	DWORD PTR _i$125506[esp+284], eax
	mov	DWORD PTR -240+[esp+284], edx
	jge	$L125507
$L125509:

; 1904 : 				}
; 1905 : 			}
; 1906 : 			SetTextureNULL(0);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]

; 1907 : 			SetTextureNULL(1);

	push	0
	lea	edi, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+19712], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [ecx+244]

; 1908 : 
; 1909 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE);

	push	1
	push	1
	mov	DWORD PTR [esi+19716], edi
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1910 : 
; 1911 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1912 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1913 : 
; 1914 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	13					; 0000000dH
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 1915 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 1916 : 
; 1917 : 			//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 1918 : 			//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_DESTCOLOR );
; 1919 : 			//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_SRCCOLOR );
; 1920 : 			SetAlphaBlendEnable(TRUE);

	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable

; 1921 : 			SetSrcBlend(D3DBLEND_DESTCOLOR);

	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend

; 1922 : 			SetDstBlend(D3DBLEND_SRCCOLOR);

	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend

; 1923 : 			SetTextureClampMode(0);

	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+212]
$L125505:

; 1924 : 
; 1925 : 		#endif
; 1926 : 		}
; 1927 : 		// ...JEP
; 1928 : 
; 1929 : 		// Finish mask handling.
; 1930 : 		if( SurfPolyFlags & PF_Masked )

	mov	eax, DWORD PTR -232+[esp+284]
	test	eax, eax
	pop	ebx
	je	SHORT $L125533

; 1931 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_LESSEQUAL );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L125533:

; 1932 : 
; 1933 : 		VALIDATE;
; 1934 : 
; 1935 : 		unclock(Stats.SurfTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	mov	DWORD PTR _L$138558[esp+280], 0
	je	SHORT $L138560
	rdtsc
	mov	DWORD PTR _L$138558[esp+280], eax
	mov	DWORD PTR _H$138559[esp+280], edx
$L138560:
	mov	eax, DWORD PTR _L$138558[esp+280]
	mov	ecx, DWORD PTR [esi+19624]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [esi+19624], ecx
$L125244:
	pop	edi
	pop	esi
	pop	ebp

; 1936 : 	}

	add	esp, 268				; 0000010cH
	ret	8
?DrawComplexSurface@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFSurfaceInfo@@AAUFSurfaceFacet@@@Z ENDP ; UD3DRenderDevice::DrawComplexSurface
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ
_TEXT	SEGMENT
?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ PROC NEAR	; UD3DRenderDevice::QueuePolygonDoes, COMDAT
; _this$ = ecx

; 1951 : 		return true; 

	mov	al, 1

; 1952 : 	}

	ret	0
?QueuePolygonDoes@UD3DRenderDevice@@UAI_NXZ ENDP	; UD3DRenderDevice::QueuePolygonDoes
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
_TEXT	SEGMENT
?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::QueuePolygonBegin, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 1956 : 		CurrentFrame=Frame;

	mov	DWORD PTR [ecx+172], edx

; 1957 : 		return true;

	mov	al, 1

; 1958 : 	}

	ret	0
?QueuePolygonBegin@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::QueuePolygonBegin
_TEXT	ENDS
PUBLIC	?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z ; UD3DRenderDevice::RenderQueuedPolygonsForProjectors
PUBLIC	??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ ; `string'
EXTRN	__imp_?GUglyHackFlags@@3KA:DWORD
;	COMDAT ??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@
; File ..\..\Core\Inc\UnVcWin32.h
_DATA	SEGMENT
??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ DB 'VertexCount<=A'
	DB	'CTORPOLY_VERTEXBUFFER_SIZE', 00H		; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z
_TEXT	SEGMENT
_ProjectorFlags$ = -60
_QueuedPolygonCount$ = -92
_ZBiasHack$ = -80
_Vertex$ = -72
_n$ = -104
_StoreVert$ = -56
_i$ = -64
_p$125555 = -52
_DoFog$125556 = -48
$T138769 = -96
_V$125561 = -40
$T138770 = -100
_L$138776 = -84
_H$138777 = -44
_W$125569 = -88
_L$138783 = -84
_First$ = -48
_H$138784 = -44
_CurrentDoFog$ = -105
_p$125580 = -84
_DoFog$125581 = -44
_VertexData$138793 = -88
_L$138818 = -84
_H$138819 = -44
_L$138825 = -84
_H$138826 = -44
_L$138885 = -64
_H$138886 = -44
_L$138926 = -64
_H$138927 = -44
_Xor$138972 = -96
$T139016 = -104
$T139017 = -100
_L$139047 = -60
_H$139048 = -44
_L$139054 = -60
_H$139055 = -44
?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z PROC NEAR	; UD3DRenderDevice::QueuePolygonEnd, COMDAT
; _this$ = ecx
; _ProjectorFlags$ = edx

; 1961 : 	{

	sub	esp, 108				; 0000006cH
	push	ebx
	push	ebp
	mov	ebp, ecx
	push	esi

; 1962 : 		int QueuedPolygonCount=QueuedPolygons.Num();

	mov	esi, DWORD PTR [ebp+675216]

; 1963 : 
; 1964 : 		if(!QueuedPolygonCount) 

	xor	ebx, ebx
	cmp	esi, ebx
	mov	DWORD PTR _ProjectorFlags$[esp+120], edx
	mov	DWORD PTR _QueuedPolygonCount$[esp+120], esi
	je	$L125539

; 1965 : 			return;
; 1966 : 
; 1967 : 		check(Direct3DDevice8);

	cmp	DWORD PTR [ebp+19124], ebx
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L125542
	push	1967					; 000007afH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEJO@Direct3DDevice8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L125542:

; 1968 : 
; 1969 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebx
	mov	DWORD PTR _L$138776[esp+124], ebx
	je	SHORT $L138778
	rdtsc
	mov	DWORD PTR _L$138776[esp+124], eax
	mov	DWORD PTR _H$138777[esp+124], edx
$L138778:
	mov	eax, DWORD PTR [ebp+19628]
	mov	ecx, DWORD PTR _L$138776[esp+124]

; 1970 : 		Stats.QueueCount++;

	mov	edx, DWORD PTR [ebp+19700]
	sub	eax, ecx

; 1971 : 		Stats.Polys+=QueuedPolygonCount;

	mov	ecx, DWORD PTR [ebp+19668]
	inc	edx
	add	ecx, esi
	mov	DWORD PTR [ebp+19628], eax

; 1972 : 
; 1973 : 		PreRender(CurrentFrame);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR [ebp+19700], edx
	mov	edx, DWORD PTR [ebp+172]
	mov	DWORD PTR [ebp+19668], ecx
	mov	ecx, ebp
	call	DWORD PTR [eax+140]

; 1974 : 
; 1975 : 		FLOAT ZBiasHack=((GUglyHackFlags&1)&&ViewportColorBits==16 )? 0.25f : 1.0f;

	mov	ecx, DWORD PTR __imp_?GUglyHackFlags@@3KA
	test	BYTE PTR [ecx], 1
	je	SHORT $L138765
	cmp	DWORD PTR [ebp+16772], 16		; 00000010H
	mov	DWORD PTR _ZBiasHack$[esp+124], 1048576000 ; 3e800000H
	je	SHORT $L138766
$L138765:
	mov	DWORD PTR _ZBiasHack$[esp+124], 1065353216 ; 3f800000H
$L138766:

; 1976 : 
; 1977 : 		int VertexCount=QueuedPolygonCount*3;

	mov	esi, DWORD PTR _QueuedPolygonCount$[esp+124]
	lea	esi, DWORD PTR [esi+esi*2]

; 1978 : 		verify(VertexCount<=ACTORPOLY_VERTEXBUFFER_SIZE);

	cmp	esi, 16384				; 00004000H
	jle	SHORT $L125545
	push	1978					; 000007baH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L125545:

; 1979 : 		clock(Stats.D3DVertexLock);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], ebx
	mov	DWORD PTR _L$138783[esp+124], ebx
	je	SHORT $L138785
	rdtsc
	mov	DWORD PTR _L$138783[esp+124], eax
	mov	DWORD PTR _H$138784[esp+124], edx
$L138785:
	mov	eax, DWORD PTR _L$138783[esp+124]
	sub	DWORD PTR [ebp+19660], eax

; 1980 : 
; 1981 : 		FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

	cmp	DWORD PTR [ebp+16704], ebx
	jne	SHORT $L138790
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138790:
	cmp	DWORD PTR [ebp+16708], ebx
	jne	SHORT $L138791
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138791:
	cmp	esi, DWORD PTR [ebp+16708]
	jl	SHORT $L138794
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138794:
	mov	ecx, DWORD PTR [ebp+16716]
	mov	eax, DWORD PTR [ebp+16708]
	lea	edx, DWORD PTR [ecx+esi]
	cmp	edx, eax
	mov	eax, DWORD PTR [ebp+16704]
	jge	SHORT $L138808
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$138793[esp+128]
	push	edi
	lea	edi, DWORD PTR [esi+esi*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	edi, 3
	push	edi
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebx
	jge	SHORT $L138803
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138803:
	mov	eax, DWORD PTR [ebp+16716]
	mov	DWORD PTR [ebp+16712], eax
	add	eax, esi
	mov	DWORD PTR [ebp+16716], eax
	jmp	SHORT $L138807
$L138808:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$138793[esp+128]
	push	edx
	lea	edx, DWORD PTR [esi+esi*4]
	shl	edx, 3
	push	edx
	push	ebx
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebx
	jge	SHORT $L138809
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L138809:
	mov	DWORD PTR [ebp+16712], ebx
	mov	DWORD PTR [ebp+16716], esi
$L138807:
	mov	edx, DWORD PTR _VertexData$138793[esp+124]
	mov	DWORD PTR _Vertex$[esp+124], edx

; 1982 : 		Stats.VBLocks++;

	inc	DWORD PTR [ebp+19708]

; 1983 : 		unclock(Stats.D3DVertexLock);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebx
	mov	DWORD PTR _L$138818[esp+124], ebx
	je	SHORT $L138820
	rdtsc
	mov	DWORD PTR _L$138818[esp+124], eax
	mov	DWORD PTR _H$138819[esp+124], edx
$L138820:
	mov	ecx, DWORD PTR _L$138818[esp+124]
	mov	edx, DWORD PTR [ebp+19660]
	add	ecx, -34				; ffffffdeH
	add	edx, ecx
	mov	DWORD PTR [ebp+19660], edx

; 1984 : 
; 1985 : 		clock(Stats.D3DVertexSetup);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], ebx
	mov	DWORD PTR _L$138825[esp+124], ebx
	je	SHORT $L138827
	rdtsc
	mov	DWORD PTR _L$138825[esp+124], eax
	mov	DWORD PTR _H$138826[esp+124], edx
$L138827:
	mov	eax, DWORD PTR _L$138825[esp+124]
	mov	ecx, DWORD PTR [ebp+19656]
	sub	ecx, eax

; 1986 : 
; 1987 : 		INT	 n = 0;
; 1988 : 		BOOL StoreVert = (ProjectorArray.Num() > 0 && CurrentFrame->Recursion == 0 && ProjectorFlags) ? true : false;

	cmp	DWORD PTR [ebp+204], ebx
	mov	DWORD PTR [ebp+19656], ecx
	mov	DWORD PTR _n$[esp+124], ebx
	jle	SHORT $L138767
	mov	ecx, DWORD PTR [ebp+172]
	cmp	DWORD PTR [ecx+28], ebx
	jne	SHORT $L138767
	cmp	DWORD PTR _ProjectorFlags$[esp+124], ebx
	je	SHORT $L138767
	mov	al, 1
	jmp	SHORT $L138768
$L138767:
	xor	al, al
$L138768:
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _StoreVert$[esp+124], eax

; 1989 : 
; 1990 : 		for(int i=0;i<QueuedPolygonCount;i++)

	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]
	cmp	eax, ebx
	jle	$L125554
	mov	edx, eax
	mov	DWORD PTR -84+[esp+124], 0
	mov	DWORD PTR -64+[esp+124], edx

; 2129 : 	}

	npad	5

; 1989 : 
; 1990 : 		for(int i=0;i<QueuedPolygonCount;i++)

$L125552:

; 1991 : 		{
; 1992 : 			QueuedPolygon &p=QueuedPolygons(i);				

	mov	ebx, DWORD PTR [ebp+675212]
	mov	ecx, DWORD PTR -84+[esp+124]

; 1993 : 
; 1994 : 			SetTexture(0,*p.Texture, p.PolyFlags, false,p.PolyFlagsEx );	// NJS: Fixme! No need for texture set to be here other than to compute scaling factors

	mov	eax, DWORD PTR [ebx+ecx+4]
	mov	edx, DWORD PTR [ebx+ecx+8]
	add	ebx, ecx
	mov	ecx, DWORD PTR [ebx]
	push	0
	push	eax
	push	0
	push	ecx
	push	edx
	xor	edx, edx
	mov	ecx, ebp
	mov	DWORD PTR _p$125555[esp+144], ebx
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 1995 : 
; 1996 : 			UBOOL DoFog=((p.PolyFlags&(PF_RenderFog|PF_Translucent|PF_Modulated))==PF_RenderFog);		

	mov	eax, DWORD PTR [ebx]
	and	eax, 1073741892				; 40000044H
	sub	eax, 1073741824				; 40000000H
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	DWORD PTR _DoFog$125556[esp+124], eax
	mov	eax, DWORD PTR _n$[esp+124]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [ebp+eax*8+19748]
	mov	DWORD PTR -76+[esp+124], ecx
	add	ebx, 32					; 00000020H
	mov	DWORD PTR -68+[esp+124], 3

; 2129 : 	}

	npad	4

; 1995 : 
; 1996 : 			UBOOL DoFog=((p.PolyFlags&(PF_RenderFog|PF_Translucent|PF_Modulated))==PF_RenderFog);		

$L125558:

; 1997 : 
; 1998 : 			for( INT Index = 0; Index < 3; Index++ )
; 1999 : 			{	
; 2000 : 				FD3DTLVertex V;
; 2001 : 				FLOAT	RHW = ZBiasHack * p.v[Index].RZ * CurrentFrame->RProj.Z;

	mov	eax, DWORD PTR [ebp+172]
	fld	DWORD PTR [eax+232]
	fmul	DWORD PTR [ebx+12]
	fmul	DWORD PTR _ZBiasHack$[esp+124]

; 2002 : 
; 2003 : 				V.Position.X = p.v[Index].ScreenX + CurrentFrame->XB - 0.5f;

	fild	DWORD PTR [eax+176]
	fadd	DWORD PTR [ebx]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _V$125561[esp+124]

; 2004 : 				V.Position.Y = p.v[Index].ScreenY + CurrentFrame->YB - 0.5f;

	fild	DWORD PTR [eax+180]

; 2005 : 				V.Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * RHW;
; 2006 : 				V.Position.W = RHW;
; 2007 : 
; 2008 : 				// JEP...
; 2009 : 				if (StoreVert)

	mov	eax, DWORD PTR _StoreVert$[esp+124]
	test	eax, eax
	fadd	DWORD PTR [ebx+4]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _V$125561[esp+128]
	fld	ST(0)
	fmul	DWORD PTR [ebp+19508]
	fadd	DWORD PTR [ebp+19492]
	fstp	DWORD PTR _V$125561[esp+132]
	fst	DWORD PTR _V$125561[esp+136]
	je	SHORT $L139080

; 2010 : 				{
; 2011 : 					Verts[n].Position.X = V.Position.X;

	mov	eax, DWORD PTR -76+[esp+124]
	mov	edx, DWORD PTR _V$125561[esp+124]

; 2012 : 					Verts[n].Position.Y = V.Position.Y;
; 2013 : 					Verts[n].Position.Z = V.Position.Z;
; 2014 : 					Verts[n].Position.W = V.Position.W;

	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _V$125561[esp+128]
	mov	DWORD PTR [eax-4], edx
	mov	edx, DWORD PTR _V$125561[esp+132]
	mov	DWORD PTR [eax+4], edx

; 2015 : 					n++;

	mov	edx, DWORD PTR _n$[esp+124]
	inc	edx
	mov	DWORD PTR [eax], ecx
	add	eax, 40					; 00000028H
	mov	DWORD PTR _n$[esp+124], edx
	mov	DWORD PTR -76+[esp+124], eax
	jmp	SHORT $L125563
$L139080:
	fstp	ST(0)
$L125563:

; 2016 : 				}
; 2017 : 				// JEP...
; 2018 : 
; 2019 : 				V.U[0] = p.v[Index].U * Stages[0]->UScale;

	mov	eax, DWORD PTR [ebp+19712]
	fld	DWORD PTR [eax+24]

; 2020 : 				V.U[1] = p.v[Index].V * Stages[0]->VScale;
; 2021 : 
; 2022 : 				V.Specular=0;
; 2023 : 				if(p.PolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	mov	ecx, DWORD PTR _p$125555[esp+124]
	fmul	DWORD PTR [ebx+64]
	mov	dl, BYTE PTR [ecx+4]
	test	dl, 48					; 00000030H
	mov	DWORD PTR _V$125561[esp+144], 0
	fstp	DWORD PTR _V$125561[esp+148]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ebx+68]
	fstp	DWORD PTR _V$125561[esp+152]
	je	SHORT $L125564

; 2024 : 				{
; 2025 : 					V.Diffuse  = 0xffffffff;

	mov	DWORD PTR _V$125561[esp+140], -1

; 2026 : 
; 2027 : 				}
; 2028 : 				else if ( p.PolyFlags & PF_Modulated )

	jmp	$L125572
$L125564:
	test	BYTE PTR [ecx], 64			; 00000040H
	je	SHORT $L125566

; 2029 : 				{
; 2030 : 					// NJS: Diffuse is scaled down to compensate for the fact that the src=dst dst=src blending 
; 2031 : 					// mode doesn't work so well with 16 bit textures.  Thus to fix it, we lighten the texture 
; 2032 : 					// up by one, and then drop it down here to compensate.  Doing this allows us to hit 127 exactly.
; 2033 : 					V.Diffuse = (0xFF<<24)|(248<<16)|(248<<8)|248;

	mov	DWORD PTR _V$125561[esp+140], -460552	; fff8f8f8H

; 2034 : 					//V.Diffuse = 0xffffffff;
; 2035 : 				}
; 2036 : 				else if ( DoFog )

	jmp	$L125572
$L125566:
	mov	ecx, DWORD PTR _DoFog$125556[esp+124]
	test	ecx, ecx
	je	$L125568

; 2037 : 				{
; 2038 : 					FLOAT W=1.f-p.v[Index].Fog.W;
; 2039 : 
; 2040 : 					check(Stages[0]);

	test	eax, eax
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR [ebx+60]
	fstp	DWORD PTR _W$125569[esp+124]
	jne	SHORT $L125570
	push	2040					; 000007f8H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_09PNHJ@Stages?$FL0?$FN?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125570:

; 2041 : 					V.Diffuse=FColor((p.v[Index].Light.Z*Stages[0]->MaxColor.B*W),	
; 2042 : 							         (p.v[Index].Light.Y*Stages[0]->MaxColor.G*W),
; 2043 : 									 (p.v[Index].Light.X*Stages[0]->MaxColor.R*W),
; 2044 : 									 255);

	mov	esi, DWORD PTR [ebp+19712]
	xor	eax, eax
	mov	al, BYTE PTR [esi+34]
	mov	DWORD PTR -44+[esp+124], eax
	fild	DWORD PTR -44+[esp+124]

; 2128 : 		unclock(Stats.PolyTime);

	fmul	DWORD PTR [ebx+40]
	fmul	DWORD PTR _W$125569[esp+124]
	call	__ftol
	xor	ecx, ecx
	mov	cl, BYTE PTR [esi+33]
	mov	BYTE PTR $T138769[esp+124], al
	mov	DWORD PTR -44+[esp+124], ecx
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+36]
	fmul	DWORD PTR _W$125569[esp+124]
	call	__ftol
	xor	edx, edx
	mov	dl, BYTE PTR [esi+32]
	mov	BYTE PTR $T138769[esp+125], al
	mov	DWORD PTR -44+[esp+124], edx
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+32]
	fmul	DWORD PTR _W$125569[esp+124]
	call	__ftol
	mov	BYTE PTR $T138769[esp+126], al
	mov	BYTE PTR $T138769[esp+127], 255		; 000000ffH
	mov	eax, DWORD PTR $T138769[esp+124]
	mov	DWORD PTR _V$125561[esp+140], eax
	jmp	SHORT $L125572
$L125568:

; 2045 : 				}
; 2046 : 				else
; 2047 : 				{
; 2048 : 					check(Stages[0]);

	test	eax, eax
	jne	SHORT $L125573
	push	2048					; 00000800H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_09PNHJ@Stages?$FL0?$FN?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125573:

; 2049 : 					V.Diffuse=FColor((p.v[Index].Light.Z*Stages[0]->MaxColor.B), 
; 2050 : 									 (p.v[Index].Light.Y*Stages[0]->MaxColor.G), 
; 2051 : 									 (p.v[Index].Light.X*Stages[0]->MaxColor.R), 
; 2052 : 									 255);

	mov	esi, DWORD PTR [ebp+19712]
	xor	ecx, ecx
	mov	cl, BYTE PTR [esi+34]
	mov	DWORD PTR -44+[esp+124], ecx
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+40]
	call	__ftol
	xor	edx, edx
	mov	dl, BYTE PTR [esi+33]
	mov	BYTE PTR $T138770[esp+124], al
	mov	DWORD PTR -44+[esp+124], edx
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+36]
	call	__ftol
	mov	BYTE PTR $T138770[esp+125], al
	xor	eax, eax
	mov	al, BYTE PTR [esi+32]
	mov	DWORD PTR -44+[esp+124], eax
	fild	DWORD PTR -44+[esp+124]
	fmul	DWORD PTR [ebx+32]
	call	__ftol
	mov	BYTE PTR $T138770[esp+126], al
	mov	BYTE PTR $T138770[esp+127], 255		; 000000ffH
	mov	ecx, DWORD PTR $T138770[esp+124]
	mov	DWORD PTR _V$125561[esp+140], ecx
$L125572:

; 2053 : 				}
; 2054 : 
; 2055 : 				*Vertex=V;

	mov	eax, DWORD PTR _Vertex$[esp+124]
	mov	edi, eax

; 2056 : 				Vertex++;

	add	eax, 40					; 00000028H
	mov	DWORD PTR _Vertex$[esp+124], eax
	mov	eax, DWORD PTR -68+[esp+124]
	add	ebx, 88					; 00000058H
	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _V$125561[esp+124]
	dec	eax
	rep movsd
	mov	DWORD PTR -68+[esp+124], eax
	jne	$L125558
	mov	ecx, DWORD PTR -84+[esp+124]
	mov	eax, DWORD PTR -64+[esp+124]
	add	ecx, 280				; 00000118H
	dec	eax
	mov	DWORD PTR -84+[esp+124], ecx
	mov	DWORD PTR -64+[esp+124], eax
	jne	$L125552
$L125554:

; 2057 : 
; 2058 : 			}
; 2059 : 		}
; 2060 : 		unclock(Stats.D3DVertexSetup);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	mov	DWORD PTR _L$138885[esp+124], 0
	je	SHORT $L138887
	rdtsc
	mov	DWORD PTR _L$138885[esp+124], eax
	mov	DWORD PTR _H$138886[esp+124], edx
$L138887:
	mov	eax, DWORD PTR _L$138885[esp+124]
	mov	ebx, DWORD PTR [ebp+19656]
	add	eax, -34				; ffffffdeH
	add	ebx, eax

; 2061 : 
; 2062 : 		SetTextureNULL(0);

	mov	eax, DWORD PTR [ebp+19124]
	mov	DWORD PTR [ebp+19656], ebx
	mov	ecx, DWORD PTR [eax]
	xor	ebx, ebx
	push	ebx
	push	ebx
	push	eax
	call	DWORD PTR [ecx+244]

; 2063 : 		SetTextureNULL(1);

	push	ebx
	lea	esi, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19712], esi
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [edx+244]
	mov	DWORD PTR [ebp+19716], esi

; 2064 : 		SetZBias(0);

	fld	DWORD PTR [ebp+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L138916
	cmp	DWORD PTR ?CacheBlending@@3HA, ebx	; CacheBlending
	jne	SHORT $L138915
$L138916:
	mov	eax, DWORD PTR [ebp+19124]
	push	ebx
	push	47					; 0000002fH
	mov	DWORD PTR [ebp+675164], ebx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L138915:

; 2065 : 
; 2066 : 		clock(Stats.D3DVertexRender);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], ebx
	mov	DWORD PTR _L$138926[esp+124], ebx
	je	SHORT $L138928
	rdtsc
	mov	DWORD PTR _L$138926[esp+124], eax
	mov	DWORD PTR _H$138927[esp+124], edx
$L138928:
	mov	eax, DWORD PTR _L$138926[esp+124]
	mov	ecx, DWORD PTR [ebp+19652]

; 2067 : 		INT	First = ActorVertices.Unlock();

	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	sub	ecx, eax
	mov	DWORD PTR [ebp+19652], ecx
	cmp	DWORD PTR [ebp+16704], ebx
	jne	SHORT $L138934
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 2129 : 	}

	npad	4

; 2067 : 		INT	First = ActorVertices.Unlock();

$L138934:
	mov	eax, DWORD PTR [ebp+16704]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	cmp	eax, ebx
	jge	SHORT $L139082
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
	jmp	SHORT $L138935
$L139082:
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L138935:

; 2068 : 		ActorVertices.Set();

	mov	eax, DWORD PTR [ebp+16700]
	test	eax, eax
	mov	ecx, DWORD PTR [ebp+16712]
	mov	DWORD PTR _First$[esp+124], ecx
	jne	SHORT $L138943
	push	317					; 0000013dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L138943:
	mov	eax, DWORD PTR [ebp+16704]
	test	eax, eax
	jne	SHORT $L138945
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 2129 : 	}

	npad	6

; 2068 : 		ActorVertices.Set();

$L138945:
	mov	eax, DWORD PTR [ebp+16700]
	mov	edx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [edx+200]
	test	eax, eax
	jge	SHORT $L138946
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	321					; 00000141H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	esi
	add	esp, 20					; 00000014H
$L138946:
	mov	eax, DWORD PTR [ebp+16700]
	mov	edx, DWORD PTR [eax]
	push	708					; 000002c4H
	push	eax
	call	DWORD PTR [edx+304]
	test	eax, eax
	jge	SHORT $L138951
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	esi
	add	esp, 20					; 00000014H
$L138951:
	mov	ecx, DWORD PTR [ebp+16704]
	mov	eax, DWORD PTR [ebp+16700]
	mov	edx, DWORD PTR [eax]
	push	40					; 00000028H
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+332]
	test	eax, eax
	jge	SHORT $L138956
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
$L138956:

; 2069 : 		
; 2070 : 		bool CurrentDoFog=false;
; 2071 : 		for(i=0;i<QueuedPolygonCount;)

	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]
	xor	edi, edi
	cmp	eax, edi
	mov	BYTE PTR _CurrentDoFog$[esp+124], 0
	mov	DWORD PTR _i$[esp+124], edi
	jle	$L125579
$L125578:

; 2072 : 		{
; 2073 : 			QueuedPolygon &p=QueuedPolygons(i);

	mov	ebx, DWORD PTR [ebp+675212]
	mov	esi, edi
	imul	esi, 280				; 00000118H

; 2074 : 			// Set the polygon texture.
; 2075 : 
; 2076 : 			SetTexture(0,*p.Texture, p.PolyFlags, false, p.PolyFlagsEx );	

	mov	ecx, DWORD PTR [esi+ebx+4]
	mov	edx, DWORD PTR [esi+ebx]
	mov	eax, DWORD PTR [esi+ebx+8]
	add	esi, ebx
	push	0
	push	ecx
	push	0
	push	edx
	push	eax
	xor	edx, edx
	mov	ecx, ebp
	mov	DWORD PTR _p$125580[esp+144], esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 2077 : 			SetBlending(p.PolyFlags,p.PolyFlagsEx);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, eax
	and	edx, 1073741892				; 40000044H
	cmp	edx, 1073741824				; 40000000H
	mov	DWORD PTR $T139017[esp+124], ecx
	mov	DWORD PTR $T139016[esp+124], eax
	jne	SHORT $L138968
	mov	edx, DWORD PTR [ebp+19148]
	test	edx, edx
	jne	SHORT $L138967
$L138968:
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR $T139016[esp+124], eax
$L138967:
	test	al, 68					; 00000044H
	jne	SHORT $L138969
	test	cl, 113					; 00000071H
	jne	SHORT $L138969
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L139098
$L138969:
	test	al, 4
	je	SHORT $L138971
	and	eax, -3					; fffffffdH
$L139098:
	mov	DWORD PTR $T139016[esp+124], eax
$L138971:
	mov	ecx, DWORD PTR [ebp+19616]
	mov	edi, DWORD PTR $T139016[esp+124]
	mov	ebx, DWORD PTR [ebp+19620]
	mov	eax, DWORD PTR $T139017[esp+124]
	xor	ecx, edi
	xor	ebx, eax
	test	ch, 1
	mov	DWORD PTR _Xor$138972[esp+124], ecx
	je	SHORT $L138974
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, edi
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T139017[esp+124]
$L138974:
	test	bl, 2
	je	SHORT $L138975
	mov	edx, DWORD PTR $T139017[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T139017[esp+124]
$L138975:
	test	bl, 8
	je	SHORT $L138976
	mov	edx, DWORD PTR $T139017[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T139017[esp+124]
$L138976:
	test	DWORD PTR _Xor$138972[esp+124], -754972601 ; d3000847H
	jne	SHORT $L138978
	test	bl, 113					; 00000071H
	je	$L139015
	mov	eax, DWORD PTR $T139017[esp+124]
$L138978:
	test	DWORD PTR _Xor$138972[esp+124], 268435525 ; 10000045H
	jne	SHORT $L138980
	test	bl, 113					; 00000071H
	je	$L139001
$L138980:
	test	bl, 1
	je	SHORT $L138981
	test	al, 1
	jne	SHORT $L138981
	mov	eax, DWORD PTR [ebp+19128]
	test	eax, eax
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L138982
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L138983
$L138982:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L138983:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR $T139017[esp+124]
$L138981:
	mov	ecx, DWORD PTR $T139016[esp+124]
	test	ecx, 268435525				; 10000045H
	jne	SHORT $L138984
	test	al, 113					; 00000071H
	jne	SHORT $L138984
	xor	edx, edx
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L139001
$L138984:
	test	al, 64					; 00000040H
	je	SHORT $L138986
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L139099:
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139001
$L138986:
	test	cl, 1
	je	SHORT $L138988
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L139101:
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139001
$L138988:
	test	al, 32					; 00000020H
	je	SHORT $L138990
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139001
$L138990:
	test	al, 16					; 00000010H
	je	SHORT $L138992
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L139101
$L138992:
	test	cl, 4
	je	SHORT $L138994
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L139099
$L138994:
	test	cl, 64					; 00000040H
	je	SHORT $L138996
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139001
$L138996:
	test	ecx, 268435456				; 10000000H
	je	SHORT $L138999
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139001
$L138999:
	test	al, 1
	je	$L139001
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L139001:
	test	BYTE PTR _Xor$138972[esp+124], 1
	je	SHORT $L139002
	mov	edx, DWORD PTR $T139016[esp+124]
	and	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L139002:
	mov	eax, DWORD PTR _Xor$138972[esp+124]
	test	eax, eax
	jns	SHORT $L139004
	mov	ecx, DWORD PTR $T139016[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L139004:
	test	BYTE PTR _Xor$138972[esp+124], 2
	je	SHORT $L139007
	test	BYTE PTR $T139016[esp+124], 2
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L139006
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L139007
$L139006:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L139007:
	mov	edi, DWORD PTR _Xor$138972[esp+124]
	test	edi, 2048				; 00000800H
	mov	ebx, DWORD PTR $T139016[esp+124]
	je	SHORT $L139008
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	esi, ebx
	and	esi, 2048				; 00000800H
	neg	esi
	sbb	esi, esi
	add	esi, 2
	push	esi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L139008:
	test	edi, 1073741824				; 40000000H
	je	SHORT $L139009
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L139009:
	test	edi, 50331648				; 03000000H
	je	SHORT $L139015
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L139012
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L139102
$L139012:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L139014
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L139102
$L139014:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L139102:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L139015:
	mov	eax, DWORD PTR $T139017[esp+124]
	mov	edx, DWORD PTR $T139016[esp+124]

; 2078 : 			//SetBlending(PF_Translucent,0);
; 2079 : 			//SetBlending(p.PolyFlags,0);
; 2080 : 
; 2081 : 			SetDistanceFog(!(p.PolyFlags&PF_Unlit));

	mov	ebx, DWORD PTR _p$125580[esp+124]
	mov	DWORD PTR [ebp+19620], eax
	mov	eax, DWORD PTR [ebp+675196]
	mov	DWORD PTR [ebp+19616], edx
	mov	esi, DWORD PTR [ebx]
	not	esi
	shr	esi, 22					; 00000016H
	and	esi, 1
	test	eax, eax
	je	$L139021
	cmp	esi, DWORD PTR [ebp+675192]
	je	$L139021
	test	esi, esi
	mov	eax, DWORD PTR [ebp+19124]
	je	$L139022
	mov	ecx, DWORD PTR [eax]
	push	1
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dh, BYTE PTR [ebp+675208]
	mov	DWORD PTR -44+[esp+124], ebx
	xor	ebx, ebx
	mov	bl, BYTE PTR [ebp+675210]
	mov	dl, BYTE PTR [ebp+675209]
	mov	edi, ebx
	shl	edx, 8
	or	edx, edi
	push	edx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR [ebp+675200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [edx+200]
	mov	ecx, DWORD PTR [ebp+675204]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [edx+200]
	mov	ebx, DWORD PTR -44+[esp+124]
	jmp	SHORT $L139023
$L139022:
	mov	edx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
$L139023:
	mov	DWORD PTR [ebp+675192], esi
$L139021:

; 2082 : 
; 2083 : 			// Set the correct fog mode:
; 2084 : 			UBOOL DoFog=((p.PolyFlags&(PF_RenderFog|PF_Translucent|PF_Modulated))==PF_RenderFog);		

	mov	eax, DWORD PTR [ebx]
	and	eax, 1073741892				; 40000044H
	sub	eax, 1073741824				; 40000000H
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	DWORD PTR _DoFog$125581[esp+124], eax

; 2085 : 
; 2086 : 			if(DoFog&&(!CurrentDoFog))

	mov	al, BYTE PTR _CurrentDoFog$[esp+124]
	je	SHORT $L139077
	test	al, al
	jne	SHORT $L125584

; 2087 : 			{
; 2088 : 				CurrentDoFog=true;
; 2089 : 				Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_SPECULAR );			

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	2
	push	1
	push	eax
	mov	BYTE PTR _CurrentDoFog$[esp+140], 1
	call	DWORD PTR [ecx+252]

; 2090 : 				Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_ADD );

	push	7

; 2091 : 			} else if((!DoFog)&&CurrentDoFog)

	jmp	SHORT $L139103
$L139077:
	test	al, al
	je	SHORT $L125584

; 2092 : 			{
; 2093 : 				CurrentDoFog=false;
; 2094 : 				Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	mov	BYTE PTR _CurrentDoFog$[esp+140], 0
	call	DWORD PTR [ecx+252]

; 2095 : 				Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

	push	1
$L139103:
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L125584:

; 2096 : 			}
; 2097 : 			
; 2098 : 			// Set the correct clamping mode:
; 2099 : 			SetTextureClampMode((p.PolyFlags & PF_MeshUVClamp)?1:0);

	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebp]
	shr	edx, 13					; 0000000dH
	and	edx, 1
	mov	ecx, ebp
	call	DWORD PTR [eax+212]

; 2100 : 
; 2101 : 			// See how many of my sucessor polys share my attributes, and draw them as well:
; 2102 : 			for(int j=i+1;j<QueuedPolygonCount;j++)

	mov	edi, DWORD PTR _i$[esp+124]
	mov	esi, DWORD PTR _QueuedPolygonCount$[esp+124]
	lea	eax, DWORD PTR [edi+1]
	cmp	eax, esi
	jge	SHORT $L139070
	mov	edx, DWORD PTR [ebx]
	mov	ecx, eax
	imul	ecx, 280				; 00000118H
	add	ecx, DWORD PTR [ebp+675212]
	jmp	SHORT $L125586
$L139094:

; 2096 : 			}
; 2097 : 			
; 2098 : 			// Set the correct clamping mode:
; 2099 : 			SetTextureClampMode((p.PolyFlags & PF_MeshUVClamp)?1:0);

	mov	ebx, DWORD PTR _p$125580[esp+124]
$L125586:

; 2103 : 			{
; 2104 : 				if(p.PolyFlags!=QueuedPolygons(j).PolyFlags)	 break;

	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $L139070

; 2105 : 				if(p.PolyFlagsEx!=QueuedPolygons(j).PolyFlagsEx) break;

	mov	ebx, DWORD PTR [ebx+4]
	cmp	ebx, DWORD PTR [ecx+4]
	jne	SHORT $L139070

; 2106 : 				if(p.Texture!=QueuedPolygons(j).Texture)		 break;

	mov	ebx, DWORD PTR _p$125580[esp+124]
	mov	ebx, DWORD PTR [ebx+8]
	cmp	ebx, DWORD PTR [ecx+8]
	jne	SHORT $L139070
	inc	eax
	add	ecx, 280				; 00000118H
	cmp	eax, esi
	jl	SHORT $L139094
$L139070:

; 2107 : 			}
; 2108 : 			int count=j-i;
; 2109 : 			Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First+(i*3), count );

	mov	edx, DWORD PTR _First$[esp+124]
	sub	eax, edi
	mov	esi, eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	lea	edx, DWORD PTR [edx+edi*2]
	mov	ebx, edi
	add	ebx, edx
	push	ebx
	push	4
	push	eax
	call	DWORD PTR [ecx+280]
	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]

; 2110 : 			i+=count;

	add	edi, esi
	cmp	edi, eax
	mov	DWORD PTR _i$[esp+124], edi
	jl	$L125578

; 2069 : 		
; 2070 : 		bool CurrentDoFog=false;
; 2071 : 		for(i=0;i<QueuedPolygonCount;)

	xor	edi, edi
$L125579:

; 2111 : 		} 
; 2112 : 
; 2113 : 		SetDistanceFog(true);

	cmp	DWORD PTR [ebp+675196], edi
	je	$L139038
	mov	eax, DWORD PTR [ebp+675192]
	mov	esi, 1
	cmp	eax, esi
	je	$L139038
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	esi
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dh, BYTE PTR [ebp+675208]
	xor	ebx, ebx
	mov	bl, BYTE PTR [ebp+675210]
	mov	dl, BYTE PTR [ebp+675209]
	shl	edx, 8
	or	edx, ebx
	push	edx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR [ebp+675200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [edx+200]
	mov	ecx, DWORD PTR [ebp+675204]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebp+675192], esi
$L139038:

; 2114 : 		SetTextureClampMode(0);

	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+212]

; 2115 : 
; 2116 : 		if(CurrentDoFog==true)

	cmp	BYTE PTR _CurrentDoFog$[esp+124], 1
	jne	SHORT $L125593

; 2117 : 		{
; 2118 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 2119 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L125593:

; 2120 : 		}
; 2121 : 
; 2122 : 		RenderQueuedPolygonsForProjectors(ProjectorFlags);		// JEP

	mov	eax, DWORD PTR _ProjectorFlags$[esp+124]
	push	eax
	mov	ecx, ebp
	call	?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z ; UD3DRenderDevice::RenderQueuedPolygonsForProjectors

; 2123 : 
; 2124 : 		QueuedPolygons.Clear();

	mov	DWORD PTR [ebp+675216], edi

; 2125 : 
; 2126 : 		// Terminate polygon clipping:
; 2127 : 		unclock(Stats.D3DVertexRender);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], edi
	mov	DWORD PTR _L$139047[esp+124], edi
	je	SHORT $L139049
	rdtsc
	mov	DWORD PTR _L$139047[esp+124], eax
	mov	DWORD PTR _H$139048[esp+124], edx
$L139049:
	mov	edx, DWORD PTR _L$139047[esp+124]
	mov	esi, DWORD PTR [ebp+19652]
	add	edx, -34				; ffffffdeH
	add	esi, edx
	mov	DWORD PTR [ebp+19652], esi

; 2128 : 		unclock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _L$139054[esp+124], edi
	cmp	ecx, edi
	pop	edi
	je	SHORT $L139056
	rdtsc
	mov	DWORD PTR _L$139054[esp+120], eax
	mov	DWORD PTR _H$139055[esp+120], edx
$L139056:
	mov	ecx, DWORD PTR _L$139054[esp+120]
	mov	eax, DWORD PTR [ebp+19628]
	add	ecx, -34				; ffffffdeH
	add	eax, ecx
	mov	DWORD PTR [ebp+19628], eax
$L125539:
	pop	esi
	pop	ebp
	pop	ebx

; 2129 : 	}

	add	esp, 108				; 0000006cH
	ret	0
?QueuePolygonEnd@UD3DRenderDevice@@UAIXK@Z ENDP		; UD3DRenderDevice::QueuePolygonEnd
_TEXT	ENDS
PUBLIC	?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Add
; Function compile flags: /Ogty
;	COMDAT ?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z
_TEXT	SEGMENT
_Pts$ = 8
_PolyFlags$ = 16
_ExFlags$ = 20
_L$139109 = -8
_H$139110 = -4
_L$139116 = -8
_H$139117 = -4
_L$139127 = 16
_H$139128 = 20
_L$139134 = 16
_H$139135 = 20
?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z PROC NEAR ; UD3DRenderDevice::QueuePolygon, COMDAT
; _this$ = ecx
; _Info$ = edx

; 2133 : 		if(!RenderMeshes) 

	mov	eax, DWORD PTR ?RenderMeshes@@3HA	; RenderMeshes
	sub	esp, 8
	push	ebp
	mov	ebp, ecx
	xor	ecx, ecx
	cmp	eax, ecx
	push	edi
	mov	edi, edx
	je	$L125595

; 2134 : 			return;
; 2135 : 
; 2136 : 		clock(Stats.QueueTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ecx
	mov	DWORD PTR _L$139109[esp+16], ecx
	je	SHORT $L139111
	rdtsc
	mov	DWORD PTR _L$139109[esp+16], eax
	mov	DWORD PTR _H$139110[esp+16], edx
$L139111:
	mov	edx, DWORD PTR _L$139109[esp+16]
	push	ebx
	push	esi
	sub	DWORD PTR [ebp+19644], edx

; 2137 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ecx
	mov	DWORD PTR _L$139116[esp+24], ecx
	je	SHORT $L139118
	rdtsc
	mov	DWORD PTR _L$139116[esp+24], eax
	mov	DWORD PTR _H$139117[esp+24], edx
$L139118:
	mov	esi, DWORD PTR [ebp+19628]
	mov	edx, DWORD PTR _L$139116[esp+24]

; 2138 : 
; 2139 : 		if(PolyFlags&PF_Masked) Stats.MaskedPolys++;

	mov	ebx, DWORD PTR _PolyFlags$[esp+20]
	sub	esi, edx
	test	bl, 2
	mov	DWORD PTR [ebp+19628], esi
	je	SHORT $L125597
	inc	DWORD PTR [ebp+19672]
$L125597:

; 2140 : 
; 2141 : 		QueuedPolygon &p=QueuedPolygons(QueuedPolygons.Add());

	push	ecx
	lea	esi, DWORD PTR [ebp+675212]
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Add
	imul	eax, 280				; 00000118H
	mov	ecx, DWORD PTR [esi]

; 2142 : 		p.PolyFlags=PolyFlags&(~PF_Memorized);
; 2143 : 		p.PolyFlagsEx=ExFlags|PFX_Clip;
; 2144 : 		p.Texture=Info;
; 2145 : 
; 2146 : 		memcpy(&p.v[0],Pts[0],sizeof(FTransTexture));

	mov	edx, DWORD PTR _Pts$[esp+20]
	add	eax, ecx
	mov	ecx, DWORD PTR _ExFlags$[esp+20]
	or	ecx, 2
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edi
	and	ebx, -16777217				; feffffffH
	mov	DWORD PTR [eax], ebx
	mov	esi, DWORD PTR [edx]
	lea	edi, DWORD PTR [eax+16]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2147 : 		memcpy(&p.v[1],Pts[1],sizeof(FTransTexture));

	mov	esi, DWORD PTR [edx+4]
	lea	edi, DWORD PTR [eax+104]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2148 : 		memcpy(&p.v[2],Pts[2],sizeof(FTransTexture));

	mov	esi, DWORD PTR [edx+8]
	lea	edi, DWORD PTR [eax+192]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2149 : 		
; 2150 : 		unclock(Stats.PolyTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	mov	eax, DWORD PTR [edx]
	xor	ecx, ecx
	cmp	eax, ecx
	pop	esi
	mov	DWORD PTR _L$139127[esp+16], ecx
	pop	ebx
	je	SHORT $L139129
	rdtsc
	mov	DWORD PTR _L$139127[esp+12], eax
	mov	DWORD PTR _H$139128[esp+12], edx
$L139129:
	mov	eax, DWORD PTR _L$139127[esp+12]
	mov	edx, DWORD PTR [ebp+19628]
	add	eax, -34				; ffffffdeH
	add	edx, eax
	mov	DWORD PTR [ebp+19628], edx

; 2151 : 		unclock(Stats.QueueTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], ecx
	mov	DWORD PTR _L$139134[esp+12], ecx
	je	SHORT $L139136
	rdtsc
	mov	DWORD PTR _L$139134[esp+12], eax
	mov	DWORD PTR _H$139135[esp+12], edx
$L139136:
	mov	eax, DWORD PTR _L$139134[esp+12]
	mov	ecx, DWORD PTR [ebp+19644]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [ebp+19644], ecx
$L125595:
	pop	edi
	pop	ebp

; 2152 : 	}

	add	esp, 8
	ret	20					; 00000014H
?QueuePolygon@UD3DRenderDevice@@UAIXPAUFTextureInfo@@PAPAUFTransTexture@@HKKPAVFSpanBuffer@@@Z ENDP ; UD3DRenderDevice::QueuePolygon
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z
_TEXT	SEGMENT
?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::QueuePolygonBeginFast, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 2156 : 		CurrentFrame=Frame;

	mov	DWORD PTR [ecx+172], edx

; 2157 : 		return true;

	mov	al, 1

; 2158 : 	}

	ret	0
?QueuePolygonBeginFast@UD3DRenderDevice@@UAI_NPAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::QueuePolygonBeginFast
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z
_TEXT	SEGMENT
_L$139147 = -8
_H$139148 = -4
_L$139154 = -8
_H$139155 = -4
_L$139165 = -8
_H$139166 = -4
_L$139172 = -8
_H$139173 = -4
?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z PROC NEAR ; UD3DRenderDevice::QueuePolygonFast, COMDAT
; _this$ = ecx
; _Pts$ = edx

; 2161 : 	{

	sub	esp, 8

; 2162 : 		clock(Stats.QueueTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	push	ebx
	push	ebp
	mov	ebp, edx
	mov	edx, DWORD PTR [eax]
	mov	ebx, ecx
	xor	ecx, ecx
	cmp	edx, ecx
	mov	DWORD PTR _L$139147[esp+16], ecx
	je	SHORT $L139149
	rdtsc
	mov	DWORD PTR _L$139147[esp+16], eax
	mov	DWORD PTR _H$139148[esp+16], edx
$L139149:
	mov	edx, DWORD PTR _L$139147[esp+16]
	push	esi
	sub	DWORD PTR [ebx+19644], edx

; 2163 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ecx
	push	edi
	mov	DWORD PTR _L$139154[esp+24], ecx
	je	SHORT $L139156
	rdtsc
	mov	DWORD PTR _L$139154[esp+24], eax
	mov	DWORD PTR _H$139155[esp+24], edx
$L139156:
	mov	esi, DWORD PTR [ebx+19628]
	mov	edx, DWORD PTR _L$139154[esp+24]
	sub	esi, edx
	mov	DWORD PTR [ebx+19628], esi

; 2164 : 
; 2165 : 		QueuedPolygon &p=QueuedPolygons(QueuedPolygons.Add());

	push	ecx
	lea	esi, DWORD PTR [ebx+675212]
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::Add
	imul	eax, 280				; 00000118H
	mov	edx, DWORD PTR [esi]

; 2166 : 
; 2167 : 		memcpy(&p.v[0],Pts[0],sizeof(FTransTexture));

	mov	esi, DWORD PTR [ebp]
	add	eax, edx
	lea	edi, DWORD PTR [eax+16]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2168 : 		memcpy(&p.v[1],Pts[1],sizeof(FTransTexture));

	mov	esi, DWORD PTR [ebp+4]
	lea	edi, DWORD PTR [eax+104]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2169 : 		memcpy(&p.v[2],Pts[2],sizeof(FTransTexture));

	mov	esi, DWORD PTR [ebp+8]
	lea	edi, DWORD PTR [eax+192]
	mov	ecx, 22					; 00000016H
	rep movsd

; 2170 : 		
; 2171 : 		unclock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	pop	edi
	mov	DWORD PTR _L$139165[esp+20], 0
	pop	esi
	je	SHORT $L139167
	rdtsc
	mov	DWORD PTR _L$139165[esp+16], eax
	mov	DWORD PTR _H$139166[esp+16], edx
$L139167:
	mov	ecx, DWORD PTR _L$139165[esp+16]
	mov	edx, DWORD PTR [ebx+19628]
	add	ecx, -34				; ffffffdeH
	add	edx, ecx
	mov	DWORD PTR [ebx+19628], edx

; 2172 : 		unclock(Stats.QueueTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	mov	ecx, DWORD PTR [edx]
	xor	eax, eax
	test	ecx, ecx
	mov	DWORD PTR _L$139172[esp+16], eax
	je	SHORT $L139177
	rdtsc
	mov	DWORD PTR _L$139172[esp+16], eax
	mov	DWORD PTR _H$139173[esp+16], edx
	mov	eax, DWORD PTR _L$139172[esp+16]
$L139177:
	mov	ecx, DWORD PTR [ebx+19644]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	pop	ebp
	mov	DWORD PTR [ebx+19644], ecx
	pop	ebx

; 2173 : 	}

	add	esp, 8
	ret	4
?QueuePolygonFast@UD3DRenderDevice@@UAIXPAPAUFTransTexture@@H@Z ENDP ; UD3DRenderDevice::QueuePolygonFast
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT
_L$139193 = -56
_H$139194 = -48
_VertexData$139204 = -60
_L$139229 = -56
_H$139230 = -48
_L$139236 = -56
_H$139237 = -48
_L$139277 = -48
_H$139278 = -52
_L$139289 = -48
_H$139290 = -52
_L$139368 = -44
_H$139369 = -48
_L$139375 = -44
_H$139376 = -48
_QueuedPolygonCount$ = -44
_V$125628 = -40
_L$139186 = -56
_H$139187 = -48
?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ PROC NEAR	; UD3DRenderDevice::QueuePolygonEndFast, COMDAT
; _this$ = ecx

; 2193 : 	{

	sub	esp, 60					; 0000003cH
	push	ebx
	push	ebp
	mov	ebx, ecx
	push	esi

; 2194 : 		VALIDATE;
; 2195 : 		int QueuedPolygonCount=QueuedPolygons.Num();

	mov	esi, DWORD PTR [ebx+675216]

; 2196 : 
; 2197 : 		if(!QueuedPolygonCount) 

	xor	ebp, ebp
	cmp	esi, ebp
	mov	DWORD PTR _QueuedPolygonCount$[esp+72], esi
	je	$L125611

; 2198 : 			return;
; 2199 : 
; 2200 : 		check(Direct3DDevice8);

	cmp	DWORD PTR [ebx+19124], ebp
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L125614
	push	2200					; 00000898H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEJO@Direct3DDevice8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L125614:

; 2201 : 
; 2202 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebp
	mov	DWORD PTR _L$139186[esp+76], ebp
	je	SHORT $L139188
	rdtsc
	mov	DWORD PTR _L$139186[esp+76], eax
	mov	DWORD PTR _H$139187[esp+76], edx
$L139188:
	mov	eax, DWORD PTR [ebx+19628]
	mov	ecx, DWORD PTR _L$139186[esp+76]

; 2203 : 		Stats.QueueCount++;

	mov	edx, DWORD PTR [ebx+19700]
	sub	eax, ecx

; 2204 : 		Stats.Polys+=QueuedPolygonCount;

	mov	ecx, DWORD PTR [ebx+19668]
	inc	edx
	add	ecx, esi
	mov	DWORD PTR [ebx+19628], eax

; 2205 : 
; 2206 : 		PreRender(CurrentFrame);

	mov	eax, DWORD PTR [ebx]
	mov	DWORD PTR [ebx+19700], edx
	mov	edx, DWORD PTR [ebx+172]
	mov	DWORD PTR [ebx+19668], ecx
	mov	ecx, ebx
	call	DWORD PTR [eax+140]

; 2207 : 
; 2208 : 		int VertexCount=QueuedPolygonCount*3;

	lea	esi, DWORD PTR [esi+esi*2]

; 2209 : 		verify(VertexCount<=ACTORPOLY_VERTEXBUFFER_SIZE);

	cmp	esi, 16384				; 00004000H
	jle	SHORT $L125616
	push	2209					; 000008a1H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L125616:

; 2210 : 
; 2211 : 		//Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_ALWAYS );
; 2212 : 
; 2213 : 		clock(Stats.D3DVertexLock);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], ebp
	mov	DWORD PTR _L$139193[esp+76], ebp
	je	SHORT $L139195
	rdtsc
	mov	DWORD PTR _L$139193[esp+76], eax
	mov	DWORD PTR _H$139194[esp+76], edx
$L139195:
	mov	ecx, DWORD PTR [ebx+19660]
	mov	edx, DWORD PTR _L$139193[esp+76]
	sub	ecx, edx
	mov	DWORD PTR [ebx+19660], ecx

; 2214 : 		FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

	cmp	DWORD PTR [ebx+16704], ebp
	jne	SHORT $L139201
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L139201:
	cmp	DWORD PTR [ebx+16708], ebp
	jne	SHORT $L139202
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L139202:
	cmp	esi, DWORD PTR [ebx+16708]
	jl	SHORT $L139205
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L139205:
	mov	ecx, DWORD PTR [ebx+16716]
	mov	edx, DWORD PTR [ebx+16708]
	lea	eax, DWORD PTR [ecx+esi]
	cmp	eax, edx
	mov	eax, DWORD PTR [ebx+16704]
	jge	SHORT $L139219
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$139204[esp+80]
	push	edi
	lea	edi, DWORD PTR [esi+esi*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	edi, 3
	push	edi
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebp
	jge	SHORT $L139395
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
	jmp	SHORT $L139214
$L139395:
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
$L139214:
	mov	eax, DWORD PTR [ebx+16716]
	mov	DWORD PTR [ebx+16712], eax
	add	eax, esi
	mov	DWORD PTR [ebx+16716], eax
	jmp	SHORT $L139218

; 2289 : 	}

	npad	3

; 2214 : 		FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

$L139219:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$139204[esp+80]
	push	edx
	lea	edx, DWORD PTR [esi+esi*4]
	shl	edx, 3
	push	edx
	push	ebp
	push	eax
	call	DWORD PTR [ecx+44]
	cmp	eax, ebp
	jge	SHORT $L139220
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L139220:
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	DWORD PTR [ebx+16712], ebp
	mov	DWORD PTR [ebx+16716], esi
$L139218:

; 2215 : 		Stats.VBLocks++;

	mov	ecx, DWORD PTR [ebx+19708]
	mov	ebp, DWORD PTR _VertexData$139204[esp+76]
	inc	ecx
	mov	DWORD PTR [ebx+19708], ecx

; 2216 : 		unclock(Stats.D3DVertexLock);

	mov	edx, DWORD PTR __imp__GTimestamp
	mov	eax, DWORD PTR [edx]
	xor	esi, esi
	cmp	eax, esi
	mov	DWORD PTR _L$139229[esp+76], esi
	je	SHORT $L139231
	rdtsc
	mov	DWORD PTR _L$139229[esp+76], eax
	mov	DWORD PTR _H$139230[esp+76], edx
$L139231:
	mov	eax, DWORD PTR _L$139229[esp+76]
	mov	ecx, DWORD PTR [ebx+19660]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [ebx+19660], ecx

; 2217 : 
; 2218 : 		clock(Stats.D3DVertexSetup);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], esi
	mov	DWORD PTR _L$139236[esp+76], esi
	je	SHORT $L139238
	rdtsc
	mov	DWORD PTR _L$139236[esp+76], eax
	mov	DWORD PTR _H$139237[esp+76], edx
$L139238:
	mov	eax, DWORD PTR [ebx+19656]
	mov	edx, DWORD PTR _L$139236[esp+76]
	sub	eax, edx
	mov	DWORD PTR [ebx+19656], eax

; 2219 : 		for(int i=0;i<QueuedPolygonCount;i++)

	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+76]
	cmp	eax, esi
	jle	$L125622
	mov	DWORD PTR -56+[esp+76], esi
	mov	DWORD PTR -48+[esp+76], eax
	jmp	SHORT $L125620
$L139396:

; 2217 : 
; 2218 : 		clock(Stats.D3DVertexSetup);

	xor	esi, esi
$L125620:

; 2220 : 		{
; 2221 : 			QueuedPolygon &p=QueuedPolygons(i);				

	mov	eax, DWORD PTR [ebx+675212]
	add	eax, DWORD PTR -56+[esp+76]
	lea	edx, DWORD PTR [eax+36]
	mov	DWORD PTR -52+[esp+76], 3
	jmp	SHORT $L125625
$L139397:
	xor	esi, esi

; 2289 : 	}

	npad	4
$L125625:

; 2224 : 			{	
; 2225 : 				FD3DTLVertex	V;
; 2226 : 
; 2227 : 				V.Position.X = p.v[Index].ScreenX + CurrentFrame->XB - 0.5f;

	mov	ecx, DWORD PTR [ebx+172]
	fild	DWORD PTR [ecx+176]
	fld	ST(0)
	fadd	DWORD PTR [edx-4]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _V$125628[esp+76]

; 2228 : 				V.Position.Y = p.v[Index].ScreenY + CurrentFrame->YB - 0.5f;

	fild	DWORD PTR [ecx+180]
	fst	DWORD PTR -60+[esp+76]
	fadd	DWORD PTR [edx]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _V$125628[esp+80]

; 2229 : 
; 2230 : 
; 2231 : 				if (V.Position.X < CurrentFrame->XB)

	fld	DWORD PTR _V$125628[esp+76]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L125629

; 2232 : 					V.Position.X = CurrentFrame->XB;

	fstp	DWORD PTR _V$125628[esp+76]

; 2233 : 				else if (V.Position.X > CurrentFrame->X)

	jmp	SHORT $L125631
$L125629:

; 2229 : 
; 2230 : 
; 2231 : 				if (V.Position.X < CurrentFrame->XB)

	fstp	ST(0)

; 2233 : 				else if (V.Position.X > CurrentFrame->X)

	fild	DWORD PTR [ecx+168]
	fld	DWORD PTR _V$125628[esp+76]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L139392

; 2234 : 					V.Position.X = CurrentFrame->X;

	fstp	DWORD PTR _V$125628[esp+76]
	jmp	SHORT $L125631
$L139392:
	fstp	ST(0)
$L125631:

; 2235 : 
; 2236 : 				if (V.Position.Y < CurrentFrame->YB)

	fld	DWORD PTR _V$125628[esp+80]
	fcomp	DWORD PTR -60+[esp+76]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L125632

; 2237 : 					V.Position.Y = CurrentFrame->YB;

	mov	eax, DWORD PTR -60+[esp+76]
	mov	DWORD PTR _V$125628[esp+80], eax

; 2238 : 				else if (V.Position.Y > CurrentFrame->Y)

	jmp	SHORT $L125634
$L125632:
	fild	DWORD PTR [ecx+172]
	fld	DWORD PTR _V$125628[esp+80]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L139391

; 2239 : 					V.Position.Y = CurrentFrame->Y;

	fstp	DWORD PTR _V$125628[esp+80]
	jmp	SHORT $L125634
$L139391:
	fstp	ST(0)
$L125634:

; 2222 : 
; 2223 : 			for( INT Index = 0; Index < 3; Index++ )

	mov	eax, DWORD PTR -52+[esp+76]

; 2240 : 
; 2241 : 				V.Position.Z = 1.0f;
; 2242 : 				V.Position.W = 1.0f;
; 2243 : 
; 2244 : 				V.Specular=0;
; 2245 : 				
; 2246 : 				#define SHADOW_VAL		(0)
; 2247 : 
; 2248 : 				V.Diffuse  = (SHADOW_VAL<<16) | (SHADOW_VAL<<8) | SHADOW_VAL;
; 2249 : 
; 2250 : 				*Vertex=V;

	mov	edi, ebp
	mov	DWORD PTR _V$125628[esp+96], esi
	mov	DWORD PTR _V$125628[esp+92], esi

; 2251 : 				Vertex++;

	add	ebp, 40					; 00000028H
	add	edx, 88					; 00000058H
	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _V$125628[esp+76]
	dec	eax
	mov	DWORD PTR _V$125628[esp+84], 1065353216	; 3f800000H
	mov	DWORD PTR _V$125628[esp+88], 1065353216	; 3f800000H
	rep movsd
	mov	DWORD PTR -52+[esp+76], eax
	jne	$L139397
	mov	ecx, DWORD PTR -56+[esp+76]
	mov	eax, DWORD PTR -48+[esp+76]
	add	ecx, 280				; 00000118H
	dec	eax
	mov	DWORD PTR -56+[esp+76], ecx
	mov	DWORD PTR -48+[esp+76], eax
	jne	$L139396
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	xor	esi, esi
$L125622:

; 2252 : 
; 2253 : 			}
; 2254 : 		}
; 2255 : 		unclock(Stats.D3DVertexSetup);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], esi
	mov	DWORD PTR _L$139277[esp+76], esi
	je	SHORT $L139279
	rdtsc
	mov	DWORD PTR _L$139277[esp+76], eax
	mov	DWORD PTR _H$139278[esp+76], edx
$L139279:
	mov	edx, DWORD PTR _L$139277[esp+76]
	mov	ebp, DWORD PTR [ebx+19656]

; 2256 : 
; 2257 : 		SetTextureNULL( 0 );

	mov	eax, DWORD PTR [ebx+19124]
	add	edx, -34				; ffffffdeH
	push	esi
	add	ebp, edx
	push	esi
	mov	DWORD PTR [ebx+19656], ebp
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+244]
	lea	edx, DWORD PTR [ebx+16624]
	mov	DWORD PTR [ebx+19712], edx

; 2258 : 
; 2259 : 		clock(Stats.D3DVertexRender);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], esi
	mov	DWORD PTR _L$139289[esp+76], esi
	je	SHORT $L139291
	rdtsc
	mov	DWORD PTR _L$139289[esp+76], eax
	mov	DWORD PTR _H$139290[esp+76], edx
$L139291:
	mov	edx, DWORD PTR [ebx+19652]
	mov	ecx, DWORD PTR _L$139289[esp+76]
	sub	edx, ecx
	mov	DWORD PTR [ebx+19652], edx

; 2260 : 		INT	First = ActorVertices.Unlock();

	cmp	DWORD PTR [ebx+16704], esi
	jne	SHORT $L139297
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L139297:
	mov	eax, DWORD PTR [ebx+16704]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	cmp	eax, esi
	jge	SHORT $L139399
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ebp, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebp
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
	jmp	SHORT $L139298
$L139399:
	mov	ebp, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L139298:

; 2261 : 		ActorVertices.Set();

	mov	eax, DWORD PTR [ebx+16700]
	test	eax, eax
	mov	esi, DWORD PTR [ebx+16712]
	jne	SHORT $L139306
	push	317					; 0000013dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L139306:
	mov	eax, DWORD PTR [ebx+16704]
	test	eax, eax
	jne	SHORT $L139308
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L139308:
	mov	eax, DWORD PTR [ebx+16700]
	mov	edx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [edx+200]
	test	eax, eax
	jge	SHORT $L139309
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	321					; 00000141H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebp
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L139309:
	mov	eax, DWORD PTR [ebx+16700]
	mov	edx, DWORD PTR [eax]
	push	708					; 000002c4H
	push	eax
	call	DWORD PTR [edx+304]
	test	eax, eax
	jge	SHORT $L139314
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebp
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L139314:
	mov	ecx, DWORD PTR [ebx+16704]
	mov	eax, DWORD PTR [ebx+16700]
	mov	edx, DWORD PTR [eax]
	push	40					; 00000028H
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+332]
	test	eax, eax
	jge	SHORT $L139319
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebp
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L139319:

; 2262 : 		
; 2263 : 		SetZBias(0);

	fld	DWORD PTR [ebx+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L139346
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L139345
$L139346:
	mov	eax, DWORD PTR [ebx+19124]
	push	0
	push	47					; 0000002fH
	mov	DWORD PTR [ebx+675164], 0
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L139345:

; 2264 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [ebx+675196]
	test	eax, eax
	je	SHORT $L139351
	mov	eax, DWORD PTR [ebx+675192]
	test	eax, eax
	je	SHORT $L139351
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebx+675192], 0
$L139351:

; 2265 : 		SetBlending();

	push	0
	xor	edx, edx
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 2266 : 		
; 2267 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	mov	ebp, 1
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]

; 2268 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	ebp
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]

; 2269 : 
; 2270 : 		// Turn off zbuffering
; 2271 : 		Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_ALWAYS);

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]

; 2272 : 		
; 2273 : 		// Draw the VB
; 2274 : 		//Direct3DDevice8->SetRenderState(D3DRS_FILLMODE, D3DFILL_WIREFRAME);
; 2275 : 		Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First, QueuedPolygonCount);

	mov	ecx, DWORD PTR _QueuedPolygonCount$[esp+76]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	esi
	push	4
	push	eax
	call	DWORD PTR [edx+280]

; 2276 : 		//Direct3DDevice8->SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);
; 2277 : 		
; 2278 : 		// Turn zbuffering back on
; 2279 : 		Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_LESSEQUAL );

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]

; 2280 : 
; 2281 : 		SetDistanceFog(true);

	mov	eax, DWORD PTR [ebx+675196]
	xor	edi, edi
	cmp	eax, edi
	je	$L139358
	cmp	DWORD PTR [ebx+675192], ebp
	je	$L139358
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [edx+200]
	mov	esi, DWORD PTR [ebx+19124]
	mov	eax, DWORD PTR [esi]
	xor	ecx, ecx
	mov	ch, BYTE PTR [ebx+675208]
	xor	edx, edx
	mov	dl, BYTE PTR [ebx+675210]
	mov	cl, BYTE PTR [ebx+675209]
	shl	ecx, 8
	or	ecx, edx
	push	ecx
	push	34					; 00000022H
	push	esi
	call	DWORD PTR [eax+200]
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR [ebx+675200]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [edx+200]
	mov	ecx, DWORD PTR [ebx+675204]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebx+675192], ebp
$L139358:

; 2282 : 		SetTextureClampMode(0);

	mov	eax, DWORD PTR [ebx]
	xor	edx, edx
	mov	ecx, ebx
	call	DWORD PTR [eax+212]

; 2283 : 
; 2284 : 		QueuedPolygons.Clear();

	mov	DWORD PTR [ebx+675216], edi

; 2285 : 
; 2286 : 		// Terminate polygon clipping:
; 2287 : 		unclock(Stats.D3DVertexRender);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], edi
	mov	DWORD PTR _L$139368[esp+76], edi
	je	SHORT $L139370
	rdtsc
	mov	DWORD PTR _L$139368[esp+76], eax
	mov	DWORD PTR _H$139369[esp+76], edx
$L139370:
	mov	edx, DWORD PTR _L$139368[esp+76]
	mov	esi, DWORD PTR [ebx+19652]
	add	edx, -34				; ffffffdeH
	add	esi, edx
	mov	DWORD PTR [ebx+19652], esi

; 2288 : 		unclock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _L$139375[esp+76], edi
	cmp	ecx, edi
	pop	edi
	je	SHORT $L139377
	rdtsc
	mov	DWORD PTR _L$139375[esp+72], eax
	mov	DWORD PTR _H$139376[esp+72], edx
$L139377:
	mov	ecx, DWORD PTR _L$139375[esp+72]
	mov	eax, DWORD PTR [ebx+19628]
	add	ecx, -34				; ffffffdeH
	add	eax, ecx
	mov	DWORD PTR [ebx+19628], eax
$L125611:
	pop	esi
	pop	ebp
	pop	ebx

; 2289 : 	}

	add	esp, 60					; 0000003cH
	ret	0
?QueuePolygonEndFast@UD3DRenderDevice@@UAIXXZ ENDP	; UD3DRenderDevice::QueuePolygonEndFast
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z
_TEXT	SEGMENT
_ProjectorFlags$ = 8
_XorEx$139434 = -104
_L$139520 = -88
_H$139521 = -52
_VertexData$139530 = -84
_L$139555 = -88
_H$139556 = -52
_L$139562 = -88
_H$139563 = -52
$T139599 = -60
_Temp$139606 = -44
$T139607 = -52
$T139608 = -56
$T139616 = -52
_I$139624 = -48
_L$139629 = -72
_H$139630 = -48
_QueuedPolygonCount$ = -108
_VertexCount$ = -100
_p$ = -68
_NumMaskedPolys$125654 = -88
_P$125665 = -32
_First$125668 = -52
_Count$125679 = -56
?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z PROC NEAR ; UD3DRenderDevice::RenderQueuedPolygonsForProjectors, COMDAT
; _this$ = ecx

; 2292 : 	{

	sub	esp, 108				; 0000006cH
	push	ebp
	mov	ebp, ecx

; 2293 : 		int QueuedPolygonCount=QueuedPolygons.Num();

	mov	eax, DWORD PTR [ebp+675216]

; 2294 : 
; 2295 : 		if(!QueuedPolygonCount) 

	test	eax, eax
	mov	DWORD PTR _QueuedPolygonCount$[esp+112], eax
	je	$L125643

; 2296 : 			return;
; 2297 : 		
; 2298 : 		int VertexCount=QueuedPolygonCount*3;

	lea	eax, DWORD PTR [eax+eax*2]

; 2299 : 		verify(VertexCount<=ACTORPOLY_VERTEXBUFFER_SIZE);

	cmp	eax, 16384				; 00004000H
	mov	DWORD PTR _VertexCount$[esp+112], eax
	jle	SHORT $L125641
	push	2299					; 000008fbH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0CJ@LDCG@VertexCount?$DM?$DNACTORPOLY_VERTEXBUF@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125641:

; 2300 : 
; 2301 : 		if (ProjectorArray.Num() <= 0 || CurrentFrame->Recursion != 0 || !ProjectorFlags)

	mov	eax, DWORD PTR [ebp+204]
	test	eax, eax
	jle	$L125643
	mov	eax, DWORD PTR [ebp+172]
	mov	ecx, DWORD PTR [eax+28]
	test	ecx, ecx
	jne	$L125643
	mov	eax, DWORD PTR _ProjectorFlags$[esp+108]
	test	eax, eax
	je	$L125643

; 2302 : 			return;			// No projectors to check
; 2303 : 
; 2304 : 		// Setup projector render states
; 2305 : 		SetTextureNULL( 0 );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	esi
	push	edi
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 2306 : 		SetTextureNULL( 1 );

	push	0
	lea	esi, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19712], esi
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	edi, 1
	push	edi
	push	eax
	call	DWORD PTR [edx+244]
	mov	DWORD PTR [ebp+19716], esi

; 2307 : 		SetBlending( PF_Modulated );

	mov	ebx, DWORD PTR [ebp+19616]
	mov	eax, DWORD PTR [ebp+19620]
	xor	ebx, 64					; 00000040H
	test	bh, 1
	mov	DWORD PTR _XorEx$139434[esp+124], eax
	je	SHORT $L139435
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$139434[esp+124]
$L139435:
	test	al, 2
	je	SHORT $L139436
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _XorEx$139434[esp+124]
$L139436:
	test	al, 8
	mov	esi, 9
	je	SHORT $L139437
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	esi
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _XorEx$139434[esp+124]
$L139437:
	test	ebx, -754972601				; d3000847H
	jne	SHORT $L139439
	test	al, 113					; 00000071H
	je	$L139475
$L139439:
	test	ebx, 268435525				; 10000045H
	jne	SHORT $L139441
	test	al, 113					; 00000071H
	je	SHORT $L139459
$L139441:
	test	al, 1
	je	SHORT $L139442
	mov	eax, DWORD PTR [ebp+19128]
	test	eax, eax
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L139443
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L139444
$L139443:
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L139444:
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L139442:
	mov	edx, edi
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, esi
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L139459:
	test	bl, 1
	je	SHORT $L139462
	xor	edx, edx
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, edi
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L139462:
	test	ebx, ebx
	jns	SHORT $L139464
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L139464:
	test	bl, 2
	je	SHORT $L139467
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L139467:
	test	bh, 8
	je	SHORT $L139468
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L139468:
	test	ebx, 1073741824				; 40000000H
	je	SHORT $L139469
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L139469:
	test	ebx, 50331648				; 03000000H
	je	SHORT $L139475
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	4
	push	edi
	push	eax
	call	DWORD PTR [edx+252]
$L139475:

; 2308 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [ebp+675196]
	test	eax, eax
	mov	DWORD PTR [ebp+19616], 64		; 00000040H
	mov	DWORD PTR [ebp+19620], 0
	je	SHORT $L139480
	mov	eax, DWORD PTR [ebp+675192]
	test	eax, eax
	je	SHORT $L139480
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [ebp+675192], 0
$L139480:

; 2309 : 
; 2310 : 		SetTextureClampMode(1);

	mov	eax, DWORD PTR [ebp]
	mov	edx, edi
	mov	ecx, ebp
	call	DWORD PTR [eax+212]

; 2311 : 
; 2312 : 		//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 2313 : 		//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_DESTCOLOR );
; 2314 : 		//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ZERO );
; 2315 : 		SetAlphaBlendEnable(TRUE);

	mov	eax, DWORD PTR [ebp+675176]
	cmp	eax, edi
	jne	SHORT $L139490
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L139489
$L139490:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [ebp+675176], edi
$L139489:

; 2316 : 		SetSrcBlend(D3DBLEND_DESTCOLOR);

	cmp	DWORD PTR [ebp+675168], esi
	jne	SHORT $L139498
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L139496
$L139498:
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	esi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebp+675168], esi
$L139496:

; 2317 : 		SetDstBlend(D3DBLEND_ZERO);

	cmp	DWORD PTR [ebp+675172], edi
	jne	SHORT $L139507
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L139505
$L139507:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [ebp+675172], edi
$L139505:

; 2318 : 	#if 1
; 2319 : 		// Setup clipper texture (also used for fade out)
; 2320 : 		Direct3DDevice8->SetTexture(1, ClipperTexture);

	mov	ecx, DWORD PTR [ebp+19112]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	edi
	push	eax
	call	DWORD PTR [edx+244]

; 2321 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	2
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2322 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_ADD);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	7
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2323 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	4
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2324 : 
; 2325 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_CLAMP );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	13					; 0000000dH
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2326 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_CLAMP );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	14					; 0000000eH
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2327 : 
; 2328 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_POINT);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	16					; 00000010H
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2329 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_POINT);

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2330 : 	#endif
; 2331 : 			
; 2332 : 		for (int p=ProjectorArray.Num()-1; p>=0 ; p--)

	mov	ecx, DWORD PTR [ebp+204]
	dec	ecx
	mov	DWORD PTR _p$[esp+124], ecx
	js	$L125647
	mov	eax, ecx
	imul	eax, 84					; 00000054H
	mov	DWORD PTR -64+[esp+124], eax
$L139697:
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 2333 : 		{
; 2334 : 			DWORD		Mask = 1<<p;

	shl	edi, cl

; 2335 : 
; 2336 : 			if (!(Mask & ProjectorFlags))

	test	DWORD PTR _ProjectorFlags$[esp+120], edi
	je	$L125646

; 2337 : 				continue;
; 2338 : 
; 2339 : 			ProjectorInfo *pProjector = &ProjectorArray(p);

	mov	ebx, DWORD PTR [ebp+200]

; 2340 : 
; 2341 : 			// Set the texture to the render target that belongs to this projector
; 2342 : 			Direct3DDevice8->SetTexture(0, pProjector->pRenderTargetTex);

	mov	edx, DWORD PTR [ebx+eax+4]
	add	ebx, eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 2343 : 
; 2344 : 			// Fill up the VB with the verts for this projector
; 2345 : 			clock(Stats.D3DVertexLock);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _L$139520[esp+124], 0
	je	SHORT $L139522
	rdtsc
	mov	DWORD PTR _L$139520[esp+124], eax
	mov	DWORD PTR _H$139521[esp+124], edx
$L139522:
	mov	edx, DWORD PTR [ebp+19660]
	mov	ecx, DWORD PTR _L$139520[esp+124]
	sub	edx, ecx
	mov	DWORD PTR [ebp+19660], edx

; 2346 : 			FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

	mov	eax, DWORD PTR [ebp+16704]
	test	eax, eax
	jne	SHORT $L139527
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L139527:
	mov	eax, DWORD PTR [ebp+16708]
	test	eax, eax
	jne	SHORT $L139528
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L139528:
	mov	edi, DWORD PTR _VertexCount$[esp+124]
	cmp	edi, DWORD PTR [ebp+16708]
	jl	SHORT $L139531
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L139531:
	mov	ecx, DWORD PTR [ebp+16716]
	mov	eax, DWORD PTR [ebp+16708]
	lea	edx, DWORD PTR [ecx+edi]
	cmp	edx, eax
	mov	eax, DWORD PTR [ebp+16704]
	jge	SHORT $L139545
	mov	edi, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$139530[esp+128]
	push	edx
	mov	edx, DWORD PTR _VertexCount$[esp+132]
	lea	edx, DWORD PTR [edx+edx*4]
	shl	edx, 3
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	edx
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edi+44]
	xor	edi, edi
	cmp	eax, edi
	jge	SHORT $L139540
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
$L139540:
	mov	eax, DWORD PTR [ebp+16716]
	mov	ecx, DWORD PTR _VertexCount$[esp+124]
	mov	DWORD PTR [ebp+16712], eax
	add	eax, ecx
	mov	DWORD PTR [ebp+16716], eax
	jmp	SHORT $L139544

; 2461 : 	}

	npad	6

; 2346 : 			FD3DTLVertex *Vertex = (FD3DTLVertex*)ActorVertices.Lock(VertexCount);

$L139545:
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR _VertexData$139530[esp+128]
	push	ecx
	lea	ecx, DWORD PTR [edi+edi*4]
	shl	ecx, 3
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L139546
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
$L139546:
	mov	DWORD PTR [ebp+16716], edi
	mov	DWORD PTR [ebp+16712], 0
	xor	edi, edi
$L139544:

; 2347 : 			Stats.VBLocks++;

	mov	edx, DWORD PTR [ebp+19708]
	mov	ecx, DWORD PTR _VertexData$139530[esp+124]
	inc	edx
	mov	DWORD PTR [ebp+19708], edx

; 2348 : 			unclock(Stats.D3DVertexLock);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], edi
	mov	DWORD PTR _L$139555[esp+124], edi
	je	SHORT $L139557
	rdtsc
	mov	DWORD PTR _L$139555[esp+124], eax
	mov	DWORD PTR _H$139556[esp+124], edx
$L139557:
	mov	eax, DWORD PTR _L$139555[esp+124]
	mov	edx, DWORD PTR [ebp+19660]
	add	eax, -34				; ffffffdeH
	add	edx, eax
	mov	DWORD PTR [ebp+19660], edx

; 2349 : 
; 2350 : 			clock(Stats.D3DVertexSetup);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], edi
	mov	DWORD PTR _L$139562[esp+124], edi
	je	SHORT $L139564
	rdtsc
	mov	DWORD PTR _L$139562[esp+124], eax
	mov	DWORD PTR _H$139563[esp+124], edx
$L139564:
	mov	eax, DWORD PTR _L$139562[esp+124]
	mov	edx, DWORD PTR [ebp+19656]
	sub	edx, eax

; 2351 : 
; 2352 : 			INT n = 0, NumMaskedPolys = 0;
; 2353 : 
; 2354 : 			for(int i=0;i<QueuedPolygonCount;i++)

	cmp	DWORD PTR _QueuedPolygonCount$[esp+124], edi
	mov	DWORD PTR [ebp+19656], edx
	mov	DWORD PTR _NumMaskedPolys$125654[esp+124], edi
	jle	$L125658
	lea	edx, DWORD PTR [ebx+16]

; 2355 : 			{
; 2356 : 				QueuedPolygon &p=QueuedPolygons(i);				
; 2357 : 
; 2358 : 				if (p.PolyFlags&PF_Masked)
; 2359 : 					NumMaskedPolys++;
; 2360 : 
; 2361 : 				for( INT Index = 0; Index < 3; Index++, n++)
; 2362 : 				{	
; 2363 : 					Vertex->Position.X = Verts[n].Position.X;
; 2364 : 					Vertex->Position.Y = Verts[n].Position.Y;
; 2365 : 					Vertex->Position.Z = Verts[n].Position.Z;
; 2366 : 					Vertex->Position.W = Verts[n].Position.W;
; 2367 : 			
; 2368 : 					Vertex->Specular = 0;
; 2369 : 					Vertex->Diffuse  = 0xffffffff;
; 2370 : 
; 2371 : 					//PROJECT_VERT(p.v[Index].Point, pProjector, Vertex);
; 2372 : 
; 2373 : 					// Grab a copy of the vert
; 2374 : 					FTransform		P;
; 2375 : 
; 2376 : 					// Transform point into projector space
; 2377 : 					P.Point = p.v[Index].Point.TransformPointBy(pProjector->CameraToLight);

	lea	eax, DWORD PTR _Temp$139606[esp+124]
	mov	DWORD PTR $T139608[esp+124], edx
	mov	DWORD PTR $T139599[esp+124], eax
	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]
	lea	edx, DWORD PTR [ebp+19748]
	mov	DWORD PTR -92+[esp+124], 0
	mov	DWORD PTR -80+[esp+124], edx
	mov	DWORD PTR -72+[esp+124], eax

; 2461 : 	}

	npad	4

; 2355 : 			{
; 2356 : 				QueuedPolygon &p=QueuedPolygons(i);				
; 2357 : 
; 2358 : 				if (p.PolyFlags&PF_Masked)
; 2359 : 					NumMaskedPolys++;
; 2360 : 
; 2361 : 				for( INT Index = 0; Index < 3; Index++, n++)
; 2362 : 				{	
; 2363 : 					Vertex->Position.X = Verts[n].Position.X;
; 2364 : 					Vertex->Position.Y = Verts[n].Position.Y;
; 2365 : 					Vertex->Position.Z = Verts[n].Position.Z;
; 2366 : 					Vertex->Position.W = Verts[n].Position.W;
; 2367 : 			
; 2368 : 					Vertex->Specular = 0;
; 2369 : 					Vertex->Diffuse  = 0xffffffff;
; 2370 : 
; 2371 : 					//PROJECT_VERT(p.v[Index].Point, pProjector, Vertex);
; 2372 : 
; 2373 : 					// Grab a copy of the vert
; 2374 : 					FTransform		P;
; 2375 : 
; 2376 : 					// Transform point into projector space
; 2377 : 					P.Point = p.v[Index].Point.TransformPointBy(pProjector->CameraToLight);

$L125656:
	mov	eax, DWORD PTR [ebp+675212]
	mov	esi, DWORD PTR -92+[esp+124]
	mov	dl, BYTE PTR [eax+esi]
	add	eax, esi
	test	dl, 2
	je	SHORT $L125660
	inc	DWORD PTR _NumMaskedPolys$125654[esp+124]
$L125660:
	add	eax, 16					; 00000010H
	mov	DWORD PTR -104+[esp+124], eax
	mov	eax, DWORD PTR -80+[esp+124]
	mov	DWORD PTR -96+[esp+124], eax
	add	eax, 120				; 00000078H
	mov	DWORD PTR -76+[esp+124], 3
	mov	DWORD PTR -80+[esp+124], eax
$L125662:
	mov	eax, DWORD PTR -96+[esp+124]
	mov	edx, DWORD PTR [eax-4]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+8]
	mov	edx, DWORD PTR -104+[esp+124]
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+16], -1
	mov	DWORD PTR $T139607[esp+124], edx
	mov	esi, DWORD PTR $T139607[esp+124]
	mov	edx, DWORD PTR $T139608[esp+124]
	mov	edi, DWORD PTR $T139599[esp+124]
	fld	DWORD PTR [esi]
	fld	DWORD PTR [esi+4]
	fld	DWORD PTR [esi+8]
	fxch	ST(2)
	fsub	DWORD PTR [edx]
	fxch	ST(1)
	fsub	DWORD PTR [edx+4]
	fxch	ST(2)
	fsub	DWORD PTR [edx+8]
	fxch	ST(1)
	fld	ST(0)
	fmul	DWORD PTR [edx+12]
	fld	ST(1)
	fmul	DWORD PTR [edx+24]
	fxch	ST(2)
	fmul	DWORD PTR [edx+36]
	fxch	ST(4)
	fld	ST(0)
	fmul	DWORD PTR [edx+16]
	fld	ST(1)
	fmul	DWORD PTR [edx+28]
	fxch	ST(2)
	fmul	DWORD PTR [edx+40]
	fxch	ST(1)
	faddp	ST(3), ST(0)
	faddp	ST(5), ST(0)
	faddp	ST(2), ST(0)
	fxch	ST(2)
	fld	ST(0)
	fmul	DWORD PTR [edx+20]
	fld	ST(1)
	fmul	DWORD PTR [edx+32]
	fxch	ST(2)
	fmul	DWORD PTR [edx+44]
	fxch	ST(1)
	faddp	ST(4), ST(0)
	faddp	ST(4), ST(0)
	faddp	ST(1), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR [edi]
	fstp	DWORD PTR [edi+4]
	fstp	DWORD PTR [edi+8]

; 2378 : 						
; 2379 : 					// Project point onto projector front plane
; 2380 : 					P.Point.Z = max(1.0f, P.Point.Z);

	fld	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR _Temp$139606[esp+124]
	fcomp	DWORD PTR _Temp$139606[esp+132]
	mov	edx, DWORD PTR _Temp$139606[esp+128]
	mov	DWORD PTR _P$125665[esp+124], eax
	mov	eax, DWORD PTR _Temp$139606[esp+132]
	mov	DWORD PTR _P$125665[esp+132], eax
	fnstsw	ax
	mov	DWORD PTR _P$125665[esp+128], edx
	test	ah, 65					; 00000041H
	jne	SHORT $L139406
	mov	DWORD PTR _P$125665[esp+132], 1065353216 ; 3f800000H
$L139406:

; 2381 : 					P.Project(pProjector->Frame);

	fld	DWORD PTR _P$125665[esp+132]
	mov	edx, DWORD PTR [ebx]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L139619
	mov	DWORD PTR _P$125665[esp+132], 981668463	; 3a83126fH
$L139619:
	fld	DWORD PTR [edx+220]
	fdiv	DWORD PTR _P$125665[esp+132]
	fstp	DWORD PTR _P$125665[esp+152]
	fld	DWORD PTR _P$125665[esp+124]
	fmul	DWORD PTR _P$125665[esp+152]
	fadd	DWORD PTR [edx+192]
	fstp	DWORD PTR _P$125665[esp+140]
	fld	DWORD PTR _P$125665[esp+128]
	fmul	DWORD PTR _P$125665[esp+152]
	fadd	DWORD PTR [edx+196]
	fst	DWORD PTR _P$125665[esp+144]
	fstp	DWORD PTR $T139616[esp+124]
	fld	DWORD PTR $T139616[esp+124]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$139624[esp+124]

; 2382 : 
; 2383 : 					// Snag UV's
; 2384 : 					Vertex->U[0] = P.ScreenX*pProjector->OneOverX;

	fld	DWORD PTR _P$125665[esp+140]
	mov	esi, DWORD PTR -104+[esp+124]
	fmul	DWORD PTR [ebx+64]
	mov	eax, DWORD PTR -76+[esp+124]
	add	esi, 88					; 00000058H

; 2385 : 					Vertex->U[1] = P.ScreenY*pProjector->OneOverY; 
; 2386 : 						
; 2387 : 					Vertex->Position.W *= P.Point.Z;
; 2388 : 
; 2389 : 					// Clip and fade out (this is the UV's for the clipper/fade out texture layer)
; 2390 : 				#if 1
; 2391 : 					FLOAT R = P.RZ * pProjector->Frame->RProj.Z;		// (1.0f/Z)
; 2392 : 					Vertex->U2[0] = (pProjector->_33 + pProjector->_43 * R)*pProjector->FadeScale;
; 2393 : 					Vertex->U2[1] = 0.0f;
; 2394 : 				#endif
; 2395 : 			
; 2396 : 					Vertex++;

	add	ecx, 40					; 00000028H
	fstp	DWORD PTR [ecx-16]
	mov	DWORD PTR -104+[esp+124], esi
	fld	DWORD PTR _P$125665[esp+144]
	fmul	DWORD PTR [ebx+68]
	fstp	DWORD PTR [ecx-12]
	fld	DWORD PTR _P$125665[esp+132]
	fmul	DWORD PTR [ecx-28]
	fstp	DWORD PTR [ecx-28]
	mov	edx, DWORD PTR [ebx]
	fld	DWORD PTR _P$125665[esp+152]
	fmul	DWORD PTR [edx+232]
	mov	edx, DWORD PTR -96+[esp+124]
	add	edx, 40					; 00000028H
	dec	eax
	fmul	DWORD PTR [ebx+76]
	mov	DWORD PTR -96+[esp+124], edx
	mov	DWORD PTR -76+[esp+124], eax
	fadd	DWORD PTR [ebx+72]
	fmul	DWORD PTR [ebx+80]
	mov	DWORD PTR [ecx-4], 0
	fstp	DWORD PTR [ecx-8]
	jne	$L125662
	mov	edx, DWORD PTR -92+[esp+124]
	mov	eax, DWORD PTR -72+[esp+124]
	add	edx, 280				; 00000118H
	dec	eax
	mov	DWORD PTR -92+[esp+124], edx
	mov	DWORD PTR -72+[esp+124], eax
	jne	$L125656
$L125658:

; 2397 : 				}
; 2398 : 			}
; 2399 : 			unclock(Stats.D3DVertexSetup);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _L$139629[esp+124], 0
	je	SHORT $L139631
	rdtsc
	mov	DWORD PTR _L$139629[esp+124], eax
	mov	DWORD PTR _H$139630[esp+124], edx
$L139631:
	mov	ecx, DWORD PTR _L$139629[esp+124]
	mov	edx, DWORD PTR [ebp+19656]
	add	ecx, -34				; ffffffdeH
	add	edx, ecx

; 2400 : 
; 2401 : 			INT	First = ActorVertices.Unlock();

	lea	esi, DWORD PTR [ebp+16700]
	mov	DWORD PTR [ebp+19656], edx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L139636
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 2461 : 	}

	npad	3

; 2400 : 
; 2401 : 			INT	First = ActorVertices.Unlock();

$L139636:
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L139637
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L139637:
	mov	edi, DWORD PTR [esi+12]

; 2402 : 			ActorVertices.Set();

	mov	ecx, esi
	mov	DWORD PTR _First$125668[esp+124], edi
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 2403 : 		
; 2404 : 			// If we have some masked polygons, we have to seperate them out, and compare only equal zbuffer values
; 2405 : 			//	This way, we don't see shadows in mid-air (shadows being projected onto the invisible parts of textures)
; 2406 : 			if (NumMaskedPolys)

	mov	eax, DWORD PTR _NumMaskedPolys$125654[esp+124]
	test	eax, eax
	je	$L125669

; 2407 : 			{
; 2408 : 				for(i=0;i<QueuedPolygonCount;)

	mov	eax, DWORD PTR _QueuedPolygonCount$[esp+124]
	xor	edi, edi
	test	eax, eax
	jle	$L125646
	mov	ecx, eax
$L125671:

; 2409 : 				{
; 2410 : 					QueuedPolygon &p=QueuedPolygons(i);

	mov	edx, DWORD PTR [ebp+675212]
	mov	esi, edi
	imul	esi, 280				; 00000118H

; 2411 : 
; 2412 : 					for(int j=i+1;j<QueuedPolygonCount;j++)

	lea	eax, DWORD PTR [edi+1]
	add	esi, edx
	cmp	eax, ecx
	jge	SHORT $L139675
	mov	ebx, DWORD PTR [esi]
	mov	ecx, eax
	imul	ecx, 280				; 00000118H
	and	ebx, 2
	add	ecx, edx

; 2461 : 	}

	npad	2

; 2411 : 
; 2412 : 					for(int j=i+1;j<QueuedPolygonCount;j++)

$L125675:

; 2413 : 					{
; 2414 : 						if ((p.PolyFlags&PF_Masked) != (QueuedPolygons(j).PolyFlags&PF_Masked)) 

	mov	edx, DWORD PTR [ecx]
	and	edx, 2
	cmp	ebx, edx
	jne	SHORT $L139675
	mov	edx, DWORD PTR _QueuedPolygonCount$[esp+124]
	inc	eax
	add	ecx, 280				; 00000118H
	cmp	eax, edx
	jl	SHORT $L125675
$L139675:

; 2415 : 							break;
; 2416 : 					}
; 2417 : 				
; 2418 : 					INT Count = j-i;

	sub	eax, edi
	mov	ebx, eax

; 2419 : 
; 2420 : 					// Handle masked polygons
; 2421 : 					if (p.PolyFlags & PF_Masked)

	test	BYTE PTR [esi], 2
	mov	DWORD PTR _Count$125679[esp+124], ebx
	je	SHORT $L125680

; 2422 : 						Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_EQUAL );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L125680:

; 2423 : 
; 2424 : 					Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First+(i*3), Count);

	mov	ecx, DWORD PTR _First$125668[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	ebx
	lea	ecx, DWORD PTR [ecx+edi*2]
	mov	ebx, edi
	add	ebx, ecx
	push	ebx
	push	4
	push	eax
	call	DWORD PTR [edx+280]

; 2425 : 				
; 2426 : 					// Finish masked polygons
; 2427 : 					if (p.PolyFlags & PF_Masked)

	test	BYTE PTR [esi], 2
	je	SHORT $L125681

; 2428 : 						Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_LESSEQUAL );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]
$L125681:

; 2429 : 					
; 2430 : 					i += Count;

	add	edi, DWORD PTR _Count$125679[esp+124]
	mov	ecx, DWORD PTR _QueuedPolygonCount$[esp+124]
	cmp	edi, ecx
	jl	$L125671

; 2431 : 				}
; 2432 : 			}
; 2433 : 			else

	jmp	SHORT $L125646
$L125669:

; 2434 : 			{
; 2435 : 				// Draw the entire VB (no masked polygons)
; 2436 : 				Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First, QueuedPolygonCount);

	mov	edx, DWORD PTR _QueuedPolygonCount$[esp+124]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	edi
	push	4
	push	eax
	call	DWORD PTR [ecx+280]
$L125646:
	mov	ecx, DWORD PTR _p$[esp+124]
	mov	eax, DWORD PTR -64+[esp+124]
	dec	ecx
	sub	eax, 84					; 00000054H
	test	ecx, ecx
	mov	DWORD PTR _p$[esp+124], ecx
	mov	DWORD PTR -64+[esp+124], eax
	mov	edi, 1
	jge	$L139697

; 2330 : 	#endif
; 2331 : 			
; 2332 : 		for (int p=ProjectorArray.Num()-1; p>=0 ; p--)

	mov	esi, 9
$L125647:

; 2437 : 			}
; 2438 : 		}
; 2439 : 
; 2440 : 		// Restore render states
; 2441 : 		Direct3DDevice8->SetTexture(0, NULL);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 2442 : 
; 2443 : 		//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 2444 : 		//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_DESTCOLOR );
; 2445 : 		//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_SRCCOLOR );
; 2446 : 		SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [ebp+675176], edi
	jne	SHORT $L139655
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L139654
$L139655:
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebp+675176], edi
$L139654:

; 2447 : 		SetSrcBlend(D3DBLEND_DESTCOLOR);

	cmp	DWORD PTR [ebp+675168], esi
	jne	SHORT $L139663
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L139661
$L139663:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [ebp+675168], esi
$L139661:

; 2448 : 		SetDstBlend(D3DBLEND_SRCCOLOR);

	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend

; 2449 : 
; 2450 : 		Direct3DDevice8->SetTexture(1, NULL);

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	edi
	push	eax
	call	DWORD PTR [edx+244]

; 2451 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2452 : 
; 2453 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2454 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2455 : 
; 2456 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU, D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	13					; 0000000dH
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 2457 : 		Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV, D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	14					; 0000000eH
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 2458 : 
; 2459 : 		SetDistanceFog(true);

	push	edi
	mov	ecx, ebp
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog

; 2460 : 		SetTextureClampMode(0);

	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+212]
	pop	edi
	pop	esi
	pop	ebx
$L125643:
	pop	ebp

; 2461 : 	}

	add	esp, 108				; 0000006cH
	ret	4
?RenderQueuedPolygonsForProjectors@UD3DRenderDevice@@QAEXK@Z ENDP ; UD3DRenderDevice::RenderQueuedPolygonsForProjectors
_TEXT	ENDS
EXTRN	__imp_??0FColor@@QAE@EEEE@Z:NEAR
; Function compile flags: /Ogty
;	COMDAT ?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z
_TEXT	SEGMENT
_Frame$ = -32
_Info$ = 8
_Pts$ = 12
_NumPts$ = 16
_PolyFlags$ = 20
_PolyFlagsEx$ = 28
$T139703 = 8
$T139704 = 28
_L$139707 = -40
_H$139708 = -4
_Xor$139720 = -40
$T139763 = -44
_I$139799 = -16
$T139801 = -32
_I$139805 = -20
$T139807 = -32
_I$139811 = -24
$T139813 = 12
_I$139820 = -12
$T139822 = 12
_I$139826 = -8
$T139828 = 12
_I$139832 = -4
$T139834 = 12
_L$139842 = 28
_H$139843 = 20
_DoFog$ = -36
_ZBiasHack$ = -40
_W$125704 = 12
?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z PROC NEAR ; UD3DRenderDevice::DrawGouraudPolygon, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 2465 : 	{

	sub	esp, 44					; 0000002cH

; 2466 : 		if(!RenderMeshes) 

	mov	eax, DWORD PTR ?RenderMeshes@@3HA	; RenderMeshes
	test	eax, eax
	push	esi
	mov	DWORD PTR _Frame$[esp+48], edx
	mov	esi, ecx
	je	$L125684

; 2467 : 			return;
; 2468 : 
; 2469 : 		clock(Stats.PolyTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _L$139707[esp+48], 0
	je	SHORT $L139709
	rdtsc
	mov	DWORD PTR _L$139707[esp+48], eax
	mov	DWORD PTR _H$139708[esp+48], edx
$L139709:
	mov	ecx, DWORD PTR _L$139707[esp+48]

; 2470 : 
; 2471 : 		Stats.Polys++;

	mov	edx, DWORD PTR [esi+19668]

; 2472 : 		if(PolyFlags&PF_Masked) Stats.MaskedPolys++;

	mov	eax, DWORD PTR _PolyFlags$[esp+44]
	push	ebx
	push	ebp
	push	edi
	mov	edi, DWORD PTR [esi+19628]
	sub	edi, ecx
	inc	edx
	test	al, 2
	mov	DWORD PTR [esi+19628], edi
	mov	DWORD PTR [esi+19668], edx
	je	SHORT $L125686
	inc	DWORD PTR [esi+19672]
$L125686:

; 2473 : 
; 2474 : 		UBOOL DoFog=((PolyFlags&(PF_RenderFog|PF_Translucent|PF_Modulated))==PF_RenderFog);		

	mov	ecx, eax
	and	ecx, 1073741892				; 40000044H
	sub	ecx, 1073741824				; 40000000H
	neg	ecx
	sbb	ecx, ecx
	inc	ecx

; 2475 : 
; 2476 : 		// Set up vertices.
; 2477 : 		PolyFlags&=(~PF_Memorized)/*&(~PF_Selected)*/;

	and	eax, -16777217				; feffffffH

; 2478 : 
; 2479 : 		// Set the polygon texture.
; 2480 : 		PolyFlags|=PF_TwoSided;   // NJS: Hack, shouldn't have to do this.

	or	eax, 256				; 00000100H
	mov	DWORD PTR _DoFog$[esp+60], ecx

; 2481 : 		PolyFlagsEx|=PFX_Clip;

	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]

; 2482 : 
; 2483 : 		SetBlending( PolyFlags, PolyFlagsEx );		

	mov	edx, eax
	or	ecx, 2
	and	edx, 1073741892				; 40000044H
	cmp	edx, 1073741824				; 40000000H
	mov	DWORD PTR _PolyFlags$[esp+56], eax
	mov	DWORD PTR _PolyFlagsEx$[esp+56], ecx
	mov	DWORD PTR $T139763[esp+60], eax
	jne	SHORT $L139716
	mov	edx, DWORD PTR [esi+19148]
	test	edx, edx
	jne	SHORT $L139715
$L139716:
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR $T139763[esp+60], eax
$L139715:
	test	al, 68					; 00000044H
	jne	SHORT $L139717
	test	cl, 113					; 00000071H
	jne	SHORT $L139717
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L139859
$L139717:
	test	al, 4
	je	SHORT $L139719
	and	eax, -3					; fffffffdH
$L139859:
	mov	DWORD PTR $T139763[esp+60], eax
$L139719:
	mov	edx, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	edx, eax
	xor	ebx, ecx
	test	dh, 1
	mov	DWORD PTR _Xor$139720[esp+60], edx
	je	SHORT $L139722
	mov	edx, DWORD PTR $T139763[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T139763[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L139722:
	test	bl, 2
	je	SHORT $L139723
	mov	edx, DWORD PTR _PolyFlagsEx$[esp+56]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T139763[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L139723:
	test	bl, 8
	je	SHORT $L139724
	mov	edx, DWORD PTR _PolyFlagsEx$[esp+56]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR $T139763[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L139724:
	test	DWORD PTR _Xor$139720[esp+60], -754972601 ; d3000847H
	jne	SHORT $L139726
	test	bl, 113					; 00000071H
	je	$L139762
	mov	eax, DWORD PTR $T139763[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L139726:
	test	DWORD PTR _Xor$139720[esp+60], 268435525 ; 10000045H
	jne	SHORT $L139728
	test	bl, 113					; 00000071H
	je	$L139748
$L139728:
	test	bl, 1
	je	SHORT $L139729
	test	cl, 1
	jne	SHORT $L139729
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L139730
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L139731
$L139730:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L139731:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR $T139763[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+56]
$L139729:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L139732
	test	cl, 113					; 00000071H
	jne	SHORT $L139732
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L139748
$L139732:
	test	cl, 64					; 00000040H
	je	SHORT $L139734
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L139860:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139748
$L139734:
	test	al, 1
	je	SHORT $L139736
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L139862:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139748
$L139736:
	test	cl, 32					; 00000020H
	je	SHORT $L139738
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139748
$L139738:
	test	cl, 16					; 00000010H
	je	SHORT $L139740
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L139862
$L139740:
	test	al, 4
	je	SHORT $L139742
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L139860
$L139742:
	test	al, 64					; 00000040H
	je	SHORT $L139744
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139748
$L139744:
	test	eax, 268435456				; 10000000H
	je	SHORT $L139746
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139748
$L139746:
	test	cl, 1
	je	$L139748
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L139748:
	test	BYTE PTR _Xor$139720[esp+60], 1
	je	SHORT $L139749
	mov	edx, DWORD PTR $T139763[esp+60]
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L139749:
	mov	eax, DWORD PTR _Xor$139720[esp+60]
	test	eax, eax
	jns	SHORT $L139751
	mov	ecx, DWORD PTR $T139763[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L139751:
	test	BYTE PTR _Xor$139720[esp+60], 2
	je	SHORT $L139754
	test	BYTE PTR $T139763[esp+60], 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L139753
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L139754
$L139753:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L139754:
	mov	ebp, DWORD PTR _Xor$139720[esp+60]
	test	ebp, 2048				; 00000800H
	mov	ebx, DWORD PTR $T139763[esp+60]
	je	SHORT $L139755
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L139755:
	test	ebp, 1073741824				; 40000000H
	je	SHORT $L139756
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L139756:
	test	ebp, 50331648				; 03000000H
	je	SHORT $L139762
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L139759
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L139863
$L139759:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L139761
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L139863
$L139761:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L139863:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L139762:
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+56]
	mov	edx, DWORD PTR $T139763[esp+60]

; 2484 : 		SetTexture(0,Info,PolyFlags,0, PolyFlagsEx);

	mov	ebx, DWORD PTR _PolyFlags$[esp+56]
	push	0
	push	eax
	push	0
	mov	DWORD PTR [esi+19620], eax
	mov	eax, DWORD PTR _Info$[esp+68]
	push	ebx
	mov	DWORD PTR [esi+19616], edx
	push	eax
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 2485 : 		SetZBias(0);

	push	1098907648				; 41800000H
	push	0
	push	0
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L139769
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L139849
$L139769:
	mov	edi, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebp, DWORD PTR [edi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	edi
	call	DWORD PTR [ebp+200]
	jmp	SHORT $L139768
$L139849:
	fstp	ST(0)
$L139768:

; 2486 : 
; 2487 : 
; 2488 : 
; 2489 : 		if(PolyFlags&PF_Unlit) SetDistanceFog(false);

	test	ebx, 4194304				; 00400000H
	mov	eax, DWORD PTR [esi+675196]
	je	SHORT $L125688
	test	eax, eax
	je	$L139781
	mov	eax, DWORD PTR [esi+675192]
	test	eax, eax
	je	$L139781
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675192], 0

; 2490 : 		else				   SetDistanceFog(true);

	jmp	$L139781
$L125688:
	test	eax, eax
	je	$L139781
	mov	eax, DWORD PTR [esi+675192]
	mov	edi, 1
	cmp	eax, edi
	je	$L139781
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	xor	ecx, ecx
	mov	ch, BYTE PTR [esi+675208]
	xor	ebx, ebx
	mov	bl, BYTE PTR [esi+675210]
	mov	cl, BYTE PTR [esi+675209]
	shl	ecx, 8
	or	ecx, ebx
	push	ecx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [edx+200]
	mov	edx, DWORD PTR [esi+675200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR [esi+675204]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675192], edi
$L139781:

; 2491 : 
; 2492 : 		// Kludge for 16-bit zbuffer limitations - compress weapon in 1/z space.
; 2493 : 		// "Have HUD draw the player's weapon on top (and any other overlays which should happen before screen flashes)"
; 2494 : 		FLOAT ZBiasHack = ( (GUglyHackFlags&1) && ViewportColorBits==16 )? 0.25f : 1.0f;

	mov	eax, DWORD PTR __imp_?GUglyHackFlags@@3KA
	test	BYTE PTR [eax], 1
	je	SHORT $L139701
	cmp	DWORD PTR [esi+16772], 16		; 00000010H
	mov	DWORD PTR _ZBiasHack$[esp+60], 1048576000 ; 3e800000H
	je	SHORT $L139702
$L139701:
	mov	DWORD PTR _ZBiasHack$[esp+60], 1065353216 ; 3f800000H
$L139702:

; 2495 : 
; 2496 : 		FTransTexture**	SourceVertex;
; 2497 : 		FD3DTLVertex*	Vertex = (FD3DTLVertex*) ActorVertices.Lock(NumPts);

	mov	ebx, DWORD PTR _NumPts$[esp+56]
	push	-1
	lea	ecx, DWORD PTR [esi+16700]
	push	ebx
	call	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock

; 2498 : 
; 2499 : 		SourceVertex = Pts;
; 2500 : 
; 2501 : 		for( INT Index = 0; Index < NumPts; Index++ )

	test	ebx, ebx
	mov	ebp, DWORD PTR _Pts$[esp+56]
	mov	edi, eax
	jle	$L125697
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+56]
	and	eax, 48					; 00000030H
	mov	DWORD PTR -44+[esp+60], ebx
	mov	ebx, DWORD PTR _Frame$[esp+60]
	mov	DWORD PTR -28+[esp+60], eax

; 2576 : 	}

	npad	3

; 2498 : 
; 2499 : 		SourceVertex = Pts;
; 2500 : 
; 2501 : 		for( INT Index = 0; Index < NumPts; Index++ )

$L125695:

; 2502 : 		{	
; 2503 : 			FLOAT	RHW = ZBiasHack * (*SourceVertex)->RZ * Frame->RProj.Z;

	mov	eax, DWORD PTR [ebp]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [ebx+232]
	fmul	DWORD PTR _ZBiasHack$[esp+60]

; 2504 : 
; 2505 : 			Vertex->Position.X = (*SourceVertex)->ScreenX + Frame->XB - 0.5f;

	fild	DWORD PTR [ebx+176]
	fadd	DWORD PTR [eax+16]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi]

; 2506 : 			Vertex->Position.Y = (*SourceVertex)->ScreenY + Frame->YB - 0.5f;

	mov	ecx, DWORD PTR [ebp]
	fild	DWORD PTR [ebx+180]
	fadd	DWORD PTR [ecx+20]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edi+4]

; 2507 : 			Vertex->Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * RHW;

	fld	ST(0)
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fstp	DWORD PTR [edi+8]

; 2508 : 			Vertex->Position.W = RHW;

	fstp	DWORD PTR [edi+12]

; 2509 : 
; 2510 : 			Vertex->U[0] = (*SourceVertex)->U * Stages[0]->UScale;

	mov	edx, DWORD PTR [ebp]
	mov	eax, DWORD PTR [esi+19712]
	fld	DWORD PTR [edx+80]
	fmul	DWORD PTR [eax+24]

; 2511 : 			Vertex->U[1] = (*SourceVertex)->V * Stages[0]->VScale;
; 2512 : 
; 2513 : 			Vertex->Specular=0;
; 2514 : 			if(PolyFlagsEx&(PFX_LightenModulate|PFX_DarkenModulate))

	mov	eax, DWORD PTR -28+[esp+60]
	test	eax, eax
	fstp	DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [ebp]
	mov	edx, DWORD PTR [esi+19712]
	fld	DWORD PTR [ecx+84]
	fmul	DWORD PTR [edx+28]
	fstp	DWORD PTR [edi+28]
	mov	DWORD PTR [edi+20], 0
	je	SHORT $L125699

; 2515 : 			{
; 2516 : 				Vertex->Diffuse  = 0xffffffff;

	mov	DWORD PTR [edi+16], -1

; 2517 : 
; 2518 : 			} else

	jmp	$L139837
$L125699:

; 2519 : 			if ( PolyFlags & PF_Modulated )

	test	BYTE PTR _PolyFlags$[esp+56], 64	; 00000040H
	je	SHORT $L125701

; 2520 : 			{
; 2521 : 				Vertex->Diffuse = (0xFF<<24)|(248<<16)|(248<<8)|248;

	mov	DWORD PTR [edi+16], -460552		; fff8f8f8H

; 2522 : 			}
; 2523 : 			else if ( DoFog )

	jmp	$L139837
$L125701:
	mov	eax, DWORD PTR _DoFog$[esp+60]

; 2524 : 			{
; 2525 : 				FLOAT W = 1.f - (*SourceVertex)->Fog.W;
; 2526 : 
; 2527 : 				Vertex->Diffuse  = FColor(
; 2528 : 					appRound((*SourceVertex)->Light.Z*Stages[0]->MaxColor.B*W),	
; 2529 : 					appRound((*SourceVertex)->Light.Y*Stages[0]->MaxColor.G*W),
; 2530 : 					appRound((*SourceVertex)->Light.X*Stages[0]->MaxColor.R*W),
; 2531 : 					255 );				

	mov	ecx, DWORD PTR [esi+19712]
	xor	edx, edx
	mov	dl, BYTE PTR [ecx+32]
	test	eax, eax
	mov	eax, DWORD PTR [ebp]
	je	$L125703
	fld	DWORD PTR __real@3f800000
	mov	DWORD PTR -32+[esp+60], edx
	fsub	DWORD PTR [eax+76]
	fstp	DWORD PTR _W$125704[esp+56]
	fild	DWORD PTR -32+[esp+60]
	fmul	DWORD PTR [eax+48]
	fmul	DWORD PTR _W$125704[esp+56]
	fstp	DWORD PTR $T139801[esp+60]
	fld	DWORD PTR $T139801[esp+60]
	fistp	DWORD PTR _I$139799[esp+60]
	mov	eax, DWORD PTR [esi+19712]
	mov	edx, DWORD PTR [ebp]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+33]
	mov	DWORD PTR -32+[esp+60], ecx
	fild	DWORD PTR -32+[esp+60]
	fmul	DWORD PTR [edx+52]
	fmul	DWORD PTR _W$125704[esp+56]
	fstp	DWORD PTR $T139807[esp+60]
	fld	DWORD PTR $T139807[esp+60]
	fistp	DWORD PTR _I$139805[esp+60]
	mov	eax, DWORD PTR [esi+19712]
	mov	edx, DWORD PTR [ebp]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+34]
	mov	DWORD PTR -32+[esp+60], ecx
	fild	DWORD PTR -32+[esp+60]
	fmul	DWORD PTR [edx+56]
	fmul	DWORD PTR _W$125704[esp+56]
	fstp	DWORD PTR $T139813[esp+56]
	fld	DWORD PTR $T139813[esp+56]
	fistp	DWORD PTR _I$139811[esp+60]
	mov	al, BYTE PTR _I$139811[esp+60]
	mov	cl, BYTE PTR _I$139805[esp+60]
	mov	dl, BYTE PTR _I$139799[esp+60]
	mov	BYTE PTR $T139703[esp+56], al
	mov	BYTE PTR $T139703[esp+57], cl
	mov	BYTE PTR $T139703[esp+58], dl
	mov	BYTE PTR $T139703[esp+59], 255		; 000000ffH
	mov	eax, DWORD PTR $T139703[esp+56]
	mov	DWORD PTR [edi+16], eax

; 2532 : 			}
; 2533 : 			else

	jmp	$L139837
$L125703:

; 2534 : 			{
; 2535 : 				Vertex->Diffuse	 = FColor( 
; 2536 : 					appRound((*SourceVertex)->Light.Z*Stages[0]->MaxColor.B), 
; 2537 : 					appRound((*SourceVertex)->Light.Y*Stages[0]->MaxColor.G), 
; 2538 : 					appRound((*SourceVertex)->Light.X*Stages[0]->MaxColor.R), 
; 2539 : 					255 );

	mov	DWORD PTR 12+[esp+56], edx
	fild	DWORD PTR 12+[esp+56]
	fmul	DWORD PTR [eax+48]
	fstp	DWORD PTR $T139822[esp+56]
	fld	DWORD PTR $T139822[esp+56]
	fistp	DWORD PTR _I$139820[esp+60]
	mov	ecx, DWORD PTR [esi+19712]
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	dl, BYTE PTR [ecx+33]
	mov	DWORD PTR 12+[esp+56], edx
	fild	DWORD PTR 12+[esp+56]
	fmul	DWORD PTR [eax+52]
	fstp	DWORD PTR $T139828[esp+56]
	fld	DWORD PTR $T139828[esp+56]
	fistp	DWORD PTR _I$139826[esp+60]
	mov	ecx, DWORD PTR [esi+19712]
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	dl, BYTE PTR [ecx+34]
	mov	DWORD PTR 12+[esp+56], edx
	fild	DWORD PTR 12+[esp+56]
	fmul	DWORD PTR [eax+56]
	fstp	DWORD PTR $T139834[esp+56]
	fld	DWORD PTR $T139834[esp+56]
	fistp	DWORD PTR _I$139832[esp+60]
	mov	ecx, DWORD PTR _I$139820[esp+60]
	mov	edx, DWORD PTR _I$139826[esp+60]
	mov	eax, DWORD PTR _I$139832[esp+60]
	push	255					; 000000ffH
	push	ecx
	push	edx
	push	eax
	lea	ecx, DWORD PTR $T139704[esp+72]
	call	DWORD PTR __imp_??0FColor@@QAE@EEEE@Z
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edi+16], ecx

; 2540 : 				Vertex->Specular = 0;

	mov	DWORD PTR [edi+20], 0
$L139837:
	mov	eax, DWORD PTR -44+[esp+60]

; 2541 : 			}
; 2542 : 
; 2543 : 			Vertex++;

	add	edi, 40					; 00000028H

; 2544 : 			SourceVertex++;

	add	ebp, 4
	dec	eax
	mov	DWORD PTR -44+[esp+60], eax
	jne	$L125695

; 2498 : 
; 2499 : 		SourceVertex = Pts;
; 2500 : 
; 2501 : 		for( INT Index = 0; Index < NumPts; Index++ )

	mov	ebx, DWORD PTR _NumPts$[esp+56]
$L125697:

; 2545 : 		}
; 2546 : 
; 2547 : 		INT	First = ActorVertices.Unlock();

	lea	ebp, DWORD PTR [esi+16700]
	mov	ecx, ebp
	call	?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DTLVertex>::Unlock

; 2548 : 
; 2549 : 
; 2550 : 		ActorVertices.Set();

	mov	ecx, ebp
	mov	edi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 2551 : 
; 2552 : 		if(PolyFlags & PF_MeshUVClamp) 

	mov	ebp, DWORD PTR _PolyFlags$[esp+56]
	and	ebp, 8192				; 00002000H
	je	SHORT $L125709

; 2553 : 		{
; 2554 : 			SetTextureClampMode(1);

	mov	eax, DWORD PTR [esi]
	mov	edx, 1
	mov	ecx, esi
	call	DWORD PTR [eax+212]
$L125709:

; 2555 : 		}
; 2556 : 		
; 2557 : 		if ( DoFog )

	mov	eax, DWORD PTR _DoFog$[esp+60]
	test	eax, eax

; 2558 : 		{
; 2559 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_SPECULAR );			

	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L125710
	mov	ecx, DWORD PTR [eax]
	push	4
	push	2
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 2560 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_ADD );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	7
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 2561 : 
; 2562 : 			Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, NumPts - 2 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	add	ebx, -2					; fffffffeH
	push	ebx
	push	edi
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 2563 : 
; 2564 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 2565 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 2566 : 		}
; 2567 : 		else

	jmp	SHORT $L125711
$L125710:

; 2568 : 			Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, NumPts - 2 );

	mov	edx, DWORD PTR [eax]
	add	ebx, -2					; fffffffeH
	push	ebx
	push	edi
	push	6
	push	eax
	call	DWORD PTR [edx+280]
$L125711:
	pop	edi

; 2569 : 
; 2570 : 
; 2571 : 		if(PolyFlags & PF_MeshUVClamp) 

	test	ebp, ebp
	pop	ebp
	pop	ebx
	je	SHORT $L125712

; 2572 : 			SetTextureClampMode(0);

	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+212]
$L125712:

; 2573 : 
; 2574 : 		//SetBlending();
; 2575 : 		unclock(Stats.PolyTime);

	mov	ecx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [ecx], 0
	mov	DWORD PTR _L$139842[esp+44], 0
	je	SHORT $L139844
	rdtsc
	mov	DWORD PTR _L$139842[esp+44], eax
	mov	DWORD PTR _H$139843[esp+44], edx
$L139844:
	mov	edx, DWORD PTR _L$139842[esp+44]
	mov	eax, DWORD PTR [esi+19628]
	add	edx, -34				; ffffffdeH
	add	eax, edx
	mov	DWORD PTR [esi+19628], eax
$L125684:
	pop	esi

; 2576 : 	}

	add	esp, 44					; 0000002cH
	ret	24					; 00000018H
?DrawGouraudPolygon@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@PAPAUFTransTexture@@HKPAVFSpanBuffer@@K@Z ENDP ; UD3DRenderDevice::DrawGouraudPolygon
_TEXT	ENDS
PUBLIC	?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z ; UD3DRenderDevice::RotateAboutOrigin2D
PUBLIC	__real@47800000
PUBLIC	__real@bfc45f306dc9c883
PUBLIC	__real@3fc45f306dc9c883
EXTRN	__imp_?GMath@@3VFGlobalMath@@A:BYTE
;	COMDAT __real@47800000
; File ..\..\Core\Inc\UnMath.h
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@bfc45f306dc9c883
CONST	SEGMENT
__real@bfc45f306dc9c883 DQ 0bfc45f306dc9c883r	; -0.159155
CONST	ENDS
;	COMDAT __real@3fc45f306dc9c883
CONST	SEGMENT
__real@3fc45f306dc9c883 DQ 03fc45f306dc9c883r	; 0.159155
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z
_TEXT	SEGMENT
_originX$ = 8
_originY$ = 12
_x$ = 16
_y$ = 20
_theta$ = 24
?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z PROC NEAR ; UD3DRenderDevice::RotateAboutOrigin2D, COMDAT
; _this$ = ecx

; 2578 : 	{

	push	ebx
	push	ebp
	push	esi

; 2579 : 		float xTick, yTick;
; 2580 : 		x-=originX; y-=originY;

	mov	esi, DWORD PTR _x$[esp+8]
	fld	DWORD PTR [esi]
	push	edi
	fsub	DWORD PTR _originX$[esp+12]
	mov	edi, DWORD PTR _y$[esp+12]
	fstp	DWORD PTR [esi]
	fld	DWORD PTR [edi]
	fsub	DWORD PTR _originY$[esp+12]
	fst	DWORD PTR [edi]

; 2581 : 		xTick = ((GMath.CosFloat(theta)*x) - (GMath.SinFloat(theta)*y)); 
; 2582 : 		yTick = ((GMath.SinFloat(theta)*x) + (GMath.CosFloat(theta)*y));

	fld	DWORD PTR _theta$[esp+12]
	fmul	DWORD PTR __real@47800000
	fld	QWORD PTR __real@bfc45f306dc9c883
	fmul	ST(0), ST(1)
	call	__ftol
	fmul	QWORD PTR __real@3fc45f306dc9c883
	mov	ebp, DWORD PTR __imp_?GMath@@3VFGlobalMath@@A
	mov	ecx, 16384				; 00004000H
	sub	ecx, eax
	sar	ecx, 2
	and	ecx, 16383				; 00003fffH
	lea	ebx, DWORD PTR [ebp+ecx*4+140]
	call	__ftol
	fld	DWORD PTR [ebx]
	sar	eax, 2
	and	eax, 16383				; 00003fffH
	lea	eax, DWORD PTR [ebp+eax*4+140]
	fmul	ST(0), ST(1)
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [esi]
	faddp	ST(1), ST(0)
	fld	DWORD PTR [ebx]
	fmul	DWORD PTR [esi]
	fld	DWORD PTR [eax]
	fmul	ST(0), ST(3)
	fsubp	ST(1), ST(0)

; 2583 : 		x=xTick+originX; y=yTick+originY;

	fadd	DWORD PTR _originX$[esp+12]
	fstp	DWORD PTR [esi]
	fadd	DWORD PTR _originY$[esp+12]
	fstp	DWORD PTR [edi]
	pop	edi
	pop	esi
	pop	ebp
	fstp	ST(0)
	pop	ebx

; 2584 : 	}

	ret	20					; 00000014H
?RotateAboutOrigin2D@UD3DRenderDevice@@QAEXMMAAM0M@Z ENDP ; UD3DRenderDevice::RotateAboutOrigin2D
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z
_TEXT	SEGMENT
?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z PROC NEAR ; UD3DRenderDevice::SetTextureClampMode, COMDAT
; _this$ = ecx
; _Mode$ = edx

; 2588 : 	{

	push	esi
	mov	esi, ecx

; 2589 : 		if(TextureClampMode!=Mode)

	cmp	DWORD PTR [esi+675180], edx
	je	SHORT $L125719

; 2590 : 		{
; 2591 : 			TextureClampMode=Mode;
; 2592 : 			D3DTEXTUREADDRESS TextureMode=(Mode==1)?D3DTADDRESS_CLAMP:D3DTADDRESS_WRAP;

	xor	eax, eax
	cmp	edx, 1
	sete	al
	push	edi
	mov	DWORD PTR [esi+675180], edx
	lea	eax, DWORD PTR [eax+eax+1]
	mov	edi, eax

; 2593 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ADDRESSU, TextureMode );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	13					; 0000000dH
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 2594 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ADDRESSV, TextureMode );

	mov	esi, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [esi]
	push	edi
	push	14					; 0000000eH
	push	0
	push	esi
	call	DWORD PTR [edx+252]
	pop	edi
$L125719:
	pop	esi

; 2595 : 		}
; 2596 : 	}

	ret	0
?SetTextureClampMode@UD3DRenderDevice@@UAIXH@Z ENDP	; UD3DRenderDevice::SetTextureClampMode
_TEXT	ENDS
PUBLIC	__real@44fa0000
PUBLIC	__real@bf800000
;	COMDAT __real@44fa0000
; File ..\..\Core\Inc\UnVcWin32.h
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z
_TEXT	SEGMENT
_L$140301 = 12
_H$140302 = 16
_Frame$ = -40
_Info$ = 8
_X$ = 12
_Y$ = 16
_XL$ = 20
_YL$ = 24
_U$ = 28
_V$ = 32
_UL$ = 36
_VL$ = 40
_Z$ = 48
_InColor$ = 52
_PolyFlags$ = 84
_PolyFlagsEx$ = 88
_alpha$ = 92
_rot$ = 96
_rotationOffsetX$ = 100
_rotationOffsetY$ = 104
$T139916 = 8
$T139917 = 8
$T139920 = -28
_L$139925 = -44
_H$139926 = -32
_Color$ = 8
_Xor$139959 = -44
_RZ$ = 48
_SZ$ = 84
_G$125748 = -36
_B$125749 = -32
_First$ = 12
$T140002 = -48
$T140022 = -16
$T140048 = 8
$T140066 = -40
$T140084 = -40
$T140102 = -40
_I$140119 = -40
_I$140129 = -44
_I$140139 = -44
_I$140149 = -44
_VertexData$140166 = -44
?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z PROC NEAR ; UD3DRenderDevice::DrawTile, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 2614 : 	{

	sub	esp, 48					; 00000030H

; 2615 : 		// Exclude tiles from rendering?
; 2616 : 		if(!RenderTiles) 

	mov	eax, DWORD PTR ?RenderTiles@@3HA	; RenderTiles
	push	ebp
	xor	ebp, ebp
	cmp	eax, ebp
	push	esi
	mov	DWORD PTR _Frame$[esp+56], edx
	mov	esi, ecx
	je	$L125722

; 2617 : 			return;
; 2618 : 
; 2619 : 		clock(Stats.TileTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], ebp
	mov	DWORD PTR _L$139925[esp+56], ebp
	je	SHORT $L139927
	rdtsc
	mov	DWORD PTR _L$139925[esp+56], eax
	mov	DWORD PTR _H$139926[esp+56], edx
$L139927:
	mov	ecx, DWORD PTR _L$139925[esp+56]
	mov	edx, DWORD PTR [esi+19632]

; 2620 : 		Stats.Tiles++;			// Keep track of tiles rendered.
; 2621 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [esi+675196]
	sub	edx, ecx
	mov	ecx, DWORD PTR [esi+19676]
	inc	ecx
	cmp	eax, ebp
	mov	DWORD PTR [esi+19632], edx
	mov	DWORD PTR [esi+19676], ecx
	je	SHORT $L139933
	cmp	DWORD PTR [esi+675192], ebp
	je	SHORT $L139933
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675192], ebp
$L139933:

; 2622 : 
; 2623 : 
; 2624 : 		//PolyFlags  =PF_TwoSided | PF_NoOcclude ;
; 2625 : 		//PolyFlagsEx=PFX_Translucent2;
; 2626 : 
; 2627 : 		//alpha=Clamp<float>(appSin(appSeconds()),0,1);
; 2628 : 
; 2629 : 
; 2630 : 		PolyFlags&=~(PF_Memorized/*|PF_Selected*/);		// Remove multitexture and editor flags.
; 2631 : 		if(!GIsEditor) PolyFlags&=~PF_Selected;	// NJS: test this and take teh PF_Selected out the above.

	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	mov	ecx, DWORD PTR _PolyFlags$[esp+52]
	mov	edx, DWORD PTR [eax]
	and	ecx, -16777217				; feffffffH
	cmp	edx, ebp
	jne	SHORT $L125724
	and	ecx, -33554433				; fdffffffH
$L125724:
	push	ebx
	push	edi

; 2632 : 
; 2633 : 
; 2634 : 		if( Info.Palette && Info.Palette[128].A!=255 && !(PolyFlags&PF_Translucent) )

	mov	edi, DWORD PTR _Info$[esp+60]
	mov	eax, DWORD PTR [edi+72]
	cmp	eax, ebp
	je	SHORT $L125725
	cmp	BYTE PTR [eax+515], 255			; 000000ffH
	je	SHORT $L125725
	test	cl, 4
	jne	SHORT $L125725

; 2635 : 			PolyFlags |= PF_Highlighted;

	or	ecx, 268435456				; 10000000H
$L125725:

; 2636 : 
; 2637 : 		if(alpha!=1.f) 

	fld	DWORD PTR _alpha$[esp+60]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $L140321

; 2638 : 		{
; 2639 : 			if(!(PolyFlags&PF_Translucent)
; 2640 : 			 &&!(PolyFlagsEx&PFX_Translucent2))

	test	cl, 4
	jne	SHORT $L140321
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
	test	al, 64					; 00000040H
	jne	SHORT $L125727

; 2641 : 				PolyFlags|=PF_Translucent;

	or	ecx, 4
	jmp	SHORT $L125727
$L140321:
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
$L125727:

; 2642 : 		}
; 2643 : 
; 2644 : 		PolyFlags|=PF_TwoSided;
; 2645 : 		PolyFlagsEx|=PFX_Clip|Info.Texture->PolyFlagsEx;

	mov	ebx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [ebx+196]
	or	ebx, 2
	or	eax, ebx
	or	ecx, 256				; 00000100H

; 2646 : 	
; 2647 : 		if(PolyFlagsEx&PFX_AlphaMap) 

	test	al, 1
	mov	DWORD PTR _PolyFlags$[esp+60], ecx
	mov	DWORD PTR _PolyFlagsEx$[esp+60], eax
	je	SHORT $L125728

; 2648 : 		{
; 2649 : 			PolyFlags&=~PF_Translucent;
; 2650 : 			PolyFlags&=~PF_Modulated;

	and	ecx, -69				; ffffffbbH

; 2651 : 			if(!GIsEditor) PolyFlags&=~PF_Highlighted;

	cmp	edx, ebp
	mov	DWORD PTR _PolyFlags$[esp+60], ecx
	jne	SHORT $L125729
	and	ecx, -268435457				; efffffffH
	mov	DWORD PTR _PolyFlags$[esp+60], ecx
$L125729:

; 2652 : 			PolyFlagsEx&=~(PFX_Translucent2|PFX_LightenModulate|PFX_DarkenModulate);

	and	eax, -113				; ffffff8fH
	mov	DWORD PTR _PolyFlagsEx$[esp+60], eax
$L125728:

; 2653 : 		}
; 2654 : 
; 2655 : 		SetBlending(PolyFlags,PolyFlagsEx);

	mov	edx, ecx
	and	edx, 1073741892				; 40000044H
	cmp	edx, 1073741824				; 40000000H
	mov	DWORD PTR $T140002[esp+64], ecx
	jne	SHORT $L139955
	cmp	DWORD PTR [esi+19148], ebp
	jne	SHORT $L139954
$L139955:
	and	ecx, -1073741825			; bfffffffH
	mov	DWORD PTR $T140002[esp+64], ecx
$L139954:
	test	cl, 68					; 00000044H
	jne	SHORT $L139956
	test	al, 113					; 00000071H
	jne	SHORT $L139956
	or	ecx, -2147483648			; 80000000H
	jmp	SHORT $L140333
$L139956:
	test	cl, 4
	je	SHORT $L139958
	and	ecx, -3					; fffffffdH
$L140333:
	mov	DWORD PTR $T140002[esp+64], ecx
$L139958:
	mov	edx, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	xor	edx, ecx
	xor	ebx, eax
	test	dh, 1
	mov	DWORD PTR _Xor$139959[esp+64], edx
	je	SHORT $L139961
	mov	edx, DWORD PTR $T140002[esp+64]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR $T140002[esp+64]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
$L139961:
	test	bl, 2
	je	SHORT $L139962
	mov	edx, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR $T140002[esp+64]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
$L139962:
	test	bl, 8
	je	SHORT $L139963
	mov	edx, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	ecx, DWORD PTR $T140002[esp+64]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
$L139963:
	test	DWORD PTR _Xor$139959[esp+64], -754972601 ; d3000847H
	jne	SHORT $L139965
	test	bl, 113					; 00000071H
	je	$L140001
	mov	ecx, DWORD PTR $T140002[esp+64]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
	xor	ebp, ebp
$L139965:
	test	DWORD PTR _Xor$139959[esp+64], 268435525 ; 10000045H
	jne	SHORT $L139967
	test	bl, 113					; 00000071H
	je	$L139987
$L139967:
	test	bl, 1
	je	SHORT $L139968
	test	al, 1
	jne	SHORT $L139968
	cmp	DWORD PTR [esi+19128], ebp
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L139969
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L139970
$L139969:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
$L139970:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	ecx, DWORD PTR $T140002[esp+64]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+60]
$L139968:
	test	ecx, 268435525				; 10000045H
	jne	SHORT $L139971
	test	al, 113					; 00000071H
	jne	SHORT $L139971
	cmp	DWORD PTR [esi+675176], ebp
	jne	SHORT $L139952
	cmp	DWORD PTR ?CacheBlending@@3HA, ebp	; CacheBlending
	jne	$L139987
$L139952:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], ebp
	jmp	$L139987
$L139971:
	test	al, 64					; 00000040H
	je	SHORT $L139973
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L140334:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139987
$L139973:
	test	cl, 1
	je	SHORT $L139975
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L140336:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139987
$L139975:
	test	al, 32					; 00000020H
	je	SHORT $L139977
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139987
$L139977:
	test	al, 16					; 00000010H
	je	SHORT $L139979
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L140336
$L139979:
	test	cl, 4
	je	SHORT $L139981
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L140334
$L139981:
	test	cl, 64					; 00000040H
	je	SHORT $L139983
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139987
$L139983:
	test	ecx, 268435456				; 10000000H
	je	SHORT $L139985
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L139987
$L139985:
	test	al, 1
	je	$L139987
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	4
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	5
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebp
	push	6
	push	ebp
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	18					; 00000012H
	push	ebp
	push	eax
	call	DWORD PTR [edx+252]
$L139987:
	test	BYTE PTR _Xor$139959[esp+64], 1
	je	SHORT $L139988
	mov	edx, DWORD PTR $T140002[esp+64]
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L139988:
	mov	eax, DWORD PTR _Xor$139959[esp+64]
	test	eax, eax
	jns	SHORT $L139990
	mov	edx, DWORD PTR $T140002[esp+64]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 31					; 0000001fH
	push	edx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [ecx+200]
$L139990:
	test	BYTE PTR _Xor$139959[esp+64], 2
	je	SHORT $L139993
	test	BYTE PTR $T140002[esp+64], 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L139992
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	jmp	SHORT $L139993
$L139992:
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L139993:
	mov	ebp, DWORD PTR _Xor$139959[esp+64]
	test	ebp, 2048				; 00000800H
	mov	ebx, DWORD PTR $T140002[esp+64]
	je	SHORT $L139994
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	edi, DWORD PTR _Info$[esp+60]
$L139994:
	test	ebp, 1073741824				; 40000000H
	je	SHORT $L139995
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	edx, ebx
	shr	edx, 30					; 0000001eH
	and	edx, 1
	push	edx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [ecx+200]
$L139995:
	test	ebp, 50331648				; 03000000H
	je	SHORT $L140001
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	je	SHORT $L139998
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	3
	jmp	SHORT $L140337
$L139998:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L140000
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	2
	jmp	SHORT $L140337
$L140000:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	push	1
$L140337:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L140001:
	mov	ebx, DWORD PTR _PolyFlagsEx$[esp+60]

; 2656 : 		SetTexture(0,Info,PolyFlags,0,PolyFlagsEx);	

	mov	ecx, DWORD PTR _PolyFlags$[esp+60]
	mov	eax, DWORD PTR $T140002[esp+64]
	push	0
	push	ebx
	push	0
	push	ecx
	push	edi
	xor	edx, edx
	mov	ecx, esi
	mov	DWORD PTR [esi+19616], eax
	mov	DWORD PTR [esi+19620], ebx
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 2657 : 		
; 2658 : 		// Offset points to guarantee that we will sample directly from the center of the texture pixels
; 2659 : 		X += Frame->XB - 0.5f;

	mov	eax, DWORD PTR _Frame$[esp+64]
	fild	DWORD PTR [eax+176]

; 2660 : 		Y += Frame->YB - 0.5f;
; 2661 : 
; 2662 : 		// NJS: Hack to compensate for the fact that software was depending on wrap around integer arithmetic:
; 2663 : 		if(GIsEditor) 

	mov	edx, DWORD PTR __imp_?GIsEditor@@3HA
	fsub	DWORD PTR __real@3f000000
	fadd	DWORD PTR _X$[esp+60]
	fstp	DWORD PTR _X$[esp+60]
	fild	DWORD PTR [eax+180]
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	fsub	DWORD PTR __real@3f000000
	fadd	DWORD PTR _Y$[esp+60]
	fstp	DWORD PTR _Y$[esp+60]
	je	SHORT $L125732

; 2664 : 		{
; 2665 : 			if(Z==0.f)	Z+=2000;

	fld	DWORD PTR _Z$[esp+60]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L125731
	fld	DWORD PTR _Z$[esp+60]
	fadd	DWORD PTR __real@44fa0000
	fstp	DWORD PTR _Z$[esp+60]
$L125731:

; 2666 : 			if(Z<0)		Z*=-1;

	fld	DWORD PTR _Z$[esp+60]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L125732
	fld	DWORD PTR _Z$[esp+60]
	fmul	DWORD PTR __real@bf800000
	fstp	DWORD PTR _Z$[esp+60]
$L125732:

; 2667 : 		}
; 2668 : 
; 2669 : 		FColor			Color = (PolyFlagsEx & (PFX_LightenModulate|PFX_DarkenModulate)) ? FColor(255,255,255,255) : FColor(Stages[0]->MaxColor.Plane() * InColor);

	test	bl, 48					; 00000030H
	je	SHORT $L139921
	mov	BYTE PTR $T139916[esp+60], 255		; 000000ffH
	mov	BYTE PTR $T139916[esp+61], 255		; 000000ffH
	mov	BYTE PTR $T139916[esp+62], 255		; 000000ffH
	jmp	$L140153
$L139921:
	mov	eax, DWORD PTR [esi+19712]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+32]
	add	eax, 32					; 00000020H
	xor	edx, edx
	mov	dl, BYTE PTR [eax+1]
	mov	DWORD PTR 8+[esp+60], ecx
	fild	DWORD PTR 8+[esp+60]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+2]
	fmul	DWORD PTR __real@3b808081
	mov	DWORD PTR 8+[esp+60], edx
	fild	DWORD PTR 8+[esp+60]
	fmul	DWORD PTR __real@3b808081
	mov	DWORD PTR 8+[esp+60], ecx
	fild	DWORD PTR 8+[esp+60]
	fmul	DWORD PTR __real@3b808081
	fstp	DWORD PTR $T140022[esp+72]
	fxch	ST(1)
	fmul	DWORD PTR _InColor$[esp+60]
	fstp	DWORD PTR $T139920[esp+64]
	fmul	DWORD PTR _InColor$[esp+64]
	fstp	DWORD PTR $T139920[esp+68]
	fld	DWORD PTR $T140022[esp+72]
	fmul	DWORD PTR _InColor$[esp+68]
	fstp	DWORD PTR $T139920[esp+72]
	fld	DWORD PTR $T139920[esp+64]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T140048[esp+60]
	fld	DWORD PTR $T140048[esp+60]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$140119[esp+64]
	mov	eax, DWORD PTR _I$140119[esp+64]
	test	eax, eax
	jge	SHORT $L140125
	mov	BYTE PTR $T139917[esp+60], 0
	jmp	SHORT $L140124
$L140125:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T139917[esp+60], al
	jl	SHORT $L140124
	mov	BYTE PTR $T139917[esp+60], 255		; 000000ffH
$L140124:
	fld	DWORD PTR $T139920[esp+68]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T140066[esp+64]
	fld	DWORD PTR $T140066[esp+64]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$140129[esp+64]
	mov	eax, DWORD PTR _I$140129[esp+64]
	test	eax, eax
	jge	SHORT $L140135
	mov	BYTE PTR $T139917[esp+61], 0
	jmp	SHORT $L140134
$L140135:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T139917[esp+61], al
	jl	SHORT $L140134
	mov	BYTE PTR $T139917[esp+61], 255		; 000000ffH
$L140134:
	fld	DWORD PTR $T139920[esp+72]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T140084[esp+64]
	fld	DWORD PTR $T140084[esp+64]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$140139[esp+64]
	mov	eax, DWORD PTR _I$140139[esp+64]
	test	eax, eax
	jge	SHORT $L140145
	mov	BYTE PTR $T139917[esp+62], 0
	jmp	SHORT $L140144
$L140145:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T139917[esp+62], al
	jl	SHORT $L140144
	mov	BYTE PTR $T139917[esp+62], 255		; 000000ffH
$L140144:
	mov	DWORD PTR $T140102[esp+64], 0
	fld	DWORD PTR $T140102[esp+64]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$140149[esp+64]
	mov	eax, DWORD PTR _I$140149[esp+64]
	test	eax, eax
	jge	SHORT $L140155
	mov	BYTE PTR $T139917[esp+63], 0
	jmp	SHORT $L140154
$L140155:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T139917[esp+63], al
	jl	SHORT $L140154
$L140153:
	mov	BYTE PTR $T139917[esp+63], 255		; 000000ffH
$L140154:
	lea	eax, DWORD PTR $T139917[esp+60]
	mov	ebp, DWORD PTR [eax]

; 2670 : 		if(PolyFlags&PF_Modulated) Color = (0xFF<<24)|(248<<16)|(248<<8)|248;

	test	BYTE PTR _PolyFlags$[esp+60], 64	; 00000040H
	mov	DWORD PTR _Color$[esp+60], ebp
	je	SHORT $L140159
	mov	ebp, -460552				; fff8f8f8H
	mov	DWORD PTR _Color$[esp+60], ebp
$L140159:

; 2671 : 
; 2672 : 		FLOAT			RZ = 1.f/Z,

	fld	DWORD PTR __real@3f800000

; 2673 : 						SZ = ProjectionMatrix._33 + ProjectionMatrix._43 * RZ;
; 2674 : 		FD3DTLVertex*	Vertices = (FD3DTLVertex*) ActorVertices.Lock(4);

	mov	eax, DWORD PTR [esi+16704]
	test	eax, eax
	fdiv	DWORD PTR _Z$[esp+60]
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	fst	DWORD PTR _RZ$[esp+60]
	fmul	DWORD PTR [esi+19508]
	fadd	DWORD PTR [esi+19492]
	fstp	DWORD PTR _SZ$[esp+60]
	jne	SHORT $L140163
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L140163:
	mov	eax, DWORD PTR [esi+16708]
	test	eax, eax
	jne	SHORT $L140164
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L140164:
	mov	eax, DWORD PTR [esi+16708]
	mov	ebx, 4
	cmp	eax, ebx
	jg	SHORT $L140167
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L140167:
	mov	ecx, DWORD PTR [esi+16716]
	mov	eax, DWORD PTR [esi+16708]
	lea	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	mov	eax, DWORD PTR [esi+16704]
	jge	SHORT $L140181
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$140166[esp+68]
	push	edi
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	160					; 000000a0H
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L140176
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L140176:
	mov	eax, DWORD PTR [esi+16716]
	mov	DWORD PTR [esi+16712], eax
	add	eax, 4
	mov	DWORD PTR [esi+16716], eax
	jmp	SHORT $L140180
$L140181:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$140166[esp+68]
	push	edx
	push	160					; 000000a0H
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L140182
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L140182:
	mov	DWORD PTR [esi+16712], 0
	mov	DWORD PTR [esi+16716], ebx
$L140180:

; 2675 : 
; 2676 : 		DWORD dwDiffuse;
; 2677 : 		if(alpha!=1.f/*&&(!(PolyFlagsEx&PFX_AlphaMap))*/)

	fld	DWORD PTR _alpha$[esp+60]
	mov	edi, DWORD PTR _VertexData$140166[esp+64]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L125746

; 2678 : 		{
; 2679 : 			DWORD R=Stages[0]->MaxColor.R*alpha*InColor.X,

	mov	ebx, DWORD PTR [esi+19712]
	xor	edx, edx
	mov	dl, BYTE PTR [ebx+32]
	mov	DWORD PTR 8+[esp+60], edx
	fild	DWORD PTR 8+[esp+60]
	fmul	DWORD PTR _InColor$[esp+60]
	fmul	DWORD PTR _alpha$[esp+60]
	call	__ftol
	mov	ebp, eax

; 2680 : 				  G=Stages[0]->MaxColor.G*alpha*InColor.Y,

	xor	eax, eax
	mov	al, BYTE PTR [ebx+33]
	mov	DWORD PTR -48+[esp+64], eax
	fild	DWORD PTR -48+[esp+64]
	fmul	DWORD PTR _InColor$[esp+64]
	fmul	DWORD PTR _alpha$[esp+60]
	call	__ftol

; 2681 : 				  B=Stages[0]->MaxColor.B*alpha*InColor.Z,

	xor	ecx, ecx
	mov	cl, BYTE PTR [ebx+34]
	mov	DWORD PTR _G$125748[esp+64], eax
	mov	DWORD PTR -40+[esp+64], ecx
	fild	DWORD PTR -40+[esp+64]
	fmul	DWORD PTR _InColor$[esp+68]
	fmul	DWORD PTR _alpha$[esp+60]
	call	__ftol

; 2682 : 				  A=Stages[0]->MaxColor.A*alpha; // *InColor.X

	xor	edx, edx
	mov	dl, BYTE PTR [ebx+35]
	mov	DWORD PTR _B$125749[esp+64], eax
	mov	DWORD PTR 52+[esp+60], edx
	fild	DWORD PTR 52+[esp+60]
	fmul	DWORD PTR _alpha$[esp+60]
	call	__ftol

; 2683 : 			
; 2684 : 			if(R>Stages[0]->MaxColor.R) R=Stages[0]->MaxColor.R;

	mov	ecx, DWORD PTR 8+[esp+60]
	cmp	ebp, ecx
	jbe	SHORT $L125751
	mov	ebp, ecx
$L125751:

; 2685 : 			if(G>Stages[0]->MaxColor.G) G=Stages[0]->MaxColor.G;

	mov	edx, DWORD PTR _G$125748[esp+64]
	mov	ecx, DWORD PTR -48+[esp+64]
	cmp	edx, ecx
	jbe	SHORT $L125752
	mov	edx, ecx
$L125752:

; 2686 : 			if(B>Stages[0]->MaxColor.B) B=Stages[0]->MaxColor.B;

	mov	ecx, DWORD PTR _B$125749[esp+64]
	mov	ebx, DWORD PTR -40+[esp+64]
	cmp	ecx, ebx
	jbe	SHORT $L125753
	mov	ecx, ebx
$L125753:

; 2687 : 			if(A>Stages[0]->MaxColor.A) A=Stages[0]->MaxColor.A;

	mov	ebx, DWORD PTR 52+[esp+60]
	cmp	eax, ebx
	jbe	SHORT $L125754
	mov	eax, ebx
$L125754:

; 2688 : 
; 2689 : 			dwDiffuse=D3DCOLOR_RGBA(R,G,B,A);

	and	ebp, 255				; 000000ffH
	shl	eax, 8
	or	ebp, eax
	shl	ebp, 8
	and	edx, 255				; 000000ffH
	or	ebp, edx
	shl	ebp, 8
	and	ecx, 255				; 000000ffH
	or	ebp, ecx

; 2690 : 		} else

	jmp	SHORT $L140338
$L125746:

; 2691 : 		{
; 2692 : 			dwDiffuse=Color.TrueColor()|0xFF000000;

	xor	eax, eax
	mov	al, BYTE PTR _Color$[esp+62]
	mov	ecx, ebp
	shl	ecx, 16					; 00000010H
	and	ebp, 65280				; 0000ff00H
	add	eax, ecx
	add	eax, ebp
	or	eax, -16777216				; ff000000H
	mov	ebp, eax
$L140338:

; 2693 : 		}
; 2694 : 
; 2695 : 		//dwDiffuse=0xFFFFFFFF;
; 2696 : 		Vertices[0].Diffuse    = dwDiffuse;

	mov	edx, DWORD PTR _VertexData$140166[esp+64]

; 2697 : 		Vertices[0].Position.Z = SZ;

	mov	eax, DWORD PTR _SZ$[esp+60]
	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+60]
	mov	DWORD PTR [edx+16], ebp

; 2698 : 		Vertices[0].Position.W = RZ;

	mov	edx, DWORD PTR _RZ$[esp+60]
	mov	DWORD PTR [edi+8], eax
	mov	DWORD PTR [edi+12], edx

; 2699 : 		Vertices[1].Diffuse	   = dwDiffuse;

	mov	DWORD PTR [edi+56], ebp

; 2700 : 		Vertices[1].Position.Z = SZ;

	mov	DWORD PTR [edi+48], eax

; 2701 : 		Vertices[1].Position.W = RZ;

	mov	DWORD PTR [edi+52], edx

; 2702 : 		Vertices[2].Diffuse	   = dwDiffuse;

	mov	DWORD PTR [edi+96], ebp

; 2703 : 		Vertices[2].Position.Z = SZ;

	mov	DWORD PTR [edi+88], eax

; 2704 : 		Vertices[2].Position.W = RZ;

	mov	DWORD PTR [edi+92], edx

; 2705 : 		Vertices[3].Diffuse	   = dwDiffuse;

	mov	DWORD PTR [edi+136], ebp

; 2706 : 		Vertices[3].Position.Z = SZ;

	mov	DWORD PTR [edi+128], eax

; 2707 : 		Vertices[3].Position.W = RZ;
; 2708 : 
; 2709 : 		bool MirrorHoriz = ( PolyFlagsEx & PFX_MirrorHorizontal ) ? true : false,

	mov	eax, ecx
	shr	eax, 7

; 2710 : 			 MirrorVert  = ( PolyFlagsEx & PFX_MirrorVertical )   ? true : false;

	shr	ecx, 8
	and	al, 1
	and	cl, 1

; 2711 : 
; 2712 : 		if (MirrorHoriz && !MirrorVert)

	test	al, al
	mov	DWORD PTR [edi+132], edx
	je	SHORT $L125759
	test	cl, cl

; 2713 : 		{
; 2714 : 			Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U+UL; Vertices[0].U[1]=V;

	fld	DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _UL$[esp+60]
	mov	eax, DWORD PTR _X$[esp+60]
	fst	DWORD PTR [edi+24]
	jne	$L140317

; 2715 : 			Vertices[1].Position.X=X;    Vertices[1].Position.Y=Y+YL; Vertices[1].U[0]=U+UL; Vertices[1].U[1]=V+VL;

	fld	DWORD PTR _Y$[esp+60]
	mov	edx, DWORD PTR _V$[esp+60]
	fadd	DWORD PTR _YL$[esp+60]
	mov	ecx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi+28], edx
	mov	DWORD PTR [edi+4], ecx

; 2716 : 			Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U;    Vertices[2].U[1]=V+VL;

	mov	ecx, DWORD PTR _U$[esp+60]
	fst	DWORD PTR [edi+44]
	fxch	ST(1)
	mov	DWORD PTR [edi], eax
	fstp	DWORD PTR [edi+64]
	mov	DWORD PTR [edi+40], eax
	fld	DWORD PTR _V$[esp+60]
	mov	DWORD PTR [edi+104], ecx
	fadd	DWORD PTR _VL$[esp+60]
	fst	DWORD PTR 48+[esp+60]
	mov	edx, DWORD PTR 48+[esp+60]
	fstp	DWORD PTR [edi+68]
	fld	DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+108], edx
	fadd	DWORD PTR _XL$[esp+60]

; 2717 : 			Vertices[3].Position.X=X+XL; Vertices[3].Position.Y=Y;    Vertices[3].U[0]=U; 	 Vertices[3].U[1]=V;

	mov	edx, ecx
	fst	DWORD PTR 88+[esp+60]
	fstp	DWORD PTR [edi+80]
	fstp	DWORD PTR [edi+84]

; 2718 : 
; 2719 : 		} else if (MirrorVert && !MirrorHoriz) 

	jmp	$L140339
$L125759:
	test	cl, cl
	je	$L125763

; 2720 : 		{
; 2721 : 			Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U;		Vertices[0].U[1]=V+VL;

	fld	DWORD PTR _V$[esp+60]
	mov	eax, DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _VL$[esp+60]
	mov	edx, DWORD PTR _Y$[esp+60]
	mov	ecx, DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+4], edx
	fst	DWORD PTR [edi+28]

; 2722 : 			Vertices[1].Position.X=X;    Vertices[1].Position.Y=Y+YL; Vertices[1].U[0]=U;	    Vertices[1].U[1]=V;

	mov	edx, eax
	fld	DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi+24], eax
	fadd	DWORD PTR _YL$[esp+60]
	mov	eax, DWORD PTR _V$[esp+60]
	mov	DWORD PTR [edi], ecx
	mov	DWORD PTR [edi+40], ecx
	fst	DWORD PTR [edi+44]

; 2723 : 			Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U+UL;    Vertices[2].U[1]=V;

	mov	ecx, eax
	fld	DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+64], edx
	fadd	DWORD PTR _XL$[esp+60]

; 2724 : 			Vertices[3].Position.X=X+XL; Vertices[3].Position.Y=Y;    Vertices[3].U[0]=U+UL; 	Vertices[3].U[1]=V+VL;

	mov	edx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi+68], eax
	mov	DWORD PTR [edi+108], ecx
	fst	DWORD PTR [edi+80]
	mov	DWORD PTR [edi+124], edx
	fxch	ST(1)
	fstp	DWORD PTR [edi+84]
	fld	DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _UL$[esp+60]
	fst	DWORD PTR 28+[esp+60]
	mov	eax, DWORD PTR 28+[esp+60]
	fstp	DWORD PTR [edi+104]
	mov	DWORD PTR [edi+144], eax
	fstp	DWORD PTR [edi+120]
	fstp	DWORD PTR [edi+148]

; 2725 : 
; 2726 : 		} else if (MirrorHoriz && MirrorVert) 

	jmp	$L125764
$L140317:

; 2727 : 		{
; 2728 : 			Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U+UL;	Vertices[0].U[1]=V+VL;

	fld	DWORD PTR _V$[esp+60]
	mov	ecx, DWORD PTR _X$[esp+60]
	fadd	DWORD PTR _VL$[esp+60]
	mov	edx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi], ecx

; 2729 : 			Vertices[1].Position.X=X;    Vertices[1].Position.Y=Y+YL; Vertices[1].U[0]=U+UL;    Vertices[1].U[1]=V;

	mov	ecx, DWORD PTR _V$[esp+60]
	fst	DWORD PTR [edi+28]
	mov	DWORD PTR [edi+4], edx
	fld	DWORD PTR _Y$[esp+60]

; 2730 : 			Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U   ;    Vertices[2].U[1]=V;

	mov	edx, DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _YL$[esp+60]
	mov	DWORD PTR [edi+40], eax
	mov	eax, ecx
	mov	DWORD PTR [edi+68], ecx
	fst	DWORD PTR [edi+44]
	mov	DWORD PTR [edi+104], edx
	fxch	ST(2)
	mov	DWORD PTR [edi+108], eax
	fstp	DWORD PTR [edi+64]
	fld	DWORD PTR _X$[esp+60]
	fadd	DWORD PTR _XL$[esp+60]
	fst	DWORD PTR [edi+80]
	fxch	ST(2)
	fstp	DWORD PTR [edi+84]
	fxch	ST(1)

; 2731 : 			Vertices[3].Position.X=X+XL; Vertices[3].Position.Y=Y;    Vertices[3].U[0]=U   ; 	Vertices[3].U[1]=V+VL;

	fstp	DWORD PTR [edi+120]
	fstp	DWORD PTR [edi+148]

; 2732 : 
; 2733 : 		} else 

	jmp	$L140340
$L125763:

; 2734 : 		{
; 2735 : 			Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U;		Vertices[0].U[1]=V   ;
; 2736 : 			Vertices[1].Position.X=X;    Vertices[1].Position.Y=Y+YL; Vertices[1].U[0]=U;	    Vertices[1].U[1]=V+VL;

	fld	DWORD PTR _Y$[esp+60]
	mov	edx, DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _YL$[esp+60]
	mov	eax, DWORD PTR _X$[esp+60]
	mov	ecx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi], eax
	fst	DWORD PTR [edi+44]
	mov	eax, DWORD PTR _V$[esp+60]
	fld	DWORD PTR _V$[esp+60]
	mov	DWORD PTR [edi+4], ecx
	fadd	DWORD PTR _VL$[esp+60]
	mov	ecx, DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+24], edx
	mov	DWORD PTR [edi+64], edx
	fst	DWORD PTR [edi+68]
	mov	DWORD PTR [edi+28], eax

; 2737 : 			Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U+UL;    Vertices[2].U[1]=V+VL;

	fld	DWORD PTR _X$[esp+60]
	mov	DWORD PTR [edi+40], ecx
	fadd	DWORD PTR _XL$[esp+60]
	fst	DWORD PTR 88+[esp+60]
	fstp	DWORD PTR [edi+80]
	fxch	ST(1)
	fstp	DWORD PTR [edi+84]
	fld	DWORD PTR _U$[esp+60]
	fadd	DWORD PTR _UL$[esp+60]
	fst	DWORD PTR 28+[esp+60]

; 2738 : 			Vertices[3].Position.X=X+XL; Vertices[3].Position.Y=Y;    Vertices[3].U[0]=U+UL; 	Vertices[3].U[1]=V   ;

	mov	edx, DWORD PTR 28+[esp+60]
	fstp	DWORD PTR [edi+104]
	fstp	DWORD PTR [edi+108]
$L140339:
	mov	eax, DWORD PTR 88+[esp+60]
	mov	DWORD PTR [edi+120], eax
	mov	eax, DWORD PTR _V$[esp+60]
	mov	DWORD PTR [edi+148], eax
$L140340:
	mov	ecx, DWORD PTR _Y$[esp+60]
	mov	DWORD PTR [edi+124], ecx
	mov	DWORD PTR [edi+144], edx
$L125764:

; 2739 : 		}
; 2740 : 
; 2741 : 		Vertices[0].U[0]*=Stages[0]->UScale;

	mov	ecx, DWORD PTR [esi+19712]
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edi+24]
	fstp	DWORD PTR [edi+24]

; 2742 : 		Vertices[0].U[1]*=Stages[0]->VScale;

	mov	edx, DWORD PTR [esi+19712]
	fld	DWORD PTR [edx+28]
	fmul	DWORD PTR [edi+28]
	fstp	DWORD PTR [edi+28]

; 2743 : 		Vertices[1].U[0]*=Stages[0]->UScale;

	mov	eax, DWORD PTR [esi+19712]
	fld	DWORD PTR [eax+24]
	fmul	DWORD PTR [edi+64]
	fstp	DWORD PTR [edi+64]

; 2744 : 		Vertices[1].U[1]*=Stages[0]->VScale;

	mov	ecx, DWORD PTR [esi+19712]
	fld	DWORD PTR [ecx+28]
	fmul	DWORD PTR [edi+68]
	fstp	DWORD PTR [edi+68]

; 2745 : 		Vertices[2].U[0]*=Stages[0]->UScale;

	mov	edx, DWORD PTR [esi+19712]
	fld	DWORD PTR [edx+24]
	fmul	DWORD PTR [edi+104]
	fstp	DWORD PTR [edi+104]

; 2746 : 		Vertices[2].U[1]*=Stages[0]->VScale;

	mov	eax, DWORD PTR [esi+19712]
	fld	DWORD PTR [eax+28]
	fmul	DWORD PTR [edi+108]
	fstp	DWORD PTR [edi+108]

; 2747 : 		Vertices[3].U[0]*=Stages[0]->UScale;

	mov	ecx, DWORD PTR [esi+19712]
	fld	DWORD PTR [ecx+24]
	fmul	DWORD PTR [edi+144]
	fstp	DWORD PTR [edi+144]

; 2748 : 		Vertices[3].U[1]*=Stages[0]->VScale;

	mov	edx, DWORD PTR [esi+19712]
	fld	DWORD PTR [edx+28]
	fmul	DWORD PTR [edi+148]
	fstp	DWORD PTR [edi+148]

; 2749 : 
; 2750 : 		// NJS: Do I have rotation?
; 2751 : 		if(rot)	

	fld	DWORD PTR _rot$[esp+60]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L125771

; 2752 : 		{
; 2753 : 			float originX=(Vertices[0].Position.X+XL/2.f)+rotationOffsetX, originY=(Vertices[0].Position.Y+YL/2.f)+rotationOffsetY;

	fld	DWORD PTR _XL$[esp+60]
	fmul	DWORD PTR __real@3f000000
	fadd	DWORD PTR _X$[esp+60]
	fadd	DWORD PTR _rotationOffsetX$[esp+60]
	fld	DWORD PTR _YL$[esp+60]
	fmul	DWORD PTR __real@3f000000
	fadd	DWORD PTR _Y$[esp+60]
	fadd	DWORD PTR _rotationOffsetY$[esp+60]
	fld	DWORD PTR _rot$[esp+60]
	fmul	DWORD PTR __real@47800000

; 2754 : 
; 2755 : 			for(int index=0;index<4;index++)

	fld	QWORD PTR __real@bfc45f306dc9c883
	fmul	ST(0), ST(1)
	call	__ftol
	fmul	QWORD PTR __real@3fc45f306dc9c883
	mov	ecx, 16384				; 00004000H
	sub	ecx, eax
	sar	ecx, 2
	and	ecx, 16383				; 00003fffH
	lea	ebx, DWORD PTR [ecx*4+140]
	call	__ftol
	sar	eax, 2
	and	eax, 16383				; 00003fffH
	lea	ecx, DWORD PTR [eax*4+140]
	mov	edx, 4
$L125769:

; 2756 : 			{	
; 2757 : 				float x=Vertices[index].Position.X,
; 2758 : 					  y=Vertices[index].Position.Y;
; 2759 : 
; 2760 : 				RotateAboutOrigin2D(originX,originY,x,y,rot);

	fld	DWORD PTR [edi]
	mov	eax, DWORD PTR __imp_?GMath@@3VFGlobalMath@@A
	fsub	ST(0), ST(2)
	fld	DWORD PTR [edi+4]
	add	edi, 40					; 00000028H
	dec	edx
	fsub	ST(0), ST(2)
	fld	DWORD PTR [ecx+eax]
	fld	DWORD PTR [ebx+eax]
	fld	DWORD PTR [ebx+eax]
	fmul	ST(0), ST(4)
	fld	DWORD PTR [ecx+eax]
	fmul	ST(0), ST(4)
	fsubp	ST(1), ST(0)
	fadd	ST(0), ST(6)

; 2761 : 				Vertices[index].Position.X=x;

	fstp	DWORD PTR [edi-40]
	fmul	ST(0), ST(2)
	fxch	ST(1)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fadd	ST(0), ST(3)

; 2762 : 				Vertices[index].Position.Y=y;

	fstp	DWORD PTR [edi-36]
	fstp	ST(0)
	fstp	ST(0)
	jne	SHORT $L125769
	fstp	ST(0)
	fstp	ST(0)
$L125771:

; 2763 : 			}
; 2764 : 		}
; 2765 : 
; 2766 : 		INT	First=ActorVertices.Unlock();

	mov	eax, DWORD PTR [esi+16704]
	test	eax, eax
	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L140271
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH

; 2771 : 	}

	npad	7

; 2763 : 			}
; 2764 : 		}
; 2765 : 
; 2766 : 		INT	First=ActorVertices.Unlock();

$L140271:
	mov	eax, DWORD PTR [esi+16704]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L140323
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
	jmp	SHORT $L140272
$L140323:
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L140272:

; 2767 : 		ActorVertices.Set();

	mov	eax, DWORD PTR [esi+16700]
	test	eax, eax
	mov	edx, DWORD PTR [esi+16712]
	mov	DWORD PTR _First$[esp+60], edx
	jne	SHORT $L140280
	push	317					; 0000013dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L140280:
	mov	eax, DWORD PTR [esi+16704]
	test	eax, eax
	jne	SHORT $L140282
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH

; 2771 : 	}

	npad	7

; 2767 : 		ActorVertices.Set();

$L140282:
	mov	eax, DWORD PTR [esi+16700]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	jge	SHORT $L140283
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	321					; 00000141H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L140283:
	mov	eax, DWORD PTR [esi+16700]
	mov	ecx, DWORD PTR [eax]
	push	708					; 000002c4H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L140288
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L140288:
	mov	edx, DWORD PTR [esi+16704]
	mov	eax, DWORD PTR [esi+16700]
	mov	ecx, DWORD PTR [eax]
	push	40					; 00000028H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L140293
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L140293:

; 2768 : 
; 2769 : 		Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, 2 );

	mov	ecx, DWORD PTR _First$[esp+60]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	ecx
	push	6
	push	eax
	call	DWORD PTR [edx+280]

; 2770 : 		unclock(Stats.TileTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	pop	edi
	mov	DWORD PTR _L$140301[esp+56], 0
	pop	ebx
	je	SHORT $L140303
	rdtsc
	mov	DWORD PTR _L$140301[esp+52], eax
	mov	DWORD PTR _H$140302[esp+52], edx
$L140303:
	mov	eax, DWORD PTR _L$140301[esp+52]
	mov	ecx, DWORD PTR [esi+19632]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [esi+19632], ecx
$L125722:
	pop	esi
	pop	ebp

; 2771 : 	}

	add	esp, 48					; 00000030H
	ret	100					; 00000064H
?DrawTile@UD3DRenderDevice@@UAIXPAUFSceneNode@@AAUFTextureInfo@@MMMMMMMMPAVFSpanBuffer@@MVFPlane@@3KKMMMM@Z ENDP ; UD3DRenderDevice::DrawTile
_TEXT	ENDS
PUBLIC	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine
PUBLIC	__real@3e45798ee2308c3a
PUBLIC	__real@38000100
PUBLIC	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
PUBLIC	??_C@_01IJJ@c?$AA@				; `string'
PUBLIC	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
PUBLIC	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
PUBLIC	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ	; FD3DVertexBuffer<FD3DVertex>::Set
EXTRN	__imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z:NEAR
EXTRN	__imp__rand:NEAR
;	COMDAT ??_C@_01IJJ@c?$AA@
; File ..\..\Core\Inc\UnMath.h
_DATA	SEGMENT
??_C@_01IJJ@c?$AA@ DB 'c', 00H				; `string'
_DATA	ENDS
;	COMDAT __real@3e45798ee2308c3a
CONST	SEGMENT
__real@3e45798ee2308c3a DQ 03e45798ee2308c3ar	; 1e-008
CONST	ENDS
;	COMDAT __real@38000100
CONST	SEGMENT
__real@38000100 DD 038000100r			; 3.05185e-005
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z
_TEXT	SEGMENT
$T140344 = -188
$T140345 = -188
$T140346 = -188
$T140348 = -188
_t$ = 8
_BeamColor$ = 12
_BeamEndColor$ = 16
_BeamStartWidth$ = 20
_BeamEndWidth$ = 24
_PolyFlags$ = 28
_MaxAmplitude$ = 32
_LineStart$ = 36
_LineEnd$ = 48
_RangeStart$ = 60
_RangeEnd$ = 72
_depth$ = 84
$T140449 = -196
$T140450 = -196
_CurrentTextureInfo$140518 = -128
$T140532 = -196
$T140535 = -200
$T140536 = -192
_Direction$ = -140
_Midpoint$ = -176
_Axis1$ = -164
_Axis2$ = -152
_ColorMidpoint$ = -200
?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z PROC NEAR ; UD3DRenderDevice::RecursiveSubdivideLine, COMDAT
; _this$ = ecx
; _c$ = edx

; 2774 : 	{

	sub	esp, 200				; 000000c8H
	push	ebx
	push	ebp
	push	esi
	mov	ebp, edx

; 2775 : 		VALIDATE;
; 2776 : 		verify(c);

	test	ebp, ebp
	push	edi
	mov	esi, ecx
	jne	SHORT $L125777
	push	2776					; 00000ad8H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_01IJJ@c?$AA@		; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L125777:

; 2777 : 		// Have I traversed to the lowest point?
; 2778 : 		if(!depth)

	mov	eax, DWORD PTR _depth$[esp+212]
	test	eax, eax
	jne	$L125779

; 2779 : 		{
; 2780 : 			// Draw the segment:
; 2781 : 			dnDraw3DLine(c->Frame,t,PolyFlags,RangeStart,RangeEnd,BeamStartWidth,BeamEndWidth,BeamColor,BeamColor,true);

	mov	eax, DWORD PTR _BeamColor$[esp+212]
	mov	DWORD PTR $T140536[esp+216], eax
	mov	DWORD PTR $T140535[esp+216], eax
	mov	eax, DWORD PTR [ebp+124]
	mov	DWORD PTR $T140532[esp+216], eax
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	je	$L125776
	fld	DWORD PTR _BeamStartWidth$[esp+212]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L140515
	fld	DWORD PTR _BeamEndWidth$[esp+212]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L140515
	mov	ebp, DWORD PTR _t$[esp+212]
	test	ebp, ebp
	mov	edi, 2
	je	SHORT $L140517
	mov	edi, DWORD PTR [ebp+196]
	or	edi, 2
$L140517:
	mov	ebx, DWORD PTR _PolyFlags$[esp+212]
	push	edi
	mov	edx, ebx
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	0
	mov	ecx, esi
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
	test	ebp, ebp
	je	SHORT $L140519
	mov	ecx, DWORD PTR $T140532[esp+216]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	esi
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$140518[esp+232]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]
	push	0
	push	edi
	push	0
	push	ebx
	lea	eax, DWORD PTR _CurrentTextureInfo$140518[esp+232]
	push	eax
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L140520
$L140519:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L140520:
	push	-1
	lea	ebx, DWORD PTR [esi+16720]
	push	2
	mov	ecx, ebx
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	ecx, DWORD PTR _RangeStart$[esp+212]
	mov	edx, DWORD PTR _RangeStart$[esp+216]
	mov	edi, eax
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _RangeStart$[esp+220]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T140535[esp+216]
	lea	ecx, DWORD PTR $T140449[esp+216]
	mov	DWORD PTR $T140449[esp+216], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, DWORD PTR _RangeEnd$[esp+212]
	mov	edx, DWORD PTR _RangeEnd$[esp+216]
	mov	DWORD PTR [edi+12], eax
	lea	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _RangeEnd$[esp+220]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T140536[esp+216]
	lea	ecx, DWORD PTR $T140450[esp+216]
	mov	DWORD PTR $T140450[esp+216], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, ebx
	mov	DWORD PTR [edi+28], eax
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, ebx
	mov	edi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	edi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ecx, DWORD PTR [esi+19684]
	inc	ecx
	test	ebp, ebp
	mov	DWORD PTR [esi+19684], ecx
	je	SHORT $L140523
	mov	eax, DWORD PTR [ebp]
	lea	edx, DWORD PTR _CurrentTextureInfo$140518[esp+216]
	mov	ecx, ebp
	call	DWORD PTR [eax+76]

; 2809 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 200				; 000000c8H
	ret	80					; 00000050H

; 2779 : 		{
; 2780 : 			// Draw the segment:
; 2781 : 			dnDraw3DLine(c->Frame,t,PolyFlags,RangeStart,RangeEnd,BeamStartWidth,BeamEndWidth,BeamColor,BeamColor,true);

$L140523:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	esi, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [esi]
	push	4
	push	4
	push	0
	push	esi
	call	DWORD PTR [edx+252]

; 2809 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 200				; 000000c8H
	ret	80					; 00000050H

; 2779 : 		{
; 2780 : 			// Draw the segment:
; 2781 : 			dnDraw3DLine(c->Frame,t,PolyFlags,RangeStart,RangeEnd,BeamStartWidth,BeamEndWidth,BeamColor,BeamColor,true);

$L140515:
	add	esi, 675236				; 000a4da4H
	push	0
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _RangeStart$[esp+212]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _RangeStart$[esp+216]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _RangeStart$[esp+220]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR _RangeEnd$[esp+212]
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _RangeEnd$[esp+216]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _RangeEnd$[esp+220]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR _BeamStartWidth$[esp+212]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR $T140535[esp+216]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR $T140536[esp+216]
	mov	DWORD PTR [eax+32], edx

; 2809 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 200				; 000000c8H
	ret	80					; 00000050H
$L125779:

; 2782 : 			return;
; 2783 : 		} 
; 2784 : 
; 2785 : 		FVector Direction=RangeEnd-RangeStart;

	fld	DWORD PTR _RangeEnd$[esp+220]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR _RangeStart$[esp+232]
	lea	ecx, DWORD PTR _Direction$[esp+228]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _RangeEnd$[esp+228]
	fsub	DWORD PTR _RangeStart$[esp+228]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _RangeEnd$[esp+224]
	fsub	DWORD PTR _RangeStart$[esp+224]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 2786 : 		FVector Midpoint=RangeStart+(Direction/2); 

	fld	DWORD PTR _Direction$[esp+224]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR __real@3f000000
	lea	ecx, DWORD PTR $T140344[esp+228]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Direction$[esp+232]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Direction$[esp+228]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140344[esp+224]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR _RangeStart$[esp+232]
	lea	ecx, DWORD PTR _Midpoint$[esp+228]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T140344[esp+232]
	fadd	DWORD PTR _RangeStart$[esp+228]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T140344[esp+228]
	fadd	DWORD PTR _RangeStart$[esp+224]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 2787 : 		
; 2788 : 		// Move the midpoint around randomly on the plane that the direction is the normal of.
; 2789 : 		Direction=LineEnd-LineStart;

	fld	DWORD PTR _LineEnd$[esp+220]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR _LineStart$[esp+232]
	lea	ecx, DWORD PTR $T140345[esp+228]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _LineEnd$[esp+228]
	fsub	DWORD PTR _LineStart$[esp+228]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _LineEnd$[esp+224]
	fsub	DWORD PTR _LineStart$[esp+224]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 2790 : 		Direction.Normalize();

	fld	DWORD PTR $T140345[esp+216]
	mov	eax, DWORD PTR $T140345[esp+216]
	fmul	DWORD PTR $T140345[esp+216]
	mov	ecx, DWORD PTR $T140345[esp+220]
	fld	DWORD PTR $T140345[esp+220]
	mov	edx, DWORD PTR $T140345[esp+224]
	fmul	DWORD PTR $T140345[esp+220]
	mov	DWORD PTR _Direction$[esp+216], eax
	mov	DWORD PTR _Direction$[esp+220], ecx
	mov	DWORD PTR _Direction$[esp+224], edx
	faddp	ST(1), ST(0)
	fld	DWORD PTR $T140345[esp+224]
	fmul	DWORD PTR $T140345[esp+224]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140626
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR $T140345[esp+216]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+216]
	fld	DWORD PTR _Direction$[esp+220]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+220]
	fld	DWORD PTR _Direction$[esp+224]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+224]
$L140626:

; 2791 : 
; 2792 : 		FVector Axis1, Axis2;
; 2793 : 		Direction.FindBestAxisVectors( Axis1, Axis2 );

	lea	eax, DWORD PTR _Axis2$[esp+216]
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _Axis1$[esp+220]
	push	ecx
	lea	ecx, DWORD PTR _Direction$[esp+224]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z

; 2794 : 		Axis1.Normalize();

	fld	DWORD PTR _Axis1$[esp+216]
	fmul	DWORD PTR _Axis1$[esp+216]
	fld	DWORD PTR _Axis1$[esp+220]
	fmul	DWORD PTR _Axis1$[esp+220]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$[esp+224]
	fmul	DWORD PTR _Axis1$[esp+224]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140624
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$[esp+216]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+216]
	fld	DWORD PTR _Axis1$[esp+220]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+220]
	fld	DWORD PTR _Axis1$[esp+224]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+224]
$L140624:
	fstp	ST(0)

; 2795 : 		Axis2.Normalize();

	fld	DWORD PTR _Axis2$[esp+216]
	fmul	DWORD PTR _Axis2$[esp+216]
	fld	DWORD PTR _Axis2$[esp+224]
	fmul	DWORD PTR _Axis2$[esp+224]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$[esp+220]
	fmul	DWORD PTR _Axis2$[esp+220]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140625
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$[esp+216]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+216]
	fld	DWORD PTR _Axis2$[esp+220]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+220]
	fld	DWORD PTR _Axis2$[esp+224]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+224]
$L140625:

; 2796 : 
; 2797 : 		Midpoint+=Axis1*(((MaxAmplitude*2)*appFrand())-MaxAmplitude);

	mov	edi, DWORD PTR __imp__rand
	fstp	ST(0)
	fld	DWORD PTR _MaxAmplitude$[esp+212]
	fadd	ST(0), ST(0)
	fstp	DWORD PTR -192+[esp+216]
	call	edi
	mov	DWORD PTR -196+[esp+216], eax
	fild	DWORD PTR -196+[esp+216]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T140346[esp+228]
	fmul	DWORD PTR -192+[esp+228]
	fmul	DWORD PTR __real@38000100
	fsub	DWORD PTR _MaxAmplitude$[esp+224]
	fld	DWORD PTR _Axis1$[esp+236]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis1$[esp+232]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis1$[esp+228]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T140346[esp+216]
	fadd	DWORD PTR _Midpoint$[esp+216]
	fstp	DWORD PTR _Midpoint$[esp+216]
	fld	DWORD PTR _Midpoint$[esp+220]
	fadd	DWORD PTR $T140346[esp+220]
	fstp	DWORD PTR _Midpoint$[esp+220]
	fld	DWORD PTR _Midpoint$[esp+224]
	fadd	DWORD PTR $T140346[esp+224]
	fstp	DWORD PTR _Midpoint$[esp+224]

; 2798 : 		Midpoint+=Axis2*(((MaxAmplitude*2)*appFrand())-MaxAmplitude);

	call	edi
	mov	DWORD PTR -196+[esp+216], eax
	fild	DWORD PTR -196+[esp+216]

; 2799 : 
; 2800 : 		FColor ColorMidpoint=BeamColor;

	mov	ecx, DWORD PTR _BeamColor$[esp+212]

; 2801 : 		ColorMidpoint.R+=(BeamEndColor.R-BeamColor.R)/2;

	mov	ebx, DWORD PTR _BeamEndColor$[esp+212]
	fmul	DWORD PTR -192+[esp+216]
	mov	edx, ecx
	and	edx, 255				; 000000ffH
	mov	eax, ebx
	fmul	DWORD PTR __real@38000100
	and	eax, 255				; 000000ffH
	sub	eax, edx
	cdq
	fsub	DWORD PTR _MaxAmplitude$[esp+212]
	sub	eax, edx
	fld	DWORD PTR _Axis2$[esp+216]

; 2802 : 		ColorMidpoint.G+=(BeamEndColor.G-BeamColor.G)/2;

	mov	edx, DWORD PTR _BeamColor$[esp+213]
	sar	eax, 1
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis2$[esp+220]
	add	al, cl
	fmul	ST(0), ST(2)
	mov	DWORD PTR _ColorMidpoint$[esp+216], ecx
	mov	BYTE PTR _ColorMidpoint$[esp+216], al
	mov	eax, DWORD PTR _BeamEndColor$[esp+213]
	fstp	DWORD PTR $T140348[esp+220]
	fld	DWORD PTR _Axis2$[esp+224]
	and	edx, 255				; 000000ffH
	fmul	ST(0), ST(2)
	and	eax, 255				; 000000ffH
	sub	eax, edx
	cdq
	fstp	DWORD PTR $T140348[esp+224]
	sub	eax, edx
	fadd	DWORD PTR _Midpoint$[esp+216]
	fstp	DWORD PTR _Midpoint$[esp+216]
	fstp	ST(0)
	fld	DWORD PTR _Midpoint$[esp+220]
	fadd	DWORD PTR $T140348[esp+220]
	fstp	DWORD PTR _Midpoint$[esp+220]
	fld	DWORD PTR _Midpoint$[esp+224]
	fadd	DWORD PTR $T140348[esp+224]
	fstp	DWORD PTR _Midpoint$[esp+224]
	mov	dl, BYTE PTR _ColorMidpoint$[esp+217]

; 2803 : 		ColorMidpoint.B+=(BeamEndColor.B-BeamColor.B)/2;
; 2804 : 		ColorMidpoint.A+=(BeamEndColor.A-BeamColor.A)/2;
; 2805 :  
; 2806 : 		// Delegate the rendering of the 2 line segments: 
; 2807 : 		RecursiveSubdivideLine(c,t,BeamColor,ColorMidpoint,BeamStartWidth, BeamEndWidth,PolyFlags,MaxAmplitude/2,LineStart,LineEnd,RangeStart,Midpoint,depth-1);

	fld	DWORD PTR _MaxAmplitude$[esp+212]
	sar	eax, 1
	fmul	DWORD PTR __real@3f000000
	add	dl, al
	mov	eax, DWORD PTR _BeamEndColor$[esp+214]
	mov	BYTE PTR _ColorMidpoint$[esp+217], dl
	fstp	DWORD PTR -192+[esp+216]
	mov	edx, DWORD PTR _BeamColor$[esp+214]
	and	eax, 255				; 000000ffH
	and	edx, 255				; 000000ffH
	sub	eax, edx
	cdq
	sub	eax, edx
	mov	dl, BYTE PTR _ColorMidpoint$[esp+218]
	sar	eax, 1
	add	dl, al
	mov	eax, DWORD PTR _BeamEndColor$[esp+215]
	mov	BYTE PTR _ColorMidpoint$[esp+218], dl
	mov	edx, DWORD PTR _BeamColor$[esp+215]
	and	edx, 255				; 000000ffH
	and	eax, 255				; 000000ffH
	sub	eax, edx
	cdq
	sub	eax, edx
	mov	dl, BYTE PTR _ColorMidpoint$[esp+219]
	sar	eax, 1
	add	dl, al
	mov	eax, DWORD PTR _depth$[esp+212]
	lea	edi, DWORD PTR [eax-1]
	mov	eax, DWORD PTR _Midpoint$[esp+216]
	mov	BYTE PTR _ColorMidpoint$[esp+219], dl
	push	edi
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _Midpoint$[esp+236]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _Midpoint$[esp+240]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _RangeStart$[esp+228]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _RangeStart$[esp+244]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _RangeStart$[esp+248]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _LineEnd$[esp+240]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _LineEnd$[esp+256]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _LineEnd$[esp+260]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _LineStart$[esp+252]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _LineStart$[esp+268]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _LineStart$[esp+272]
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR -192+[esp+268]
	mov	eax, DWORD PTR _PolyFlags$[esp+264]
	push	edx
	mov	edx, DWORD PTR _BeamEndWidth$[esp+268]
	push	eax
	mov	eax, DWORD PTR _BeamStartWidth$[esp+272]
	push	edx
	mov	edx, DWORD PTR _ColorMidpoint$[esp+280]
	push	eax
	mov	eax, DWORD PTR _t$[esp+280]
	push	edx
	push	ecx
	push	eax
	mov	edx, ebp
	mov	ecx, esi
	call	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine

; 2808 : 		RecursiveSubdivideLine(c,t,ColorMidpoint,BeamEndColor,BeamStartWidth, BeamEndWidth,PolyFlags,MaxAmplitude/2,LineStart,LineEnd,Midpoint,RangeEnd,depth-1);

	push	edi
	mov	edx, DWORD PTR _RangeEnd$[esp+216]
	mov	eax, DWORD PTR _RangeEnd$[esp+220]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _RangeEnd$[esp+236]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _Midpoint$[esp+232]
	mov	edx, DWORD PTR _Midpoint$[esp+236]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _Midpoint$[esp+252]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _LineEnd$[esp+240]
	mov	ecx, DWORD PTR _LineEnd$[esp+244]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _LineEnd$[esp+260]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _LineStart$[esp+252]
	mov	eax, DWORD PTR _LineStart$[esp+256]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _LineStart$[esp+272]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR -192+[esp+268]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _PolyFlags$[esp+264]
	mov	edx, DWORD PTR _BeamEndWidth$[esp+264]
	push	eax
	mov	eax, DWORD PTR _BeamStartWidth$[esp+268]
	push	ecx
	mov	ecx, DWORD PTR _ColorMidpoint$[esp+276]
	push	edx
	mov	edx, DWORD PTR _t$[esp+276]
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	edx, ebp
	mov	ecx, esi
	call	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine
$L125776:

; 2809 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 200				; 000000c8H
	ret	80					; 00000050H
?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ENDP ; UD3DRenderDevice::RecursiveSubdivideLine
_TEXT	ENDS
PUBLIC	?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z ; UD3DRenderDevice::SineWave
PUBLIC	__real@4000000000000000
PUBLIC	__real@41500000
;	COMDAT __real@4000000000000000
; File c:\dx8\include\d3dx8math.inl
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z
_TEXT	SEGMENT
_c$ = -172
_t$ = 8
_BeamColor$ = 12
_BeamEndColor$ = 16
_BeamStartWidth$ = 20
_BeamEndWidth$ = 24
_PolyFlags$ = 28
_MaxAmplitude$ = 32
_MaxFrequency$ = 36
_Noise$ = 40
_TimeSeconds$ = 44
_LineStart$ = 48
_LineEnd$ = 60
_depth$ = 96
_TimeScale$ = 100
$T140630 = -140
$T140631 = -200
$T140632 = -164
$T140634 = -152
_CurrentTextureInfo$140877 = -128
$T140892 = -256
$T140893 = -256
$T140961 = -256
$T140964 = -272
$T140965 = -288
_LineSegments$ = -212
_CurrentPosition$ = -268
_PreviousPosition$ = -236
_Distance$ = -284
_Direction$ = -224
_StepLength$ = -168
_Axis1$ = -252
_Axis2$ = -284
_CurrentColor$ = -292
_RFactor$ = -176
_GFactor$ = -184
_BFactor$ = -180
_AFactor$ = -188
_i$ = -240
?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z PROC NEAR ; UD3DRenderDevice::SineWave, COMDAT
; _this$ = ecx
; _c$ = edx

; 2812 : 	{

	sub	esp, 292				; 00000124H

; 2813 : 		VALIDATE;
; 2814 : 		int LineSegments=((int)appPow(2,depth))+1;

	fld	QWORD PTR __real@4000000000000000
	push	ebx
	fild	DWORD PTR _depth$[esp+292]
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _c$[esp+308], edx
	mov	esi, ecx
	call	__CIpow
	call	__ftol

; 2815 : 		FVector CurrentPosition=LineStart;
; 2816 : 		FVector PreviousPosition=CurrentPosition;
; 2817 : 		FVector Distance=LineEnd-LineStart;

	fld	DWORD PTR _LineEnd$[esp+304]
	fsub	DWORD PTR _LineStart$[esp+304]
	mov	ecx, DWORD PTR _LineStart$[esp+308]
	mov	edx, DWORD PTR _LineStart$[esp+312]
	mov	ebp, eax
	fstp	DWORD PTR _Distance$[esp+308]
	fld	DWORD PTR _LineEnd$[esp+308]
	mov	eax, DWORD PTR _LineStart$[esp+304]
	fsub	DWORD PTR _LineStart$[esp+308]
	mov	DWORD PTR _PreviousPosition$[esp+308], eax

; 2818 : 		FVector Direction=Distance;

	mov	eax, DWORD PTR _Distance$[esp+308]
	mov	DWORD PTR _Direction$[esp+308], eax
	fstp	DWORD PTR _Distance$[esp+312]
	fld	DWORD PTR _LineEnd$[esp+312]
	inc	ebp
	fsub	DWORD PTR _LineStart$[esp+312]
	mov	DWORD PTR _PreviousPosition$[esp+312], ecx
	mov	ecx, DWORD PTR _Distance$[esp+312]
	mov	DWORD PTR _PreviousPosition$[esp+316], edx
	fstp	DWORD PTR _Distance$[esp+316]

; 2819 : 		Direction.Normalize();

	fld	DWORD PTR _Distance$[esp+316]
	mov	edx, DWORD PTR _Distance$[esp+316]
	fmul	DWORD PTR _Distance$[esp+316]
	mov	DWORD PTR _LineSegments$[esp+308], ebp
	fld	DWORD PTR _Distance$[esp+312]
	mov	DWORD PTR _Direction$[esp+312], ecx
	fmul	DWORD PTR _Distance$[esp+312]
	mov	DWORD PTR _Direction$[esp+316], edx
	fld	DWORD PTR _Distance$[esp+308]
	fmul	DWORD PTR _Distance$[esp+308]
	fld	ST(0)
	fadd	ST(0), ST(2)
	fadd	ST(0), ST(3)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140976
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$[esp+308]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+308]
	fld	DWORD PTR _Direction$[esp+312]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+312]
	fld	DWORD PTR _Direction$[esp+316]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+316]
$L140976:
	fstp	ST(0)

; 2820 : 		FLOAT Length=Distance.Size();
; 2821 : 		FLOAT StepLength=Length/LineSegments;
; 2822 : 
; 2823 : 		FVector Axis1, Axis2;
; 2824 : 		Direction.FindBestAxisVectors( Axis1, Axis2 );

	lea	eax, DWORD PTR _Axis2$[esp+308]

; 2825 : 		Axis1.Normalize();
; 2826 : 		Axis2.Normalize();
; 2827 : 
; 2828 : 		FColor PreviousColor=BeamColor,
; 2829 : 			   CurrentColor=BeamColor;
; 2830 : 
; 2831 : 		FLOAT RFactor=(((FLOAT)(BeamEndColor.R-BeamColor.R))/(FLOAT)LineSegments);
; 2832 : 		FLOAT GFactor=(((FLOAT)(BeamEndColor.G-BeamColor.G))/(FLOAT)LineSegments);
; 2833 : 		FLOAT BFactor=(((FLOAT)(BeamEndColor.B-BeamColor.B))/(FLOAT)LineSegments);
; 2834 : 		FLOAT AFactor=(((FLOAT)(BeamEndColor.A-BeamColor.A))/(FLOAT)LineSegments);
; 2835 : 
; 2836 : 		for(int i=0;i<LineSegments;i++)

	fild	DWORD PTR _LineSegments$[esp+308]
	push	eax
	lea	ecx, DWORD PTR _Axis1$[esp+312]
	push	ecx
	fstp	DWORD PTR -292+[esp+316]
	lea	ecx, DWORD PTR _Direction$[esp+316]
	fadd	ST(0), ST(1)
	faddp	ST(2), ST(0)
	fxch	ST(1)
	fsqrt
	fstp	ST(1)
	fdiv	DWORD PTR -292+[esp+316]
	fstp	DWORD PTR _StepLength$[esp+316]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$[esp+308]
	fmul	DWORD PTR _Axis1$[esp+308]
	fld	DWORD PTR _Axis1$[esp+316]
	fmul	DWORD PTR _Axis1$[esp+316]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$[esp+312]
	fmul	DWORD PTR _Axis1$[esp+312]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140972
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$[esp+308]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+308]
	fld	DWORD PTR _Axis1$[esp+312]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+312]
	fld	DWORD PTR _Axis1$[esp+316]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+316]
$L140972:
	fstp	ST(0)
	fld	DWORD PTR _Axis2$[esp+308]
	fmul	DWORD PTR _Axis2$[esp+308]
	fld	DWORD PTR _Axis2$[esp+316]
	fmul	DWORD PTR _Axis2$[esp+316]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$[esp+312]
	fmul	DWORD PTR _Axis2$[esp+312]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L140975
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$[esp+308]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+308]
	fld	DWORD PTR _Axis2$[esp+312]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+312]
	fld	DWORD PTR _Axis2$[esp+316]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+316]
$L140975:
	mov	ebx, DWORD PTR _BeamColor$[esp+304]
	fstp	ST(0)
	mov	eax, DWORD PTR _BeamEndColor$[esp+304]
	and	eax, 255				; 000000ffH
	mov	edx, ebx
	and	edx, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR -288+[esp+308], eax
	fild	DWORD PTR -288+[esp+308]
	mov	ecx, DWORD PTR _BeamColor$[esp+305]
	mov	edx, DWORD PTR _BeamEndColor$[esp+305]
	fdiv	DWORD PTR -292+[esp+308]
	and	ecx, 255				; 000000ffH
	and	edx, 255				; 000000ffH
	sub	edx, ecx
	mov	DWORD PTR -288+[esp+308], edx
	mov	eax, DWORD PTR _BeamColor$[esp+306]
	mov	ecx, DWORD PTR _BeamEndColor$[esp+306]
	and	eax, 255				; 000000ffH
	and	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	edx, DWORD PTR _BeamColor$[esp+307]
	mov	eax, DWORD PTR _BeamEndColor$[esp+307]
	and	edx, 255				; 000000ffH
	and	eax, 255				; 000000ffH
	sub	eax, edx
	test	ebp, ebp
	mov	edi, ebx
	mov	DWORD PTR _i$[esp+308], 0
	fstp	DWORD PTR _RFactor$[esp+308]
	fild	DWORD PTR -288+[esp+308]
	mov	DWORD PTR -288+[esp+308], ecx
	fdiv	DWORD PTR -292+[esp+308]
	fstp	DWORD PTR _GFactor$[esp+308]
	fild	DWORD PTR -288+[esp+308]
	mov	DWORD PTR -288+[esp+308], eax
	fdiv	DWORD PTR -292+[esp+308]
	fstp	DWORD PTR _BFactor$[esp+308]
	fild	DWORD PTR -288+[esp+308]
	fdiv	DWORD PTR -292+[esp+308]
	fstp	DWORD PTR _AFactor$[esp+308]
	jle	$L125823
	fld	DWORD PTR _TimeSeconds$[esp+304]
	fmul	DWORD PTR _TimeScale$[esp+304]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR -204+[esp+308]
	fld	DWORD PTR _Noise$[esp+304]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR -208+[esp+308]

; 2850 : 
; 2851 : 			// Draw the line:
; 2852 : 			dnDraw3DLine(c->Frame,t,PolyFlags,PreviousPosition,CurrentPosition,BeamStartWidth,BeamEndWidth,PreviousColor,CurrentColor,true);

	jmp	SHORT $L125821
$L140973:
	mov	ebx, DWORD PTR _BeamColor$[esp+304]

; 2856 : 		}
; 2857 : 	}

	npad	1
$L125821:

; 2837 : 		{
; 2838 : 			FLOAT LengthToHere=(i*StepLength);

	fild	DWORD PTR _i$[esp+308]

; 2839 : 			CurrentPosition=LineStart+(LengthToHere*Direction);
; 2840 : 			
; 2841 : 			CurrentPosition+=(Axis1*(appSin(TimeSeconds*13*TimeScale+LengthToHere*MaxFrequency+appFrand()*Noise-(Noise/2))*MaxAmplitude));

	mov	ebp, DWORD PTR __imp__rand
	fst	DWORD PTR -272+[esp+308]
	fmul	DWORD PTR _StepLength$[esp+308]
	fld	DWORD PTR _Direction$[esp+308]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Direction$[esp+312]
	fmul	ST(0), ST(2)
	fld	DWORD PTR _Direction$[esp+316]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T140630[esp+316]
	fxch	ST(1)
	fadd	DWORD PTR _LineStart$[esp+304]
	fstp	DWORD PTR $T140631[esp+308]
	mov	ecx, DWORD PTR $T140631[esp+308]
	fadd	DWORD PTR _LineStart$[esp+308]
	mov	DWORD PTR _CurrentPosition$[esp+308], ecx
	fstp	DWORD PTR $T140631[esp+312]
	fld	DWORD PTR $T140630[esp+316]
	mov	edx, DWORD PTR $T140631[esp+312]
	fadd	DWORD PTR _LineStart$[esp+312]
	mov	DWORD PTR _CurrentPosition$[esp+312], edx
	fstp	DWORD PTR $T140631[esp+316]
	mov	eax, DWORD PTR $T140631[esp+316]
	fmul	DWORD PTR _MaxFrequency$[esp+304]
	mov	DWORD PTR _CurrentPosition$[esp+316], eax
	fstp	DWORD PTR -292+[esp+308]
	call	ebp
	mov	DWORD PTR -288+[esp+308], eax
	fild	DWORD PTR -288+[esp+308]
	fmul	DWORD PTR _Noise$[esp+304]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -204+[esp+308]
	fadd	DWORD PTR -292+[esp+308]
	fsub	DWORD PTR -208+[esp+308]
	fsin
	fmul	DWORD PTR _MaxAmplitude$[esp+304]
	fld	DWORD PTR _Axis1$[esp+308]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis1$[esp+312]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T140632[esp+312]
	fld	DWORD PTR _Axis1$[esp+316]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T140632[esp+316]
	fadd	DWORD PTR $T140631[esp+308]
	fstp	DWORD PTR _CurrentPosition$[esp+308]
	fstp	ST(0)
	fld	DWORD PTR _CurrentPosition$[esp+312]
	fadd	DWORD PTR $T140632[esp+312]
	fstp	DWORD PTR _CurrentPosition$[esp+312]
	fld	DWORD PTR _CurrentPosition$[esp+316]
	fadd	DWORD PTR $T140632[esp+316]
	fstp	DWORD PTR _CurrentPosition$[esp+316]

; 2842 : 			CurrentPosition+=(Axis2*(appCos(TimeSeconds*13*TimeScale+LengthToHere*MaxFrequency+appFrand()*Noise-(Noise/2))*MaxAmplitude));

	call	ebp
	mov	DWORD PTR -288+[esp+308], eax
	fild	DWORD PTR -288+[esp+308]
	fmul	DWORD PTR _Noise$[esp+304]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -204+[esp+308]
	fadd	DWORD PTR -292+[esp+308]
	fsub	DWORD PTR -208+[esp+308]
	fcos
	fmul	DWORD PTR _MaxAmplitude$[esp+304]
	fld	DWORD PTR _Axis2$[esp+308]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis2$[esp+312]

; 2843 : 
; 2844 : 			// Compute current color:
; 2845 : 			CurrentColor=BeamColor;

	mov	DWORD PTR _CurrentColor$[esp+308], ebx
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T140634[esp+312]
	fld	DWORD PTR _Axis2$[esp+316]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T140634[esp+316]
	fadd	DWORD PTR _CurrentPosition$[esp+308]
	fstp	DWORD PTR _CurrentPosition$[esp+308]
	fstp	ST(0)
	fld	DWORD PTR _CurrentPosition$[esp+312]
	fadd	DWORD PTR $T140634[esp+312]
	fstp	DWORD PTR _CurrentPosition$[esp+312]
	fld	DWORD PTR _CurrentPosition$[esp+316]
	fadd	DWORD PTR $T140634[esp+316]
	fstp	DWORD PTR _CurrentPosition$[esp+316]

; 2846 : 			CurrentColor.R+=(int)(RFactor*i);

	fld	DWORD PTR -272+[esp+308]
	fmul	DWORD PTR _RFactor$[esp+308]
	call	__ftol

; 2847 : 			CurrentColor.G+=(int)(GFactor*i);

	fld	DWORD PTR -272+[esp+308]
	fmul	DWORD PTR _GFactor$[esp+308]
	add	al, bl
	mov	BYTE PTR _CurrentColor$[esp+308], al
	call	__ftol

; 2848 : 			CurrentColor.B+=(int)(BFactor*i);

	fld	DWORD PTR -272+[esp+308]
	mov	bl, BYTE PTR _CurrentColor$[esp+309]
	fmul	DWORD PTR _BFactor$[esp+308]
	add	bl, al
	mov	BYTE PTR _CurrentColor$[esp+309], bl
	call	__ftol

; 2849 : 			CurrentColor.A+=(int)(AFactor*i);

	fld	DWORD PTR -272+[esp+308]
	mov	dl, BYTE PTR _CurrentColor$[esp+310]
	fmul	DWORD PTR _AFactor$[esp+308]
	add	dl, al
	mov	BYTE PTR _CurrentColor$[esp+310], dl
	call	__ftol
	mov	cl, BYTE PTR _CurrentColor$[esp+311]

; 2850 : 
; 2851 : 			// Draw the line:
; 2852 : 			dnDraw3DLine(c->Frame,t,PolyFlags,PreviousPosition,CurrentPosition,BeamStartWidth,BeamEndWidth,PreviousColor,CurrentColor,true);

	mov	edx, DWORD PTR _c$[esp+308]
	mov	ebx, DWORD PTR _CurrentPosition$[esp+312]
	add	cl, al
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR $T140961[esp+308], eax
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	mov	BYTE PTR _CurrentColor$[esp+311], cl
	mov	ecx, DWORD PTR _CurrentColor$[esp+308]
	mov	DWORD PTR $T140965[esp+308], ecx
	mov	DWORD PTR $T140964[esp+308], edi
	je	$L140872
	fld	DWORD PTR _BeamStartWidth$[esp+304]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L140874
	fld	DWORD PTR _BeamEndWidth$[esp+304]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L140874
	mov	ebp, DWORD PTR _t$[esp+304]
	test	ebp, ebp
	mov	edi, 2
	je	SHORT $L140876
	mov	edi, DWORD PTR [ebp+196]
	or	edi, 2
$L140876:
	mov	edx, DWORD PTR _PolyFlags$[esp+304]
	push	edi
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	1098907648				; 41800000H
	push	0
	push	0
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L140912
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L140974
$L140912:
	mov	eax, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebp, DWORD PTR [eax]
	call	__ftol
	push	eax
	mov	eax, DWORD PTR [esi+19124]
	push	47					; 0000002fH
	push	eax
	call	DWORD PTR [ebp+200]
	mov	ebp, DWORD PTR _t$[esp+304]
	jmp	SHORT $L140911
$L140974:
	fstp	ST(0)
$L140911:
	test	ebp, ebp
	je	SHORT $L140878
	mov	ecx, DWORD PTR $T140961[esp+308]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	esi
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$140877[esp+324]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]
	mov	eax, DWORD PTR _PolyFlags$[esp+304]
	push	0
	push	edi
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$140877[esp+324]
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L140879
$L140878:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L140879:
	push	-1
	lea	ebp, DWORD PTR [esi+16720]
	push	2
	mov	ecx, ebp
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	ecx, DWORD PTR _PreviousPosition$[esp+312]
	mov	edi, eax
	mov	eax, DWORD PTR _PreviousPosition$[esp+308]
	mov	edx, edi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _PreviousPosition$[esp+316]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR $T140964[esp+308]
	mov	DWORD PTR $T140892[esp+308], ecx
	lea	ecx, DWORD PTR $T140892[esp+308]
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, DWORD PTR _CurrentPosition$[esp+316]
	mov	DWORD PTR [edi+12], eax
	mov	eax, DWORD PTR _CurrentPosition$[esp+308]
	lea	edx, DWORD PTR [edi+16]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR $T140965[esp+308]
	lea	ecx, DWORD PTR $T140893[esp+308]
	mov	DWORD PTR $T140893[esp+308], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, ebp
	mov	DWORD PTR [edi+28], eax
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, ebp
	mov	edi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	edi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	inc	DWORD PTR [esi+19684]
	mov	ecx, DWORD PTR _t$[esp+304]
	test	ecx, ecx
	je	SHORT $L140882
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _CurrentTextureInfo$140877[esp+308]
	call	DWORD PTR [eax+76]
	jmp	$L140872
$L140882:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L140872
$L140874:
	push	0
	lea	edi, DWORD PTR [esi+675236]
	push	1
	mov	ecx, edi
	call	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _PreviousPosition$[esp+308]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _PreviousPosition$[esp+312]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _PreviousPosition$[esp+316]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+308]
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+316]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR _BeamStartWidth$[esp+304]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR $T140964[esp+308]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR $T140965[esp+308]
	mov	DWORD PTR [eax+32], edx
$L140872:

; 2853 : 
; 2854 : 			PreviousPosition=CurrentPosition;

	mov	eax, DWORD PTR _CurrentPosition$[esp+308]
	mov	ecx, DWORD PTR _CurrentPosition$[esp+316]

; 2855 : 			PreviousColor=CurrentColor;

	mov	edi, DWORD PTR _CurrentColor$[esp+308]
	mov	DWORD PTR _PreviousPosition$[esp+308], eax
	mov	eax, DWORD PTR _i$[esp+308]
	mov	DWORD PTR _PreviousPosition$[esp+316], ecx
	mov	ecx, DWORD PTR _LineSegments$[esp+308]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _PreviousPosition$[esp+312], ebx
	mov	DWORD PTR _i$[esp+308], eax
	jl	$L140973
$L125823:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 2856 : 		}
; 2857 : 	}

	add	esp, 292				; 00000124H
	ret	96					; 00000060H
?SineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z ENDP ; UD3DRenderDevice::SineWave
_TEXT	ENDS
PUBLIC	__real@4012000000000000
PUBLIC	__real@41200000
PUBLIC	?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z ; UD3DRenderDevice::DoubleSineWave
;	COMDAT __real@4012000000000000
; File c:\dx8\include\d3dx8math.inl
CONST	SEGMENT
__real@4012000000000000 DQ 04012000000000000r	; 4.5
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z
_TEXT	SEGMENT
_CurrentTextureInfo$141238 = -128
$T141254 = -256
$T141321 = -256
$T141324 = -300
$T141325 = -308
_c$ = -196
_t$ = 8
_BeamColor$ = 12
_BeamEndColor$ = 16
_BeamStartWidth$ = 20
_BeamEndWidth$ = 24
_PolyFlags$ = 28
_MaxAmplitude$ = 32
_MaxFrequency$ = 36
_Noise$ = 40
_TimeSeconds$ = 44
_LineStart$ = 48
_LineEnd$ = 60
_depth$ = 96
_TimeScale$ = 100
$T140981 = -140
$T140982 = -212
$T140983 = -160
$T140985 = -172
_LineSegments$ = -224
_CurrentPosition$ = -284
_PreviousPosition$ = -252
_Distance$ = -296
_Direction$ = -236
_StepLength$ = -192
_Axis1$ = -268
_Axis2$ = -296
_CurrentColor$ = -304
_RFactor$ = -176
_GFactor$ = -184
_BFactor$ = -188
_AFactor$ = -200
_i$ = -240
_OriginalMaxAmplitude$125869 = -180
?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z PROC NEAR ; UD3DRenderDevice::DoubleSineWave, COMDAT
; _this$ = ecx
; _c$ = edx

; 2860 : 	{

	sub	esp, 308				; 00000134H

; 2861 : 		int LineSegments=((int)appPow(2,depth))+1;

	fld	QWORD PTR __real@4000000000000000
	push	ebx
	fild	DWORD PTR _depth$[esp+308]
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _c$[esp+324], edx
	mov	esi, ecx
	call	__CIpow
	call	__ftol

; 2862 : 		FVector CurrentPosition=LineStart;
; 2863 : 		FVector PreviousPosition=CurrentPosition;
; 2864 : 		FVector Distance=LineEnd-LineStart;

	fld	DWORD PTR _LineEnd$[esp+320]
	fsub	DWORD PTR _LineStart$[esp+320]
	mov	ecx, DWORD PTR _LineStart$[esp+324]
	mov	edx, DWORD PTR _LineStart$[esp+328]
	mov	ebp, eax
	fstp	DWORD PTR _Distance$[esp+324]
	fld	DWORD PTR _LineEnd$[esp+324]
	mov	eax, DWORD PTR _LineStart$[esp+320]
	fsub	DWORD PTR _LineStart$[esp+324]
	mov	DWORD PTR _PreviousPosition$[esp+324], eax

; 2865 : 		FVector Direction=Distance;

	mov	eax, DWORD PTR _Distance$[esp+324]
	mov	DWORD PTR _Direction$[esp+324], eax
	fstp	DWORD PTR _Distance$[esp+328]
	fld	DWORD PTR _LineEnd$[esp+328]
	inc	ebp
	fsub	DWORD PTR _LineStart$[esp+328]
	mov	DWORD PTR _PreviousPosition$[esp+328], ecx
	mov	ecx, DWORD PTR _Distance$[esp+328]
	mov	DWORD PTR _PreviousPosition$[esp+332], edx
	fstp	DWORD PTR _Distance$[esp+332]

; 2866 : 		Direction.Normalize();

	fld	DWORD PTR _Distance$[esp+332]
	mov	edx, DWORD PTR _Distance$[esp+332]
	fmul	DWORD PTR _Distance$[esp+332]
	mov	DWORD PTR _LineSegments$[esp+324], ebp
	fld	DWORD PTR _Distance$[esp+328]
	mov	DWORD PTR _Direction$[esp+328], ecx
	fmul	DWORD PTR _Distance$[esp+328]
	mov	DWORD PTR _Direction$[esp+332], edx
	fld	DWORD PTR _Distance$[esp+324]
	fmul	DWORD PTR _Distance$[esp+324]
	fld	ST(2)
	fadd	ST(0), ST(1)
	fadd	ST(0), ST(2)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L141336
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$[esp+324]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+324]
	fld	DWORD PTR _Direction$[esp+328]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+328]
	fld	DWORD PTR _Direction$[esp+332]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$[esp+332]
$L141336:
	fstp	ST(0)

; 2867 : 		FLOAT Length=Distance.Size();
; 2868 : 		FLOAT StepLength=Length/LineSegments;
; 2869 : 
; 2870 : 		FVector Axis1, Axis2;
; 2871 : 		Direction.FindBestAxisVectors(Axis1,Axis2);

	lea	eax, DWORD PTR _Axis2$[esp+324]

; 2872 : 		Axis1.Normalize();
; 2873 : 		Axis2.Normalize();
; 2874 : 
; 2875 : 		FColor PreviousColor=BeamColor,
; 2876 : 			   CurrentColor=BeamColor;
; 2877 : 
; 2878 : 		FLOAT RFactor=(((FLOAT)(BeamEndColor.R-BeamColor.R))/(FLOAT)LineSegments);
; 2879 : 		FLOAT GFactor=(((FLOAT)(BeamEndColor.G-BeamColor.G))/(FLOAT)LineSegments);
; 2880 : 		FLOAT BFactor=(((FLOAT)(BeamEndColor.B-BeamColor.B))/(FLOAT)LineSegments);
; 2881 : 		FLOAT AFactor=(((FLOAT)(BeamEndColor.A-BeamColor.A))/(FLOAT)LineSegments);
; 2882 : 
; 2883 : 		for(int i=0;i<LineSegments;i++)

	fild	DWORD PTR _LineSegments$[esp+324]
	push	eax
	lea	ecx, DWORD PTR _Axis1$[esp+328]
	push	ecx
	fstp	DWORD PTR -272+[esp+332]
	lea	ecx, DWORD PTR _Direction$[esp+332]
	fxch	ST(2)
	fadd	ST(0), ST(2)
	fadd	ST(0), ST(1)
	fsqrt
	fstp	ST(2)
	fstp	ST(0)
	fdiv	DWORD PTR -272+[esp+332]
	fstp	DWORD PTR _StepLength$[esp+332]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$[esp+332]
	fmul	DWORD PTR _Axis1$[esp+332]
	fld	DWORD PTR _Axis1$[esp+328]
	fmul	DWORD PTR _Axis1$[esp+328]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$[esp+324]
	fmul	DWORD PTR _Axis1$[esp+324]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L141332
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$[esp+324]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+324]
	fld	DWORD PTR _Axis1$[esp+328]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+328]
	fld	DWORD PTR _Axis1$[esp+332]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$[esp+332]
$L141332:
	fstp	ST(0)
	fld	DWORD PTR _Axis2$[esp+332]
	fmul	DWORD PTR _Axis2$[esp+332]
	fld	DWORD PTR _Axis2$[esp+328]
	fmul	DWORD PTR _Axis2$[esp+328]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$[esp+324]
	fmul	DWORD PTR _Axis2$[esp+324]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L141335
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$[esp+324]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+324]
	fld	DWORD PTR _Axis2$[esp+328]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+328]
	fld	DWORD PTR _Axis2$[esp+332]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$[esp+332]
$L141335:
	mov	ebx, DWORD PTR _BeamColor$[esp+320]
	fstp	ST(0)
	mov	eax, DWORD PTR _BeamEndColor$[esp+320]
	and	eax, 255				; 000000ffH
	mov	edx, ebx
	and	edx, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR -308+[esp+324], eax
	fild	DWORD PTR -308+[esp+324]
	mov	ecx, DWORD PTR _BeamColor$[esp+321]
	mov	edx, DWORD PTR _BeamEndColor$[esp+321]
	fdiv	DWORD PTR -272+[esp+324]
	and	ecx, 255				; 000000ffH
	and	edx, 255				; 000000ffH
	sub	edx, ecx
	mov	DWORD PTR -308+[esp+324], edx
	mov	eax, DWORD PTR _BeamColor$[esp+322]
	mov	ecx, DWORD PTR _BeamEndColor$[esp+322]
	and	eax, 255				; 000000ffH
	and	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	edx, DWORD PTR _BeamColor$[esp+323]
	mov	eax, DWORD PTR _BeamEndColor$[esp+323]
	and	edx, 255				; 000000ffH
	and	eax, 255				; 000000ffH
	sub	eax, edx
	test	ebp, ebp
	mov	edi, ebx
	mov	DWORD PTR _i$[esp+324], 0
	fstp	DWORD PTR _RFactor$[esp+324]
	fild	DWORD PTR -308+[esp+324]
	mov	DWORD PTR -308+[esp+324], ecx
	fdiv	DWORD PTR -272+[esp+324]
	fstp	DWORD PTR _GFactor$[esp+324]
	fild	DWORD PTR -308+[esp+324]
	mov	DWORD PTR -308+[esp+324], eax
	fdiv	DWORD PTR -272+[esp+324]
	fstp	DWORD PTR _BFactor$[esp+324]
	fild	DWORD PTR -308+[esp+324]
	fdiv	DWORD PTR -272+[esp+324]
	fstp	DWORD PTR _AFactor$[esp+324]
	jle	$L125865
	fld	DWORD PTR _TimeSeconds$[esp+320]
	fmul	QWORD PTR __real@4012000000000000
	fstp	QWORD PTR -148+[esp+324]
	fld	DWORD PTR _TimeSeconds$[esp+320]
	fmul	DWORD PTR _TimeScale$[esp+320]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR -216+[esp+324]
	fld	DWORD PTR _Noise$[esp+320]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR -220+[esp+324]

; 2900 : 
; 2901 : 			// Draw the line:
; 2902 : 			dnDraw3DLine(c->Frame,t,PolyFlags,PreviousPosition,CurrentPosition,BeamStartWidth,BeamEndWidth,PreviousColor,CurrentColor,true);

	jmp	SHORT $L125863
$L141333:
	mov	ebx, DWORD PTR _BeamColor$[esp+320]
$L125863:

; 2884 : 		{
; 2885 : 			FLOAT LengthToHere=(i*StepLength);

	fild	DWORD PTR _i$[esp+324]

; 2886 : 			CurrentPosition=LineStart+(LengthToHere*Direction);
; 2887 : 			
; 2888 : 			FLOAT OriginalMaxAmplitude=MaxAmplitude;
; 2889 : 			MaxAmplitude*=appSin(((FLOAT)i/(FLOAT)LineSegments)*10+TimeSeconds*4.5);
; 2890 : 			CurrentPosition+=(Axis1*(appSin(TimeSeconds*13*TimeScale+LengthToHere*MaxFrequency+appFrand()*Noise-(Noise/2))*MaxAmplitude));

	mov	ebp, DWORD PTR __imp__rand
	fst	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _StepLength$[esp+324]
	fld	DWORD PTR _Direction$[esp+324]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Direction$[esp+328]
	fmul	ST(0), ST(2)
	fld	DWORD PTR _Direction$[esp+332]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T140981[esp+332]
	fxch	ST(1)
	fadd	DWORD PTR _LineStart$[esp+320]
	fstp	DWORD PTR $T140982[esp+324]
	mov	ecx, DWORD PTR $T140982[esp+324]
	fadd	DWORD PTR _LineStart$[esp+324]
	mov	DWORD PTR _CurrentPosition$[esp+324], ecx
	mov	ecx, DWORD PTR _MaxAmplitude$[esp+320]
	mov	DWORD PTR _OriginalMaxAmplitude$125869[esp+324], ecx
	fstp	DWORD PTR $T140982[esp+328]
	fld	DWORD PTR $T140981[esp+332]
	mov	edx, DWORD PTR $T140982[esp+328]
	fadd	DWORD PTR _LineStart$[esp+328]
	mov	DWORD PTR _CurrentPosition$[esp+328], edx
	fstp	DWORD PTR $T140982[esp+332]
	fld	DWORD PTR -300+[esp+324]
	mov	eax, DWORD PTR $T140982[esp+332]
	fdiv	DWORD PTR -272+[esp+324]
	mov	DWORD PTR _CurrentPosition$[esp+332], eax
	fmul	DWORD PTR __real@41200000
	fadd	QWORD PTR -148+[esp+324]
	fsin
	fmul	DWORD PTR _MaxAmplitude$[esp+320]
	fstp	DWORD PTR _MaxAmplitude$[esp+320]
	fmul	DWORD PTR _MaxFrequency$[esp+320]
	fstp	DWORD PTR -304+[esp+324]
	call	ebp
	mov	DWORD PTR -308+[esp+324], eax
	fild	DWORD PTR -308+[esp+324]
	fmul	DWORD PTR _Noise$[esp+320]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -216+[esp+324]
	fadd	DWORD PTR -304+[esp+324]
	fsub	DWORD PTR -220+[esp+324]
	fsin
	fmul	DWORD PTR _MaxAmplitude$[esp+320]
	fld	DWORD PTR _Axis1$[esp+324]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis1$[esp+328]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T140983[esp+328]
	fld	DWORD PTR _Axis1$[esp+332]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T140983[esp+332]
	fadd	DWORD PTR $T140982[esp+324]
	fstp	DWORD PTR _CurrentPosition$[esp+324]
	fstp	ST(0)
	fld	DWORD PTR _CurrentPosition$[esp+328]
	fadd	DWORD PTR $T140983[esp+328]
	fstp	DWORD PTR _CurrentPosition$[esp+328]
	fld	DWORD PTR _CurrentPosition$[esp+332]
	fadd	DWORD PTR $T140983[esp+332]
	fstp	DWORD PTR _CurrentPosition$[esp+332]

; 2891 : 			CurrentPosition+=(Axis2*(appCos(TimeSeconds*13*TimeScale+LengthToHere*MaxFrequency+appFrand()*Noise-(Noise/2))*MaxAmplitude));

	call	ebp
	mov	DWORD PTR -308+[esp+324], eax
	fild	DWORD PTR -308+[esp+324]
	fmul	DWORD PTR _Noise$[esp+320]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -216+[esp+324]

; 2892 : 			MaxAmplitude=OriginalMaxAmplitude;

	mov	edx, DWORD PTR _OriginalMaxAmplitude$125869[esp+324]
	fadd	DWORD PTR -304+[esp+324]

; 2893 : 
; 2894 : 			// Compute current color:
; 2895 : 			CurrentColor=BeamColor;

	mov	DWORD PTR _CurrentColor$[esp+324], ebx
	fsub	DWORD PTR -220+[esp+324]
	fcos
	fmul	DWORD PTR _MaxAmplitude$[esp+320]
	fld	DWORD PTR _Axis2$[esp+324]
	mov	DWORD PTR _MaxAmplitude$[esp+320], edx
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis2$[esp+328]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T140985[esp+328]
	fld	DWORD PTR _Axis2$[esp+332]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T140985[esp+332]
	fadd	DWORD PTR _CurrentPosition$[esp+324]
	fstp	DWORD PTR _CurrentPosition$[esp+324]
	fstp	ST(0)
	fld	DWORD PTR _CurrentPosition$[esp+328]
	fadd	DWORD PTR $T140985[esp+328]
	fstp	DWORD PTR _CurrentPosition$[esp+328]
	fld	DWORD PTR _CurrentPosition$[esp+332]
	fadd	DWORD PTR $T140985[esp+332]
	fstp	DWORD PTR _CurrentPosition$[esp+332]

; 2896 : 			CurrentColor.R+=(int)(RFactor*i);

	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _RFactor$[esp+324]
	call	__ftol

; 2897 : 			CurrentColor.G+=(int)(GFactor*i);

	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _GFactor$[esp+324]
	add	al, bl
	mov	BYTE PTR _CurrentColor$[esp+324], al
	call	__ftol

; 2898 : 			CurrentColor.B+=(int)(BFactor*i);

	fld	DWORD PTR -300+[esp+324]
	mov	bl, BYTE PTR _CurrentColor$[esp+325]
	fmul	DWORD PTR _BFactor$[esp+324]
	add	bl, al
	mov	BYTE PTR _CurrentColor$[esp+325], bl
	call	__ftol

; 2899 : 			CurrentColor.A+=(int)(AFactor*i);

	fld	DWORD PTR -300+[esp+324]
	mov	dl, BYTE PTR _CurrentColor$[esp+326]
	fmul	DWORD PTR _AFactor$[esp+324]
	add	dl, al
	mov	BYTE PTR _CurrentColor$[esp+326], dl
	call	__ftol
	mov	cl, BYTE PTR _CurrentColor$[esp+327]

; 2900 : 
; 2901 : 			// Draw the line:
; 2902 : 			dnDraw3DLine(c->Frame,t,PolyFlags,PreviousPosition,CurrentPosition,BeamStartWidth,BeamEndWidth,PreviousColor,CurrentColor,true);

	mov	ebx, DWORD PTR _CurrentPosition$[esp+328]
	add	cl, al
	mov	BYTE PTR _CurrentColor$[esp+327], cl
	mov	eax, DWORD PTR _CurrentColor$[esp+324]
	mov	ecx, DWORD PTR _c$[esp+324]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR $T141325[esp+324], eax
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	mov	DWORD PTR $T141324[esp+324], edi
	mov	DWORD PTR $T141321[esp+324], edx
	je	$L141233
	fld	DWORD PTR _BeamStartWidth$[esp+320]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L141235
	fld	DWORD PTR _BeamEndWidth$[esp+320]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L141235
	mov	ebp, DWORD PTR _t$[esp+320]
	test	ebp, ebp
	mov	edi, 2
	je	SHORT $L141237
	mov	edi, DWORD PTR [ebp+196]
	or	edi, 2
$L141237:
	mov	edx, DWORD PTR _PolyFlags$[esp+320]
	push	edi
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	1098907648				; 41800000H
	push	0
	push	0
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L141272
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L141334
$L141272:
	mov	eax, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebp, DWORD PTR [eax]
	call	__ftol
	push	eax
	mov	eax, DWORD PTR [esi+19124]
	push	47					; 0000002fH
	push	eax
	call	DWORD PTR [ebp+200]
	mov	ebp, DWORD PTR _t$[esp+320]
	jmp	SHORT $L141271
$L141334:
	fstp	ST(0)
$L141271:
	test	ebp, ebp
	je	SHORT $L141239
	mov	ecx, DWORD PTR $T141321[esp+324]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	esi
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$141238[esp+340]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]
	mov	eax, DWORD PTR _PolyFlags$[esp+320]
	push	0
	push	edi
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$141238[esp+340]
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L141240
$L141239:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L141240:
	push	-1
	lea	ebp, DWORD PTR [esi+16720]
	push	2
	mov	ecx, ebp
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	ecx, DWORD PTR _PreviousPosition$[esp+328]
	mov	edi, eax
	mov	eax, DWORD PTR _PreviousPosition$[esp+324]
	mov	edx, edi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _PreviousPosition$[esp+332]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR $T141324[esp+324]
	xor	ecx, ecx
	mov	cl, BYTE PTR $T141324[esp+326]
	mov	edx, eax
	and	edx, 255				; 000000ffH
	and	eax, 65280				; 0000ff00H
	shl	edx, 16					; 00000010H
	add	ecx, edx
	mov	edx, DWORD PTR _CurrentPosition$[esp+332]
	add	ecx, eax
	mov	DWORD PTR [edi+12], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+324]
	lea	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR $T141325[esp+324]
	lea	ecx, DWORD PTR $T141254[esp+324]
	mov	DWORD PTR $T141254[esp+324], eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, ebp
	mov	DWORD PTR [edi+28], eax
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, ebp
	mov	edi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	edi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	inc	DWORD PTR [esi+19684]
	mov	ecx, DWORD PTR _t$[esp+320]
	test	ecx, ecx
	je	SHORT $L141243
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _CurrentTextureInfo$141238[esp+324]
	call	DWORD PTR [eax+76]
	jmp	$L141233
$L141243:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L141233
$L141235:
	push	0
	lea	edi, DWORD PTR [esi+675236]
	push	1
	mov	ecx, edi
	call	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]
	mov	ecx, DWORD PTR _PreviousPosition$[esp+324]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _PreviousPosition$[esp+328]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _PreviousPosition$[esp+332]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+324]
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _CurrentPosition$[esp+332]
	mov	DWORD PTR [edx+4], ebx
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR _BeamStartWidth$[esp+320]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR $T141324[esp+324]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR $T141325[esp+324]
	mov	DWORD PTR [eax+32], edx
$L141233:

; 2903 : 
; 2904 : 			PreviousPosition=CurrentPosition;

	mov	eax, DWORD PTR _CurrentPosition$[esp+324]
	mov	ecx, DWORD PTR _CurrentPosition$[esp+332]

; 2905 : 			PreviousColor=CurrentColor;

	mov	edi, DWORD PTR _CurrentColor$[esp+324]
	mov	DWORD PTR _PreviousPosition$[esp+324], eax
	mov	eax, DWORD PTR _i$[esp+324]
	mov	DWORD PTR _PreviousPosition$[esp+332], ecx
	mov	ecx, DWORD PTR _LineSegments$[esp+324]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _PreviousPosition$[esp+328], ebx
	mov	DWORD PTR _i$[esp+324], eax
	jl	$L141333
$L125865:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 2906 : 		}
; 2907 : 	}

	add	esp, 308				; 00000134H
	ret	96					; 00000060H
?DoubleSineWave@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@333HM@Z ENDP ; UD3DRenderDevice::DoubleSineWave
_TEXT	ENDS
PUBLIC	__real@41000000
PUBLIC	?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z	; UD3DRenderDevice::SamplePoint
;	COMDAT __real@41000000
; File ..\..\Core\Inc\UnFile.h
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z
_TEXT	SEGMENT
_x$ = -4
_MaxAmplitude$ = 12
_MaxFrequency$ = 16
_TimeSeconds$ = 24
?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z PROC NEAR	; UD3DRenderDevice::SamplePoint, COMDAT
; _this$ = ecx
; _x$ = edx

; 2910 : 	{

	push	ecx

; 2911 : 		VALIDATE;
; 2912 : 
; 2913 : 		FLOAT value=0;
; 2914 : 		
; 2915 : 		MaxFrequency*=8;

	fld	DWORD PTR _MaxFrequency$[esp]
	mov	DWORD PTR _x$[esp+4], edx
	fmul	DWORD PTR __real@41000000

; 2916 : 		value+=appSin(TimeSeconds*8+x*MaxFrequency)*MaxAmplitude;
; 2917 : 		
; 2918 : 		return value;

	fimul	DWORD PTR _x$[esp+4]
	fld	DWORD PTR _TimeSeconds$[esp]
	fmul	DWORD PTR __real@41000000
	faddp	ST(1), ST(0)
	fsin
	fmul	DWORD PTR _MaxAmplitude$[esp]

; 2919 : 	}

	pop	ecx
	ret	20					; 00000014H
?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z ENDP	; UD3DRenderDevice::SamplePoint
_TEXT	ENDS
PUBLIC	?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z ; UD3DRenderDevice::MovingGrid
PUBLIC	?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ; UD3DRenderDevice::QueuedParticleAlloc
PUBLIC	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
; Function compile flags: /Ogty
;	COMDAT ?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z
_TEXT	SEGMENT
$T141349 = -248
$T141350 = -140
$T141351 = -280
_c$ = -344
_t$ = 8
_BeamColor$ = 12
_BeamEndColor$ = 16
_BeamStartWidth$ = 20
_BeamEndWidth$ = 24
_PolyFlags$ = 28
_MaxAmplitude$ = 32
_MaxFrequency$ = 36
_Noise$ = 40
_TimeSeconds$ = 44
_LineStart$ = 48
_LineEnd$ = 60
_Tesselation$ = 72
_CurrentTextureInfo$141617 = -128
$T141624 = -468
$T141626 = -468
$T141628 = -340
$T141630 = -328
$T141632 = -152
$T141634 = -212
$T141636 = -304
_dwDiffuseEnd$141637 = -468
$T141638 = -164
_UpVector$141639 = -480
$T141640 = -188
$T141641 = -296
$T141642 = -236
$T141643 = -224
$T141644 = -268
$T141645 = -200
$T141646 = -176
$T141647 = -288
$T141696 = -468
$T141699 = -368
$T141700 = -400
_AxisZ$ = -424
_LengthIncrement$ = -484
_AxisX$ = -436
_AxisY$ = -412
_AxisXIncrement$ = -356
_AxisYIncrement$ = -384
_x$ = -484
_CurrentLocation$125899 = -448
_y$125904 = -464
_A$125908 = -460
_B$125910 = -396
_B$125913 = -260
?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z PROC NEAR ; UD3DRenderDevice::MovingGrid, COMDAT
; _this$ = ecx
; _c$ = edx

; 2922 : 	{

	sub	esp, 484				; 000001e4H

; 2923 : 		VALIDATE;
; 2924 : 
; 2925 : 		FVector AxisZ=LineEnd-LineStart;

	fld	DWORD PTR _LineEnd$[esp+480]
	push	ebx
	fsub	DWORD PTR _LineStart$[esp+484]
	push	ebp
	push	esi
	push	edi
	fstp	DWORD PTR _AxisZ$[esp+500]
	fld	DWORD PTR _LineEnd$[esp+500]
	mov	DWORD PTR _c$[esp+500], edx
	fsub	DWORD PTR _LineStart$[esp+500]
	mov	ebx, ecx
	fstp	DWORD PTR _AxisZ$[esp+504]
	fld	DWORD PTR _LineEnd$[esp+504]
	fsub	DWORD PTR _LineStart$[esp+504]
	fst	DWORD PTR _AxisZ$[esp+508]

; 2926 : 		FLOAT Length=AxisZ.Size();

	fmul	DWORD PTR _AxisZ$[esp+508]
	fld	DWORD PTR _AxisZ$[esp+504]
	fmul	DWORD PTR _AxisZ$[esp+504]

; 2927 : 		FLOAT LengthIncrement=Length/Tesselation;
; 2928 : 		AxisZ.Normalize();
; 2929 : 
; 2930 : 		FVector AxisX, AxisY;
; 2931 : 		AxisZ.FindBestAxisVectors( AxisX, AxisY );
; 2932 : 		AxisX.Normalize();
; 2933 : 		AxisY.Normalize();
; 2934 : 
; 2935 : 		FVector AxisXIncrement=AxisX*LengthIncrement;
; 2936 : 		FVector AxisYIncrement=AxisY*LengthIncrement;
; 2937 : 		for(INT x=0;x<Tesselation;x++)

	faddp	ST(1), ST(0)
	fld	DWORD PTR _AxisZ$[esp+500]
	fmul	DWORD PTR _AxisZ$[esp+500]
	faddp	ST(1), ST(0)
	fild	DWORD PTR _Tesselation$[esp+496]
	fstp	DWORD PTR -464+[esp+500]
	fld	ST(0)
	fsqrt
	fdiv	DWORD PTR -464+[esp+500]
	fstp	DWORD PTR _LengthIncrement$[esp+500]
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L141714
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _AxisZ$[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisZ$[esp+500]
	fld	DWORD PTR _AxisZ$[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisZ$[esp+504]
	fld	DWORD PTR _AxisZ$[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisZ$[esp+508]
$L141714:
	lea	eax, DWORD PTR _AxisY$[esp+500]
	fstp	ST(0)
	push	eax
	lea	ecx, DWORD PTR _AxisX$[esp+504]
	push	ecx
	lea	ecx, DWORD PTR _AxisZ$[esp+508]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _AxisX$[esp+508]
	fmul	DWORD PTR _AxisX$[esp+508]
	fld	DWORD PTR _AxisX$[esp+504]
	fmul	DWORD PTR _AxisX$[esp+504]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _AxisX$[esp+500]
	fmul	DWORD PTR _AxisX$[esp+500]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L141711
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _AxisX$[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisX$[esp+500]
	fld	DWORD PTR _AxisX$[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisX$[esp+504]
	fld	DWORD PTR _AxisX$[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisX$[esp+508]
$L141711:
	fstp	ST(0)
	fld	DWORD PTR _AxisY$[esp+508]
	fmul	DWORD PTR _AxisY$[esp+508]
	fld	DWORD PTR _AxisY$[esp+504]
	fmul	DWORD PTR _AxisY$[esp+504]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _AxisY$[esp+500]
	fmul	DWORD PTR _AxisY$[esp+500]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L141713
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _AxisY$[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisY$[esp+500]
	fld	DWORD PTR _AxisY$[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisY$[esp+504]
	fld	DWORD PTR _AxisY$[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _AxisY$[esp+508]
$L141713:
	fstp	ST(0)
	mov	edi, DWORD PTR _Tesselation$[esp+496]
	fld	DWORD PTR _AxisX$[esp+500]
	xor	esi, esi
	test	edi, edi
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisXIncrement$[esp+500]
	fld	DWORD PTR _AxisX$[esp+504]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisXIncrement$[esp+504]
	fld	DWORD PTR _AxisX$[esp+508]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisXIncrement$[esp+508]
	fld	DWORD PTR _AxisY$[esp+500]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisYIncrement$[esp+500]
	fld	DWORD PTR _AxisY$[esp+504]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	fstp	DWORD PTR _AxisYIncrement$[esp+504]
	fld	DWORD PTR _AxisY$[esp+508]
	fmul	DWORD PTR _LengthIncrement$[esp+500]
	mov	DWORD PTR _x$[esp+500], esi
	fstp	DWORD PTR _AxisYIncrement$[esp+508]
	jle	$L125898
	fld	DWORD PTR -464+[esp+500]
	dec	edi
	fmul	DWORD PTR __real@3f000000
	fst	DWORD PTR -360+[esp+500]

; 2938 : 		{
; 2939 : 			FVector CurrentLocation=LineStart+(AxisXIncrement*(x-Tesselation/2.0f))-(AxisYIncrement*(Tesselation/2.0f));

	fld	DWORD PTR _AxisYIncrement$[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T141351[esp+500]
	fld	DWORD PTR _AxisYIncrement$[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T141351[esp+504]
	fld	DWORD PTR _AxisYIncrement$[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR $T141351[esp+508]
	fstp	ST(0)
	fld	DWORD PTR _MaxFrequency$[esp+496]
	fmul	DWORD PTR __real@41000000
	fstp	DWORD PTR -364+[esp+500]
	fld	DWORD PTR _TimeSeconds$[esp+496]
	fmul	DWORD PTR __real@41000000
	fstp	DWORD PTR -372+[esp+500]
	fld	DWORD PTR _MaxAmplitude$[esp+496]
	fstp	QWORD PTR -312+[esp+500]

; 2959 : 			}
; 2960 : 		}
; 2961 : 	}

	npad	6

; 2938 : 		{
; 2939 : 			FVector CurrentLocation=LineStart+(AxisXIncrement*(x-Tesselation/2.0f))-(AxisYIncrement*(Tesselation/2.0f));

$L125896:
	fild	DWORD PTR _x$[esp+500]

; 2940 : 			for(INT y=0;y<Tesselation;y++)

	mov	DWORD PTR _y$125904[esp+500], 0
	fld	DWORD PTR -360+[esp+500]
	fsubr	ST(0), ST(1)
	fld	DWORD PTR _AxisXIncrement$[esp+500]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _AxisXIncrement$[esp+504]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T141349[esp+504]
	fld	DWORD PTR _AxisXIncrement$[esp+508]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T141349[esp+508]
	fadd	DWORD PTR _LineStart$[esp+496]
	fstp	ST(1)
	fld	DWORD PTR $T141349[esp+504]
	fadd	DWORD PTR _LineStart$[esp+500]
	fld	DWORD PTR $T141349[esp+508]
	fadd	DWORD PTR _LineStart$[esp+504]
	fstp	DWORD PTR $T141350[esp+508]
	fxch	ST(1)
	fsub	DWORD PTR $T141351[esp+500]
	fstp	DWORD PTR _CurrentLocation$125899[esp+500]
	fsub	DWORD PTR $T141351[esp+504]
	fstp	DWORD PTR _CurrentLocation$125899[esp+504]
	fld	DWORD PTR $T141350[esp+508]
	fsub	DWORD PTR $T141351[esp+508]
	fstp	DWORD PTR _CurrentLocation$125899[esp+508]
	fld	DWORD PTR -364+[esp+500]
	fmul	ST(0), ST(1)
	fadd	DWORD PTR -372+[esp+500]

; 2941 : 			{
; 2942 : 				FVector A=CurrentLocation;
; 2943 : 				A.Z+=SamplePoint(x,y,MaxAmplitude, MaxFrequency, Noise, TimeSeconds);

	fsin
	fmul	QWORD PTR -312+[esp+500]
	fstp	DWORD PTR -316+[esp+500]

; 2944 : 
; 2945 : 				// Connect this point to it's four neighbors:
; 2946 : 				if(x!=Tesselation-1) 
; 2947 : 				{
; 2948 : 					FVector B=CurrentLocation+AxisXIncrement;
; 2949 : 					B.Z+=SamplePoint(x+1,y,MaxAmplitude, MaxFrequency, Noise,TimeSeconds);
; 2950 : 					dnDraw3DLine(c->Frame,t,PolyFlags,A,B,BeamStartWidth,BeamEndWidth,BeamColor,BeamEndColor);

	fstp	ST(0)
$L125905:
	cmp	esi, edi
	fld	DWORD PTR _CurrentLocation$125899[esp+508]
	fadd	DWORD PTR -316+[esp+500]
	mov	ecx, DWORD PTR _CurrentLocation$125899[esp+508]
	mov	edx, DWORD PTR _CurrentLocation$125899[esp+500]
	mov	eax, DWORD PTR _CurrentLocation$125899[esp+504]
	mov	DWORD PTR _A$125908[esp+508], ecx
	fstp	DWORD PTR _A$125908[esp+508]
	mov	DWORD PTR _A$125908[esp+500], edx
	mov	DWORD PTR _A$125908[esp+504], eax
	je	$L141716
	fld	DWORD PTR _CurrentLocation$125899[esp+500]
	lea	edx, DWORD PTR [esi+1]
	fadd	DWORD PTR _AxisXIncrement$[esp+500]
	mov	DWORD PTR -400+[esp+500], edx
	mov	eax, DWORD PTR _BeamEndColor$[esp+496]
	mov	edx, DWORD PTR _c$[esp+500]
	fstp	DWORD PTR _B$125910[esp+500]
	fld	DWORD PTR _CurrentLocation$125899[esp+504]
	mov	ecx, DWORD PTR _BeamColor$[esp+496]
	fadd	DWORD PTR _AxisXIncrement$[esp+504]
	mov	DWORD PTR $T141699[esp+500], ecx
	fstp	DWORD PTR _B$125910[esp+504]
	fld	DWORD PTR _MaxAmplitude$[esp+496]
	fstp	QWORD PTR -312+[esp+500]
	fild	DWORD PTR -400+[esp+500]
	mov	DWORD PTR $T141700[esp+500], eax
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR $T141696[esp+500], eax
	fmul	DWORD PTR -364+[esp+500]
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	fadd	DWORD PTR -372+[esp+500]
	fsin
	fmul	QWORD PTR -312+[esp+500]
	fld	DWORD PTR _CurrentLocation$125899[esp+508]
	fadd	DWORD PTR _AxisXIncrement$[esp+508]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _B$125910[esp+508]
	je	$L141716
	fld	DWORD PTR _BeamStartWidth$[esp+496]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L141614
	fld	DWORD PTR _BeamEndWidth$[esp+496]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L141614
	mov	ebp, DWORD PTR _t$[esp+496]
	test	ebp, ebp
	mov	esi, 2
	je	SHORT $L141616
	mov	esi, DWORD PTR [ebp+196]
	or	esi, 2
$L141616:
	mov	edi, DWORD PTR _PolyFlags$[esp+496]
	push	esi
	mov	edx, edi
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	0
	mov	ecx, ebx
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
	test	ebp, ebp
	je	SHORT $L141618
	mov	ecx, DWORD PTR $T141696[esp+500]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	ebx
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$141617[esp+516]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]
	push	0
	push	esi
	push	0
	push	edi
	lea	eax, DWORD PTR _CurrentTextureInfo$141617[esp+516]
	push	eax
	xor	edx, edx
	mov	ecx, ebx
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L141619
$L141618:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L141619:
	push	-1
	lea	edi, DWORD PTR [ebx+16720]
	push	2
	mov	ecx, edi
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	ecx, DWORD PTR _A$125908[esp+500]
	mov	edx, DWORD PTR _A$125908[esp+504]
	mov	esi, eax
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _A$125908[esp+508]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T141699[esp+500]
	lea	ecx, DWORD PTR $T141624[esp+500]
	mov	DWORD PTR $T141624[esp+500], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, DWORD PTR _B$125910[esp+500]
	mov	edx, DWORD PTR _B$125910[esp+504]
	mov	DWORD PTR [esi+12], eax
	lea	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _B$125910[esp+508]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T141700[esp+500]
	lea	ecx, DWORD PTR $T141626[esp+500]
	mov	DWORD PTR $T141626[esp+500], edx
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	mov	ecx, edi
	mov	DWORD PTR [esi+28], eax
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, edi
	mov	esi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	esi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ecx, DWORD PTR [ebx+19684]
	inc	ecx
	test	ebp, ebp
	mov	DWORD PTR [ebx+19684], ecx
	je	SHORT $L141623
	mov	eax, DWORD PTR [ebp]
	lea	edx, DWORD PTR _CurrentTextureInfo$141617[esp+500]
	mov	ecx, ebp
	call	DWORD PTR [eax+76]
	mov	esi, DWORD PTR _x$[esp+500]
	jmp	$L141612
$L141623:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	esi, DWORD PTR _x$[esp+500]
	jmp	$L141612
$L141614:
	mov	eax, DWORD PTR _t$[esp+496]
	push	eax
	mov	ecx, ebx
	call	?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ; UD3DRenderDevice::QueuedParticleAlloc
	lea	ecx, DWORD PTR $T141699[esp+500]
	mov	ebp, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	lea	ecx, DWORD PTR $T141700[esp+500]
	mov	esi, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	fld	DWORD PTR _B$125910[esp+508]
	fsub	DWORD PTR [ebx+184]
	sub	esp, 12					; 0000000cH
	mov	edi, eax
	lea	ecx, DWORD PTR $T141630[esp+512]
	fstp	DWORD PTR [esp+8]
	mov	DWORD PTR _dwDiffuseEnd$141637[esp+512], edi
	fld	DWORD PTR _B$125910[esp+516]
	fsub	DWORD PTR [ebx+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _B$125910[esp+512]
	fsub	DWORD PTR [ebx+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _A$125908[esp+508]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR [ebx+184]
	lea	ecx, DWORD PTR $T141628[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _A$125908[esp+516]
	fsub	DWORD PTR [ebx+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _A$125908[esp+512]
	fsub	DWORD PTR [ebx+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T141630[esp+504]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR $T141628[esp+512]
	lea	ecx, DWORD PTR _UpVector$141639[esp+512]
	fld	DWORD PTR $T141628[esp+516]
	fmul	DWORD PTR $T141630[esp+512]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141628[esp+520]
	fmul	DWORD PTR $T141630[esp+512]
	fld	DWORD PTR $T141630[esp+520]
	fmul	DWORD PTR $T141628[esp+512]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T141630[esp+520]
	fmul	DWORD PTR $T141628[esp+516]
	fld	DWORD PTR $T141630[esp+516]
	fmul	DWORD PTR $T141628[esp+520]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _UpVector$141639[esp+500]
	fmul	DWORD PTR _UpVector$141639[esp+500]
	fld	DWORD PTR _UpVector$141639[esp+504]
	fmul	DWORD PTR _UpVector$141639[esp+504]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _UpVector$141639[esp+508]
	fmul	DWORD PTR _UpVector$141639[esp+508]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L141712
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _UpVector$141639[esp+500]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$141639[esp+500]
	fld	DWORD PTR _UpVector$141639[esp+504]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$141639[esp+504]
	fld	DWORD PTR _UpVector$141639[esp+508]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$141639[esp+508]
$L141712:
	fstp	ST(0)
	sub	esp, 12					; 0000000cH
	fld	DWORD PTR _UpVector$141639[esp+520]
	lea	ecx, DWORD PTR $T141632[esp+512]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$141639[esp+516]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$141639[esp+512]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T141632[esp+508]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR _A$125908[esp+520]
	lea	ecx, DWORD PTR $T141634[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _A$125908[esp+516]
	fadd	DWORD PTR $T141632[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _A$125908[esp+512]
	fadd	DWORD PTR $T141632[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T141634[esp+500]
	mov	eax, DWORD PTR $T141634[esp+504]
	mov	ecx, ebp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T141634[esp+508]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ebp+12], esi
	mov	DWORD PTR $T141636[esp+500], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T141636[esp+500]
	mov	DWORD PTR $T141636[esp+504], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T141636[esp+504]
	mov	DWORD PTR [ebp+20], ecx
	mov	DWORD PTR [ebp+16], eax
	fld	DWORD PTR _UpVector$141639[esp+508]
	fmul	DWORD PTR _BeamStartWidth$[esp+496]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T141638[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$141639[esp+516]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$141639[esp+512]
	fmul	DWORD PTR _BeamStartWidth$[esp+508]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _A$125908[esp+508]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T141638[esp+520]
	lea	ecx, DWORD PTR $T141640[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _A$125908[esp+516]
	fsub	DWORD PTR $T141638[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _A$125908[esp+512]
	fsub	DWORD PTR $T141638[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	eax, DWORD PTR $T141640[esp+500]
	mov	ecx, DWORD PTR $T141640[esp+504]
	lea	edx, DWORD PTR [ebp+24]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T141640[esp+508]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR $T141641[esp+500], 0
	mov	ecx, DWORD PTR $T141641[esp+500]
	mov	DWORD PTR $T141641[esp+504], 1065353216	; 3f800000H
	mov	edx, DWORD PTR $T141641[esp+504]
	mov	DWORD PTR [ebp+36], esi
	mov	DWORD PTR [ebp+40], ecx
	mov	DWORD PTR [ebp+44], edx
	fld	DWORD PTR _UpVector$141639[esp+508]
	fmul	DWORD PTR _BeamEndWidth$[esp+496]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$141639[esp+516]
	lea	ecx, DWORD PTR $T141642[esp+512]
	fmul	DWORD PTR _BeamEndWidth$[esp+508]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$141639[esp+512]
	fmul	DWORD PTR _BeamEndWidth$[esp+508]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _B$125910[esp+508]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T141642[esp+520]
	lea	ecx, DWORD PTR $T141643[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _B$125910[esp+516]
	fsub	DWORD PTR $T141642[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _B$125910[esp+512]
	fsub	DWORD PTR $T141642[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	ecx, DWORD PTR $T141643[esp+500]
	mov	edx, DWORD PTR $T141643[esp+504]
	lea	esi, DWORD PTR [ebp+48]
	mov	eax, esi
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T141643[esp+508]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [ebp+60], edi
	mov	DWORD PTR $T141644[esp+500], 0
	mov	edx, DWORD PTR $T141644[esp+500]
	mov	DWORD PTR [ebp+64], edx
	mov	DWORD PTR $T141644[esp+504], 0
	mov	eax, DWORD PTR $T141644[esp+504]
	mov	DWORD PTR [ebp+68], eax
	lea	edi, DWORD PTR [ebp+72]
	mov	ecx, 6
	rep movsd
	fld	DWORD PTR _UpVector$141639[esp+508]
	fmul	DWORD PTR _BeamEndWidth$[esp+496]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T141645[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$141639[esp+516]
	fmul	DWORD PTR _BeamEndWidth$[esp+508]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$141639[esp+512]
	fmul	DWORD PTR _BeamEndWidth$[esp+508]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T141645[esp+508]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR _B$125910[esp+520]
	lea	ecx, DWORD PTR $T141646[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141645[esp+516]
	fadd	DWORD PTR _B$125910[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T141645[esp+512]
	fadd	DWORD PTR _B$125910[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T141646[esp+500]
	mov	eax, DWORD PTR $T141646[esp+504]
	lea	ecx, DWORD PTR [ebp+96]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T141646[esp+508]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _dwDiffuseEnd$141637[esp+500]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR $T141647[esp+500], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T141647[esp+500]
	mov	DWORD PTR [ebp+112], ecx
	mov	DWORD PTR $T141647[esp+504], 0
	mov	edx, DWORD PTR $T141647[esp+504]
	lea	edi, DWORD PTR [ebp+120]
	mov	ecx, 6
	mov	esi, ebp
	mov	DWORD PTR [ebp+108], eax
	mov	DWORD PTR [ebp+116], edx
	rep movsd
	mov	esi, DWORD PTR _x$[esp+500]
$L141716:
	mov	ebp, DWORD PTR _t$[esp+496]
$L141612:

; 2951 : 				}
; 2952 : 				if(y!=Tesselation-1) 

	mov	eax, DWORD PTR _Tesselation$[esp+496]
	lea	edi, DWORD PTR [eax-1]
	cmp	DWORD PTR _y$125904[esp+500], edi
	je	$L125912

; 2953 : 				{
; 2954 : 					FVector B=CurrentLocation+AxisYIncrement;

	fld	DWORD PTR _CurrentLocation$125899[esp+508]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR _AxisYIncrement$[esp+520]
	lea	ecx, DWORD PTR _B$125913[esp+512]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _CurrentLocation$125899[esp+516]
	fadd	DWORD PTR _AxisYIncrement$[esp+516]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _CurrentLocation$125899[esp+512]
	fadd	DWORD PTR _AxisYIncrement$[esp+512]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 2955 : 					B.Z+=SamplePoint(x,y+1,MaxAmplitude, MaxFrequency, Noise,TimeSeconds);

	mov	ecx, DWORD PTR _TimeSeconds$[esp+496]
	mov	edx, DWORD PTR _Noise$[esp+496]
	mov	eax, DWORD PTR _MaxFrequency$[esp+496]
	push	ecx
	mov	ecx, DWORD PTR _MaxAmplitude$[esp+500]
	push	edx
	mov	edx, DWORD PTR _y$125904[esp+508]
	push	eax
	push	ecx
	inc	edx
	push	edx
	mov	edx, esi
	mov	ecx, ebx
	call	?SamplePoint@UD3DRenderDevice@@QAIMHHMMMM@Z ; UD3DRenderDevice::SamplePoint
	fadd	DWORD PTR _B$125913[esp+508]

; 2956 : 					dnDraw3DLine(c->Frame,t,PolyFlags,A,B,BeamStartWidth,BeamEndWidth,BeamColor,BeamEndColor);

	mov	eax, DWORD PTR _BeamEndColor$[esp+496]
	mov	ecx, DWORD PTR _BeamColor$[esp+496]
	mov	edx, DWORD PTR _BeamEndWidth$[esp+496]
	fstp	DWORD PTR _B$125913[esp+508]
	push	0
	push	eax
	mov	eax, DWORD PTR _BeamStartWidth$[esp+504]
	push	ecx
	push	edx
	mov	edx, DWORD PTR _B$125913[esp+516]
	push	eax
	mov	eax, DWORD PTR _B$125913[esp+524]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _B$125913[esp+540]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _A$125908[esp+532]
	mov	edx, DWORD PTR _A$125908[esp+536]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _A$125908[esp+552]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _PolyFlags$[esp+540]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _c$[esp+544]
	push	edx
	mov	edx, DWORD PTR [eax+124]
	push	ebp
	mov	ecx, ebx
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
$L125912:

; 2957 : 				}
; 2958 : 				CurrentLocation+=AxisYIncrement;

	fld	DWORD PTR _CurrentLocation$125899[esp+500]
	mov	eax, DWORD PTR _y$125904[esp+500]
	fadd	DWORD PTR _AxisYIncrement$[esp+500]
	mov	ecx, DWORD PTR _Tesselation$[esp+496]
	inc	eax
	cmp	eax, ecx
	fstp	DWORD PTR _CurrentLocation$125899[esp+500]
	mov	DWORD PTR _y$125904[esp+500], eax
	fld	DWORD PTR _CurrentLocation$125899[esp+504]
	fadd	DWORD PTR _AxisYIncrement$[esp+504]
	fstp	DWORD PTR _CurrentLocation$125899[esp+504]
	fld	DWORD PTR _CurrentLocation$125899[esp+508]
	fadd	DWORD PTR _AxisYIncrement$[esp+508]
	fstp	DWORD PTR _CurrentLocation$125899[esp+508]
	jl	$L125905
	inc	esi
	cmp	esi, ecx
	mov	DWORD PTR _x$[esp+500], esi
	jl	$L125896
$L125898:

; 2959 : 			}
; 2960 : 		}
; 2961 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 484				; 000001e4H
	ret	68					; 00000044H
?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z ENDP ; UD3DRenderDevice::MovingGrid
_TEXT	ENDS
PUBLIC	?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z ; UD3DRenderDevice::DrawSpline
PUBLIC	__real@40400000
PUBLIC	__real@40a00000
PUBLIC	__real@40800000
PUBLIC	??D@YA?AVFRotator@@MABV0@@Z			; operator*
EXTRN	__imp_??0FRotator@@QAE@HHH@Z:NEAR
EXTRN	__imp_??HFRotator@@QBE?AV0@ABV0@@Z:NEAR
;	COMDAT __real@40400000
; File ..\..\Core\Inc\UnMath.h
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z
_TEXT	SEGMENT
_c$ = 8
_t$ = 12
_opt1$141781 = -292
_opt2$141782 = -288
_opt3$141783 = -296
_opt4$141784 = -284
$T141786 = -120
$T141787 = -132
$T141788 = -168
$T141789 = -144
$T141790 = -180
$T141791 = -156
$T141792 = -108
$T141793 = -192
$T141794 = -60
$T141795 = -84
$T141796 = -36
$T141797 = -72
$T141798 = -24
$T141799 = -96
$T141800 = -48
$T141801 = -12
_this$ = -208
_PreviousLocation$ = -244
_Bogus$ = -272
_LastPoint$ = -260
_CurrentLocation$125933 = -232
_NextLocation$125936 = -220
_NextLocation1$125938 = -204
_j$125939 = -300
?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z PROC NEAR ; UD3DRenderDevice::DrawSpline, COMDAT
; _this$ = ecx
; _System$ = edx

; 2964 : 	{

	sub	esp, 304				; 00000130H
	push	ebx
	push	ebp
	push	esi
	mov	esi, edx

; 2965 : 		VALIDATE;
; 2966 : 		// Ensure that the beam is tesselated:
; 2967 : 		if(System.TesselationLevel<=0)  return;

	mov	eax, DWORD PTR [esi+1600]
	xor	ebp, ebp
	cmp	eax, ebp
	push	edi
	mov	DWORD PTR _this$[esp+320], ecx
	jle	$L125932

; 2968 : 		if(System.ControlPointCount<=0) return;

	cmp	DWORD PTR [esi+2208], ebp
	jle	$L125932

; 2969 : 
; 2970 : 		int i;
; 2971 : 
; 2972 : 		// Update the positions of the control points based on their actor's positions (if any):
; 2973 : 		for(i=0;i<ARRAY_COUNT(System.ControlPoint);i++)

	lea	eax, DWORD PTR [esi+1708]
	mov	edx, 32					; 00000020H
$L125921:

; 2974 : 			if(System.ControlPoint[i].PositionActor)

	mov	ecx, DWORD PTR [eax]
	cmp	ecx, ebp
	je	SHORT $L125922

; 2975 : 				System.ControlPoint[i].Position=System.ControlPoint[i].PositionActor->Location;

	add	ecx, 364				; 0000016cH
	mov	ebx, DWORD PTR [ecx]
	lea	edi, DWORD PTR [eax-12]
	mov	DWORD PTR [edi], ebx
	mov	ebx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], ebx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], ecx
$L125922:
	add	eax, 16					; 00000010H
	dec	edx
	jne	SHORT $L125921

; 2976 : 
; 2977 : 
; 2978 : 		FVector PreviousLocation=System.ControlPoint[0].Position;

	lea	ebx, DWORD PTR [esi+1696]
	mov	edx, ebx
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _PreviousLocation$[esp+320], eax
	mov	DWORD PTR _PreviousLocation$[esp+324], ecx

; 2979 : 		FRotator Bogus=FRotator(0,0,0);
; 2980 : 		FVector LastPoint=PreviousLocation;

	mov	eax, ebx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _LastPoint$[esp+320], ecx

; 2981 : 		FVector NewLastPoint=PreviousLocation;
; 2982 : 
; 2983 : 		for(i=0;i<System.ControlPointCount-1;i++)

	mov	ecx, DWORD PTR [esi+2208]
	mov	DWORD PTR _PreviousLocation$[esp+328], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	lea	edi, DWORD PTR [ecx-1]
	cmp	edi, ebp
	mov	DWORD PTR _Bogus$[esp+320], ebp
	mov	DWORD PTR _Bogus$[esp+324], ebp
	mov	DWORD PTR _Bogus$[esp+328], ebp
	mov	DWORD PTR _LastPoint$[esp+324], edx
	mov	DWORD PTR _LastPoint$[esp+328], eax
	jle	$L125932
	mov	eax, DWORD PTR [esi+1600]
	mov	edx, 1
	mov	DWORD PTR -304+[esp+320], eax
	mov	DWORD PTR -276+[esp+320], edx
	mov	DWORD PTR -248+[esp+320], ebx
$L125930:

; 2984 : 		{
; 2985 : 
; 2986 : 			FVector CurrentLocation=System.ControlPoint[i].Position;
; 2987 : 			int k=i+1;
; 2988 : 			if(k>=System.ControlPointCount) k=System.ControlPointCount-1;

	cmp	edx, ecx
	mov	ebp, DWORD PTR [ebx]
	mov	DWORD PTR _CurrentLocation$125933[esp+320], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx+8]
	mov	DWORD PTR _CurrentLocation$125933[esp+324], ebp
	mov	DWORD PTR _CurrentLocation$125933[esp+328], ebx
	jl	SHORT $L125935
	mov	edx, edi
$L125935:

; 2989 : 			FVector NextLocation=System.ControlPoint[k].Position;

	lea	ebx, DWORD PTR [edx+106]
	shl	ebx, 4
	add	ebx, esi
	mov	ebp, DWORD PTR [ebx]
	mov	DWORD PTR _NextLocation$125936[esp+320], ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR [ebx+8]

; 2990 : 			k++;

	inc	edx

; 2991 : 			if(k>=System.ControlPointCount) k=System.ControlPointCount-1;

	cmp	edx, ecx
	mov	DWORD PTR _NextLocation$125936[esp+324], ebp
	mov	DWORD PTR _NextLocation$125936[esp+328], ebx
	jl	SHORT $L125937
	mov	edx, edi
$L125937:

; 2992 : 			FVector NextLocation1=System.ControlPoint[k].Position;

	add	edx, 106				; 0000006aH
	shl	edx, 4
	add	edx, esi
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR _NextLocation1$125938[esp+320], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]

; 2993 : 
; 2994 : 			for(int j=0;j<System.TesselationLevel;j++)

	xor	edi, edi
	test	eax, eax
	mov	DWORD PTR _NextLocation1$125938[esp+324], ecx
	mov	DWORD PTR _NextLocation1$125938[esp+328], edx
	mov	DWORD PTR _j$125939[esp+320], edi
	jle	$L141848

; 3009 : 		}
; 3010 : 	}

	npad	7
$L125940:

; 2995 : 			{
; 2996 : 				KRSpline_Sample(((float)j/(float)System.TesselationLevel),
; 2997 : 								 NewLastPoint,    Bogus,
; 2998 :   								 PreviousLocation,Bogus,
; 2999 : 								 CurrentLocation, Bogus,
; 3000 : 								 NextLocation,	  Bogus,
; 3001 : 								 NextLocation1,	  Bogus);

	fild	DWORD PTR _j$125939[esp+320]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T141791[esp+332]
	fidiv	DWORD PTR -304+[esp+332]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	ST(0)
	fmul	ST(0), ST(2)
	fld	ST(1)
	fadd	ST(0), ST(0)
	fsub	ST(0), ST(1)
	fsub	ST(0), ST(3)
	fstp	DWORD PTR _opt1$141781[esp+332]
	fld	DWORD PTR __real@40400000
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	DWORD PTR __real@40a00000
	fsubr	ST(0), ST(1)
	fadd	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _opt2$141782[esp+332]
	fld	ST(2)
	fmul	DWORD PTR __real@40800000
	fsub	ST(0), ST(1)
	fadd	ST(0), ST(4)
	fstp	DWORD PTR _opt3$141783[esp+332]
	fstp	ST(0)
	fsub	ST(0), ST(1)
	fstp	DWORD PTR _opt4$141784[esp+332]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR _NextLocation1$125938[esp+340]
	fmul	DWORD PTR _opt4$141784[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation1$125938[esp+336]
	fmul	DWORD PTR _opt4$141784[esp+332]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _NextLocation1$125938[esp+332]
	fmul	DWORD PTR _opt4$141784[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _NextLocation$125936[esp+328]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR _opt3$141783[esp+332]
	lea	ecx, DWORD PTR $T141789[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation$125936[esp+336]
	fmul	DWORD PTR _opt3$141783[esp+332]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _NextLocation$125936[esp+332]
	fmul	DWORD PTR _opt3$141783[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _CurrentLocation$125933[esp+328]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR _opt2$141782[esp+332]
	lea	ecx, DWORD PTR $T141787[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _CurrentLocation$125933[esp+336]
	fmul	DWORD PTR _opt2$141782[esp+332]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _CurrentLocation$125933[esp+332]
	fmul	DWORD PTR _opt2$141782[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _PreviousLocation$[esp+328]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR _opt1$141781[esp+332]
	lea	ecx, DWORD PTR $T141786[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _PreviousLocation$[esp+336]
	fmul	DWORD PTR _opt1$141781[esp+332]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _PreviousLocation$[esp+332]
	fmul	DWORD PTR _opt1$141781[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T141787[esp+328]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T141786[esp+340]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141786[esp+336]
	lea	ecx, DWORD PTR $T141788[esp+332]
	fadd	DWORD PTR $T141787[esp+336]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T141787[esp+332]
	fadd	DWORD PTR $T141786[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T141789[esp+328]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T141788[esp+340]
	lea	ecx, DWORD PTR $T141790[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141789[esp+336]
	fadd	DWORD PTR $T141788[esp+336]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T141789[esp+332]
	fadd	DWORD PTR $T141788[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T141791[esp+328]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T141790[esp+340]
	lea	ecx, DWORD PTR $T141792[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141791[esp+336]
	fadd	DWORD PTR $T141790[esp+336]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T141791[esp+332]
	fadd	DWORD PTR $T141790[esp+332]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T141792[esp+328]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR __real@3f000000
	lea	ecx, DWORD PTR $T141793[esp+332]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T141792[esp+336]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T141792[esp+332]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fild	DWORD PTR _Bogus$[esp+328]
	fstp	DWORD PTR -280+[esp+320]
	fild	DWORD PTR _Bogus$[esp+324]
	fstp	DWORD PTR -304+[esp+320]
	fild	DWORD PTR _Bogus$[esp+320]
	fstp	DWORD PTR -300+[esp+320]
	fld	DWORD PTR -280+[esp+320]
	fmul	DWORD PTR _opt4$141784[esp+320]
	call	__ftol
	fld	DWORD PTR -304+[esp+320]
	fmul	DWORD PTR _opt4$141784[esp+320]
	push	eax
	call	__ftol
	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _opt4$141784[esp+324]
	push	eax
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T141799[esp+332]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	fld	DWORD PTR -280+[esp+320]
	fmul	DWORD PTR _opt3$141783[esp+320]
	call	__ftol
	fld	DWORD PTR -304+[esp+320]
	fmul	DWORD PTR _opt3$141783[esp+320]
	push	eax
	call	__ftol
	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _opt3$141783[esp+324]
	push	eax
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T141797[esp+332]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	fld	DWORD PTR -280+[esp+320]
	fmul	DWORD PTR _opt2$141782[esp+320]
	call	__ftol
	fld	DWORD PTR -304+[esp+320]
	push	eax
	fmul	DWORD PTR _opt2$141782[esp+324]
	call	__ftol
	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _opt2$141782[esp+324]
	push	eax
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T141795[esp+332]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	fld	DWORD PTR -280+[esp+320]
	fmul	DWORD PTR _opt1$141781[esp+320]
	call	__ftol
	fld	DWORD PTR -304+[esp+320]
	fmul	DWORD PTR _opt1$141781[esp+320]
	push	eax
	call	__ftol
	fld	DWORD PTR -300+[esp+324]
	fmul	DWORD PTR _opt1$141781[esp+324]
	push	eax
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T141794[esp+332]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	lea	eax, DWORD PTR $T141799[esp+320]
	push	eax
	lea	ecx, DWORD PTR $T141800[esp+324]
	push	ecx
	lea	edx, DWORD PTR $T141797[esp+328]
	push	edx
	lea	eax, DWORD PTR $T141798[esp+332]
	push	eax
	lea	ecx, DWORD PTR $T141795[esp+336]
	push	ecx
	lea	edx, DWORD PTR $T141796[esp+340]
	push	edx
	lea	ecx, DWORD PTR $T141794[esp+344]
	call	DWORD PTR __imp_??HFRotator@@QBE?AV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??HFRotator@@QBE?AV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??HFRotator@@QBE?AV0@ABV0@@Z
	push	eax
	lea	eax, DWORD PTR $T141801[esp+324]
	push	1056964608				; 3f000000H
	push	eax
	call	??D@YA?AVFRotator@@MABV0@@Z		; operator*
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]

; 3002 : 
; 3003 : 				dnDraw3DLine(c->Frame,t, 0,LastPoint,NewLastPoint,System.BeamStartWidth,System.BeamEndWidth,System.BeamColor,System.BeamEndColor,true);

	mov	ebx, DWORD PTR $T141793[esp+332]
	mov	ebp, DWORD PTR $T141793[esp+336]
	add	esp, 12					; 0000000cH
	push	1
	mov	DWORD PTR _Bogus$[esp+324], ecx
	mov	ecx, DWORD PTR [esi+1620]
	push	ecx
	mov	ecx, DWORD PTR [esi+1604]
	mov	DWORD PTR _Bogus$[esp+332], edx
	mov	edx, DWORD PTR [esi+1616]
	push	edx
	mov	DWORD PTR _Bogus$[esp+340], eax
	mov	eax, DWORD PTR [esi+1608]
	push	eax
	mov	eax, DWORD PTR $T141793[esp+344]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], ebx
	mov	DWORD PTR [edx+4], ebp
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _LastPoint$[esp+352]
	mov	eax, DWORD PTR _LastPoint$[esp+356]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _LastPoint$[esp+372]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	push	0
	mov	ecx, DWORD PTR _c$[esp+364]
	mov	eax, DWORD PTR _t$[esp+364]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR _this$[esp+368]
	push	eax
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	mov	eax, DWORD PTR [esi+1600]

; 3004 : 
; 3005 : 				LastPoint=NewLastPoint;

	mov	edx, DWORD PTR $T141793[esp+328]
	inc	edi
	cmp	edi, eax
	mov	DWORD PTR _LastPoint$[esp+320], ebx
	mov	DWORD PTR _LastPoint$[esp+324], ebp
	mov	DWORD PTR _LastPoint$[esp+328], edx
	mov	DWORD PTR _j$125939[esp+320], edi
	mov	DWORD PTR -304+[esp+320], eax
	jl	$L125940
$L141848:

; 3006 : 			}
; 3007 : 		
; 3008 : 			PreviousLocation=System.ControlPoint[i].Position;

	mov	ebx, DWORD PTR -248+[esp+320]
	mov	edx, DWORD PTR -276+[esp+320]
	mov	ecx, ebx
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR _PreviousLocation$[esp+320], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+8]
	add	ebx, 16					; 00000010H
	inc	edx
	mov	DWORD PTR _PreviousLocation$[esp+328], ecx
	mov	ecx, DWORD PTR [esi+2208]
	mov	DWORD PTR _PreviousLocation$[esp+324], edi
	lea	edi, DWORD PTR [ecx-1]
	lea	ebp, DWORD PTR [edx-1]
	cmp	ebp, edi
	mov	DWORD PTR -248+[esp+320], ebx
	mov	DWORD PTR -276+[esp+320], edx
	jl	$L125930
$L125932:

; 3009 : 		}
; 3010 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 304				; 00000130H
	ret	72					; 00000048H
?DrawSpline@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAVUCanvas@@PAVUTexture@@VFColor@@3MMKMMMMVFVector@@4H@Z ENDP ; UD3DRenderDevice::DrawSpline
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnMath.h
_TEXT	ENDS
;	COMDAT ??D@YA?AVFRotator@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_Scale$ = 12
_R$ = 16
??D@YA?AVFRotator@@MABV0@@Z PROC NEAR			; operator*, COMDAT

; 1079 : 	{

	push	ebx
	push	esi

; 1080 : 		return FRotator( R.Pitch*Scale, R.Yaw*Scale, R.Roll*Scale );

	mov	esi, DWORD PTR _R$[esp+4]
	fild	DWORD PTR [esi+8]
	push	edi
	fmul	DWORD PTR _Scale$[esp+8]
	call	__ftol
	fild	DWORD PTR [esi+4]
	mov	edi, eax
	fmul	DWORD PTR _Scale$[esp+8]
	call	__ftol
	fild	DWORD PTR [esi]
	mov	ebx, eax
	fmul	DWORD PTR _Scale$[esp+8]
	call	__ftol
	mov	ecx, DWORD PTR ___$ReturnUdt$[esp+8]
	mov	DWORD PTR [ecx+8], edi
	pop	edi
	pop	esi
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], ebx
	mov	eax, ecx
	pop	ebx

; 1081 : 	}

	ret	0
??D@YA?AVFRotator@@MABV0@@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z ; KRSpline_Sample
PUBLIC	__real@41f0000000000000
PUBLIC	?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z ; UD3DRenderDevice::QueueParticleFlush
PUBLIC	?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z ; UD3DRenderDevice::QueuedLinesFlush
PUBLIC	??D@YA?AVFVector@@MABV0@@Z			; operator*
EXTRN	__imp_?GSecondsPerCycle@@3NA:QWORD
EXTRN	__imp_?appSecondsSlow@@YANXZ:NEAR
EXTRN	__imp__srand:NEAR
;	COMDAT __real@41f0000000000000
; File ..\..\Core\Inc\UnVcWin32.h
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT
$T142285 = -460
$T142286 = -232
$T142287 = -204
$T142288 = -208
$T142289 = -296
$T142290 = -192
$T142291 = -392
$T142292 = -292
$T142297 = -176
$T142398 = -12
$T142399 = -128
$T142400 = -32
$T142402 = -44
_LineSegments$142461 = -684
_CurrentPosition$142462 = -608
_PreviousPosition$142463 = -244
_Distance$142464 = -372
_Direction$142465 = -308
_StepLength$142467 = -440
_Axis1$142468 = -512
_Axis2$142469 = -524
_PreviousColor$142470 = -700
_CurrentColor$142471 = -696
_RFactor$142472 = -408
_GFactor$142473 = -376
_BFactor$142474 = -424
_AFactor$142475 = -160
_i$142476 = -688
_LengthToHere$142480 = -680
_OriginalMaxAmplitude$142481 = -156
$T142482 = -448
$T142483 = -648
$T142484 = -264
$T142485 = -200
$T142486 = -628
$T142487 = -212
$T142488 = -428
$T142489 = -260
$T142494 = -196
_PreviousLocation$142505 = -388
_Bogus$142506 = -140
_LastPoint$142507 = -640
_NewLastPoint$142508 = -320
_CurrentLocation$142512 = -224
_k$142513 = -700
_NextLocation$142515 = -172
_NextLocation1$142517 = -188
_j$142518 = -700
_Frame$ = 8
_L$142535 = -652
_H$142536 = -280
$T141862 = -640
$T141864 = -640
$T141865 = -484
_L$141868 = -624
_H$141869 = -264
_L$141909 = -700
_H$141910 = -652
$T141913 = -648
$T142028 = -92
$T142029 = -360
$T142030 = -68
$T142032 = -116
_Direction$142088 = -472
_Midpoint$142089 = -596
_Axis1$142090 = -572
_Axis2$142091 = -548
_ColorMidpoint$142092 = -696
$T142093 = -328
$T142094 = -336
$T142095 = -452
$T142096 = -436
$T142097 = -500
$T142098 = -420
$T142100 = -496
$T142102 = -684
_this$ = -280
_LineSegments$142202 = -688
_CurrentPosition$142203 = -620
_PreviousPosition$142204 = -276
_Distance$142205 = -348
_Direction$142206 = -404
_StepLength$142208 = -424
_Axis1$142209 = -536
_Axis2$142210 = -560
_TimeSeconds$ = -576
_PreviousColor$142211 = -680
_CurrentColor$142212 = -696
_RFactor$142213 = -376
_c$ = -656
_GFactor$142214 = -408
_BFactor$142215 = -440
_AFactor$142216 = -672
_i$142217 = -684
_LengthToHere$142221 = -676
$T142223 = -56
_BeamTexture$ = -248
$T142224 = -152
$T142225 = -104
_i$ = -652
$T142227 = -80
_DestinationLocation$125973 = -668
?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::dnDrawBeam, COMDAT
; _this$ = ecx
; _System$ = edx

; 3013 : 	{

	sub	esp, 700				; 000002bcH
	push	ebx
	push	ebp
	push	esi
	mov	esi, edx

; 3014 : 		VALIDATE;
; 3015 : 
; 3016 : 		// Don't worry about it if not enabled:
; 3017 : 		if(!System.Enabled) return;

	test	BYTE PTR [esi+1596], 1
	mov	ebp, ecx
	push	edi
	mov	DWORD PTR _this$[esp+716], ebp
	mov	edi, 1
	je	$L125946

; 3018 : 
; 3019 : 		if(System.BeamType==BST_Spline) System.NumberDestinations=1;

	cmp	BYTE PTR [esi+2212], 5
	jne	SHORT $L125948
	mov	DWORD PTR [esi+2356], edi
$L125948:

; 3020 : 
; 3021 : 		// Check to see if destination actor is valid: 
; 3022 : 		if(!System.NumberDestinations) 

	mov	eax, DWORD PTR [esi+2356]
	test	eax, eax
	je	$L125946

; 3023 : 			return;
; 3024 : 
; 3025 : 		// CDH... check to make sure camera style matches, if applicable
; 3026 : 		if (!GIsEditor && System.BeamPlayerCameraStyleMode!=BPCS_None)

	mov	eax, DWORD PTR __imp_?GIsEditor@@3HA
	cmp	DWORD PTR [eax], 0
	mov	ebx, DWORD PTR _Frame$[esp+712]
	jne	SHORT $L125953
	mov	al, BYTE PTR [esi+2384]
	test	al, al
	je	SHORT $L125953

; 3027 : 		{
; 3028 : 			if ((System.BeamPlayerCameraStyleMode==BPCS_Equal) && (System.BeamPlayerCameraStyle!=Frame->Viewport->Actor->CameraStyle))

	cmp	al, 1
	jne	SHORT $L125951
	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+48]
	mov	cl, BYTE PTR [esi+2385]
	cmp	cl, BYTE PTR [edx+7280]
	jne	$L125946
$L125951:

; 3029 : 				return;
; 3030 : 			else if ((System.BeamPlayerCameraStyleMode==BPCS_NotEqual) && (System.BeamPlayerCameraStyle==Frame->Viewport->Actor->CameraStyle))

	cmp	al, 2
	jne	SHORT $L125953
	mov	edx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [edx+48]
	mov	cl, BYTE PTR [esi+2385]
	cmp	cl, BYTE PTR [eax+7280]
	je	$L125946
$L125953:

; 3031 : 				return;
; 3032 : 		}
; 3033 : 		// ...CDH
; 3034 : 		clock(Stats.BeamTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	mov	DWORD PTR _L$141868[esp+716], 0
	je	SHORT $L141870
	rdtsc
	mov	DWORD PTR _L$141868[esp+716], eax
	mov	DWORD PTR _H$141869[esp+716], edx
$L141870:
	mov	ecx, DWORD PTR [ebp+19640]
	mov	eax, DWORD PTR _L$141868[esp+716]
	sub	ecx, eax
	mov	DWORD PTR [ebp+19640], ecx

; 3035 : 
; 3036 : 		FLOAT TimeSeconds = System.Level->GameTimeSeconds;

	mov	ecx, DWORD PTR [esi+112]
	mov	edx, DWORD PTR [ecx+1520]

; 3037 : 		appSrand((*(DWORD *)&TimeSeconds)^((DWORD)&System));	// Makes the beams pausable, as they are based off of game time.

	mov	eax, edx
	xor	eax, esi
	push	eax
	mov	DWORD PTR _TimeSeconds$[esp+720], edx
	call	DWORD PTR __imp__srand

; 3038 : 
; 3039 : 		UCanvas *c=Frame->Viewport->Canvas;

	mov	ecx, DWORD PTR [ebx]
	mov	edx, DWORD PTR [ecx+84]

; 3040 : 
; 3041 : 		PreRender(Frame);

	mov	eax, DWORD PTR [ebp]
	mov	DWORD PTR _c$[esp+720], edx
	add	esp, 4
	mov	edx, ebx
	mov	ecx, ebp
	call	DWORD PTR [eax+140]

; 3042 : 
; 3043 : 		if(System.BeamStartWidth<1) System.BeamStartWidth=1;

	fld	DWORD PTR [esi+1604]
	fcomp	DWORD PTR __real@3f800000
	mov	ecx, 1065353216				; 3f800000H
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L125958
	mov	DWORD PTR [esi+1604], ecx
$L125958:

; 3044 : 		if(System.BeamEndWidth<1)   System.BeamEndWidth=1;

	fld	DWORD PTR [esi+1608]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L125959
	mov	DWORD PTR [esi+1608], ecx
$L125959:

; 3045 : 
; 3046 : 		if(System.TesselationLevel>16)     System.TesselationLevel=16;

	mov	eax, DWORD PTR [esi+1600]
	cmp	eax, 16					; 00000010H
	jle	SHORT $L125960
	mov	DWORD PTR [esi+1600], 16		; 00000010H

; 3047 : 		else if(System.TesselationLevel<1) System.TesselationLevel=1;

	jmp	SHORT $L125962
$L125960:
	cmp	eax, edi
	jge	SHORT $L125962
	mov	DWORD PTR [esi+1600], edi
$L125962:

; 3048 : 
; 3049 : 		System.BoundingBoxMin=System.Location-FVector(5,5,5);

	fld	DWORD PTR [esi+364]

; 3050 : 		System.BoundingBoxMax=System.Location+FVector(5,5,5);
; 3051 : 
; 3052 : 		// Force animated textures to update:
; 3053 : 		UTexture *BeamTexture=System.BeamTexture;

	mov	ebx, DWORD PTR [esi+1660]
	fsub	DWORD PTR __real@40a00000
	lea	eax, DWORD PTR [esi+2388]

; 3054 : 		if(BeamTexture) BeamTexture=BeamTexture->Get(appSeconds());

	xor	edi, edi
	cmp	ebx, edi
	fstp	DWORD PTR $T141862[esp+716]
	fld	DWORD PTR [esi+368]
	mov	ecx, DWORD PTR $T141862[esp+716]
	fsub	DWORD PTR __real@40a00000
	mov	DWORD PTR _BeamTexture$[esp+716], ebx
	fstp	DWORD PTR $T141862[esp+720]
	fld	DWORD PTR [esi+372]
	mov	edx, DWORD PTR $T141862[esp+720]
	fsub	DWORD PTR __real@40a00000
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T141862[esp+724]
	mov	ecx, DWORD PTR $T141862[esp+724]
	mov	DWORD PTR [eax+8], ecx
	fld	DWORD PTR [esi+364]
	fadd	DWORD PTR __real@40a00000
	lea	eax, DWORD PTR [esi+2400]
	fstp	DWORD PTR $T141864[esp+716]
	fld	DWORD PTR [esi+368]
	mov	edx, DWORD PTR $T141864[esp+716]
	fadd	DWORD PTR __real@40a00000
	fstp	DWORD PTR $T141864[esp+720]
	fld	DWORD PTR [esi+372]
	mov	ecx, DWORD PTR $T141864[esp+720]
	fadd	DWORD PTR __real@40a00000
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
	fstp	DWORD PTR $T141864[esp+724]
	mov	edx, DWORD PTR $T141864[esp+724]
	mov	DWORD PTR [eax+8], edx
	je	SHORT $L141919
	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], edi
	je	SHORT $L141908
	rdtsc
	mov	DWORD PTR _L$141909[esp+716], eax
	mov	DWORD PTR _H$141910[esp+716], edx
	mov	ecx, DWORD PTR _H$141910[esp+716]
	mov	edx, DWORD PTR _L$141909[esp+716]
	mov	eax, DWORD PTR __imp_?GSecondsPerCycle@@3NA
	mov	DWORD PTR -648+[esp+716], ecx
	mov	DWORD PTR -648+[esp+720], edi
	fild	QWORD PTR -648+[esp+716]
	mov	DWORD PTR -648+[esp+716], edx
	mov	DWORD PTR -648+[esp+720], edi
	fmul	QWORD PTR __real@41f0000000000000
	fild	QWORD PTR -648+[esp+716]
	faddp	ST(1), ST(0)
	fmul	QWORD PTR [eax]
	jmp	SHORT $L142573
$L141908:
	call	DWORD PTR __imp_?appSecondsSlow@@YANXZ
$L142573:
	mov	edx, DWORD PTR [ebx]
	fstp	QWORD PTR $T141913[esp+716]
	mov	eax, DWORD PTR $T141913[esp+720]
	mov	ecx, DWORD PTR $T141913[esp+716]
	push	eax
	push	ecx
	mov	ecx, ebx
	call	DWORD PTR [edx+108]
	mov	eax, DWORD PTR [ebx+148]
	cmp	eax, edi
	je	SHORT $L141919
	mov	ebx, eax
	mov	DWORD PTR _BeamTexture$[esp+716], ebx
$L141919:

; 3055 : 
; 3056 : 		for(INT i=0;i<System.NumberDestinations;i++)

	cmp	DWORD PTR [esi+2356], edi
	mov	DWORD PTR _i$[esp+716], edi
	jle	$L125972
	mov	edi, DWORD PTR __imp__rand
	lea	edx, DWORD PTR [esi+2228]
	lea	eax, DWORD PTR [esi+2268]
	mov	DWORD PTR -432+[esp+716], edx
	mov	DWORD PTR -624+[esp+716], eax

; 3110 : 	}

	npad	7

; 3055 : 
; 3056 : 		for(INT i=0;i<System.NumberDestinations;i++)

$L125970:

; 3057 : 		{
; 3058 : 			Stats.Beams++;

	inc	DWORD PTR [ebp+19692]

; 3059 : 
; 3060 : 			FVector DestinationLocation;
; 3061 : 			if(System.BeamType!=BST_Spline)

	mov	dl, BYTE PTR [esi+2212]
	cmp	dl, 5
	je	$L125984

; 3062 : 			{
; 3063 : 				DestinationLocation=System.DestinationActor[i]->Location + System.DestinationOffset[i];

	mov	ecx, DWORD PTR -432+[esp+716]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR -624+[esp+716]
	fld	DWORD PTR [ecx-8]
	add	eax, 364				; 0000016cH
	fadd	DWORD PTR [eax]
	fst	DWORD PTR $T141865[esp+716]
	fld	DWORD PTR [ecx-4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR $T141865[esp+720]
	fld	DWORD PTR [eax+8]
	mov	eax, DWORD PTR $T141865[esp+716]
	fadd	DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T141865[esp+720]
	mov	DWORD PTR _DestinationLocation$125973[esp+716], eax
	mov	DWORD PTR _DestinationLocation$125973[esp+720], ecx
	fstp	DWORD PTR $T141865[esp+724]
	mov	eax, DWORD PTR $T141865[esp+724]

; 3064 : 
; 3065 : 					 if(DestinationLocation.X<System.BoundingBoxMin.X) System.BoundingBoxMin.X=DestinationLocation.X;

	fcom	DWORD PTR [esi+2388]
	mov	DWORD PTR _DestinationLocation$125973[esp+724], eax
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L125976
	fstp	DWORD PTR [esi+2388]

; 3066 : 				else if(DestinationLocation.X>System.BoundingBoxMax.X) System.BoundingBoxMax.X=DestinationLocation.X;

	jmp	SHORT $L125978
$L125976:
	fcom	DWORD PTR [esi+2400]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L142564
	fstp	DWORD PTR [esi+2400]
	jmp	SHORT $L125978
$L142564:
	fstp	ST(0)
$L125978:

; 3067 : 
; 3068 : 					 if(DestinationLocation.Y<System.BoundingBoxMin.Y) System.BoundingBoxMin.Y=DestinationLocation.Y;

	fld	DWORD PTR $T141865[esp+720]
	fcomp	DWORD PTR [esi+2392]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L125979
	mov	ecx, DWORD PTR $T141865[esp+720]
	mov	DWORD PTR [esi+2392], ecx

; 3069 : 				else if(DestinationLocation.Y>System.BoundingBoxMax.Y) System.BoundingBoxMax.Y=DestinationLocation.Y;

	jmp	SHORT $L125981
$L125979:
	fld	DWORD PTR $T141865[esp+720]
	fcomp	DWORD PTR [esi+2404]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L125981
	mov	eax, DWORD PTR $T141865[esp+720]
	mov	DWORD PTR [esi+2404], eax
$L125981:

; 3070 : 
; 3071 : 					 if(DestinationLocation.Z<System.BoundingBoxMin.Z) System.BoundingBoxMin.Z=DestinationLocation.Z;

	fld	DWORD PTR $T141865[esp+724]
	fcomp	DWORD PTR [esi+2396]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L125982
	mov	ecx, DWORD PTR $T141865[esp+724]
	mov	DWORD PTR [esi+2396], ecx

; 3072 : 				else if(DestinationLocation.Z>System.BoundingBoxMax.Z) System.BoundingBoxMax.Z=DestinationLocation.Z;

	jmp	SHORT $L125984
$L125982:
	fld	DWORD PTR $T141865[esp+724]
	fcomp	DWORD PTR [esi+2408]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $L125984
	mov	eax, DWORD PTR $T141865[esp+724]
	mov	DWORD PTR [esi+2408], eax
$L125984:

; 3073 : 			}
; 3074 : 
; 3075 : 			// Draws from Location to DestinationActor->Location. 
; 3076 : 			switch(System.BeamType)
; 3077 : 			{

	mov	eax, edx
	and	eax, 255				; 000000ffH
	cmp	eax, 6
	ja	$L125986
	jmp	DWORD PTR $L142574[eax*4]
$L125989:

; 3078 : 				case BST_RandomWalk:
; 3079 : 					// BST_RandomWalk not implemented Yet, fall through to recursive subdivide:
; 3080 : 
; 3081 : 				case BST_RecursiveSubdivide:
; 3082 : 					RecursiveSubdivideLine(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel);

	mov	ecx, DWORD PTR [esi+1600]
	lea	eax, DWORD PTR [esi+364]
	mov	edx, eax
	mov	DWORD PTR $T142102[esp+716], ecx
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR $T142100[esp+716], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR $T142100[esp+720], ecx
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T142100[esp+724], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T142098[esp+724], eax
	mov	eax, DWORD PTR [esi+1604]
	mov	DWORD PTR $T142098[esp+716], ecx
	mov	ecx, DWORD PTR [esi+1624]
	mov	DWORD PTR $T142098[esp+720], edx
	mov	edx, DWORD PTR [esi+1608]
	mov	DWORD PTR $T142095[esp+716], eax
	mov	eax, DWORD PTR _c$[esp+716]
	test	eax, eax
	mov	DWORD PTR $T142097[esp+716], ecx
	mov	ecx, DWORD PTR [esi+1620]
	mov	DWORD PTR $T142096[esp+716], edx
	mov	edx, DWORD PTR [esi+1616]
	mov	DWORD PTR $T142094[esp+716], ecx
	mov	DWORD PTR $T142093[esp+716], edx
	jne	SHORT $L142086
	push	2776					; 00000ad8H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_01IJJ@c?$AA@		; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L142086:
	mov	eax, DWORD PTR $T142102[esp+716]
	test	eax, eax
	jne	SHORT $L142087
	mov	eax, DWORD PTR $T142093[esp+716]
	mov	ecx, DWORD PTR $T142095[esp+716]
	push	1
	push	eax
	push	eax
	mov	eax, DWORD PTR $T142096[esp+728]
	push	eax
	mov	eax, DWORD PTR _DestinationLocation$125973[esp+732]
	push	ecx
	mov	ecx, DWORD PTR _DestinationLocation$125973[esp+740]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _DestinationLocation$125973[esp+756]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR $T142100[esp+748]
	mov	eax, DWORD PTR $T142100[esp+752]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T142100[esp+768]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[esp+760]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+124]
	push	0
	push	ebx
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	jmp	$L125986
$L142087:
	fld	DWORD PTR _DestinationLocation$125973[esp+724]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T142100[esp+736]
	lea	ecx, DWORD PTR _Direction$142088[esp+728]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _DestinationLocation$125973[esp+732]
	fsub	DWORD PTR $T142100[esp+732]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _DestinationLocation$125973[esp+728]
	fsub	DWORD PTR $T142100[esp+728]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Direction$142088[esp+724]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR __real@3f000000
	lea	ecx, DWORD PTR $T142028[esp+728]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Direction$142088[esp+732]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Direction$142088[esp+728]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T142028[esp+724]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T142100[esp+736]
	lea	ecx, DWORD PTR _Midpoint$142089[esp+728]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T142028[esp+732]
	fadd	DWORD PTR $T142100[esp+732]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T142028[esp+728]
	fadd	DWORD PTR $T142100[esp+728]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _DestinationLocation$125973[esp+724]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T142098[esp+736]
	lea	ecx, DWORD PTR $T142029[esp+728]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _DestinationLocation$125973[esp+732]
	fsub	DWORD PTR $T142098[esp+732]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _DestinationLocation$125973[esp+728]
	fsub	DWORD PTR $T142098[esp+728]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T142029[esp+716]
	mov	eax, DWORD PTR $T142029[esp+724]
	fmul	DWORD PTR $T142029[esp+716]
	mov	ecx, DWORD PTR $T142029[esp+716]
	fld	DWORD PTR $T142029[esp+720]
	mov	edx, DWORD PTR $T142029[esp+720]
	fmul	DWORD PTR $T142029[esp+720]
	mov	DWORD PTR _Direction$142088[esp+724], eax
	mov	DWORD PTR _Direction$142088[esp+716], ecx
	mov	DWORD PTR _Direction$142088[esp+720], edx
	faddp	ST(1), ST(0)
	fld	DWORD PTR $T142029[esp+724]
	fmul	DWORD PTR $T142029[esp+724]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142563
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR $T142029[esp+716]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$142088[esp+716]
	fld	DWORD PTR _Direction$142088[esp+720]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$142088[esp+720]
	fld	DWORD PTR _Direction$142088[esp+724]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$142088[esp+724]
$L142563:
	lea	ecx, DWORD PTR _Axis2$142091[esp+716]
	fstp	ST(0)
	push	ecx
	lea	edx, DWORD PTR _Axis1$142090[esp+720]
	push	edx
	lea	ecx, DWORD PTR _Direction$142088[esp+724]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$142090[esp+716]
	fmul	DWORD PTR _Axis1$142090[esp+716]
	fld	DWORD PTR _Axis1$142090[esp+720]
	fmul	DWORD PTR _Axis1$142090[esp+720]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$142090[esp+724]
	fmul	DWORD PTR _Axis1$142090[esp+724]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142555
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$142090[esp+716]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$142090[esp+716]
	fld	DWORD PTR _Axis1$142090[esp+720]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$142090[esp+720]
	fld	DWORD PTR _Axis1$142090[esp+724]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$142090[esp+724]
$L142555:
	fstp	ST(0)
	fld	DWORD PTR _Axis2$142091[esp+716]
	fmul	DWORD PTR _Axis2$142091[esp+716]
	fld	DWORD PTR _Axis2$142091[esp+724]
	fmul	DWORD PTR _Axis2$142091[esp+724]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$142091[esp+720]
	fmul	DWORD PTR _Axis2$142091[esp+720]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142562
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$142091[esp+716]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$142091[esp+716]
	fld	DWORD PTR _Axis2$142091[esp+720]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$142091[esp+720]
	fld	DWORD PTR _Axis2$142091[esp+724]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$142091[esp+724]
$L142562:
	fstp	ST(0)
	fld	DWORD PTR $T142097[esp+716]
	fadd	ST(0), ST(0)
	fstp	DWORD PTR -688+[esp+716]
	call	edi
	mov	DWORD PTR -700+[esp+716], eax
	fild	DWORD PTR -700+[esp+716]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T142030[esp+728]
	fmul	DWORD PTR -688+[esp+728]
	fmul	DWORD PTR __real@38000100
	fsub	DWORD PTR $T142097[esp+728]
	fld	DWORD PTR _Axis1$142090[esp+736]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis1$142090[esp+732]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis1$142090[esp+728]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T142030[esp+716]
	fadd	DWORD PTR _Midpoint$142089[esp+716]
	fstp	DWORD PTR _Midpoint$142089[esp+716]
	fld	DWORD PTR $T142030[esp+720]
	fadd	DWORD PTR _Midpoint$142089[esp+720]
	fstp	DWORD PTR _Midpoint$142089[esp+720]
	fld	DWORD PTR $T142030[esp+724]
	fadd	DWORD PTR _Midpoint$142089[esp+724]
	fstp	DWORD PTR _Midpoint$142089[esp+724]
	call	edi
	mov	DWORD PTR -700+[esp+716], eax
	fild	DWORD PTR -700+[esp+716]
	mov	ecx, DWORD PTR $T142093[esp+716]
	mov	eax, DWORD PTR $T142094[esp+716]
	fmul	DWORD PTR -688+[esp+716]
	and	eax, 255				; 000000ffH
	mov	edx, ecx
	and	edx, 255				; 000000ffH
	fmul	DWORD PTR __real@38000100
	sub	eax, edx
	cdq
	fsub	DWORD PTR $T142097[esp+716]
	sub	eax, edx
	fld	DWORD PTR _Axis2$142091[esp+716]
	mov	edx, DWORD PTR $T142093[esp+717]
	sar	eax, 1
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Axis2$142091[esp+720]
	add	al, cl
	fmul	ST(0), ST(2)
	mov	DWORD PTR _ColorMidpoint$142092[esp+716], ecx
	mov	BYTE PTR _ColorMidpoint$142092[esp+716], al
	mov	eax, DWORD PTR $T142094[esp+717]
	fstp	DWORD PTR $T142032[esp+720]
	fld	DWORD PTR _Axis2$142091[esp+724]
	and	edx, 255				; 000000ffH
	fmul	ST(0), ST(2)
	and	eax, 255				; 000000ffH
	sub	eax, edx
	cdq
	fstp	DWORD PTR $T142032[esp+724]
	sub	eax, edx
	mov	dl, BYTE PTR _ColorMidpoint$142092[esp+717]
	fadd	DWORD PTR _Midpoint$142089[esp+716]
	sar	eax, 1
	fstp	DWORD PTR _Midpoint$142089[esp+716]
	fstp	ST(0)
	fld	DWORD PTR $T142032[esp+720]
	fadd	DWORD PTR _Midpoint$142089[esp+720]
	fstp	DWORD PTR _Midpoint$142089[esp+720]
	fld	DWORD PTR $T142032[esp+724]
	fadd	DWORD PTR _Midpoint$142089[esp+724]
	fstp	DWORD PTR _Midpoint$142089[esp+724]
	add	dl, al
	fld	DWORD PTR $T142097[esp+716]
	mov	eax, DWORD PTR $T142094[esp+718]
	fmul	DWORD PTR __real@3f000000
	mov	BYTE PTR _ColorMidpoint$142092[esp+717], dl
	mov	edx, DWORD PTR $T142093[esp+718]
	and	eax, 255				; 000000ffH
	fstp	DWORD PTR -688+[esp+716]
	and	edx, 255				; 000000ffH
	sub	eax, edx
	cdq
	sub	eax, edx
	mov	dl, BYTE PTR _ColorMidpoint$142092[esp+718]
	sar	eax, 1
	add	dl, al
	mov	eax, DWORD PTR $T142094[esp+719]
	mov	BYTE PTR _ColorMidpoint$142092[esp+718], dl
	mov	edx, DWORD PTR $T142093[esp+719]
	and	edx, 255				; 000000ffH
	and	eax, 255				; 000000ffH
	sub	eax, edx
	cdq
	sub	eax, edx
	mov	dl, BYTE PTR _ColorMidpoint$142092[esp+719]
	sar	eax, 1
	add	dl, al
	mov	eax, DWORD PTR $T142102[esp+716]
	dec	eax
	push	eax
	mov	BYTE PTR _ColorMidpoint$142092[esp+723], dl
	mov	DWORD PTR -700+[esp+720], eax
	mov	eax, DWORD PTR _Midpoint$142089[esp+720]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _Midpoint$142089[esp+736]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _Midpoint$142089[esp+740]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR $T142100[esp+732]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T142100[esp+748]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR $T142100[esp+752]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR _DestinationLocation$125973[esp+744]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _DestinationLocation$125973[esp+760]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _DestinationLocation$125973[esp+764]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR $T142098[esp+756]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T142098[esp+772]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR $T142098[esp+776]
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR -688+[esp+768]
	mov	eax, DWORD PTR $T142096[esp+768]
	push	edx
	mov	edx, DWORD PTR $T142095[esp+772]
	push	0
	push	eax
	mov	eax, DWORD PTR _ColorMidpoint$142092[esp+780]
	push	edx
	mov	edx, DWORD PTR _c$[esp+784]
	push	eax
	push	ecx
	push	ebx
	mov	ecx, ebp
	call	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine
	mov	ecx, DWORD PTR -700+[esp+716]
	push	ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	eax, DWORD PTR _DestinationLocation$125973[esp+732]
	mov	ecx, DWORD PTR _DestinationLocation$125973[esp+736]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _DestinationLocation$125973[esp+740]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR _Midpoint$142089[esp+732]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _Midpoint$142089[esp+748]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _Midpoint$142089[esp+752]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR _DestinationLocation$125973[esp+752]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _DestinationLocation$125973[esp+760]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR $T142098[esp+756]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR $T142098[esp+760]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T142098[esp+776]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR -688+[esp+768]
	push	ecx
	mov	ecx, DWORD PTR $T142094[esp+772]
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR $T142096[esp+772]
	mov	eax, DWORD PTR $T142095[esp+772]
	push	0
	push	edx
	mov	edx, DWORD PTR _ColorMidpoint$142092[esp+780]
	push	eax
	push	ecx
	push	edx
	mov	edx, DWORD PTR _c$[esp+792]
	push	ebx
	mov	ecx, ebp
	call	?RecursiveSubdivideLine@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMVFVector@@333H@Z ; UD3DRenderDevice::RecursiveSubdivideLine

; 3083 : 					break;

	jmp	$L125986
$L125990:

; 3084 : 
; 3085 : 				case BST_SineWave:
; 3086 : 					SineWave(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel,System.TimeScale);

	mov	eax, DWORD PTR [esi+1612]
	fld	QWORD PTR __real@4000000000000000
	fild	DWORD PTR [esi+1600]
	mov	DWORD PTR $T142297[esp+716], eax
	lea	eax, DWORD PTR [esi+364]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T142292[esp+716], ecx
	mov	ecx, DWORD PTR [esi+1648]
	mov	DWORD PTR $T142292[esp+720], edx
	mov	edx, DWORD PTR [esi+1636]
	mov	DWORD PTR $T142292[esp+724], eax
	mov	eax, DWORD PTR [esi+1624]
	mov	DWORD PTR $T142291[esp+716], ecx
	mov	ecx, DWORD PTR [esi+1608]
	mov	DWORD PTR $T142290[esp+716], edx
	mov	edx, DWORD PTR [esi+1604]
	mov	DWORD PTR $T142289[esp+716], eax
	mov	eax, DWORD PTR [esi+1620]
	mov	DWORD PTR $T142288[esp+716], ecx
	mov	ecx, DWORD PTR [esi+1616]
	mov	DWORD PTR $T142287[esp+716], edx
	mov	DWORD PTR $T142286[esp+716], eax
	mov	DWORD PTR $T142285[esp+716], ecx
	call	__CIpow
	call	__ftol
	fld	DWORD PTR _DestinationLocation$125973[esp+724]
	fsub	DWORD PTR $T142292[esp+724]
	sub	esp, 12					; 0000000cH
	inc	eax
	mov	DWORD PTR _LineSegments$142202[esp+728], eax
	fstp	DWORD PTR [esp+8]
	lea	eax, DWORD PTR [esi+364]
	fld	DWORD PTR _DestinationLocation$125973[esp+732]
	mov	edx, DWORD PTR [eax]
	fsub	DWORD PTR $T142292[esp+732]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _PreviousPosition$142204[esp+728], edx
	mov	edx, DWORD PTR [eax+8]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR _PreviousPosition$142204[esp+732], ecx
	fld	DWORD PTR _DestinationLocation$125973[esp+728]
	lea	ecx, DWORD PTR _Distance$142205[esp+728]
	fsub	DWORD PTR $T142292[esp+728]
	mov	DWORD PTR _PreviousPosition$142204[esp+736], edx
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Distance$142205[esp+720]
	mov	eax, DWORD PTR _Distance$142205[esp+716]
	fmul	DWORD PTR _Distance$142205[esp+720]
	mov	ecx, DWORD PTR _Distance$142205[esp+720]
	fld	DWORD PTR _Distance$142205[esp+724]
	mov	edx, DWORD PTR _Distance$142205[esp+724]
	fmul	DWORD PTR _Distance$142205[esp+724]
	mov	DWORD PTR _Direction$142206[esp+716], eax
	mov	DWORD PTR _Direction$142206[esp+720], ecx
	mov	DWORD PTR _Direction$142206[esp+724], edx
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Distance$142205[esp+716]
	fmul	DWORD PTR _Distance$142205[esp+716]
	faddp	ST(1), ST(0)
	fld	ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142561
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$142205[esp+716]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$142206[esp+716]
	fld	DWORD PTR _Direction$142206[esp+720]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$142206[esp+720]
	fld	DWORD PTR _Direction$142206[esp+724]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$142206[esp+724]
$L142561:
	fstp	ST(0)
	lea	eax, DWORD PTR _Axis2$142210[esp+716]

; 3109 : 		unclock(Stats.BeamTime);

	fild	DWORD PTR _LineSegments$142202[esp+716]
	push	eax
	lea	ecx, DWORD PTR _Axis1$142209[esp+720]
	push	ecx
	fstp	DWORD PTR -692+[esp+724]
	lea	ecx, DWORD PTR _Direction$142206[esp+724]
	fsqrt
	fdiv	DWORD PTR -692+[esp+724]
	fstp	DWORD PTR _StepLength$142208[esp+724]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$142209[esp+720]
	fmul	DWORD PTR _Axis1$142209[esp+720]
	fld	DWORD PTR _Axis1$142209[esp+724]
	fmul	DWORD PTR _Axis1$142209[esp+724]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$142209[esp+716]
	fmul	DWORD PTR _Axis1$142209[esp+716]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142556
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$142209[esp+716]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$142209[esp+716]
	fld	DWORD PTR _Axis1$142209[esp+720]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$142209[esp+720]
	fld	DWORD PTR _Axis1$142209[esp+724]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$142209[esp+724]
$L142556:
	fstp	ST(0)
	fld	DWORD PTR _Axis2$142210[esp+716]
	fmul	DWORD PTR _Axis2$142210[esp+716]
	fld	DWORD PTR _Axis2$142210[esp+720]
	fmul	DWORD PTR _Axis2$142210[esp+720]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$142210[esp+724]
	fmul	DWORD PTR _Axis2$142210[esp+724]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142560
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$142210[esp+716]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$142210[esp+716]
	fld	DWORD PTR _Axis2$142210[esp+720]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$142210[esp+720]
	fmul	DWORD PTR _Axis2$142210[esp+724]
	fstp	DWORD PTR _Axis2$142210[esp+724]
	jmp	SHORT $L142259
$L142560:

; 3084 : 
; 3085 : 				case BST_SineWave:
; 3086 : 					SineWave(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel,System.TimeScale);

	fstp	ST(0)
$L142259:
	mov	eax, DWORD PTR $T142285[esp+716]
	mov	edx, eax
	mov	DWORD PTR _PreviousColor$142211[esp+716], eax
	mov	eax, DWORD PTR $T142286[esp+716]
	and	eax, 255				; 000000ffH
	and	edx, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR -700+[esp+716], eax
	fild	DWORD PTR -700+[esp+716]
	mov	eax, DWORD PTR $T142285[esp+717]
	mov	ecx, DWORD PTR $T142286[esp+717]
	fdiv	DWORD PTR -692+[esp+716]
	and	eax, 255				; 000000ffH
	and	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	DWORD PTR -700+[esp+716], ecx
	mov	edx, DWORD PTR $T142285[esp+718]
	mov	eax, DWORD PTR $T142286[esp+718]
	and	edx, 255				; 000000ffH
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	ecx, DWORD PTR $T142285[esp+719]
	mov	edx, DWORD PTR $T142286[esp+719]
	and	ecx, 255				; 000000ffH
	and	edx, 255				; 000000ffH
	sub	edx, ecx
	mov	DWORD PTR _i$142217[esp+716], 0
	fstp	DWORD PTR _RFactor$142213[esp+716]
	fild	DWORD PTR -700+[esp+716]
	mov	DWORD PTR -700+[esp+716], eax
	mov	eax, DWORD PTR _LineSegments$142202[esp+716]
	test	eax, eax
	fdiv	DWORD PTR -692+[esp+716]
	fstp	DWORD PTR _GFactor$142214[esp+716]
	fild	DWORD PTR -700+[esp+716]
	mov	DWORD PTR -700+[esp+716], edx
	fdiv	DWORD PTR -692+[esp+716]
	fstp	DWORD PTR _BFactor$142215[esp+716]
	fild	DWORD PTR -700+[esp+716]
	fdiv	DWORD PTR -692+[esp+716]
	fstp	DWORD PTR _AFactor$142216[esp+716]
	jle	$L125986
	fld	DWORD PTR $T142297[esp+716]
	fmul	DWORD PTR _TimeSeconds$[esp+716]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR -584+[esp+716]
	fld	DWORD PTR $T142291[esp+716]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR -580+[esp+716]
$L142566:
	fild	DWORD PTR _i$142217[esp+716]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T142223[esp+728]
	fstp	DWORD PTR -692+[esp+728]
	fld	DWORD PTR _StepLength$142208[esp+728]
	fmul	DWORD PTR -692+[esp+728]
	fstp	DWORD PTR _LengthToHere$142221[esp+728]
	fld	DWORD PTR _Direction$142206[esp+736]
	fmul	DWORD PTR _LengthToHere$142221[esp+728]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Direction$142206[esp+732]
	fmul	DWORD PTR _LengthToHere$142221[esp+728]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Direction$142206[esp+728]
	fmul	DWORD PTR _LengthToHere$142221[esp+728]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T142223[esp+724]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T142292[esp+736]
	lea	ecx, DWORD PTR $T142224[esp+728]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T142223[esp+732]
	fadd	DWORD PTR $T142292[esp+732]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T142223[esp+728]
	fadd	DWORD PTR $T142292[esp+728]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _LengthToHere$142221[esp+716]
	mov	eax, DWORD PTR $T142224[esp+716]
	fmul	DWORD PTR $T142290[esp+716]
	mov	ecx, DWORD PTR $T142224[esp+720]
	mov	edx, DWORD PTR $T142224[esp+724]
	mov	DWORD PTR _CurrentPosition$142203[esp+716], eax
	fstp	DWORD PTR -676+[esp+716]
	mov	DWORD PTR _CurrentPosition$142203[esp+720], ecx
	mov	DWORD PTR _CurrentPosition$142203[esp+724], edx
	call	edi
	mov	DWORD PTR -700+[esp+716], eax
	fild	DWORD PTR -700+[esp+716]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T142225[esp+728]

; 3109 : 		unclock(Stats.BeamTime);

	fmul	DWORD PTR $T142291[esp+728]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -676+[esp+728]
	fadd	DWORD PTR -584+[esp+728]
	fsub	DWORD PTR -580+[esp+728]
	fsin
	fmul	DWORD PTR $T142289[esp+728]
	fld	DWORD PTR _Axis1$142209[esp+736]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis1$142209[esp+732]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Axis1$142209[esp+728]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp]
	fstp	ST(0)
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T142225[esp+716]
	fadd	DWORD PTR $T142224[esp+716]
	fstp	DWORD PTR _CurrentPosition$142203[esp+716]
	fld	DWORD PTR $T142225[esp+720]
	fadd	DWORD PTR _CurrentPosition$142203[esp+720]
	fstp	DWORD PTR _CurrentPosition$142203[esp+720]
	fld	DWORD PTR $T142225[esp+724]
	fadd	DWORD PTR _CurrentPosition$142203[esp+724]
	fstp	DWORD PTR _CurrentPosition$142203[esp+724]
	call	edi
	mov	DWORD PTR -700+[esp+716], eax
	fild	DWORD PTR -700+[esp+716]
	fmul	DWORD PTR $T142291[esp+716]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -676+[esp+716]
	fadd	DWORD PTR -584+[esp+716]
	fsub	DWORD PTR -580+[esp+716]
	fcos
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T142227[esp+728]
	fmul	DWORD PTR $T142289[esp+728]
	fld	DWORD PTR _Axis2$142210[esp+736]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis2$142210[esp+732]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis2$142210[esp+728]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T142227[esp+716]
	mov	eax, DWORD PTR $T142285[esp+716]
	fadd	DWORD PTR _CurrentPosition$142203[esp+716]
	mov	DWORD PTR _CurrentColor$142212[esp+716], eax
	fstp	DWORD PTR _CurrentPosition$142203[esp+716]
	fld	DWORD PTR $T142227[esp+720]
	fadd	DWORD PTR _CurrentPosition$142203[esp+720]
	fstp	DWORD PTR _CurrentPosition$142203[esp+720]
	fld	DWORD PTR $T142227[esp+724]
	fadd	DWORD PTR _CurrentPosition$142203[esp+724]
	fstp	DWORD PTR _CurrentPosition$142203[esp+724]
	fld	DWORD PTR _RFactor$142213[esp+716]
	fmul	DWORD PTR -692+[esp+716]
	call	__ftol
	fld	DWORD PTR _GFactor$142214[esp+716]
	mov	cl, BYTE PTR $T142285[esp+716]
	fmul	DWORD PTR -692+[esp+716]
	add	al, cl
	mov	BYTE PTR _CurrentColor$142212[esp+716], al
	call	__ftol
	fld	DWORD PTR _BFactor$142215[esp+716]
	mov	dl, BYTE PTR _CurrentColor$142212[esp+717]
	fmul	DWORD PTR -692+[esp+716]
	add	dl, al
	mov	BYTE PTR _CurrentColor$142212[esp+717], dl
	call	__ftol
	fld	DWORD PTR _AFactor$142216[esp+716]
	mov	cl, BYTE PTR _CurrentColor$142212[esp+718]
	fmul	DWORD PTR -692+[esp+716]
	add	cl, al
	mov	BYTE PTR _CurrentColor$142212[esp+718], cl
	call	__ftol
	mov	dl, BYTE PTR _CurrentColor$142212[esp+719]
	mov	ecx, DWORD PTR _PreviousColor$142211[esp+716]
	add	dl, al
	mov	eax, DWORD PTR $T142287[esp+716]
	mov	BYTE PTR _CurrentColor$142212[esp+719], dl
	mov	edi, DWORD PTR _CurrentColor$142212[esp+716]
	mov	edx, DWORD PTR $T142288[esp+716]
	push	1
	push	edi
	push	ecx
	push	edx
	mov	edx, DWORD PTR _CurrentPosition$142203[esp+732]
	push	eax
	mov	eax, DWORD PTR _CurrentPosition$142203[esp+740]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _CurrentPosition$142203[esp+756]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _PreviousPosition$142204[esp+748]
	mov	edx, DWORD PTR _PreviousPosition$142204[esp+752]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _PreviousPosition$142204[esp+768]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR _c$[esp+760]
	mov	edx, DWORD PTR [edx+124]
	push	0
	mov	DWORD PTR [eax+8], ecx
	push	ebx
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	mov	eax, DWORD PTR _CurrentPosition$142203[esp+716]
	mov	ecx, DWORD PTR _CurrentPosition$142203[esp+720]
	mov	edx, DWORD PTR _CurrentPosition$142203[esp+724]
	mov	DWORD PTR _PreviousPosition$142204[esp+716], eax
	mov	eax, DWORD PTR _i$142217[esp+716]
	mov	DWORD PTR _PreviousPosition$142204[esp+720], ecx
	mov	ecx, DWORD PTR _LineSegments$142202[esp+716]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _PreviousColor$142211[esp+716], edi
	mov	edi, DWORD PTR __imp__rand
	mov	DWORD PTR _PreviousPosition$142204[esp+724], edx
	mov	DWORD PTR _i$142217[esp+716], eax
	jl	$L142566

; 3087 : 					break;

	jmp	$L125986
$L125991:

; 3088 : 
; 3089 : 				case BST_DoubleSineWave:
; 3090 : 					DoubleSineWave(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel,System.TimeScale);

	mov	eax, DWORD PTR [esi+1612]
	fld	QWORD PTR __real@4000000000000000
	fild	DWORD PTR [esi+1600]
	mov	DWORD PTR $T142494[esp+716], eax
	lea	eax, DWORD PTR [esi+364]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR $T142489[esp+716], ecx
	mov	ecx, DWORD PTR [esi+1648]
	mov	DWORD PTR $T142489[esp+720], edx
	mov	edx, DWORD PTR [esi+1636]
	mov	DWORD PTR $T142489[esp+724], eax
	mov	eax, DWORD PTR [esi+1624]
	mov	DWORD PTR $T142488[esp+716], ecx
	mov	ecx, DWORD PTR [esi+1608]
	mov	DWORD PTR $T142487[esp+716], edx
	mov	edx, DWORD PTR [esi+1604]
	mov	DWORD PTR $T142486[esp+716], eax
	mov	eax, DWORD PTR [esi+1620]
	mov	DWORD PTR $T142485[esp+716], ecx
	mov	ecx, DWORD PTR [esi+1616]
	mov	DWORD PTR $T142484[esp+716], edx
	mov	DWORD PTR $T142483[esp+716], eax
	mov	DWORD PTR $T142482[esp+716], ecx
	call	__CIpow
	call	__ftol
	fld	DWORD PTR _DestinationLocation$125973[esp+724]
	fsub	DWORD PTR $T142489[esp+724]
	sub	esp, 12					; 0000000cH
	inc	eax
	mov	DWORD PTR _LineSegments$142461[esp+728], eax
	fstp	DWORD PTR [esp+8]
	lea	eax, DWORD PTR [esi+364]
	fld	DWORD PTR _DestinationLocation$125973[esp+732]
	mov	edx, DWORD PTR [eax]
	fsub	DWORD PTR $T142489[esp+732]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _PreviousPosition$142463[esp+728], edx
	mov	edx, DWORD PTR [eax+8]
	fstp	DWORD PTR [esp+4]
	mov	DWORD PTR _PreviousPosition$142463[esp+732], ecx
	fld	DWORD PTR _DestinationLocation$125973[esp+728]
	lea	ecx, DWORD PTR _Distance$142464[esp+728]
	fsub	DWORD PTR $T142489[esp+728]
	mov	DWORD PTR _PreviousPosition$142463[esp+736], edx
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Distance$142464[esp+724]
	mov	eax, DWORD PTR _Distance$142464[esp+716]
	fmul	DWORD PTR _Distance$142464[esp+724]
	mov	ecx, DWORD PTR _Distance$142464[esp+720]
	fld	DWORD PTR _Distance$142464[esp+720]
	mov	edx, DWORD PTR _Distance$142464[esp+724]
	fmul	DWORD PTR _Distance$142464[esp+720]
	mov	DWORD PTR _Direction$142465[esp+716], eax
	fld	DWORD PTR _Distance$142464[esp+716]
	mov	DWORD PTR _Direction$142465[esp+720], ecx
	fmul	DWORD PTR _Distance$142464[esp+716]
	mov	DWORD PTR _Direction$142465[esp+724], edx
	fld	ST(2)
	fadd	ST(0), ST(2)
	fadd	ST(0), ST(1)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142559
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$142464[esp+716]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$142465[esp+716]
	fld	DWORD PTR _Direction$142465[esp+720]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$142465[esp+720]
	fmul	DWORD PTR _Direction$142465[esp+724]
	fstp	DWORD PTR _Direction$142465[esp+724]
	jmp	SHORT $L142413
$L142559:
	fstp	ST(0)
$L142413:

; 3109 : 		unclock(Stats.BeamTime);

	fild	DWORD PTR _LineSegments$142461[esp+716]
	lea	eax, DWORD PTR _Axis2$142469[esp+716]
	push	eax
	lea	ecx, DWORD PTR _Axis1$142468[esp+720]
	fstp	DWORD PTR -676+[esp+720]
	push	ecx
	fxch	ST(2)
	lea	ecx, DWORD PTR _Direction$142465[esp+724]
	fadd	ST(0), ST(1)
	fadd	ST(0), ST(2)
	fsqrt
	fstp	ST(2)
	fstp	ST(0)
	fdiv	DWORD PTR -676+[esp+724]
	fstp	DWORD PTR _StepLength$142467[esp+724]
	call	DWORD PTR __imp_?FindBestAxisVectors@FVector@@QAEXAAV1@0@Z
	fld	DWORD PTR _Axis1$142468[esp+716]
	fmul	DWORD PTR _Axis1$142468[esp+716]
	fld	DWORD PTR _Axis1$142468[esp+720]
	fmul	DWORD PTR _Axis1$142468[esp+720]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis1$142468[esp+724]
	fmul	DWORD PTR _Axis1$142468[esp+724]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142557
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis1$142468[esp+716]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$142468[esp+716]
	fld	DWORD PTR _Axis1$142468[esp+720]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis1$142468[esp+720]
	fmul	DWORD PTR _Axis1$142468[esp+724]
	fstp	DWORD PTR _Axis1$142468[esp+724]
	jmp	SHORT $L142429
$L142557:

; 3088 : 
; 3089 : 				case BST_DoubleSineWave:
; 3090 : 					DoubleSineWave(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.Location, DestinationLocation, System.TesselationLevel,System.TimeScale);

	fstp	ST(0)
$L142429:
	fld	DWORD PTR _Axis2$142469[esp+716]
	fmul	DWORD PTR _Axis2$142469[esp+716]
	fld	DWORD PTR _Axis2$142469[esp+720]
	fmul	DWORD PTR _Axis2$142469[esp+720]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Axis2$142469[esp+724]
	fmul	DWORD PTR _Axis2$142469[esp+724]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L142558
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Axis2$142469[esp+716]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$142469[esp+716]
	fld	DWORD PTR _Axis2$142469[esp+720]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Axis2$142469[esp+720]
	fmul	DWORD PTR _Axis2$142469[esp+724]
	fstp	DWORD PTR _Axis2$142469[esp+724]
	jmp	SHORT $L142437
$L142558:
	fstp	ST(0)
$L142437:
	mov	eax, DWORD PTR $T142482[esp+716]
	mov	edx, eax
	mov	DWORD PTR _PreviousColor$142470[esp+716], eax
	mov	eax, DWORD PTR $T142483[esp+716]
	and	eax, 255				; 000000ffH
	and	edx, 255				; 000000ffH
	sub	eax, edx
	mov	DWORD PTR -672+[esp+716], eax
	fild	DWORD PTR -672+[esp+716]
	mov	eax, DWORD PTR $T142482[esp+717]
	mov	ecx, DWORD PTR $T142483[esp+717]
	and	eax, 255				; 000000ffH
	fdiv	DWORD PTR -676+[esp+716]
	and	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	DWORD PTR -672+[esp+716], ecx
	mov	edx, DWORD PTR $T142482[esp+718]
	mov	eax, DWORD PTR $T142483[esp+718]
	and	edx, 255				; 000000ffH
	and	eax, 255				; 000000ffH
	sub	eax, edx
	mov	ecx, DWORD PTR $T142482[esp+719]
	mov	edx, DWORD PTR $T142483[esp+719]
	and	ecx, 255				; 000000ffH
	and	edx, 255				; 000000ffH
	sub	edx, ecx
	mov	DWORD PTR _i$142476[esp+716], 0
	fstp	DWORD PTR _RFactor$142472[esp+716]
	fild	DWORD PTR -672+[esp+716]
	mov	DWORD PTR -672+[esp+716], eax
	mov	eax, DWORD PTR _LineSegments$142461[esp+716]
	test	eax, eax
	fdiv	DWORD PTR -676+[esp+716]
	fstp	DWORD PTR _GFactor$142473[esp+716]
	fild	DWORD PTR -672+[esp+716]
	mov	DWORD PTR -672+[esp+716], edx
	fdiv	DWORD PTR -676+[esp+716]
	fstp	DWORD PTR _BFactor$142474[esp+716]
	fild	DWORD PTR -672+[esp+716]
	fdiv	DWORD PTR -676+[esp+716]
	fstp	DWORD PTR _AFactor$142475[esp+716]
	jle	$L125986
	fld	DWORD PTR _TimeSeconds$[esp+716]
	fmul	QWORD PTR __real@4012000000000000
	fstp	QWORD PTR -20+[esp+716]
	fld	DWORD PTR $T142494[esp+716]
	fmul	DWORD PTR _TimeSeconds$[esp+716]
	fmul	DWORD PTR __real@41500000
	fstp	DWORD PTR -580+[esp+716]
	fld	DWORD PTR $T142488[esp+716]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR -584+[esp+716]
$L142567:
	fild	DWORD PTR _i$142476[esp+716]
	lea	eax, DWORD PTR _Direction$142465[esp+716]
	push	eax
	lea	edx, DWORD PTR $T142398[esp+720]
	fstp	DWORD PTR -692+[esp+720]
	fld	DWORD PTR _StepLength$142467[esp+720]
	fmul	DWORD PTR -692+[esp+720]
	fstp	DWORD PTR _LengthToHere$142480[esp+720]
	mov	ecx, DWORD PTR _LengthToHere$142480[esp+720]
	push	ecx
	push	edx
	call	??D@YA?AVFVector@@MABV0@@Z		; operator*
	fld	DWORD PTR $T142489[esp+736]
	fadd	DWORD PTR [eax+8]
	lea	ecx, DWORD PTR $T142399[esp+728]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T142489[esp+732]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T142489[esp+728]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR -692+[esp+716]
	mov	eax, DWORD PTR $T142399[esp+716]
	fdiv	DWORD PTR -676+[esp+716]
	mov	ecx, DWORD PTR $T142399[esp+720]
	mov	edx, DWORD PTR $T142399[esp+724]
	mov	DWORD PTR _CurrentPosition$142462[esp+716], eax
	mov	eax, DWORD PTR $T142486[esp+716]
	mov	DWORD PTR _CurrentPosition$142462[esp+720], ecx
	mov	DWORD PTR _CurrentPosition$142462[esp+724], edx
	mov	DWORD PTR _OriginalMaxAmplitude$142481[esp+716], eax
	fmul	DWORD PTR __real@41200000
	fadd	QWORD PTR -20+[esp+716]
	fsin
	fmul	DWORD PTR $T142486[esp+716]
	fstp	DWORD PTR $T142486[esp+716]
	fld	DWORD PTR _LengthToHere$142480[esp+716]
	fmul	DWORD PTR $T142487[esp+716]
	fstp	DWORD PTR -680+[esp+716]
	call	edi
	mov	DWORD PTR -672+[esp+716], eax
	fild	DWORD PTR -672+[esp+716]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T142400[esp+728]

; 3109 : 		unclock(Stats.BeamTime);

	fmul	DWORD PTR $T142488[esp+728]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -580+[esp+728]
	fadd	DWORD PTR -680+[esp+728]
	fsub	DWORD PTR -584+[esp+728]
	fsin
	fmul	DWORD PTR $T142486[esp+728]
	fld	DWORD PTR _Axis1$142468[esp+736]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis1$142468[esp+732]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis1$142468[esp+728]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T142400[esp+716]
	fadd	DWORD PTR $T142399[esp+716]
	fstp	DWORD PTR _CurrentPosition$142462[esp+716]
	fld	DWORD PTR $T142400[esp+720]
	fadd	DWORD PTR _CurrentPosition$142462[esp+720]
	fstp	DWORD PTR _CurrentPosition$142462[esp+720]
	fld	DWORD PTR $T142400[esp+724]
	fadd	DWORD PTR _CurrentPosition$142462[esp+724]
	fstp	DWORD PTR _CurrentPosition$142462[esp+724]
	call	edi
	mov	DWORD PTR -672+[esp+716], eax
	fild	DWORD PTR -672+[esp+716]
	fmul	DWORD PTR $T142488[esp+716]
	fmul	DWORD PTR __real@38000100
	fadd	DWORD PTR -580+[esp+716]
	fadd	DWORD PTR -680+[esp+716]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T142402[esp+728]
	fsub	DWORD PTR -584+[esp+728]
	fcos
	fmul	DWORD PTR $T142486[esp+728]
	fld	DWORD PTR _Axis2$142469[esp+736]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Axis2$142469[esp+732]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR [esp+4]
	fmul	DWORD PTR _Axis2$142469[esp+728]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T142402[esp+716]
	mov	ecx, DWORD PTR _OriginalMaxAmplitude$142481[esp+716]
	fadd	DWORD PTR _CurrentPosition$142462[esp+716]
	mov	edx, DWORD PTR $T142482[esp+716]
	mov	DWORD PTR $T142486[esp+716], ecx
	mov	DWORD PTR _CurrentColor$142471[esp+716], edx
	fstp	DWORD PTR _CurrentPosition$142462[esp+716]
	fld	DWORD PTR $T142402[esp+720]
	fadd	DWORD PTR _CurrentPosition$142462[esp+720]
	fstp	DWORD PTR _CurrentPosition$142462[esp+720]
	fld	DWORD PTR $T142402[esp+724]
	fadd	DWORD PTR _CurrentPosition$142462[esp+724]
	fstp	DWORD PTR _CurrentPosition$142462[esp+724]
	fld	DWORD PTR _RFactor$142472[esp+716]
	fmul	DWORD PTR -692+[esp+716]
	call	__ftol
	fld	DWORD PTR _GFactor$142473[esp+716]
	mov	dl, BYTE PTR $T142482[esp+716]
	fmul	DWORD PTR -692+[esp+716]
	add	al, dl
	mov	BYTE PTR _CurrentColor$142471[esp+716], al
	call	__ftol
	fld	DWORD PTR _BFactor$142474[esp+716]
	mov	cl, BYTE PTR _CurrentColor$142471[esp+717]
	fmul	DWORD PTR -692+[esp+716]
	add	cl, al
	mov	BYTE PTR _CurrentColor$142471[esp+717], cl
	call	__ftol
	fld	DWORD PTR _AFactor$142475[esp+716]
	mov	dl, BYTE PTR _CurrentColor$142471[esp+718]
	fmul	DWORD PTR -692+[esp+716]
	add	dl, al
	mov	BYTE PTR _CurrentColor$142471[esp+718], dl
	call	__ftol
	mov	cl, BYTE PTR _CurrentColor$142471[esp+719]
	mov	edx, DWORD PTR $T142484[esp+716]
	add	cl, al
	mov	eax, DWORD PTR _PreviousColor$142470[esp+716]
	push	1
	mov	BYTE PTR _CurrentColor$142471[esp+723], cl
	mov	edi, DWORD PTR _CurrentColor$142471[esp+720]
	mov	ecx, DWORD PTR $T142485[esp+720]
	push	edi
	push	eax
	push	ecx
	mov	ecx, DWORD PTR _CurrentPosition$142462[esp+732]
	push	edx
	mov	edx, DWORD PTR _CurrentPosition$142462[esp+740]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _CurrentPosition$142462[esp+756]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _PreviousPosition$142463[esp+748]
	mov	ecx, DWORD PTR _PreviousPosition$142463[esp+752]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _PreviousPosition$142463[esp+768]
	mov	DWORD PTR [edx+4], ecx
	push	0
	mov	DWORD PTR [edx+8], eax
	push	ebx
	mov	ecx, DWORD PTR _c$[esp+768]
	mov	edx, DWORD PTR [ecx+124]
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	mov	eax, DWORD PTR _CurrentPosition$142462[esp+720]
	mov	ecx, DWORD PTR _CurrentPosition$142462[esp+724]
	mov	edx, DWORD PTR _CurrentPosition$142462[esp+716]
	mov	DWORD PTR _PreviousPosition$142463[esp+720], eax
	mov	eax, DWORD PTR _i$142476[esp+716]
	mov	DWORD PTR _PreviousPosition$142463[esp+724], ecx
	mov	ecx, DWORD PTR _LineSegments$142461[esp+716]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _PreviousColor$142470[esp+716], edi
	mov	edi, DWORD PTR __imp__rand
	mov	DWORD PTR _PreviousPosition$142463[esp+716], edx
	mov	DWORD PTR _i$142476[esp+716], eax
	jl	$L142567

; 3091 : 					break;

	jmp	$L125986
$L125992:

; 3092 : 
; 3093 : 				case BST_Spline:
; 3094 : 					DrawSpline(System,c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.TesselationLevel);

	mov	eax, DWORD PTR [esi+1600]
	test	eax, eax
	jle	$L125986
	mov	eax, DWORD PTR [esi+2208]
	test	eax, eax
	jle	$L125986
	lea	eax, DWORD PTR [esi+1708]
	mov	DWORD PTR -700+[esp+716], eax
	mov	DWORD PTR -680+[esp+716], 32		; 00000020H

; 3110 : 	}

	npad	7

; 3092 : 
; 3093 : 				case BST_Spline:
; 3094 : 					DrawSpline(System,c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.TesselationLevel);

$L142501:
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $L142502
	add	ecx, 364				; 0000016cH
	mov	edx, DWORD PTR [ecx]
	add	eax, -12				; fffffff4H
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR -700+[esp+716]
$L142502:
	mov	ecx, DWORD PTR -680+[esp+716]
	add	eax, 16					; 00000010H
	dec	ecx
	mov	DWORD PTR -700+[esp+716], eax
	mov	DWORD PTR -680+[esp+716], ecx
	jne	SHORT $L142501
	lea	eax, DWORD PTR [esi+1696]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [eax+4]
	push	0
	mov	DWORD PTR _PreviousLocation$142505[esp+720], edx
	mov	edx, DWORD PTR [eax+8]
	push	0
	mov	DWORD PTR _PreviousLocation$142505[esp+728], ecx
	push	0
	lea	ecx, DWORD PTR _Bogus$142506[esp+728]
	mov	DWORD PTR _PreviousLocation$142505[esp+736], edx
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	mov	ecx, DWORD PTR _PreviousLocation$142505[esp+720]
	mov	eax, DWORD PTR _PreviousLocation$142505[esp+716]
	mov	edx, DWORD PTR _PreviousLocation$142505[esp+724]
	mov	DWORD PTR _LastPoint$142507[esp+720], ecx
	mov	DWORD PTR _NewLastPoint$142508[esp+720], ecx
	mov	ecx, DWORD PTR [esi+2208]
	mov	DWORD PTR _LastPoint$142507[esp+716], eax
	mov	DWORD PTR _NewLastPoint$142508[esp+716], eax
	lea	eax, DWORD PTR [ecx-1]
	test	eax, eax
	mov	DWORD PTR _LastPoint$142507[esp+724], edx
	mov	DWORD PTR _NewLastPoint$142508[esp+724], edx
	mov	DWORD PTR -692+[esp+716], eax
	jle	$L125986
	mov	eax, DWORD PTR [esi+1600]
	lea	edx, DWORD PTR [esi+1696]
	mov	DWORD PTR -680+[esp+716], eax
	mov	DWORD PTR -684+[esp+716], 1
	mov	DWORD PTR -688+[esp+716], edx
$L142509:
	mov	edx, DWORD PTR -688+[esp+716]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR _CurrentLocation$142512[esp+716], edi
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _CurrentLocation$142512[esp+724], edx
	mov	edx, DWORD PTR -684+[esp+716]
	cmp	edx, ecx
	mov	DWORD PTR _CurrentLocation$142512[esp+720], edi
	mov	DWORD PTR _k$142513[esp+716], edx
	jl	SHORT $L142514
	mov	edx, DWORD PTR -692+[esp+716]
	mov	DWORD PTR _k$142513[esp+716], edx
$L142514:
	add	edx, 106				; 0000006aH
	shl	edx, 4
	add	edx, esi
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR _NextLocation$142515[esp+716], edi
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _NextLocation$142515[esp+724], edx
	mov	edx, DWORD PTR _k$142513[esp+716]
	inc	edx
	cmp	edx, ecx
	mov	DWORD PTR _NextLocation$142515[esp+720], edi
	jl	SHORT $L142516
	mov	edx, DWORD PTR -692+[esp+716]
$L142516:
	add	edx, 106				; 0000006aH
	shl	edx, 4
	add	edx, esi
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR _NextLocation1$142517[esp+716], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	xor	edi, edi
	test	eax, eax
	mov	DWORD PTR _NextLocation1$142517[esp+720], ecx
	mov	DWORD PTR _NextLocation1$142517[esp+724], edx
	mov	DWORD PTR _j$142518[esp+716], edi
	jle	$L142521

; 3110 : 	}

	npad	4

; 3092 : 
; 3093 : 				case BST_Spline:
; 3094 : 					DrawSpline(System,c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.TesselationLevel);

$L142519:
	mov	eax, DWORD PTR _Bogus$142506[esp+716]
	fild	DWORD PTR _j$142518[esp+716]
	mov	ecx, DWORD PTR _Bogus$142506[esp+720]
	mov	edx, DWORD PTR _Bogus$142506[esp+724]
	mov	ebp, DWORD PTR _NextLocation1$142517[esp+716]
	fidiv	DWORD PTR -680+[esp+716]
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
	mov	DWORD PTR [ebx+8], edx
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR _NextLocation1$142517[esp+744]
	mov	DWORD PTR [ebx+4], ebp
	mov	ebp, DWORD PTR _NextLocation1$142517[esp+748]
	mov	DWORD PTR [ebx+8], ebp
	mov	ebp, DWORD PTR _NextLocation$142515[esp+740]
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
	mov	DWORD PTR [ebx+8], edx
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR _NextLocation$142515[esp+768]
	mov	DWORD PTR [ebx+4], ebp
	mov	ebp, DWORD PTR _NextLocation$142515[esp+772]
	mov	DWORD PTR [ebx+8], ebp
	mov	ebp, DWORD PTR _CurrentLocation$142512[esp+764]
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
	mov	DWORD PTR [ebx+8], edx
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR _CurrentLocation$142512[esp+792]
	mov	DWORD PTR [ebx+4], ebp
	mov	ebp, DWORD PTR _CurrentLocation$142512[esp+796]
	mov	DWORD PTR [ebx+8], ebp
	sub	esp, 12					; 0000000cH
	mov	ebx, esp
	mov	DWORD PTR [ebx], eax
	mov	DWORD PTR [ebx+4], ecx
	mov	ecx, DWORD PTR _PreviousLocation$142505[esp+800]
	mov	DWORD PTR [ebx+8], edx
	mov	edx, DWORD PTR _PreviousLocation$142505[esp+804]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _PreviousLocation$142505[esp+820]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	lea	edx, DWORD PTR _Bogus$142506[esp+812]
	push	edx
	lea	eax, DWORD PTR _NewLastPoint$142508[esp+816]
	push	eax
	push	ecx
	fstp	DWORD PTR [esp]
	call	?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z ; KRSpline_Sample
	mov	ecx, DWORD PTR [esi+1620]
	mov	edx, DWORD PTR [esi+1616]
	mov	eax, DWORD PTR [esi+1608]
	add	esp, 108				; 0000006cH
	push	1
	push	ecx
	mov	ecx, DWORD PTR [esi+1604]
	push	edx
	push	eax
	mov	eax, DWORD PTR _NewLastPoint$142508[esp+732]
	push	ecx
	mov	ecx, DWORD PTR _NewLastPoint$142508[esp+740]
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _NewLastPoint$142508[esp+756]
	mov	ebx, DWORD PTR _BeamTexture$[esp+748]
	mov	ebp, DWORD PTR _this$[esp+748]
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR _LastPoint$142507[esp+748]
	mov	eax, DWORD PTR _LastPoint$142507[esp+752]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _LastPoint$142507[esp+768]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _c$[esp+760]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+124]
	push	0
	push	ebx
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine
	mov	eax, DWORD PTR _NewLastPoint$142508[esp+724]
	mov	ecx, DWORD PTR _NewLastPoint$142508[esp+716]
	mov	edx, DWORD PTR _NewLastPoint$142508[esp+720]
	mov	DWORD PTR _LastPoint$142507[esp+724], eax
	mov	eax, DWORD PTR [esi+1600]
	inc	edi
	cmp	edi, eax
	mov	DWORD PTR _LastPoint$142507[esp+716], ecx
	mov	DWORD PTR _LastPoint$142507[esp+720], edx
	mov	DWORD PTR _j$142518[esp+716], edi
	mov	DWORD PTR -680+[esp+716], eax
	jl	$L142519
$L142521:
	mov	ecx, DWORD PTR -688+[esp+716]
	mov	edx, ecx
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR _PreviousLocation$142505[esp+716], edi
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _PreviousLocation$142505[esp+720], edi
	mov	edi, DWORD PTR -684+[esp+716]
	inc	edi
	mov	DWORD PTR -688+[esp+716], ecx
	mov	ecx, DWORD PTR [esi+2208]
	mov	DWORD PTR _PreviousLocation$142505[esp+724], edx
	mov	DWORD PTR -684+[esp+716], edi
	lea	edx, DWORD PTR [ecx-1]
	dec	edi
	cmp	edi, edx
	mov	DWORD PTR -692+[esp+716], edx
	jl	$L142509

; 3095 : 					break;

	mov	edi, DWORD PTR __imp__rand
	jmp	$L125986
$L125993:

; 3096 : 
; 3097 : 				case BST_Straight:
; 3098 : 					dnDraw3DLine(c->Frame,BeamTexture, 0,System.Location,DestinationLocation,System.BeamStartWidth,System.BeamEndWidth,System.BeamColor,System.BeamEndColor,true);

	mov	eax, DWORD PTR [esi+1620]
	mov	ecx, DWORD PTR [esi+1616]
	mov	edx, DWORD PTR [esi+1608]
	push	1
	push	eax
	mov	eax, DWORD PTR [esi+1604]
	push	ecx
	push	edx
	mov	edx, DWORD PTR _DestinationLocation$125973[esp+732]
	push	eax
	mov	eax, DWORD PTR _DestinationLocation$125973[esp+740]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _DestinationLocation$125973[esp+756]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	sub	esp, 12					; 0000000cH
	lea	eax, DWORD PTR [esi+364]
	mov	edx, DWORD PTR [eax]
	mov	ecx, esp
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+4], edx
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _c$[esp+760]
	mov	edx, DWORD PTR [ecx+124]
	push	0
	push	ebx
	mov	ecx, ebp
	call	?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ; UD3DRenderDevice::dnDraw3DLine

; 3099 : 					break;

	jmp	$L125986
$L125994:

; 3100 : 
; 3101 : 				case BST_Grid:
; 3102 : 					MovingGrid(c, BeamTexture, System.BeamColor, System.BeamEndColor, System.BeamStartWidth, System.BeamEndWidth, 0, System.MaxAmplitude, System.MaxFrequency, System.Noise, TimeSeconds, System.Location, DestinationLocation,System.TesselationLevel);

	mov	edx, DWORD PTR [esi+1600]
	mov	ecx, DWORD PTR _DestinationLocation$125973[esp+716]
	push	edx
	mov	edx, DWORD PTR _DestinationLocation$125973[esp+724]
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _DestinationLocation$125973[esp+740]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	lea	eax, DWORD PTR [esi+364]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _TimeSeconds$[esp+744]
	push	ecx
	mov	ecx, DWORD PTR [esi+1624]
	mov	DWORD PTR [edx+8], eax
	mov	edx, DWORD PTR [esi+1648]
	mov	eax, DWORD PTR [esi+1636]
	push	edx
	mov	edx, DWORD PTR [esi+1608]
	push	eax
	mov	eax, DWORD PTR [esi+1604]
	push	ecx
	mov	ecx, DWORD PTR [esi+1620]
	push	0
	push	edx
	mov	edx, DWORD PTR [esi+1616]
	push	eax
	push	ecx
	push	edx
	mov	edx, DWORD PTR _c$[esp+780]
	push	ebx
	mov	ecx, ebp
	call	?MovingGrid@UD3DRenderDevice@@QAIXPAVUCanvas@@PAVUTexture@@VFColor@@2MMKMMMMVFVector@@3H@Z ; UD3DRenderDevice::MovingGrid
$L125986:

; 3103 : 					break;
; 3104 : 			}
; 3105 : 			QueuedLinesFlush(System,Frame,BeamTexture,0);

	mov	eax, DWORD PTR _Frame$[esp+712]
	push	0
	push	ebx
	push	eax
	mov	edx, esi
	mov	ecx, ebp
	call	?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z ; UD3DRenderDevice::QueuedLinesFlush
	mov	ecx, DWORD PTR -432+[esp+716]
	mov	eax, DWORD PTR _i$[esp+716]
	mov	edx, DWORD PTR -624+[esp+716]
	add	ecx, 4
	inc	eax
	mov	DWORD PTR -432+[esp+716], ecx
	mov	ecx, DWORD PTR [esi+2356]
	add	edx, 12					; 0000000cH
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+716], eax
	mov	DWORD PTR -624+[esp+716], edx
	jl	$L125970
$L125972:

; 3106 : 
; 3107 : 		}
; 3108 : 		QueueParticleFlush(System,Frame);

	mov	ecx, DWORD PTR _Frame$[esp+712]
	push	ecx
	mov	edx, esi
	mov	ecx, ebp
	call	?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z ; UD3DRenderDevice::QueueParticleFlush

; 3109 : 		unclock(Stats.BeamTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	mov	DWORD PTR _L$142535[esp+716], 0
	je	SHORT $L142537
	rdtsc
	mov	DWORD PTR _L$142535[esp+716], eax
	mov	DWORD PTR _H$142536[esp+716], edx
$L142537:
	mov	eax, DWORD PTR _L$142535[esp+716]
	mov	ecx, DWORD PTR [ebp+19640]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [ebp+19640], ecx
$L125946:

; 3110 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 700				; 000002bcH
	ret	4
$L142574:
	DD	$L125993
	DD	$L125989
	DD	$L125989
	DD	$L125990
	DD	$L125991
	DD	$L125992
	DD	$L125994
?dnDrawBeam@UD3DRenderDevice@@UAIXAAVABeamSystem@@PAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::dnDrawBeam
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnMath.h
_TEXT	ENDS
;	COMDAT ??D@YA?AVFVector@@MABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_Scale$ = 12
_V$ = 16
??D@YA?AVFVector@@MABV0@@Z PROC NEAR			; operator*, COMDAT

; 228  : 		return FVector( V.X * Scale, V.Y * Scale, V.Z * Scale );

	mov	eax, DWORD PTR _V$[esp-4]
	fld	DWORD PTR _Scale$[esp-4]
	fmul	DWORD PTR [eax+8]
	fld	DWORD PTR _Scale$[esp-4]
	fmul	DWORD PTR [eax+4]
	fld	DWORD PTR _Scale$[esp-4]
	fmul	DWORD PTR [eax]
	mov	eax, DWORD PTR ___$ReturnUdt$[esp-4]
	fstp	DWORD PTR [eax]
	fstp	DWORD PTR [eax+4]
	fstp	DWORD PTR [eax+8]

; 229  : 	}

	ret	0
??D@YA?AVFVector@@MABV0@@Z ENDP				; operator*
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z
_TEXT	SEGMENT
_t$ = 8
_NewLocation$ = 12
_NewRotation$ = 16
_p1$ = 20
_PreviousRotation$ = 32
_p2$ = 44
_Rotation$ = 56
_p3$ = 68
_NextRotation$ = 80
_p4$ = 92
_Next2Rotation$ = 104
_opt1$ = -28
_opt2$ = -32
_opt3$ = 8
$T142587 = 92
$T142588 = 44
$T142589 = 68
$T142590 = -24
$T142591 = 92
$T142592 = -12
$T142593 = 68
$T142594 = 92
$T142595 = 68
$T142596 = 92
$T142597 = 20
$T142598 = 44
$T142601 = 92
$T142602 = 92
?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z PROC NEAR ; KRSpline_Sample, COMDAT

; 2636 : {

	sub	esp, 32					; 00000020H

; 2637 :     float t3, t2, opt1, opt2, opt3, opt4;
; 2638 :     
; 2639 :     t2 = t*t;

	fld	DWORD PTR _t$[esp+28]
	push	ebx
	fmul	DWORD PTR _t$[esp+32]
	push	ebp

; 2640 :     t3 = t2*t;

	fld	DWORD PTR _t$[esp+36]
	push	esi
	push	edi
	fmul	ST(0), ST(1)

; 2641 : 
; 2642 :  // Q(t) = .5(P1(-t^3+2t^2-t) + P2(3t^3-5t^2+2) + P3(-3t^3+4t^2+t) + P4(t^3-t^2))
; 2643 : 
; 2644 : 	opt1 = -t3+2.f*t2-t;

	fld	ST(1)
	fadd	ST(0), ST(0)
	fsub	ST(0), ST(1)
	fsub	DWORD PTR _t$[esp+44]
	fstp	DWORD PTR _opt1$[esp+48]

; 2645 : 	opt2 = 3.f*t3-5.f*t2+2.;

	fld	DWORD PTR __real@40400000
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	DWORD PTR __real@40a00000
	fsubr	ST(0), ST(1)
	fadd	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _opt2$[esp+48]

; 2646 : 	opt3 = -3.f*t3+4.f*t2+t;

	fld	ST(2)
	fmul	DWORD PTR __real@40800000
	fsub	ST(0), ST(1)
	fadd	DWORD PTR _t$[esp+44]
	fstp	DWORD PTR _opt3$[esp+44]
	fstp	ST(0)

; 2647 : 	opt4 = t3-t2;

	fsubrp	ST(1), ST(0)

; 2648 : 
; 2649 : 	NewLocation=.5f*((p1*opt1)+(p2*opt2)+(p3*opt3)+(p4*opt4));

	fld	DWORD PTR _p4$[esp+44]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _p4$[esp+48]
	fmul	ST(0), ST(2)
	fld	DWORD PTR _p4$[esp+52]
	fmul	ST(0), ST(3)
	fstp	DWORD PTR $T142592[esp+56]
	fld	DWORD PTR _p3$[esp+44]
	fmul	DWORD PTR _opt3$[esp+44]
	fld	DWORD PTR _p3$[esp+48]
	fmul	DWORD PTR _opt3$[esp+44]
	fld	DWORD PTR _p3$[esp+52]
	fmul	DWORD PTR _opt3$[esp+44]
	fstp	DWORD PTR $T142590[esp+56]
	fld	DWORD PTR _p2$[esp+44]
	fmul	DWORD PTR _opt2$[esp+48]
	fld	DWORD PTR _p2$[esp+48]
	fmul	DWORD PTR _opt2$[esp+48]
	fld	DWORD PTR _p2$[esp+52]
	fmul	DWORD PTR _opt2$[esp+48]
	fstp	DWORD PTR $T142588[esp+52]
	fld	DWORD PTR _p1$[esp+44]
	fmul	DWORD PTR _opt1$[esp+48]
	fstp	DWORD PTR $T142587[esp+44]
	fld	DWORD PTR _p1$[esp+48]
	fmul	DWORD PTR _opt1$[esp+48]
	fstp	DWORD PTR $T142587[esp+48]
	fld	DWORD PTR _p1$[esp+52]
	fmul	DWORD PTR _opt1$[esp+48]
	fstp	DWORD PTR $T142587[esp+52]
	fld	DWORD PTR $T142587[esp+44]
	fadd	ST(0), ST(2)
	fstp	DWORD PTR $T142589[esp+44]
	fld	DWORD PTR $T142587[esp+48]
	fadd	ST(0), ST(1)
	fstp	DWORD PTR $T142589[esp+48]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR $T142587[esp+52]
	fadd	DWORD PTR $T142588[esp+52]
	fstp	DWORD PTR $T142589[esp+52]
	fld	DWORD PTR $T142589[esp+44]
	mov	eax, DWORD PTR _NewLocation$[esp+44]
	fadd	ST(0), ST(2)
	fstp	DWORD PTR $T142591[esp+44]
	fld	DWORD PTR $T142589[esp+48]
	fadd	ST(0), ST(1)
	fstp	ST(2)
	fstp	ST(0)
	fld	DWORD PTR $T142589[esp+52]
	fadd	DWORD PTR $T142590[esp+56]
	fstp	DWORD PTR $T142591[esp+52]
	fld	DWORD PTR $T142591[esp+44]
	fadd	ST(0), ST(3)
	fstp	DWORD PTR $T142593[esp+44]
	fadd	ST(0), ST(1)
	fstp	ST(2)
	fstp	ST(0)
	fld	DWORD PTR $T142591[esp+52]
	fadd	DWORD PTR $T142592[esp+56]
	fld	DWORD PTR $T142593[esp+44]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR $T142594[esp+44]
	mov	ecx, DWORD PTR $T142594[esp+44]
	fxch	ST(1)
	fmul	DWORD PTR __real@3f000000
	mov	DWORD PTR [eax], ecx
	fstp	DWORD PTR $T142594[esp+48]
	mov	edx, DWORD PTR $T142594[esp+48]
	fmul	DWORD PTR __real@3f000000
	mov	DWORD PTR [eax+4], edx
	fstp	DWORD PTR $T142594[esp+52]

; 2650 : 	NewRotation=.5f*((PreviousRotation*opt1)+(Rotation*opt2)+(NextRotation*opt3)+(Next2Rotation*opt4));

	fild	DWORD PTR _Next2Rotation$[esp+44]
	mov	ecx, DWORD PTR $T142594[esp+52]
	mov	DWORD PTR [eax+8], ecx
	fmul	ST(0), ST(1)
	call	__ftol
	fild	DWORD PTR _Next2Rotation$[esp+48]
	mov	esi, eax
	fmul	ST(0), ST(1)
	call	__ftol
	fild	DWORD PTR _Next2Rotation$[esp+52]
	mov	edi, eax
	fmul	ST(0), ST(1)
	call	__ftol
	fstp	ST(0)
	fild	DWORD PTR _NextRotation$[esp+44]
	mov	ebx, eax
	fmul	DWORD PTR _opt3$[esp+44]
	call	__ftol
	fild	DWORD PTR _NextRotation$[esp+48]
	mov	ebp, eax
	fmul	DWORD PTR _opt3$[esp+44]
	call	__ftol
	fild	DWORD PTR _NextRotation$[esp+52]
	mov	DWORD PTR $T142598[esp+48], eax
	fmul	DWORD PTR _opt3$[esp+44]
	call	__ftol
	fild	DWORD PTR _Rotation$[esp+44]
	mov	DWORD PTR $T142598[esp+52], eax
	fmul	DWORD PTR _opt2$[esp+48]
	call	__ftol
	fild	DWORD PTR _Rotation$[esp+48]
	mov	DWORD PTR $T142596[esp+44], eax
	fmul	DWORD PTR _opt2$[esp+48]
	call	__ftol
	fild	DWORD PTR _Rotation$[esp+52]
	mov	DWORD PTR $T142596[esp+48], eax
	fmul	DWORD PTR _opt2$[esp+48]
	call	__ftol
	mov	DWORD PTR $T142596[esp+52], eax
	fild	DWORD PTR _PreviousRotation$[esp+44]
	fmul	DWORD PTR _opt1$[esp+48]
	call	__ftol
	fild	DWORD PTR _PreviousRotation$[esp+48]
	mov	DWORD PTR $T142595[esp+44], eax
	fmul	DWORD PTR _opt1$[esp+48]
	call	__ftol
	fild	DWORD PTR _PreviousRotation$[esp+52]
	mov	DWORD PTR $T142595[esp+48], eax
	fmul	DWORD PTR _opt1$[esp+48]
	call	__ftol
	mov	ecx, DWORD PTR $T142596[esp+44]
	mov	edx, DWORD PTR $T142595[esp+44]
	add	edx, ecx
	mov	ecx, DWORD PTR $T142596[esp+48]
	mov	DWORD PTR $T142597[esp+44], edx
	mov	edx, DWORD PTR $T142595[esp+48]
	add	ecx, edx
	mov	edx, DWORD PTR $T142596[esp+52]
	add	eax, edx
	mov	edx, DWORD PTR $T142597[esp+44]
	add	edx, ebp
	mov	ebp, DWORD PTR $T142598[esp+48]
	add	ecx, ebp
	mov	ebp, DWORD PTR $T142598[esp+52]
	add	eax, ebp
	add	eax, ebx
	mov	DWORD PTR $T142601[esp+52], eax
	fild	DWORD PTR $T142601[esp+52]
	add	edx, esi
	add	ecx, edi
	fmul	DWORD PTR __real@3f000000
	mov	DWORD PTR $T142601[esp+44], edx
	mov	DWORD PTR $T142601[esp+48], ecx
	call	__ftol
	fild	DWORD PTR $T142601[esp+48]
	push	eax
	fmul	DWORD PTR __real@3f000000
	call	__ftol
	fild	DWORD PTR $T142601[esp+48]
	push	eax
	fmul	DWORD PTR __real@3f000000
	call	__ftol
	push	eax
	lea	ecx, DWORD PTR $T142602[esp+56]
	call	DWORD PTR __imp_??0FRotator@@QAE@HHH@Z
	mov	ecx, DWORD PTR $T142602[esp+44]
	mov	eax, DWORD PTR _NewRotation$[esp+44]
	mov	edx, DWORD PTR $T142602[esp+48]
	pop	edi
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T142602[esp+48]
	pop	esi
	mov	DWORD PTR [eax+4], edx
	pop	ebp
	mov	DWORD PTR [eax+8], ecx
	pop	ebx

; 2651 : 
; 2652 : }

	add	esp, 32					; 00000020H
	ret	0
?KRSpline_Sample@@YAXMAAVFVector@@AAVFRotator@@V1@V2@232323@Z ENDP ; KRSpline_Sample
_TEXT	ENDS
PUBLIC	?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ	; UD3DRenderDevice::QueueParticleShutdown
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
;	COMDAT ?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ
_TEXT	SEGMENT
?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ PROC NEAR ; UD3DRenderDevice::QueueParticleShutdown, COMDAT
; _this$ = ecx

; 3127 : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 3128 : 		VALIDATE;
; 3129 : 
; 3130 : 		for(int i=0;i<QueuedParticles.Num();i++)

	mov	eax, DWORD PTR [esi+675228]
	xor	ebx, ebx
	test	eax, eax
	jle	SHORT $L126000
	push	edi
	xor	edi, edi
$L125998:

; 3131 : 			if(QueuedParticles(i).p&&QueuedParticles(i).ParticleMax)

	mov	eax, DWORD PTR [esi+675224]
	mov	edx, DWORD PTR [eax+edi+4]
	add	eax, edi
	test	edx, edx
	je	SHORT $L125999
	mov	ecx, DWORD PTR [eax+12]
	test	ecx, ecx
	je	SHORT $L125999

; 3132 : 				appFree(QueuedParticles(i).p);

	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR [eax+8]
$L125999:
	mov	eax, DWORD PTR [esi+675228]
	inc	ebx
	add	edi, 16					; 00000010H
	cmp	ebx, eax
	jl	SHORT $L125998
	pop	edi
$L126000:
	pop	esi
	pop	ebx

; 3133 : 	}

	ret	0
?QueueParticleShutdown@UD3DRenderDevice@@QAIXXZ ENDP	; UD3DRenderDevice::QueueParticleShutdown
_TEXT	ENDS
PUBLIC	??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
;	COMDAT ??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ DB 'Q'
	DB	00H, 'u', 00H, 'e', 00H, 'u', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'P', 00H, 'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, 00H, 00H		; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z
_TEXT	SEGMENT
_Texture$ = 8
?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z PROC NEAR ; UD3DRenderDevice::QueuedParticleAlloc, COMDAT
; _this$ = ecx

; 3137 : 	{

	push	ebx

; 3138 : 		VALIDATE;
; 3139 : 
; 3140 : 		// Attempt to find the bin this texture fits under, or allocate one if nessecary:
; 3141 : 		for(int bin=0;bin<QueuedParticles.Num();bin++)

	mov	ebx, DWORD PTR _Texture$[esp]
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	mov	ecx, DWORD PTR [edi+675228]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L142885
	mov	edx, DWORD PTR [edi+675224]

; 3174 : 	}

	npad	4
$L126005:

; 3142 : 			if(QueuedParticles(bin).Texture==Texture)

	cmp	DWORD PTR [edx], ebx
	je	SHORT $L142885
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L126005
$L142885:

; 3143 : 				break;
; 3144 : 
; 3145 : 		// Couldn't locate the bin for this particle system, allocate one of the free bins.
; 3146 : 		if(bin>=QueuedParticles.Num())

	cmp	eax, ecx
	jl	SHORT $L126009

; 3147 : 		{
; 3148 : 			// Find an empty bin (ie, particle count is zero)
; 3149 : 			for(bin=0;bin<QueuedParticles.Num();bin++)

	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L142886
	mov	edx, DWORD PTR [edi+675224]
	add	edx, 8

; 3174 : 	}

	npad	1

; 3147 : 		{
; 3148 : 			// Find an empty bin (ie, particle count is zero)
; 3149 : 			for(bin=0;bin<QueuedParticles.Num();bin++)

$L126010:

; 3150 : 				if(!QueuedParticles(bin).ParticleCount)

	cmp	DWORD PTR [edx], 0
	je	SHORT $L142886
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L126010
$L142886:

; 3151 : 					break;
; 3152 : 
; 3153 : 			// No bins available, allocate and initialize one:
; 3154 : 			if(bin>=QueuedParticles.Num())

	cmp	eax, ecx
	jl	SHORT $L126014

; 3155 : 				bin=QueuedParticles.AddZeroed();

	push	16					; 00000010H
	lea	esi, DWORD PTR [edi+675224]
	push	1
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ebp, DWORD PTR [esi]
	xor	ecx, ecx
	mov	edx, eax
	shl	edx, 4
	add	edx, ebp
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], ecx
	mov	DWORD PTR [edx+12], ecx
$L126014:

; 3156 : 
; 3157 : 			// Set the bin's texture to my own.
; 3158 : 			QueuedParticles(bin).Texture=Texture;

	mov	edx, DWORD PTR [edi+675224]
	mov	ecx, eax
	shl	ecx, 4
	mov	DWORD PTR [ecx+edx], ebx
$L126009:

; 3159 : 		}
; 3160 : 
; 3161 : 		// Ok, I've got a valid bin, now allocate a particle out of it:
; 3162 : 	    int ParticleIndex=QueuedParticles(bin).ParticleCount;

	shl	eax, 4
	mov	ebx, eax
	mov	eax, DWORD PTR [edi+675224]
	mov	ebp, DWORD PTR [ebx+eax+8]
	lea	eax, DWORD PTR [ebx+eax+8]

; 3163 : 		QueuedParticles(bin).ParticleCount++;

	mov	esi, ebp
	inc	esi
	mov	DWORD PTR [eax], esi

; 3164 : 
; 3165 : 		// Do I need to allocate more particles to make room for the new one?
; 3166 : 		if(QueuedParticles(bin).ParticleCount>=QueuedParticles(bin).ParticleMax)

	mov	ecx, DWORD PTR [edi+675224]
	mov	edx, DWORD PTR [ebx+ecx+8]
	lea	eax, DWORD PTR [ebx+ecx]
	mov	ecx, DWORD PTR [eax+12]
	cmp	edx, ecx
	jl	SHORT $L126016

; 3167 : 		{
; 3168 : 			QueuedParticles(bin).ParticleMax+=Min(Max(QueuedParticles(bin).ParticleMax+1,4),256);	// Basically double the size of the particle queue until we hit 256 particles, then alloc no more than 256 at a time.

	inc	ecx
	cmp	ecx, 4
	jge	SHORT $L142860
	mov	ecx, 4
	jmp	SHORT $L142868
$L142860:
	cmp	ecx, 256				; 00000100H
	jle	SHORT $L142868
	mov	ecx, 256				; 00000100H
$L142868:
	add	DWORD PTR [eax+12], ecx

; 3169 : 			QueuedParticles(bin).p=(QueuedParticle *)appRealloc(QueuedParticles(bin).p,(QueuedParticles(bin).ParticleMax+1)*sizeof(QueuedParticle),_T("Queued Particles"));

	mov	edx, DWORD PTR [edi+675224]
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ebx+edx+12]
	lea	esi, DWORD PTR [ebx+edx]
	mov	edx, DWORD PTR [ecx]
	inc	eax
	lea	eax, DWORD PTR [eax+eax*8]
	push	OFFSET FLAT:??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	shl	eax, 4
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax
$L126016:

; 3170 : 		}
; 3171 : 		
; 3172 : 		// Return a reference to the allocated particle:
; 3173 : 		return QueuedParticles(bin).p[ParticleIndex];

	mov	ecx, DWORD PTR [edi+675224]
	mov	edx, DWORD PTR [ebx+ecx+4]
	pop	edi
	lea	eax, DWORD PTR [ebp+ebp*8]
	pop	esi
	shl	eax, 4
	pop	ebp
	add	eax, edx
	pop	ebx

; 3174 : 	}

	ret	4
?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ENDP ; UD3DRenderDevice::QueuedParticleAlloc
_TEXT	ENDS
PUBLIC	??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ ; `string'
PUBLIC	?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ; FD3DVertexBuffer<FD3DParticle>::Lock
PUBLIC	?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ	; FD3DVertexBuffer<FD3DParticle>::Set
EXTRN	__imp_?STY2PolyFlags@AActor@@QAIXPAUFSceneNode@@AAK1@Z:NEAR
;	COMDAT ??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ DB 'TotalParticleC'
	DB	'ount*6<PARTICLE_VERTEXBUFFER_SIZE', 00H	; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT
_PolyFlags$ = -144
_PolyFlagsEx$ = -140
_i$ = -152
_First$ = -132
_CurrentTextureInfo$ = -128
_ParticleIndex$ = -156
_System$ = -136
_Frame$ = 8
_Xor$142905 = -152
$T142948 = -156
$T142949 = -148
$T142956 = -152
?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::QueueParticleFlush, COMDAT
; _this$ = ecx
; _System$ = edx

; 3177 : 	{

	sub	esp, 156				; 0000009cH
	push	ebp
	mov	ebp, ecx

; 3178 : 		VALIDATE;
; 3179 : 
; 3180 : 		// Early out if there are no particles queued for rendering.
; 3181 : 		if(!QueuedParticles.Num()) 

	mov	eax, DWORD PTR [ebp+675228]
	test	eax, eax
	push	esi
	mov	esi, edx
	mov	DWORD PTR _System$[esp+164], esi
	je	$L126069

; 3182 : 			return;
; 3183 : 
; 3184 : 		DWORD PolyFlags,
; 3185 : 			  PolyFlagsEx;
; 3186 : 		//GetActorPolyFlags(Frame,&System,PolyFlags,PolyFlagsEx);
; 3187 : 		System.STY2PolyFlags( Frame, PolyFlags, PolyFlagsEx);

	mov	edx, DWORD PTR _Frame$[esp+160]
	lea	eax, DWORD PTR _PolyFlagsEx$[esp+164]
	push	eax
	lea	ecx, DWORD PTR _PolyFlags$[esp+168]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_?STY2PolyFlags@AActor@@QAIXPAUFSceneNode@@AAK1@Z

; 3188 : 		PolyFlags|=PF_TwoSided;

	mov	eax, DWORD PTR _PolyFlags$[esp+164]

; 3189 : 		PolyFlagsEx|=PFX_Clip;

	mov	edx, DWORD PTR _PolyFlagsEx$[esp+164]

; 3190 : 
; 3191 : 		// Configure the Z-Buffer
; 3192 : 		     if(System.ZBufferMode==ZBM_Occlude) PolyFlags|=PF_Occlude;	// Full Z buffer occlusion	

	mov	cl, BYTE PTR [esi+1552]
	or	eax, 256				; 00000100H
	or	edx, 2
	test	cl, cl
	mov	DWORD PTR _PolyFlags$[esp+164], eax
	mov	DWORD PTR _PolyFlagsEx$[esp+164], edx
	jne	SHORT $L126033
	or	eax, -2147483648			; 80000000H

; 3193 : 		else if(System.ZBufferMode==ZBM_None)							// No Z buffer interaction whatsoever

	jmp	SHORT $L143047
$L126033:
	cmp	cl, 2
	jne	SHORT $L126035

; 3194 : 		{
; 3195 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_ALWAYS );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]

; 3196 : 			PolyFlags&=~PF_Occlude;

	mov	eax, DWORD PTR _PolyFlags$[esp+164]

; 3197 : 		}
; 3198 : 		else PolyFlags&=~PF_Occlude;	// Read only Z Buffer

	mov	edx, DWORD PTR _PolyFlagsEx$[esp+164]
$L126035:
	and	eax, 2147483647				; 7fffffffH
$L143047:
	push	ebx
	push	edi

; 3199 : 
; 3200 : 		UBOOL VariableAlpha=true;
; 3201 : 		if((System.AlphaStart==1.f)&&(System.AlphaEnd==1.f)) VariableAlpha=false;

	mov	edi, DWORD PTR [esi+1576]
	mov	ecx, 1065353216				; 3f800000H
	cmp	edi, ecx
	mov	DWORD PTR _PolyFlags$[esp+172], eax
	jne	SHORT $L143035
	cmp	DWORD PTR [esi+1584], ecx

; 3202 : 		if(VariableAlpha) PolyFlags|=PF_Translucent;

	je	SHORT $L126039
$L143035:
	or	eax, 4
	mov	DWORD PTR _PolyFlags$[esp+172], eax
$L126039:

; 3203 : 		
; 3204 : 		SetBlending(PolyFlags,PolyFlagsEx);

	mov	edi, eax
	and	edi, 1073741892				; 40000044H
	cmp	edi, 1073741824				; 40000000H
	mov	ecx, eax
	mov	DWORD PTR $T142949[esp+172], edx
	mov	DWORD PTR $T142948[esp+172], ecx
	jne	SHORT $L142901
	mov	edi, DWORD PTR [ebp+19148]
	test	edi, edi
	jne	SHORT $L142900
$L142901:
	and	eax, -1073741825			; bfffffffH
	mov	ecx, eax
	mov	DWORD PTR $T142948[esp+172], ecx
$L142900:
	test	cl, 68					; 00000044H
	jne	SHORT $L142902
	test	dl, 113					; 00000071H
	jne	SHORT $L142902
	or	ecx, -2147483648			; 80000000H
	jmp	SHORT $L143048
$L142902:
	test	cl, 4
	je	SHORT $L142904
	and	ecx, -3					; fffffffdH
$L143048:
	mov	DWORD PTR $T142948[esp+172], ecx
$L142904:
	mov	edi, DWORD PTR [ebp+19616]
	mov	ebx, DWORD PTR [ebp+19620]
	xor	edi, ecx
	xor	ebx, edx
	test	edi, 256				; 00000100H
	mov	DWORD PTR _Xor$142905[esp+172], edi
	je	SHORT $L142907
	mov	edx, DWORD PTR $T142948[esp+172]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR $T142949[esp+172]
	mov	ecx, DWORD PTR $T142948[esp+172]
$L142907:
	test	bl, 2
	je	SHORT $L142908
	mov	edx, DWORD PTR $T142949[esp+172]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR $T142949[esp+172]
	mov	ecx, DWORD PTR $T142948[esp+172]
$L142908:
	test	bl, 8
	je	SHORT $L142909
	mov	edx, DWORD PTR $T142949[esp+172]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR $T142949[esp+172]
	mov	ecx, DWORD PTR $T142948[esp+172]
$L142909:
	test	DWORD PTR _Xor$142905[esp+172], -754972601 ; d3000847H
	jne	SHORT $L142911
	test	bl, 113					; 00000071H
	je	$L142947
	mov	edx, DWORD PTR $T142949[esp+172]
	mov	ecx, DWORD PTR $T142948[esp+172]
$L142911:
	test	DWORD PTR _Xor$142905[esp+172], 268435525 ; 10000045H
	jne	SHORT $L142913
	test	bl, 113					; 00000071H
	je	$L142933
$L142913:
	test	bl, 1
	je	SHORT $L142914
	test	dl, 1
	jne	SHORT $L142914
	mov	eax, DWORD PTR [ebp+19128]
	test	eax, eax
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L142915
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L142916
$L142915:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L142916:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	edx, DWORD PTR $T142949[esp+172]
	mov	ecx, DWORD PTR $T142948[esp+172]
$L142914:
	test	ecx, 268435525				; 10000045H
	jne	SHORT $L142917
	test	dl, 113					; 00000071H
	jne	SHORT $L142917
	xor	edx, edx
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L142933
$L142917:
	test	dl, 64					; 00000040H
	je	SHORT $L142919
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L143049:
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142933
$L142919:
	test	cl, 1
	je	SHORT $L142921
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L143051:
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142933
$L142921:
	test	dl, 32					; 00000020H
	je	SHORT $L142923
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142933
$L142923:
	test	dl, 16					; 00000010H
	je	SHORT $L142925
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L143051
$L142925:
	test	cl, 4
	je	SHORT $L142927
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L143049
$L142927:
	test	cl, 64					; 00000040H
	je	SHORT $L142929
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142933
$L142929:
	test	ecx, 268435456				; 10000000H
	je	SHORT $L142931
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L142933
$L142931:
	test	dl, 1
	je	$L142933
	mov	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L142933:
	test	BYTE PTR _Xor$142905[esp+172], 1
	je	SHORT $L142934
	mov	edx, DWORD PTR $T142948[esp+172]
	and	edx, 1
	mov	ecx, ebp
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, ebp
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, ebp
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L142934:
	mov	eax, DWORD PTR _Xor$142905[esp+172]
	test	eax, eax
	jns	SHORT $L142936
	mov	ecx, DWORD PTR $T142948[esp+172]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L142936:
	test	BYTE PTR _Xor$142905[esp+172], 2
	je	SHORT $L142939
	test	BYTE PTR $T142948[esp+172], 2
	mov	eax, DWORD PTR [ebp+19124]
	je	SHORT $L142938
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L142939
$L142938:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L142939:
	mov	edi, DWORD PTR _Xor$142905[esp+172]
	test	edi, 2048				; 00000800H
	mov	ebx, DWORD PTR $T142948[esp+172]
	je	SHORT $L142940
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	esi, ebx
	and	esi, 2048				; 00000800H
	neg	esi
	sbb	esi, esi
	add	esi, 2
	push	esi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	esi, DWORD PTR _System$[esp+172]
$L142940:
	test	edi, 1073741824				; 40000000H
	je	SHORT $L142941
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L142941:
	test	edi, 50331648				; 03000000H
	je	SHORT $L142947
	test	ebx, 16777216				; 01000000H
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L142944
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L143052
$L142944:
	test	ebx, 33554432				; 02000000H
	je	SHORT $L142946
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L143052
$L142946:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L143052:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L142947:
	mov	edx, DWORD PTR $T142948[esp+172]
	mov	eax, DWORD PTR $T142949[esp+172]
	mov	DWORD PTR [ebp+19616], edx
	mov	DWORD PTR [ebp+19620], eax

; 3205 : 
; 3206 : 		// Set the zbias for the entire particle system:
; 3207 : 		SetZBias(System.ZBias); //Direct3DDevice8->SetRenderState(D3DRS_ZBIAS,System.ZBias);

	mov	ecx, DWORD PTR [esi+1556]
	push	1098907648				; 41800000H
	mov	edx, ecx
	push	0
	push	edx
	mov	DWORD PTR $T142956[esp+184], ecx
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [ebp+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L142955
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L143036
$L142955:
	mov	esi, DWORD PTR [ebp+19124]
	fst	DWORD PTR [ebp+675164]
	mov	edi, DWORD PTR [esi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	esi
	call	DWORD PTR [edi+200]
	jmp	SHORT $L142954
$L143036:
	fstp	ST(0)
$L142954:

; 3208 : 		SetTextureNULL(1);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	1
	push	eax
	call	DWORD PTR [ecx+244]
	lea	eax, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19716], eax

; 3209 : 
; 3210 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [ebp+675196]
	test	eax, eax
	je	SHORT $L142965
	mov	eax, DWORD PTR [ebp+675192]
	test	eax, eax
	je	SHORT $L142965
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [ebp+675192], 0
$L142965:

; 3211 : 
; 3212 : 		// Count the total number of particles in this system, tallying the particles queued for each material.
; 3213 : 		int TotalParticleCount=0;
; 3214 : 		for(int i=0;i<QueuedParticles.Num();i++)

	mov	edx, DWORD PTR [ebp+675228]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $L126044
	mov	ecx, DWORD PTR [ebp+675224]
	add	ecx, 8
$L126042:

; 3215 : 		{
; 3216 : 			TotalParticleCount+=QueuedParticles(i).ParticleCount;

	add	eax, DWORD PTR [ecx]
	add	ecx, 16					; 00000010H
	dec	edx
	jne	SHORT $L126042
$L126044:

; 3217 : 		}
; 3218 : 
; 3219 : 		Stats.Particles+=TotalParticleCount;

	mov	edx, DWORD PTR [ebp+19684]

; 3220 : 
; 3221 : 		// First set up the vertex buffer:
; 3222 : 		verify(TotalParticleCount*6<PARTICLE_VERTEXBUFFER_SIZE);

	lea	esi, DWORD PTR [eax+eax*2]
	add	edx, eax
	shl	esi, 1
	cmp	esi, 16384				; 00004000H
	mov	DWORD PTR [ebp+19684], edx
	jl	SHORT $L126045
	push	3222					; 00000c96H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126045:

; 3223 : 		FD3DParticle *Vertices=(FD3DParticle*)ParticleVertices.Lock(TotalParticleCount*6);

	push	-1
	lea	ecx, DWORD PTR [ebp+16740]
	push	esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ; FD3DVertexBuffer<FD3DParticle>::Lock

; 3224 : 		FD3DParticle *v=Vertices;
; 3225 : 		for(i=0;i<QueuedParticles.Num();i++)

	mov	ecx, DWORD PTR [ebp+675228]
	mov	ebx, eax
	xor	eax, eax
	cmp	ecx, eax
	mov	DWORD PTR _i$[esp+172], eax
	jle	SHORT $L126052
	mov	edx, DWORD PTR [ebp+675224]
$L126050:

; 3226 : 			if(QueuedParticles(i).ParticleCount)

	mov	ecx, DWORD PTR [eax+edx+8]
	test	ecx, ecx
	je	SHORT $L126051

; 3227 : 			{
; 3228 : 				memcpy(v,QueuedParticles(i).p,QueuedParticles(i).ParticleCount*sizeof(QueuedParticle));

	mov	esi, DWORD PTR [eax+edx+4]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	mov	edx, ecx
	shr	ecx, 2
	mov	edi, ebx
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb

; 3229 : 				v+=QueuedParticles(i).ParticleCount*6;

	mov	edx, DWORD PTR [ebp+675224]
	mov	ecx, DWORD PTR [eax+edx+8]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	add	ebx, ecx
$L126051:
	mov	ecx, DWORD PTR _i$[esp+172]
	mov	esi, DWORD PTR [ebp+675228]
	inc	ecx
	add	eax, 16					; 00000010H
	cmp	ecx, esi
	mov	DWORD PTR _i$[esp+172], ecx
	jl	SHORT $L126050
$L126052:

; 3230 : 			}
; 3231 : 
; 3232 : 		INT	First = ParticleVertices.Unlock();

	mov	eax, DWORD PTR [ebp+16744]
	test	eax, eax
	lea	esi, DWORD PTR [ebp+16740]
	jne	SHORT $L142995
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L142995:
	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	jge	SHORT $L142996
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L142996:
	mov	edx, DWORD PTR [esi+12]

; 3233 : 		
; 3234 : 		// Now render the vertex buffer:
; 3235 : 		ParticleVertices.Set();

	mov	ecx, esi
	mov	DWORD PTR _First$[esp+172], edx
	call	?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ ; FD3DVertexBuffer<FD3DParticle>::Set

; 3236 : 
; 3237 : 		UTexture *CurrentTexture=NULL;
; 3238 : 		FTextureInfo CurrentTextureInfo;
; 3239 : 		int ParticleIndex=0;
; 3240 : 		SetTextureNULL(1);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	xor	esi, esi
	push	esi
	push	1
	xor	edi, edi
	push	eax
	mov	DWORD PTR _ParticleIndex$[esp+184], edi
	call	DWORD PTR [ecx+244]
	lea	eax, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19716], eax

; 3241 : 
; 3242 : 		for(i=0;i<QueuedParticles.Num();i++)

	cmp	DWORD PTR [ebp+675228], esi
	mov	DWORD PTR _i$[esp+172], esi
	jle	$L126067

; 3230 : 			}
; 3231 : 
; 3232 : 		INT	First = ParticleVertices.Unlock();

	mov	DWORD PTR -148+[esp+172], esi

; 3291 : 	}

	npad	6
$L126059:

; 3243 : 		{
; 3244 : 			int RunLength=QueuedParticles(i).ParticleCount;

	mov	edx, DWORD PTR [ebp+675224]
	mov	eax, DWORD PTR -148+[esp+172]
	mov	ebx, DWORD PTR [edx+eax+8]

; 3245 : 			QueuedParticles(i).ParticleCount=0;	
; 3246 : 			if(!RunLength) 

	test	ebx, ebx
	lea	eax, DWORD PTR [edx+eax+8]
	mov	DWORD PTR [eax], 0
	je	$L126060

; 3247 : 				continue;
; 3248 : 
; 3249 : 			// Unset the current texture if any:
; 3250 : 			if(CurrentTexture)

	test	esi, esi
	je	SHORT $L126064

; 3251 : 			{
; 3252 : 				CurrentTexture->Unlock( CurrentTextureInfo );

	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+172]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
$L126064:

; 3253 : 				CurrentTexture=NULL;
; 3254 : 			}
; 3255 : 
; 3256 : 
; 3257 : 			CurrentTexture=QueuedParticles(i).Texture;

	mov	ecx, DWORD PTR [ebp+675224]
	mov	edx, DWORD PTR -148+[esp+172]
	mov	esi, DWORD PTR [edx+ecx]

; 3258 : 			if(CurrentTexture)

	test	esi, esi

; 3259 : 			{
; 3260 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	je	SHORT $L126065
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3261 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3262 : 				
; 3263 : 				CurrentTexture->Lock( CurrentTextureInfo, 0/*Frame->Viewport->CurrentTime*/, -1, Frame->Viewport->RenDev );

	mov	ecx, DWORD PTR _Frame$[esp+168]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+92]
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	-1
	push	0
	push	0
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+188]
	mov	ecx, esi
	call	DWORD PTR [eax+72]

; 3264 : 				SetTexture( 0, CurrentTextureInfo, PolyFlags, 0, PolyFlagsEx|CurrentTexture->PolyFlagsEx );

	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+172]
	mov	edx, DWORD PTR [esi+196]
	mov	eax, DWORD PTR _PolyFlags$[esp+172]
	push	0
	or	edx, ecx
	push	edx
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$[esp+188]
	push	ecx
	xor	edx, edx
	mov	ecx, ebp
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 3265 : 				SetBlending(PolyFlags,PolyFlagsEx|CurrentTexture->PolyFlagsEx);

	mov	ecx, DWORD PTR _PolyFlagsEx$[esp+172]
	mov	edx, DWORD PTR [esi+196]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _PolyFlags$[esp+176]
	mov	ecx, ebp
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 3266 : 			} 
; 3267 : 			else

	jmp	SHORT $L126066
$L126065:

; 3268 : 			{
; 3269 : 				//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3270 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3271 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L126066:

; 3272 : 			}
; 3273 : 
; 3274 : 
; 3275 : 			Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLELIST, First+(ParticleIndex*6), RunLength*2);

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ebx+ebx]
	push	edx
	lea	edx, DWORD PTR [edi+edi*2]
	mov	edi, DWORD PTR _First$[esp+176]
	lea	edx, DWORD PTR [edi+edx*2]
	push	edx
	push	4
	push	eax
	call	DWORD PTR [ecx+280]

; 3276 : 			ParticleIndex+=RunLength;

	mov	edi, DWORD PTR _ParticleIndex$[esp+172]
	add	edi, ebx
	mov	DWORD PTR _ParticleIndex$[esp+172], edi
$L126060:
	mov	eax, DWORD PTR _i$[esp+172]
	mov	edx, DWORD PTR -148+[esp+172]
	mov	ecx, DWORD PTR [ebp+675228]
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+172], eax
	mov	DWORD PTR -148+[esp+172], edx
	jl	$L126059

; 3277 : 		}
; 3278 : 
; 3279 : 		if(CurrentTexture)

	test	esi, esi
	je	SHORT $L126067

; 3280 : 		{
; 3281 : 			CurrentTexture->Unlock(CurrentTextureInfo);

	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+172]
	mov	ecx, esi
	call	DWORD PTR [eax+76]

; 3282 : 			CurrentTexture=NULL;
; 3283 : 		} else

	jmp	SHORT $L126068
$L126067:

; 3284 : 		{
; 3285 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3286 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L126068:

; 3287 : 		}
; 3288 : 
; 3289 : 		if(System.ZBufferMode==ZBM_None)							// No Z buffer interaction whatsoever

	mov	eax, DWORD PTR _System$[esp+172]
	cmp	BYTE PTR [eax+1552], 2
	pop	edi
	pop	ebx
	jne	SHORT $L126069

; 3290 : 			Direct3DDevice8->SetRenderState(D3DRS_ZFUNC,D3DCMP_LESSEQUAL);

	mov	ebp, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [ebp]
	push	4
	push	23					; 00000017H
	push	ebp
	call	DWORD PTR [ecx+200]
$L126069:
	pop	esi
	pop	ebp

; 3291 : 	}

	add	esp, 156				; 0000009cH
	ret	4
?QueueParticleFlush@UD3DRenderDevice@@QAIXAAVAParticleSystem@@PAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::QueueParticleFlush
_TEXT	ENDS
PUBLIC	__real@3b800000
PUBLIC	__real@43000000
PUBLIC	?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ ; FD3DVertexBuffer<FD3DParticle>::Unlock
EXTRN	__imp_?AddZeroed@FArray@@QAEHHH@Z:NEAR
;	COMDAT __real@3b800000
; File ..\..\Core\Inc\UnVcWin32.h
CONST	SEGMENT
__real@3b800000 DD 03b800000r			; 0.00390625
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z
_TEXT	SEGMENT
_ParticleCount$ = -576
_Particles$ = -584
_CurrentTexture$ = -532
_CurrentTextureInfo$ = -256
_i$126079 = -620
_CurrentTextureInfo$143355 = -128
_PreviousLocation$126083 = -608
_NextLocation$126084 = -544
_dwDiffuseEnd$143367 = -580
_UpVector$143368 = -596
_Distance$126098 = -524
$T143372 = -464
_Length$126100 = -572
$T143373 = -428
$T143374 = -416
_Direction$126102 = -556
$T143375 = -392
_Midpoint$126103 = -476
$T143376 = -564
$T143377 = -404
$T143378 = -304
$T143379 = -484
$T143380 = -292
$T143381 = -340
$T143382 = -492
$T143383 = -316
$T143384 = -328
_BaseParticleScaleX$126112 = -344
$T143385 = -500
_BaseParticleScaleY$126113 = -348
_VariableAlpha$126115 = -576
_SystemAlphaScale$126117 = -356
_dwDiffuse$126126 = -564
_alphaLevel$126128 = -612
$T143406 = -616
$T143407 = -612
$T143408 = -572
$T143409 = -528
_DrawScaleU$126170 = -572
_DrawScaleV$126171 = -528
_RightVector$126172 = -608
_UpVector$126173 = -596
_forward$126174 = -452
_vecPos$126180 = -556
$T143570 = -580
$T143582 = -620
$T143595 = -620
$T143608 = -620
_q$143627 = -440
$T143641 = -352
_System$ = -512
_Frame$ = 8
_q$143659 = -464
_costheta$143660 = -584
_PolyFlags$143885 = -616
_PolyFlagsEx$143886 = -612
_i$143895 = -576
_First$143906 = -564
_CurrentTextureInfo$143908 = -128
_ParticleIndex$143909 = -568
_L$143960 = -568
_H$143961 = -564
$T143059 = -380
$T143060 = -368
$T143063 = -268
$T143064 = -440
$T143065 = -280
$T143066 = -452
$T143073 = -280
$T143074 = -328
$T143075 = -404
$T143076 = -428
$T143077 = -268
$T143078 = -392
$T143079 = -476
$T143080 = -292
$T143081 = -316
$T143082 = -416
$T143083 = -524
$T143084 = -304
$T143085 = -368
$T143086 = -340
$T143087 = -380
$T143088 = -544
_L$143091 = -620
_H$143092 = -568
?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::dnDrawParticles, COMDAT
; _this$ = ecx
; _System$ = edx

; 3294 : 	{

	sub	esp, 620				; 0000026cH

; 3295 : 		VALIDATE;
; 3296 : 
; 3297 : 		if(!RenderParticles) 

	mov	eax, DWORD PTR ?RenderParticles@@3HA	; RenderParticles
	test	eax, eax
	push	ebp
	push	esi
	mov	esi, edx
	mov	DWORD PTR _System$[esp+628], esi
	mov	ebp, ecx
	je	$L126071

; 3298 : 			return;
; 3299 : 
; 3300 : 		clock(Stats.ParticleTime);

	mov	eax, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [eax], 0
	mov	DWORD PTR _L$143091[esp+628], 0
	je	SHORT $L143093
	rdtsc
	mov	DWORD PTR _L$143091[esp+628], eax
	mov	DWORD PTR _H$143092[esp+628], edx
$L143093:
	mov	edx, DWORD PTR [ebp+19636]
	mov	ecx, DWORD PTR _L$143091[esp+628]

; 3301 : 		INT ParticleCount=System.HighestParticleNumber;
; 3302 : 		
; 3303 : 		// Make sure the xform matrix is correctly set up:
; 3304 : 		PreRender(Frame);

	mov	eax, DWORD PTR [ebp]
	push	ebx
	sub	edx, ecx
	push	edi
	mov	edi, DWORD PTR _Frame$[esp+632]
	mov	DWORD PTR [ebp+19636], edx
	mov	ebx, DWORD PTR [esi+3060]
	mov	edx, edi
	mov	ecx, ebp
	mov	DWORD PTR _ParticleCount$[esp+636], ebx
	call	DWORD PTR [eax+140]

; 3305 : 		FParticle *Particles=(FParticle *)System.ParticleSystemHandle;
; 3306 : 
; 3307 : 		// Texture Management:
; 3308 : 		UTexture *CurrentTexture=NULL;
; 3309 : 		FTextureInfo CurrentTextureInfo;
; 3310 : 
; 3311 : 		if(System.UseLines)

	test	BYTE PTR [esi+2692], 1
	mov	ecx, DWORD PTR [esi+3068]
	mov	DWORD PTR _Particles$[esp+636], ecx
	mov	DWORD PTR _CurrentTexture$[esp+636], 0
	je	$L126078

; 3312 : 		{
; 3313 : 			for(INT i=0; i<ParticleCount; i++)

	test	ebx, ebx
	mov	DWORD PTR _i$126079[esp+636], 0
	jle	$L126121
	mov	edx, ecx
	lea	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR -532+[esp+636], ecx
$L126080:

; 3314 : 			{
; 3315 : 				FVector PreviousLocation;
; 3316 : 				FVector NextLocation;
; 3317 : 
; 3318 : 				// Am I drawing a series of connected particle lines?
; 3319 : 				if(System.Connected)

	mov	eax, DWORD PTR [esi+2692]
	test	al, 2
	je	$L126085

; 3320 : 				{
; 3321 : 					int SuccessorIndex=-1;
; 3322 : 
; 3323 : 					// Attempt to find my successor: 
; 3324 : 					// First try the very next particle in sequence.  In non-starved particle systems, where particles have a constant lifetime, it is VERY likely to be the next particle in sequence. 
; 3325 : 					if((i<(ParticleCount-1))&&((Particles[i+1].SpawnNumber)==(Particles[i].SpawnNumber+1)))

	mov	eax, DWORD PTR _i$126079[esp+636]
	lea	edx, DWORD PTR [ebx-1]
	cmp	eax, edx
	jge	SHORT $L126087
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+160]
	inc	edx
	cmp	edi, edx
	jne	SHORT $L126087

; 3326 : 						SuccessorIndex=i+1;

	inc	eax
$L126092:

; 3333 : 							{
; 3334 : 								SuccessorIndex=j;
; 3335 : 								break;
; 3336 : 							}
; 3337 : 					}
; 3338 : 
; 3339 : 					if(SuccessorIndex==-1) continue; // No sucessor found, can't draw this segment.

	cmp	eax, -1
	je	$L126081

; 3340 : 					PreviousLocation=Particles[i].Location;

	lea	edx, DWORD PTR [ecx+16]
	mov	ebx, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]

; 3341 : 					NextLocation=Particles[SuccessorIndex].Location;

	lea	eax, DWORD PTR [eax+eax*4]
	mov	DWORD PTR _PreviousLocation$126083[esp+644], edx
	mov	edx, DWORD PTR _Particles$[esp+636]
	shl	eax, 5
	lea	eax, DWORD PTR [eax+edx+20]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _NextLocation$126084[esp+636], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _PreviousLocation$126083[esp+636], ebx
	mov	DWORD PTR _PreviousLocation$126083[esp+640], edi
	mov	DWORD PTR _NextLocation$126084[esp+640], edx
	mov	DWORD PTR _NextLocation$126084[esp+644], eax

; 3342 : 				} else

	jmp	$L126101
$L126087:

; 3327 : 					else
; 3328 : 					{
; 3329 : 						Stats.SuccessorMisses++;	// Track how many sucessors were missed.

	inc	DWORD PTR [ebp+19696]
	mov	edx, DWORD PTR [ecx]
	lea	edi, DWORD PTR [edx+1]
	mov	edx, DWORD PTR _Particles$[esp+636]

; 3330 : 						// Scan through the particles and try to find my successor:
; 3331 : 						for(INT j=0;j<ParticleCount;j++)							 // Scan through all potentially active particles.

	xor	eax, eax
	add	edx, 4
$L126090:

; 3332 : 							if(Particles[j].SpawnNumber==Particles[i].SpawnNumber+1) // And it's my successor.

	cmp	DWORD PTR [edx], edi
	je	SHORT $L126092
	inc	eax
	add	edx, 160				; 000000a0H
	cmp	eax, ebx
	jl	SHORT $L126090

; 3390 : 
; 3391 : 				QueuedParticle &p=QueuedParticleAlloc(Particles[i].Texture);

	jmp	$L126081
$L126085:

; 3343 : 				{
; 3344 : 					PreviousLocation=Particles[i].PreviousLocation;

	lea	edx, DWORD PTR [ecx+28]
	mov	ebx, DWORD PTR [edx]
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _PreviousLocation$126083[esp+644], edx

; 3345 : 					NextLocation=Particles[i].Location;

	lea	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _PreviousLocation$126083[esp+640], edi
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR _NextLocation$126084[esp+636], edi
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR _NextLocation$126084[esp+644], edx

; 3346 : 
; 3347 : 					// If drawscale isn't one, then compute new line length:
; 3348 : 					if((Particles[i].DrawScale!=1)||System.ConstantLength)

	cmp	DWORD PTR [ecx+96], 1065353216		; 3f800000H
	mov	DWORD PTR _PreviousLocation$126083[esp+636], ebx
	mov	DWORD PTR _NextLocation$126084[esp+640], edi
	jne	SHORT $L126097
	test	al, 4
	je	$L126101
$L126097:

; 3349 : 					{
; 3350 : 						FVector Distance=NextLocation-PreviousLocation;

	fld	DWORD PTR _NextLocation$126084[esp+636]

; 3351 : 						FLOAT   Length=System.ConstantLength?1:Distance.Size();

	shr	eax, 2
	fsub	DWORD PTR _PreviousLocation$126083[esp+636]
	mov	edx, eax
	and	edx, 1
	fstp	DWORD PTR _Distance$126098[esp+636]
	fld	DWORD PTR _NextLocation$126084[esp+640]
	fsub	DWORD PTR _PreviousLocation$126083[esp+640]
	fstp	DWORD PTR _Distance$126098[esp+640]
	fld	DWORD PTR _NextLocation$126084[esp+644]
	fsub	DWORD PTR _PreviousLocation$126083[esp+644]
	fstp	DWORD PTR _Distance$126098[esp+644]
	je	SHORT $L143056
	fld	DWORD PTR __real@3f800000
	jmp	SHORT $L143984
$L143056:
	fld	DWORD PTR _Distance$126098[esp+636]
	fmul	DWORD PTR _Distance$126098[esp+636]
	fld	DWORD PTR _Distance$126098[esp+644]
	fmul	DWORD PTR _Distance$126098[esp+644]

; 3464 : 		unclock(Stats.ParticleTime);

	faddp	ST(1), ST(0)
	fld	DWORD PTR _Distance$126098[esp+640]
	fmul	DWORD PTR _Distance$126098[esp+640]
	faddp	ST(1), ST(0)
	fsqrt
	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L143993
$L143984:

; 3354 : 						{
; 3355 : 							FVector Direction=Distance;
; 3356 : 							Direction.Normalize();

	fld	DWORD PTR _Distance$126098[esp+636]
	mov	eax, DWORD PTR _Distance$126098[esp+636]
	fmul	DWORD PTR _Distance$126098[esp+636]
	mov	DWORD PTR _Direction$126102[esp+636], eax
	fld	DWORD PTR _Distance$126098[esp+644]
	mov	eax, DWORD PTR _Distance$126098[esp+640]
	fmul	DWORD PTR _Distance$126098[esp+644]
	mov	DWORD PTR _Direction$126102[esp+640], eax
	mov	eax, DWORD PTR _Distance$126098[esp+644]
	mov	DWORD PTR _Direction$126102[esp+644], eax
	faddp	ST(1), ST(0)
	fld	DWORD PTR _Distance$126098[esp+640]
	fmul	DWORD PTR _Distance$126098[esp+640]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L143991
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _Distance$126098[esp+636]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$126102[esp+636]
	fld	DWORD PTR _Direction$126102[esp+640]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _Direction$126102[esp+640]
	fmul	DWORD PTR _Direction$126102[esp+644]
	fstp	DWORD PTR _Direction$126102[esp+644]
	jmp	SHORT $L143136
$L143991:
	fstp	ST(0)
$L143136:

; 3357 : 							FVector Midpoint=System.ConstantLength?NextLocation:(PreviousLocation+Direction*(Length/2));

	test	edx, edx
	je	SHORT $L143061
	lea	eax, DWORD PTR _NextLocation$126084[esp+636]
	jmp	SHORT $L143062
$L143061:
	fld	DWORD PTR __real@3f000000
	lea	eax, DWORD PTR $T143060[esp+636]
	fmul	ST(0), ST(1)
	fld	DWORD PTR _Direction$126102[esp+636]
	fmul	ST(0), ST(1)
	fld	ST(1)
	fmul	DWORD PTR _Direction$126102[esp+640]
	fstp	DWORD PTR $T143059[esp+640]
	fxch	ST(1)
	fmul	DWORD PTR _Direction$126102[esp+644]
	fstp	DWORD PTR $T143059[esp+644]
	fadd	DWORD PTR _PreviousLocation$126083[esp+636]
	fstp	DWORD PTR $T143060[esp+636]
	fld	DWORD PTR _PreviousLocation$126083[esp+640]
	fadd	DWORD PTR $T143059[esp+640]
	fstp	DWORD PTR $T143060[esp+640]
	fld	DWORD PTR _PreviousLocation$126083[esp+644]
	fadd	DWORD PTR $T143059[esp+644]
	fstp	DWORD PTR $T143060[esp+644]
$L143062:

; 3358 : 
; 3359 : 							Length*=Particles[i].DrawScale;

	fmul	DWORD PTR [ecx+96]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _Midpoint$126103[esp+636], edx
	mov	edx, DWORD PTR [eax+4]

; 3360 : 							Length/=2;

	fmul	DWORD PTR __real@3f000000
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _Midpoint$126103[esp+640], edx
	fstp	DWORD PTR _Length$126100[esp+636]
	mov	DWORD PTR _Midpoint$126103[esp+644], eax

; 3361 : 
; 3362 : 							PreviousLocation=Midpoint-(Direction*Length);

	fld	DWORD PTR _Direction$126102[esp+636]
	fmul	DWORD PTR _Length$126100[esp+636]
	fst	DWORD PTR $T143063[esp+636]
	fld	DWORD PTR _Direction$126102[esp+640]
	fmul	DWORD PTR _Length$126100[esp+636]
	fld	ST(0)
	fld	DWORD PTR _Direction$126102[esp+644]
	fmul	DWORD PTR _Length$126100[esp+636]
	fst	DWORD PTR -568+[esp+636]
	fld	DWORD PTR _Midpoint$126103[esp+636]
	fsub	DWORD PTR $T143063[esp+636]
	fstp	DWORD PTR $T143064[esp+636]
	fld	DWORD PTR _Midpoint$126103[esp+640]
	mov	ebx, DWORD PTR $T143064[esp+636]
	fsub	ST(0), ST(2)
	mov	DWORD PTR _PreviousLocation$126083[esp+636], ebx
	fstp	DWORD PTR $T143064[esp+640]
	fld	DWORD PTR _Midpoint$126103[esp+644]
	mov	edx, DWORD PTR $T143064[esp+640]
	fsub	ST(0), ST(1)
	mov	DWORD PTR _PreviousLocation$126083[esp+640], edx
	fstp	DWORD PTR $T143064[esp+644]
	mov	eax, DWORD PTR $T143064[esp+644]
	fstp	ST(0)
	mov	DWORD PTR _PreviousLocation$126083[esp+644], eax
	fstp	ST(0)

; 3363 : 							NextLocation=Midpoint+(Direction*Length);

	fxch	ST(1)
	fstp	DWORD PTR $T143065[esp+636]
	fld	DWORD PTR -568+[esp+636]
	fld	DWORD PTR $T143065[esp+636]
	fadd	DWORD PTR _Midpoint$126103[esp+636]
	fstp	DWORD PTR $T143066[esp+636]
	fld	DWORD PTR _Midpoint$126103[esp+640]
	mov	edx, DWORD PTR $T143066[esp+636]
	fadd	ST(0), ST(2)
	mov	DWORD PTR _NextLocation$126084[esp+636], edx
	fstp	DWORD PTR $T143066[esp+640]
	fld	DWORD PTR _Midpoint$126103[esp+644]
	mov	eax, DWORD PTR $T143066[esp+640]
	fadd	ST(0), ST(1)
	mov	DWORD PTR _NextLocation$126084[esp+640], eax
	fstp	DWORD PTR $T143066[esp+644]
	mov	edx, DWORD PTR $T143066[esp+644]
	fstp	ST(0)
	mov	DWORD PTR _NextLocation$126084[esp+644], edx
$L143993:

; 3352 : 						
; 3353 : 						if(Length)

	fstp	ST(0)
$L126101:

; 3364 : 						}
; 3365 : 					}
; 3366 : 				}
; 3367 : 				dnDraw3DLine(Frame,Particles[i].Texture,0,PreviousLocation,NextLocation,System.LineStartWidth,System.LineEndWidth,System.LineStartColor,System.LineEndColor);

	mov	eax, DWORD PTR [esi+2700]
	mov	edx, DWORD PTR [esi+2696]
	mov	edi, DWORD PTR [ecx+88]
	mov	DWORD PTR $T143409[esp+636], eax
	mov	eax, DWORD PTR [esi+2708]
	mov	DWORD PTR $T143407[esp+636], eax
	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	mov	DWORD PTR $T143408[esp+636], edx
	mov	edx, DWORD PTR [esi+2704]
	mov	DWORD PTR $T143406[esp+636], edx
	je	$L144001
	fld	DWORD PTR $T143406[esp+636]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L143352
	fld	DWORD PTR $T143407[esp+636]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L143352
	test	edi, edi
	mov	esi, 2
	je	SHORT $L143354
	mov	esi, DWORD PTR [edi+196]
	or	esi, 2
$L143354:
	push	esi
	xor	edx, edx
	mov	ecx, ebp
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	push	0
	mov	ecx, ebp
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
	test	edi, edi
	je	SHORT $L143356
	mov	ecx, DWORD PTR _Frame$[esp+632]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [edi]
	push	ebp
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$143355[esp+652]
	mov	ecx, edi
	call	DWORD PTR [eax+72]
	push	0
	push	esi
	push	0
	push	0
	lea	eax, DWORD PTR _CurrentTextureInfo$143355[esp+652]
	push	eax
	xor	edx, edx
	mov	ecx, ebp
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	jmp	SHORT $L143357
$L143356:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L143357:
	push	-1
	lea	esi, DWORD PTR [ebp+16720]
	push	2
	mov	ecx, esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock
	mov	edx, DWORD PTR _PreviousLocation$126083[esp+640]
	mov	ecx, eax
	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _PreviousLocation$126083[esp+644]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR $T143408[esp+636]

; 3464 : 		unclock(Stats.ParticleTime);

	xor	edx, edx
	mov	dl, BYTE PTR $T143408[esp+638]
	mov	ebx, ecx
	and	ebx, 255				; 000000ffH
	and	ecx, 65280				; 0000ff00H
	shl	ebx, 16					; 00000010H
	add	edx, ebx
	add	edx, ecx
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR _NextLocation$126084[esp+636]
	lea	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _NextLocation$126084[esp+640]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _NextLocation$126084[esp+644]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR $T143409[esp+636]
	xor	edx, edx
	mov	dl, BYTE PTR $T143409[esp+638]
	mov	ebx, ecx
	and	ebx, 255				; 000000ffH
	shl	ebx, 16					; 00000010H
	and	ecx, 65280				; 0000ff00H
	add	edx, ebx
	add	edx, ecx
	mov	ecx, esi
	mov	DWORD PTR [eax+28], edx
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, esi
	mov	ebx, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	ebx
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ecx, DWORD PTR [ebp+19684]
	inc	ecx
	test	edi, edi
	mov	DWORD PTR [ebp+19684], ecx
	je	SHORT $L143360
	mov	eax, DWORD PTR [edi]
	lea	edx, DWORD PTR _CurrentTextureInfo$143355[esp+636]
	mov	ecx, edi
	call	DWORD PTR [eax+76]
	jmp	$L144011

; 3364 : 						}
; 3365 : 					}
; 3366 : 				}
; 3367 : 				dnDraw3DLine(Frame,Particles[i].Texture,0,PreviousLocation,NextLocation,System.LineStartWidth,System.LineEndWidth,System.LineStartColor,System.LineEndColor);

$L143360:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	$L144011
$L143352:
	push	edi
	mov	ecx, ebp
	call	?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ; UD3DRenderDevice::QueuedParticleAlloc
	lea	ecx, DWORD PTR $T143408[esp+636]
	mov	ebx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	lea	ecx, DWORD PTR $T143409[esp+636]
	mov	esi, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	fld	DWORD PTR _NextLocation$126084[esp+644]
	fsub	DWORD PTR [ebp+184]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T143373[esp+648]
	mov	DWORD PTR _dwDiffuseEnd$143367[esp+648], eax
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation$126084[esp+652]
	fsub	DWORD PTR [ebp+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _NextLocation$126084[esp+648]
	fsub	DWORD PTR [ebp+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _PreviousLocation$126083[esp+644]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR [ebp+184]
	lea	ecx, DWORD PTR $T143372[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _PreviousLocation$126083[esp+652]
	fsub	DWORD PTR [ebp+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _PreviousLocation$126083[esp+648]
	fsub	DWORD PTR [ebp+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T143372[esp+636]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR $T143373[esp+652]
	lea	ecx, DWORD PTR _UpVector$143368[esp+648]
	fld	DWORD PTR $T143373[esp+648]
	fmul	DWORD PTR $T143372[esp+652]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T143373[esp+648]
	fmul	DWORD PTR $T143372[esp+656]
	fld	DWORD PTR $T143372[esp+648]
	fmul	DWORD PTR $T143373[esp+656]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T143373[esp+656]
	fmul	DWORD PTR $T143372[esp+652]
	fld	DWORD PTR $T143373[esp+652]
	fmul	DWORD PTR $T143372[esp+656]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _UpVector$143368[esp+636]
	fmul	DWORD PTR _UpVector$143368[esp+636]
	fld	DWORD PTR _UpVector$143368[esp+640]
	fmul	DWORD PTR _UpVector$143368[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _UpVector$143368[esp+644]
	fmul	DWORD PTR _UpVector$143368[esp+644]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L143996
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _UpVector$143368[esp+636]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$143368[esp+636]
	fld	DWORD PTR _UpVector$143368[esp+640]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$143368[esp+640]
	fmul	DWORD PTR _UpVector$143368[esp+644]
	fstp	DWORD PTR _UpVector$143368[esp+644]
	jmp	SHORT $L143323
$L143996:
	fstp	ST(0)
$L143323:
	fld	DWORD PTR $T143406[esp+636]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR _UpVector$143368[esp+656]
	lea	ecx, DWORD PTR $T143374[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T143406[esp+648]
	fmul	DWORD PTR _UpVector$143368[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$143368[esp+648]
	fmul	DWORD PTR $T143406[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _PreviousLocation$126083[esp+644]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T143374[esp+656]
	lea	ecx, DWORD PTR $T143375[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _PreviousLocation$126083[esp+652]
	fadd	DWORD PTR $T143374[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T143374[esp+648]
	fadd	DWORD PTR _PreviousLocation$126083[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	ecx, DWORD PTR $T143375[esp+636]
	fld	DWORD PTR $T143406[esp+636]
	mov	edx, DWORD PTR $T143375[esp+640]
	mov	eax, ebx
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T143375[esp+644]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [ebx+12], esi
	mov	DWORD PTR $T143376[esp+636], 1065353216	; 3f800000H
	mov	edx, DWORD PTR $T143376[esp+636]
	mov	DWORD PTR $T143376[esp+640], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T143376[esp+640]
	mov	DWORD PTR [ebx+16], edx
	mov	DWORD PTR [ebx+20], eax
	fmul	DWORD PTR _UpVector$143368[esp+644]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T143377[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T143406[esp+648]
	fmul	DWORD PTR _UpVector$143368[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$143368[esp+648]
	fmul	DWORD PTR $T143406[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _PreviousLocation$126083[esp+644]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T143377[esp+656]
	lea	ecx, DWORD PTR $T143378[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _PreviousLocation$126083[esp+652]
	fsub	DWORD PTR $T143377[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _PreviousLocation$126083[esp+648]
	fsub	DWORD PTR $T143377[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T143378[esp+636]
	fld	DWORD PTR $T143407[esp+636]
	mov	eax, DWORD PTR $T143378[esp+640]
	lea	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T143378[esp+644]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR $T143379[esp+636], 0
	mov	eax, DWORD PTR $T143379[esp+636]
	mov	DWORD PTR $T143379[esp+640], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T143379[esp+640]
	mov	DWORD PTR [ebx+36], esi
	mov	DWORD PTR [ebx+40], eax
	mov	DWORD PTR [ebx+44], ecx
	fmul	DWORD PTR _UpVector$143368[esp+644]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T143407[esp+648]
	fmul	DWORD PTR _UpVector$143368[esp+652]
	lea	ecx, DWORD PTR $T143380[esp+648]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$143368[esp+648]
	fmul	DWORD PTR $T143407[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _NextLocation$126084[esp+644]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T143380[esp+656]
	lea	ecx, DWORD PTR $T143381[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation$126084[esp+652]
	fsub	DWORD PTR $T143380[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _NextLocation$126084[esp+648]
	fsub	DWORD PTR $T143380[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	eax, DWORD PTR $T143381[esp+636]
	fld	DWORD PTR $T143407[esp+636]
	mov	ecx, DWORD PTR $T143381[esp+640]
	lea	esi, DWORD PTR [ebx+48]
	mov	edx, esi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T143381[esp+644]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _dwDiffuseEnd$143367[esp+636]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [ebx+60], ecx
	mov	DWORD PTR $T143382[esp+636], 0
	mov	edx, DWORD PTR $T143382[esp+636]
	mov	DWORD PTR [ebx+64], edx
	mov	DWORD PTR $T143382[esp+640], 0
	mov	eax, DWORD PTR $T143382[esp+640]
	mov	DWORD PTR [ebx+68], eax
	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, 6
	rep movsd
	fmul	DWORD PTR _UpVector$143368[esp+644]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T143383[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T143407[esp+648]
	fmul	DWORD PTR _UpVector$143368[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$143368[esp+648]
	fmul	DWORD PTR $T143407[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _NextLocation$126084[esp+644]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T143383[esp+656]
	lea	ecx, DWORD PTR $T143384[esp+648]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _NextLocation$126084[esp+652]
	fadd	DWORD PTR $T143383[esp+652]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T143383[esp+648]
	fadd	DWORD PTR _NextLocation$126084[esp+648]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T143384[esp+636]
	mov	eax, DWORD PTR $T143384[esp+640]
	lea	ecx, DWORD PTR [ebx+96]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T143384[esp+644]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _dwDiffuseEnd$143367[esp+636]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR $T143385[esp+636], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T143385[esp+636]
	mov	DWORD PTR [ebx+112], ecx
	mov	DWORD PTR $T143385[esp+640], 0
	mov	edx, DWORD PTR $T143385[esp+640]
	lea	edi, DWORD PTR [ebx+120]
	mov	ecx, 6
	mov	esi, ebx
	mov	DWORD PTR [ebx+108], eax
	mov	DWORD PTR [ebx+116], edx
	rep movsd
$L144011:
	mov	ecx, DWORD PTR -532+[esp+636]
	mov	esi, DWORD PTR _System$[esp+636]
$L144001:
	mov	ebx, DWORD PTR _ParticleCount$[esp+636]
$L126081:

; 3312 : 		{
; 3313 : 			for(INT i=0; i<ParticleCount; i++)

	mov	eax, DWORD PTR _i$126079[esp+636]
	inc	eax
	add	ecx, 160				; 000000a0H
	cmp	eax, ebx
	mov	DWORD PTR _i$126079[esp+636], eax
	mov	DWORD PTR -532+[esp+636], ecx
	jl	$L126080

; 3368 : 			}
; 3369 : 		} else	

	jmp	$L126121
$L126078:

; 3370 : 		{
; 3371 : 
; 3372 : 			float BaseParticleScaleX=1.f,
; 3373 : 				  BaseParticleScaleY=1.f;
; 3374 : 	
; 3375 : 			if(Particles[0].Texture)

	mov	eax, DWORD PTR _Particles$[esp+636]
	mov	ecx, DWORD PTR [eax+92]
	add	eax, 92					; 0000005cH
	test	ecx, ecx
	mov	DWORD PTR _BaseParticleScaleX$126112[esp+636], 1065353216 ; 3f800000H
	mov	DWORD PTR _BaseParticleScaleY$126113[esp+636], 1065353216 ; 3f800000H
	mov	DWORD PTR -580+[esp+636], eax
	je	SHORT $L126114

; 3376 : 			{
; 3377 : 				//Particles[0].Texture=Particles[0].Texture->Get(appSeconds()/*Frame->Viewport->CurrentTime*/);
; 3378 : 				Particles[0].Texture->Lock( CurrentTextureInfo, 0/*Frame->Viewport->CurrentTime*/, -1, Frame->Viewport->RenDev );

	mov	edx, DWORD PTR [edi]
	mov	edx, DWORD PTR [edx+92]
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	-1
	push	0
	push	0
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+652]
	call	DWORD PTR [eax+72]

; 3379 : 				SetTexture( 0, CurrentTextureInfo, 0, false );

	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _CurrentTextureInfo$[esp+652]
	push	eax
	xor	edx, edx
	mov	ecx, ebp
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 3380 : 				Particles[0].Texture->Unlock(CurrentTextureInfo);

	mov	ecx, DWORD PTR -580+[esp+636]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _CurrentTextureInfo$[esp+636]
	call	DWORD PTR [eax+76]
$L126114:

; 3381 : 			} 
; 3382 : 
; 3383 : 			UBOOL VariableAlpha=true;
; 3384 : 			if((System.AlphaStart==1.f)&&(System.AlphaEnd==1.f)) VariableAlpha=false;

	mov	ecx, DWORD PTR [esi+1576]
	mov	eax, 1065353216				; 3f800000H
	cmp	ecx, eax
	mov	DWORD PTR _VariableAlpha$126115[esp+636], 1
	jne	SHORT $L126116
	cmp	DWORD PTR [esi+1584], eax
	jne	SHORT $L126116
	mov	DWORD PTR _VariableAlpha$126115[esp+636], 0
$L126116:

; 3385 : 			FLOAT SystemAlphaScale=System.AlphaStartUseSystemAlpha?1.f:System.SystemAlphaScale; 

	test	BYTE PTR [esi+1592], 1
	je	SHORT $L143067
	mov	DWORD PTR _SystemAlphaScale$126117[esp+636], 1065353216 ; 3f800000H
	jmp	SHORT $L143068
$L143067:
	mov	ecx, DWORD PTR [esi+1560]
	mov	DWORD PTR _SystemAlphaScale$126117[esp+636], ecx
$L143068:

; 3386 : 
; 3387 : 			for(INT i=0;i<ParticleCount;i++)

	test	ebx, ebx
	jle	$L126121
	mov	edx, DWORD PTR -580+[esp+636]
	mov	DWORD PTR -616+[esp+636], edx
	mov	DWORD PTR -568+[esp+636], ebx

; 3465 : 	}

	npad	3

; 3386 : 
; 3387 : 			for(INT i=0;i<ParticleCount;i++)

$L126119:

; 3388 : 			{
; 3389 : 				if(!Particles[i].Texture) continue;		// Ignore untextured particles

	mov	eax, DWORD PTR -616+[esp+636]
	mov	esi, DWORD PTR [eax]
	test	esi, esi
	je	$L126120

; 3390 : 
; 3391 : 				QueuedParticle &p=QueuedParticleAlloc(Particles[i].Texture);

	mov	ecx, DWORD PTR [ebp+675228]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L143974
	mov	edx, DWORD PTR [ebp+675224]
$L143488:
	cmp	DWORD PTR [edx], esi
	je	SHORT $L143974
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L143488
$L143974:
	cmp	eax, ecx
	jl	SHORT $L143492
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L143975
	mov	edx, DWORD PTR [ebp+675224]
	add	edx, 8

; 3465 : 	}

	npad	1

; 3390 : 
; 3391 : 				QueuedParticle &p=QueuedParticleAlloc(Particles[i].Texture);

$L143493:
	cmp	DWORD PTR [edx], 0
	je	SHORT $L143975
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L143493
$L143975:
	cmp	eax, ecx
	jl	SHORT $L143497
	push	1
	push	16					; 00000010H
	lea	ecx, DWORD PTR [ebp+675224]
	call	DWORD PTR __imp_?AddZeroed@FArray@@QAEHHH@Z
$L143497:
	mov	edx, DWORD PTR [ebp+675224]
	mov	ecx, eax
	shl	ecx, 4
	mov	DWORD PTR [ecx+edx], esi
$L143492:
	shl	eax, 4
	mov	edi, eax
	mov	eax, DWORD PTR [ebp+675224]
	mov	ebx, DWORD PTR [eax+edi+8]
	lea	eax, DWORD PTR [eax+edi+8]
	mov	esi, ebx
	inc	esi
	mov	DWORD PTR [eax], esi
	mov	ecx, DWORD PTR [ebp+675224]
	mov	edx, DWORD PTR [ecx+edi+8]
	lea	eax, DWORD PTR [ecx+edi]
	mov	ecx, DWORD PTR [eax+12]
	cmp	edx, ecx
	jl	SHORT $L143499
	inc	ecx
	cmp	ecx, 4
	jge	SHORT $L143532
	mov	ecx, 4
	jmp	SHORT $L143536
$L143532:
	cmp	ecx, 256				; 00000100H
	jle	SHORT $L143536
	mov	ecx, 256				; 00000100H
$L143536:
	add	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [ebp+675224]
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+edi+12]
	lea	esi, DWORD PTR [edx+edi]
	mov	edx, DWORD PTR [ecx]
	inc	eax
	lea	eax, DWORD PTR [eax+eax*8]
	push	OFFSET FLAT:??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	shl	eax, 4
	push	eax
	mov	eax, DWORD PTR [esi+4]
	push	eax
	call	DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax
$L143499:
	mov	ecx, DWORD PTR [ebp+675224]
	mov	edx, DWORD PTR [ecx+edi+4]

; 3392 : 				
; 3393 : 				// Manage the texture swaps:
; 3394 : 				if(Particles[i].Texture!=CurrentTexture)

	mov	edi, DWORD PTR -616+[esp+636]
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR _CurrentTexture$[esp+636]
	lea	ebx, DWORD PTR [ebx+ebx*8]
	shl	ebx, 4
	add	ebx, edx
	cmp	eax, ecx
	je	SHORT $L126124

; 3395 : 				{
; 3396 : 					CurrentTexture=Particles[i].Texture;
; 3397 : 					BaseParticleScaleX=System.TextureScaleX*128*(Particles[i].Texture->USize*(1/256.f));

	fild	DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _System$[esp+636]
	mov	DWORD PTR _CurrentTexture$[esp+636], eax
	fmul	DWORD PTR __real@3b800000
	fmul	DWORD PTR [ecx+2780]
	fmul	DWORD PTR __real@43000000
	fstp	DWORD PTR _BaseParticleScaleX$126112[esp+636]

; 3398 : 					BaseParticleScaleY=System.TextureScaleY*128*(Particles[i].Texture->VSize*(1/256.f));

	fild	DWORD PTR [eax+56]
	fmul	DWORD PTR __real@3b800000
	fmul	DWORD PTR [ecx+2784]
	fmul	DWORD PTR __real@43000000
	fstp	DWORD PTR _BaseParticleScaleY$126113[esp+636]
$L126124:

; 3399 : 				}
; 3400 : 				
; 3401 : 				FD3DParticle *Vertices=p.v;
; 3402 : 
; 3403 : 				DWORD dwDiffuse;
; 3404 : 				
; 3405 : 				if(VariableAlpha)

	mov	eax, DWORD PTR _VariableAlpha$126115[esp+636]
	test	eax, eax
	je	$L126127

; 3406 : 				{
; 3407 : 					FLOAT alphaLevel=Clamp((float)(Particles[i].Alpha*SystemAlphaScale),0.f,1.f);

	fld	DWORD PTR _SystemAlphaScale$126117[esp+636]
	fmul	DWORD PTR [edi+12]
	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L143555
	mov	DWORD PTR _alphaLevel$126128[esp+636], 0
	jmp	SHORT $L144009
$L143555:
	fcom	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L143553
	fstp	DWORD PTR _alphaLevel$126128[esp+636]
	jmp	SHORT $L143554
$L143553:
	mov	DWORD PTR _alphaLevel$126128[esp+636], 1065353216 ; 3f800000H
$L144009:
	fstp	ST(0)
$L143554:

; 3408 : 					dwDiffuse=D3DCOLOR_RGBA((int)Clamp(((float)(alphaLevel*Stages[0]->MaxColor.R)),0.f,(float)Stages[0]->MaxColor.R),

	mov	ecx, DWORD PTR [ebp+19712]
	xor	edx, edx
	mov	dl, BYTE PTR [ecx+35]
	mov	DWORD PTR -564+[esp+636], edx
	fild	DWORD PTR -564+[esp+636]
	fst	DWORD PTR $T143570[esp+636]
	fmul	DWORD PTR _alphaLevel$126128[esp+636]
	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L143567
	fstp	ST(0)
	fld	DWORD PTR __real@00000000
	jmp	SHORT $L143566
$L143567:
	fcom	DWORD PTR $T143570[esp+636]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L143566
	fstp	ST(0)
	fld	DWORD PTR $T143570[esp+636]
$L143566:
	xor	eax, eax
	mov	al, BYTE PTR [ecx+32]
	mov	DWORD PTR -564+[esp+636], eax
	fild	DWORD PTR -564+[esp+636]
	fld	DWORD PTR _alphaLevel$126128[esp+636]
	fmul	ST(0), ST(1)
	fst	DWORD PTR $T143582[esp+636]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L143580
	fstp	ST(0)
	fld	DWORD PTR __real@00000000
	jmp	SHORT $L143579
$L143580:
	fld	DWORD PTR $T143582[esp+636]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L143579
	fstp	ST(0)
	fld	DWORD PTR $T143582[esp+636]
$L143579:
	xor	edx, edx
	mov	dl, BYTE PTR [ecx+33]
	mov	DWORD PTR -564+[esp+636], edx
	fild	DWORD PTR -564+[esp+636]
	fld	DWORD PTR _alphaLevel$126128[esp+636]
	fmul	ST(0), ST(1)
	fst	DWORD PTR $T143595[esp+636]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L143593
	fstp	ST(0)
	fld	DWORD PTR __real@00000000
	jmp	SHORT $L143592
$L143593:
	fld	DWORD PTR $T143595[esp+636]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L143592
	fstp	ST(0)
	fld	DWORD PTR $T143595[esp+636]
$L143592:
	xor	eax, eax
	mov	al, BYTE PTR [ecx+34]
	mov	DWORD PTR -564+[esp+636], eax
	fild	DWORD PTR -564+[esp+636]
	fld	DWORD PTR _alphaLevel$126128[esp+636]
	fmul	ST(0), ST(1)
	fst	DWORD PTR $T143608[esp+636]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L143606
	fstp	ST(0)
	fld	DWORD PTR __real@00000000
	jmp	SHORT $L143605
$L143606:
	fld	DWORD PTR $T143608[esp+636]
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L143605
	fstp	ST(0)
	fld	DWORD PTR $T143608[esp+636]
$L143605:
	fxch	ST(2)
	call	__ftol
	fxch	ST(2)
	mov	esi, eax
	and	esi, 255				; 000000ffH
	call	__ftol
	fxch	ST(1)
	shl	eax, 8
	or	esi, eax
	shl	esi, 8
	call	__ftol
	and	eax, 255				; 000000ffH
	or	esi, eax
	shl	esi, 8
	call	__ftol
	and	eax, 255				; 000000ffH
	or	esi, eax
	mov	DWORD PTR _dwDiffuse$126126[esp+636], esi

; 3409 : 											(int)Clamp(((float)(alphaLevel*Stages[0]->MaxColor.G)),0.f,(float)Stages[0]->MaxColor.G),
; 3410 : 											(int)Clamp(((float)(alphaLevel*Stages[0]->MaxColor.B)),0.f,(float)Stages[0]->MaxColor.B),
; 3411 : 											(int)Clamp(((float)(alphaLevel*Stages[0]->MaxColor.A)),0.f,(float)Stages[0]->MaxColor.A));
; 3412 : 
; 3413 : 				} else

	jmp	SHORT $L126168
$L126127:

; 3414 : 				{
; 3415 : 					dwDiffuse=D3DCOLOR_RGBA(Stages[0]->MaxColor.R,

	mov	esi, DWORD PTR [ebp+19712]
	xor	ecx, ecx
	mov	ch, BYTE PTR [esi+35]
	xor	edx, edx
	mov	dl, BYTE PTR [esi+33]
	xor	eax, eax
	mov	al, BYTE PTR [esi+34]
	mov	cl, BYTE PTR [esi+32]
	shl	ecx, 8
	or	ecx, edx
	shl	ecx, 8
	or	ecx, eax
	mov	DWORD PTR _dwDiffuse$126126[esp+636], ecx
$L126168:

; 3416 : 										    Stages[0]->MaxColor.G, 
; 3417 : 											Stages[0]->MaxColor.B,
; 3418 : 											Stages[0]->MaxColor.A); 
; 3419 : 
; 3420 : 				}
; 3421 : 
; 3422 : 				float DrawScaleU=(Particles[i].DrawScale*BaseParticleScaleX);
; 3423 : 				float DrawScaleV=(Particles[i].DrawScale*BaseParticleScaleY);
; 3424 : 			
; 3425 : 				// NJS: New:
; 3426 : 				FVector RightVector=Frame->Coords.XAxis;

	mov	eax, DWORD PTR _Frame$[esp+632]
	fld	DWORD PTR _BaseParticleScaleX$126112[esp+636]
	fmul	DWORD PTR [edi+8]
	lea	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _RightVector$126172[esp+636], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR _RightVector$126172[esp+640], edx

; 3427 : 				FVector UpVector   =Frame->Coords.YAxis;

	lea	edx, DWORD PTR [eax+76]
	fstp	DWORD PTR _DrawScaleU$126170[esp+636]
	fld	DWORD PTR _BaseParticleScaleY$126113[esp+636]
	mov	DWORD PTR _RightVector$126172[esp+644], ecx
	fmul	DWORD PTR [edi+8]
	mov	ecx, DWORD PTR [edx]

; 3428 : 				FVector forward    =Frame->Coords.ZAxis;

	add	eax, 88					; 00000058H
	mov	DWORD PTR _UpVector$126173[esp+636], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [edx+8]
	fstp	DWORD PTR _DrawScaleV$126171[esp+636]

; 3429 : 
; 3430 : 				// NJS: Do I have rotation?
; 3431 : 				if(Particles[i].Rotation)	

	fld	DWORD PTR [edi+16]
	mov	DWORD PTR _UpVector$126173[esp+640], ecx
	mov	ecx, DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	mov	DWORD PTR _UpVector$126173[esp+644], edx
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _forward$126174[esp+644], eax
	fnstsw	ax
	mov	DWORD PTR _forward$126174[esp+636], ecx
	test	ah, 68					; 00000044H
	mov	DWORD PTR _forward$126174[esp+640], edx
	jnp	$L126175

; 3432 : 				{
; 3433 : 					UpVector   =RotateAboutAxis(UpVector,Particles[i].Rotation,forward);

	fld	DWORD PTR _forward$126174[esp+640]
	mov	ecx, DWORD PTR [edi+16]
	fld	DWORD PTR _forward$126174[esp+644]
	mov	DWORD PTR $T143641[esp+636], ecx
	fld	DWORD PTR _forward$126174[esp+636]
	fld	ST(0)
	fmul	ST(0), ST(1)
	fld	ST(2)
	fmul	ST(0), ST(3)
	faddp	ST(1), ST(0)
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L143995
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	ST(0)
	fmulp	ST(2), ST(0)
	fld	ST(0)
	fmulp	ST(4), ST(0)
	fmulp	ST(2), ST(0)
	jmp	SHORT $L143635
$L143995:
	fstp	ST(0)
$L143635:
	fld	DWORD PTR $T143641[esp+636]
	fcos
	fld	DWORD PTR $T143641[esp+636]
	fsin
	fld	DWORD PTR __real@3f800000
	fsub	ST(0), ST(2)
	fld	ST(0)
	fmul	ST(0), ST(4)
	fst	DWORD PTR -620+[esp+636]

; 3464 : 		unclock(Stats.ParticleTime);

	fmul	ST(0), ST(6)
	fstp	DWORD PTR -584+[esp+636]
	fld	ST(1)
	fmul	ST(0), ST(5)
	fstp	DWORD PTR -580+[esp+636]
	fld	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(5)
	fstp	DWORD PTR -508+[esp+636]
	fld	ST(1)
	fmul	ST(0), ST(6)
	fstp	DWORD PTR -504+[esp+636]
	fld	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(4)
	fadd	ST(0), ST(3)
	fmul	DWORD PTR _UpVector$126173[esp+636]
	fld	DWORD PTR -584+[esp+636]
	fsub	DWORD PTR -580+[esp+636]
	fmul	DWORD PTR _UpVector$126173[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -504+[esp+636]
	fadd	DWORD PTR -508+[esp+636]
	fmul	DWORD PTR _UpVector$126173[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$143627[esp+636]
	fld	ST(0)
	fmul	ST(0), ST(5)
	fst	DWORD PTR -492+[esp+636]
	fmul	ST(0), ST(6)
	fstp	DWORD PTR -500+[esp+636]
	fld	ST(3)
	fmul	ST(0), ST(2)
	fstp	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(5)
	fmul	ST(0), ST(5)
	fadd	ST(0), ST(2)
	fmul	DWORD PTR _UpVector$126173[esp+640]
	fld	DWORD PTR -580+[esp+636]
	fadd	DWORD PTR -584+[esp+636]
	fmul	DWORD PTR _UpVector$126173[esp+636]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -500+[esp+636]
	fsub	DWORD PTR -620+[esp+636]
	fmul	DWORD PTR _UpVector$126173[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$143627[esp+640]
	fstp	ST(0)
	fld	DWORD PTR -508+[esp+636]
	fsub	DWORD PTR -504+[esp+636]
	fmul	DWORD PTR _UpVector$126173[esp+636]
	fld	DWORD PTR -620+[esp+636]
	fadd	DWORD PTR -500+[esp+636]
	fmul	DWORD PTR _UpVector$126173[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -492+[esp+636]
	fmul	ST(0), ST(4)
	fadd	ST(0), ST(2)
	fmul	DWORD PTR _UpVector$126173[esp+644]
	faddp	ST(1), ST(0)
	mov	eax, DWORD PTR _q$143627[esp+640]
	mov	edx, DWORD PTR _q$143627[esp+636]
	mov	DWORD PTR _UpVector$126173[esp+640], eax
	fstp	DWORD PTR _q$143627[esp+644]
	mov	ecx, DWORD PTR _q$143627[esp+644]
	mov	DWORD PTR _UpVector$126173[esp+636], edx
	fstp	ST(0)
	mov	DWORD PTR _UpVector$126173[esp+644], ecx
	fld	DWORD PTR [edi+16]
	fld	ST(1)
	fmul	ST(0), ST(2)
	fld	ST(3)
	fmul	ST(0), ST(4)
	faddp	ST(1), ST(0)
	fld	ST(4)
	fmul	ST(0), ST(5)
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L143994
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	ST(0)
	fmulp	ST(3), ST(0)
	fld	ST(0)
	fmulp	ST(5), ST(0)
	fmulp	ST(3), ST(0)
	jmp	SHORT $L143667
$L143994:

; 3434 : 					RightVector=RotateAboutAxis(RightVector,Particles[i].Rotation,forward);

	fstp	ST(0)
$L143667:
	fld	ST(0)
	fcos
	fstp	DWORD PTR _costheta$143660[esp+636]
	fsin
	fld	DWORD PTR __real@3f800000
	fsub	DWORD PTR _costheta$143660[esp+636]
	fst	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(2)

; 3464 : 		unclock(Stats.ParticleTime);

	fld	ST(0)
	fmul	ST(0), ST(5)
	fstp	DWORD PTR -500+[esp+636]
	fld	ST(1)
	fmul	ST(0), ST(4)
	fstp	DWORD PTR -492+[esp+636]
	fld	ST(0)
	fmul	ST(0), ST(4)
	fstp	DWORD PTR -504+[esp+636]
	fld	ST(1)
	fmul	ST(0), ST(5)
	fstp	DWORD PTR -508+[esp+636]
	fmul	ST(0), ST(2)
	fadd	DWORD PTR _costheta$143660[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+636]
	fld	DWORD PTR -500+[esp+636]
	fsub	DWORD PTR -492+[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -508+[esp+636]
	fadd	DWORD PTR -504+[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$143659[esp+636]
	fld	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(3)
	fst	DWORD PTR -484+[esp+636]
	fmul	ST(0), ST(4)
	fstp	DWORD PTR -580+[esp+636]
	fmulp	ST(1), ST(0)
	fld	DWORD PTR -620+[esp+636]
	fmul	ST(0), ST(3)
	fmul	ST(0), ST(3)
	fadd	DWORD PTR _costheta$143660[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+640]
	fld	DWORD PTR -492+[esp+636]
	fadd	DWORD PTR -500+[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+636]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -580+[esp+636]
	fsub	ST(0), ST(2)
	fmul	DWORD PTR _RightVector$126172[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$143659[esp+640]
	fld	DWORD PTR -504+[esp+636]
	fsub	DWORD PTR -508+[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+636]
	fxch	ST(1)
	fadd	DWORD PTR -580+[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+640]
	faddp	ST(1), ST(0)
	fld	DWORD PTR -484+[esp+636]
	fmul	ST(0), ST(2)
	fadd	DWORD PTR _costheta$143660[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+644]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _q$143659[esp+644]
	fstp	ST(0)
	mov	edx, DWORD PTR _q$143659[esp+636]
	fstp	ST(0)
	mov	eax, DWORD PTR _q$143659[esp+640]
	mov	ecx, DWORD PTR _q$143659[esp+644]
	mov	DWORD PTR _RightVector$126172[esp+636], edx
	mov	DWORD PTR _RightVector$126172[esp+640], eax
	mov	DWORD PTR _RightVector$126172[esp+644], ecx
$L126175:
	fld	DWORD PTR _UpVector$126173[esp+636]
	mov	edx, DWORD PTR -616+[esp+636]
	fmul	DWORD PTR _DrawScaleV$126171[esp+636]
	add	edx, -48				; ffffffd0H
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	fstp	DWORD PTR _UpVector$126173[esp+636]
	mov	edx, DWORD PTR [edx+8]
	fld	DWORD PTR _DrawScaleV$126171[esp+636]
	mov	DWORD PTR _vecPos$126180[esp+636], eax
	fmul	DWORD PTR _UpVector$126173[esp+640]
	mov	DWORD PTR _vecPos$126180[esp+640], ecx
	mov	DWORD PTR _vecPos$126180[esp+644], edx
	mov	eax, ebx
	fstp	DWORD PTR _UpVector$126173[esp+640]
	mov	DWORD PTR $T143076[esp+636], 1065353216	; 3f800000H
	fld	DWORD PTR _DrawScaleV$126171[esp+636]
	mov	DWORD PTR $T143076[esp+640], 1065353216	; 3f800000H
	fmul	DWORD PTR _UpVector$126173[esp+644]
	fstp	DWORD PTR _UpVector$126173[esp+644]
	fld	DWORD PTR _RightVector$126172[esp+636]
	fmul	DWORD PTR _DrawScaleU$126170[esp+636]
	fstp	DWORD PTR _RightVector$126172[esp+636]
	fld	DWORD PTR _DrawScaleU$126170[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+640]
	fstp	DWORD PTR _RightVector$126172[esp+640]
	fld	DWORD PTR _DrawScaleU$126170[esp+636]
	fmul	DWORD PTR _RightVector$126172[esp+644]
	fstp	DWORD PTR _RightVector$126172[esp+644]
	fld	DWORD PTR _RightVector$126172[esp+636]
	fchs
	fst	DWORD PTR $T143073[esp+636]
	fld	DWORD PTR _RightVector$126172[esp+640]
	fchs
	fld	ST(0)
	fld	DWORD PTR _RightVector$126172[esp+644]
	fchs
	fst	DWORD PTR -484+[esp+636]
	fld	DWORD PTR $T143073[esp+636]
	fadd	DWORD PTR _UpVector$126173[esp+636]
	fstp	DWORD PTR $T143074[esp+636]
	fxch	ST(1)
	fadd	DWORD PTR _UpVector$126173[esp+640]
	fstp	DWORD PTR $T143074[esp+640]
	fadd	DWORD PTR _UpVector$126173[esp+644]
	fld	DWORD PTR $T143074[esp+636]
	fadd	DWORD PTR _vecPos$126180[esp+636]
	fstp	DWORD PTR $T143075[esp+636]
	fld	DWORD PTR _vecPos$126180[esp+640]
	mov	ecx, DWORD PTR $T143075[esp+636]
	fadd	DWORD PTR $T143074[esp+640]
	mov	DWORD PTR [eax], ecx
	fstp	DWORD PTR $T143075[esp+640]
	fld	DWORD PTR _vecPos$126180[esp+644]
	mov	edx, DWORD PTR $T143075[esp+640]
	fadd	ST(0), ST(1)
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR $T143076[esp+636]
	mov	DWORD PTR [ebx+16], edx
	fstp	DWORD PTR $T143075[esp+644]
	mov	ecx, DWORD PTR $T143075[esp+644]
	fstp	ST(0)
	mov	DWORD PTR [eax+8], ecx
	fld	DWORD PTR _RightVector$126172[esp+636]
	mov	eax, DWORD PTR _dwDiffuse$126126[esp+636]
	fadd	DWORD PTR _UpVector$126173[esp+636]
	mov	ecx, DWORD PTR $T143076[esp+640]
	fld	DWORD PTR _RightVector$126172[esp+640]
	mov	DWORD PTR [ebx+12], eax
	fadd	DWORD PTR _UpVector$126173[esp+640]
	mov	DWORD PTR [ebx+20], ecx
	fld	DWORD PTR _RightVector$126172[esp+644]
	fadd	DWORD PTR _UpVector$126173[esp+644]
	fstp	DWORD PTR $T143077[esp+644]
	fxch	ST(1)
	lea	edx, DWORD PTR [ebx+24]
	fadd	DWORD PTR _vecPos$126180[esp+636]
	mov	DWORD PTR $T143079[esp+636], 0
	mov	DWORD PTR $T143079[esp+640], 1065353216	; 3f800000H
	lea	esi, DWORD PTR [ebx+48]
	fstp	DWORD PTR $T143078[esp+636]
	fld	DWORD PTR _vecPos$126180[esp+640]
	mov	ecx, DWORD PTR $T143078[esp+636]
	fadd	ST(0), ST(1)
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR $T143083[esp+640], 0
	mov	DWORD PTR $T143083[esp+636], 0
	fstp	DWORD PTR $T143078[esp+640]
	mov	ecx, DWORD PTR $T143078[esp+640]
	fstp	ST(0)
	mov	DWORD PTR [edx+4], ecx
	fld	DWORD PTR _vecPos$126180[esp+644]
	lea	edi, DWORD PTR [ebx+72]
	fadd	DWORD PTR $T143077[esp+644]
	mov	DWORD PTR [ebx+60], eax
	mov	DWORD PTR [ebx+36], eax
	fstp	DWORD PTR $T143078[esp+644]
	fld	DWORD PTR _UpVector$126173[esp+636]
	mov	ecx, DWORD PTR $T143078[esp+644]
	fchs
	mov	DWORD PTR [edx+8], ecx
	fst	DWORD PTR $T143080[esp+636]
	mov	edx, DWORD PTR $T143079[esp+636]
	fld	DWORD PTR _UpVector$126173[esp+640]
	mov	ecx, DWORD PTR $T143079[esp+640]
	fchs
	mov	DWORD PTR [ebx+44], ecx
	fld	ST(0)
	mov	DWORD PTR [ebx+40], edx
	fld	DWORD PTR _UpVector$126173[esp+644]
	mov	edx, esi
	fchs
	fst	DWORD PTR -564+[esp+636]
	fld	DWORD PTR $T143080[esp+636]
	fadd	DWORD PTR _RightVector$126172[esp+636]
	fstp	DWORD PTR $T143081[esp+636]
	fxch	ST(1)
	fadd	DWORD PTR _RightVector$126172[esp+640]
	fstp	DWORD PTR $T143081[esp+640]
	fadd	DWORD PTR _RightVector$126172[esp+644]
	fld	DWORD PTR $T143081[esp+636]
	fadd	DWORD PTR _vecPos$126180[esp+636]
	fstp	DWORD PTR $T143082[esp+636]
	fld	DWORD PTR _vecPos$126180[esp+640]
	mov	ecx, DWORD PTR $T143082[esp+636]
	fadd	DWORD PTR $T143081[esp+640]
	mov	DWORD PTR [edx], ecx
	fstp	DWORD PTR $T143082[esp+640]
	fld	DWORD PTR _vecPos$126180[esp+644]
	mov	ecx, DWORD PTR $T143082[esp+640]
	fadd	ST(0), ST(1)
	mov	DWORD PTR [edx+4], ecx
	fstp	DWORD PTR $T143082[esp+644]
	mov	ecx, DWORD PTR $T143082[esp+644]
	mov	DWORD PTR [edx+8], ecx
	fstp	ST(0)
	mov	ecx, DWORD PTR $T143083[esp+640]
	fxch	ST(1)
	mov	edx, DWORD PTR $T143083[esp+636]
	fstp	DWORD PTR $T143085[esp+636]
	mov	DWORD PTR [ebx+68], ecx
	mov	ecx, 6
	mov	DWORD PTR [ebx+64], edx
	rep movsd
	fstp	DWORD PTR $T143085[esp+640]
	mov	edx, DWORD PTR -564+[esp+636]
	fxch	ST(1)
	mov	DWORD PTR $T143085[esp+644], edx
	fstp	DWORD PTR $T143084[esp+636]
	lea	ecx, DWORD PTR [ebx+96]
	fld	DWORD PTR -484+[esp+636]
	mov	DWORD PTR $T143088[esp+640], 0
	fld	DWORD PTR $T143084[esp+636]
	mov	DWORD PTR [ebx+108], eax
	fadd	DWORD PTR $T143085[esp+636]
	mov	DWORD PTR $T143088[esp+636], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T143088[esp+636]
	lea	edi, DWORD PTR [ebx+120]
	fstp	DWORD PTR $T143086[esp+636]
	fxch	ST(1)
	mov	esi, ebx
	fadd	DWORD PTR $T143085[esp+640]
	mov	DWORD PTR [ebx+112], eax
	fstp	DWORD PTR $T143086[esp+640]
	fadd	DWORD PTR $T143085[esp+644]
	fld	DWORD PTR $T143086[esp+636]
	fadd	DWORD PTR _vecPos$126180[esp+636]
	fstp	DWORD PTR $T143087[esp+636]
	fld	DWORD PTR _vecPos$126180[esp+640]
	mov	edx, DWORD PTR $T143087[esp+636]
	fadd	DWORD PTR $T143086[esp+640]
	mov	DWORD PTR [ecx], edx
	fstp	DWORD PTR $T143087[esp+640]
	fld	DWORD PTR _vecPos$126180[esp+644]
	mov	edx, DWORD PTR $T143087[esp+640]
	fadd	ST(0), ST(1)
	mov	DWORD PTR [ecx+4], edx
	fstp	DWORD PTR $T143087[esp+644]
	mov	edx, DWORD PTR $T143087[esp+644]
	mov	DWORD PTR [ecx+8], edx
	fstp	ST(0)
	mov	ecx, DWORD PTR $T143088[esp+640]
	mov	DWORD PTR [ebx+116], ecx
	mov	ecx, 6
	rep movsd
$L126120:
	mov	ecx, DWORD PTR -616+[esp+636]
	mov	eax, DWORD PTR -568+[esp+636]
	add	ecx, 160				; 000000a0H
	dec	eax
	mov	DWORD PTR -616+[esp+636], ecx
	mov	DWORD PTR -568+[esp+636], eax
	jne	$L126119
$L126121:

; 3435 : 				}
; 3436 : 
; 3437 : 				UpVector*=DrawScaleV;
; 3438 : 				RightVector*=DrawScaleU; 
; 3439 : 				FVector vecPos=Particles[i].WorldLocation;
; 3440 : 
; 3441 : 				Vertices[0].Position = vecPos + (-RightVector+UpVector);
; 3442 : 				Vertices[0].Diffuse = dwDiffuse;
; 3443 : 				Vertices[0].TextureVector = D3DXVECTOR2(1.0f, 1.0f);
; 3444 : 
; 3445 : 				Vertices[1].Position = vecPos + (RightVector+UpVector);
; 3446 : 				Vertices[1].Diffuse = dwDiffuse;
; 3447 : 				Vertices[1].TextureVector = D3DXVECTOR2(0.0f, 1.0f);
; 3448 : 
; 3449 : 				Vertices[2].Position = vecPos + (RightVector+-UpVector);
; 3450 : 				Vertices[2].Diffuse = dwDiffuse;
; 3451 : 				Vertices[2].TextureVector = D3DXVECTOR2(0.0f, 0.0f);
; 3452 : 
; 3453 : 				Vertices[3]=Vertices[2];
; 3454 : 
; 3455 : 				Vertices[4].Position = vecPos + (-RightVector+-UpVector) ;
; 3456 : 				Vertices[4].Diffuse = dwDiffuse;
; 3457 : 				Vertices[4].TextureVector = D3DXVECTOR2(1.0f, 0.0f);
; 3458 : 
; 3459 : 				Vertices[5]=Vertices[0];
; 3460 : 			}
; 3461 : 		}
; 3462 : 
; 3463 : 		QueueParticleFlush(System,Frame);

	mov	eax, DWORD PTR [ebp+675228]
	test	eax, eax
	je	$L143920
	mov	esi, DWORD PTR _System$[esp+636]
	lea	edx, DWORD PTR _PolyFlagsEx$143886[esp+636]
	push	edx
	mov	edx, DWORD PTR _Frame$[esp+636]
	lea	eax, DWORD PTR _PolyFlags$143885[esp+640]
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?STY2PolyFlags@AActor@@QAIXPAUFSceneNode@@AAK1@Z
	mov	edi, DWORD PTR _PolyFlags$143885[esp+636]
	mov	edx, DWORD PTR _PolyFlagsEx$143886[esp+636]
	mov	al, BYTE PTR [esi+1552]
	or	edi, 256				; 00000100H
	or	edx, 2
	test	al, al
	mov	DWORD PTR _PolyFlags$143885[esp+636], edi
	mov	DWORD PTR _PolyFlagsEx$143886[esp+636], edx
	jne	SHORT $L143887
	mov	eax, edi
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L144010
$L143887:
	cmp	al, 2
	jne	SHORT $L143889
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L143889:
	mov	eax, DWORD PTR _PolyFlags$143885[esp+636]
	and	eax, 2147483647				; 7fffffffH
$L144010:
	mov	ecx, DWORD PTR [esi+1576]
	mov	DWORD PTR _PolyFlags$143885[esp+636], eax
	mov	eax, 1065353216				; 3f800000H
	cmp	ecx, eax
	jne	SHORT $L143986
	cmp	DWORD PTR [esi+1584], eax
	je	SHORT $L143893
$L143986:
	or	DWORD PTR _PolyFlags$143885[esp+636], 4
$L143893:
	mov	edx, DWORD PTR _PolyFlagsEx$143886[esp+636]
	push	edx
	mov	edx, DWORD PTR _PolyFlags$143885[esp+640]
	mov	ecx, ebp
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	mov	eax, DWORD PTR [esi+1556]
	push	eax
	mov	ecx, ebp
	call	?SetZBias@UD3DRenderDevice@@QAIMM@Z	; UD3DRenderDevice::SetZBias
	fstp	ST(0)
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	1
	push	eax
	call	DWORD PTR [ecx+244]
	lea	eax, DWORD PTR [ebp+16624]
	push	0
	mov	ecx, ebp
	mov	DWORD PTR [ebp+19716], eax
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog
	mov	edx, DWORD PTR [ebp+675228]
	xor	eax, eax
	test	edx, edx
	jle	SHORT $L143898
	mov	ecx, DWORD PTR [ebp+675224]
	add	ecx, 8

; 3465 : 	}

	npad	7

; 3435 : 				}
; 3436 : 
; 3437 : 				UpVector*=DrawScaleV;
; 3438 : 				RightVector*=DrawScaleU; 
; 3439 : 				FVector vecPos=Particles[i].WorldLocation;
; 3440 : 
; 3441 : 				Vertices[0].Position = vecPos + (-RightVector+UpVector);
; 3442 : 				Vertices[0].Diffuse = dwDiffuse;
; 3443 : 				Vertices[0].TextureVector = D3DXVECTOR2(1.0f, 1.0f);
; 3444 : 
; 3445 : 				Vertices[1].Position = vecPos + (RightVector+UpVector);
; 3446 : 				Vertices[1].Diffuse = dwDiffuse;
; 3447 : 				Vertices[1].TextureVector = D3DXVECTOR2(0.0f, 1.0f);
; 3448 : 
; 3449 : 				Vertices[2].Position = vecPos + (RightVector+-UpVector);
; 3450 : 				Vertices[2].Diffuse = dwDiffuse;
; 3451 : 				Vertices[2].TextureVector = D3DXVECTOR2(0.0f, 0.0f);
; 3452 : 
; 3453 : 				Vertices[3]=Vertices[2];
; 3454 : 
; 3455 : 				Vertices[4].Position = vecPos + (-RightVector+-UpVector) ;
; 3456 : 				Vertices[4].Diffuse = dwDiffuse;
; 3457 : 				Vertices[4].TextureVector = D3DXVECTOR2(1.0f, 0.0f);
; 3458 : 
; 3459 : 				Vertices[5]=Vertices[0];
; 3460 : 			}
; 3461 : 		}
; 3462 : 
; 3463 : 		QueueParticleFlush(System,Frame);

$L143896:
	add	eax, DWORD PTR [ecx]
	add	ecx, 16					; 00000010H
	dec	edx
	jne	SHORT $L143896
$L143898:
	mov	edx, DWORD PTR [ebp+19684]
	lea	esi, DWORD PTR [eax+eax*2]
	add	edx, eax
	shl	esi, 1
	cmp	esi, 16384				; 00004000H
	mov	DWORD PTR [ebp+19684], edx
	jl	SHORT $L143899
	push	3222					; 00000c96H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L143899:
	push	-1
	lea	ecx, DWORD PTR [ebp+16740]
	push	esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ; FD3DVertexBuffer<FD3DParticle>::Lock
	mov	ebx, eax
	mov	eax, DWORD PTR [ebp+675228]
	test	eax, eax
	mov	DWORD PTR _i$143895[esp+636], 0
	jle	SHORT $L143904
	mov	edx, DWORD PTR [ebp+675224]
	xor	eax, eax
$L143902:
	mov	ecx, DWORD PTR [edx+eax+8]
	test	ecx, ecx
	je	SHORT $L143903
	mov	esi, DWORD PTR [edx+eax+4]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	mov	edx, ecx
	shr	ecx, 2
	mov	edi, ebx
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb
	mov	edx, DWORD PTR [ebp+675224]
	mov	ecx, DWORD PTR [edx+eax+8]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	add	ebx, ecx
$L143903:
	mov	ecx, DWORD PTR _i$143895[esp+636]
	mov	esi, DWORD PTR [ebp+675228]
	inc	ecx
	add	eax, 16					; 00000010H
	cmp	ecx, esi
	mov	DWORD PTR _i$143895[esp+636], ecx
	jl	SHORT $L143902
$L143904:
	lea	esi, DWORD PTR [ebp+16740]
	mov	ecx, esi
	call	?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ ; FD3DVertexBuffer<FD3DParticle>::Unlock
	mov	ecx, esi
	mov	DWORD PTR _First$143906[esp+636], eax
	call	?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ ; FD3DVertexBuffer<FD3DParticle>::Set
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	xor	esi, esi
	push	esi
	push	1
	xor	ebx, ebx
	push	eax
	mov	DWORD PTR _ParticleIndex$143909[esp+648], ebx
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [ebp+16624]
	mov	DWORD PTR [ebp+19716], eax
	cmp	DWORD PTR [ebp+675228], esi
	mov	DWORD PTR _i$143895[esp+636], esi
	jle	$L143918
	mov	DWORD PTR -584+[esp+636], esi
$L143910:
	mov	eax, DWORD PTR [ebp+675224]
	mov	ecx, DWORD PTR -584+[esp+636]
	mov	edi, DWORD PTR [eax+ecx+8]
	test	edi, edi
	lea	eax, DWORD PTR [eax+ecx+8]
	mov	DWORD PTR [eax], 0
	je	$L143911
	test	esi, esi
	je	SHORT $L143915
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$143908[esp+636]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
$L143915:
	mov	ecx, DWORD PTR [ebp+675224]
	mov	edx, DWORD PTR -584+[esp+636]
	mov	esi, DWORD PTR [edx+ecx]
	test	esi, esi
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	je	$L143916
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	ecx, DWORD PTR _Frame$[esp+632]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+92]
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	-1
	push	0
	push	0
	lea	edx, DWORD PTR _CurrentTextureInfo$143908[esp+652]
	mov	ecx, esi
	call	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _PolyFlagsEx$143886[esp+636]
	mov	edx, DWORD PTR [esi+196]
	mov	eax, DWORD PTR _PolyFlags$143885[esp+636]
	push	0
	or	edx, ecx
	push	edx
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$143908[esp+652]
	push	ecx
	xor	edx, edx
	mov	ecx, ebp
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	mov	ecx, DWORD PTR _PolyFlagsEx$143886[esp+636]
	mov	edx, DWORD PTR [esi+196]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _PolyFlags$143885[esp+640]
	mov	ecx, ebp
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	jmp	SHORT $L143917
$L143916:
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L143917:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [edi+edi]
	push	edx
	lea	edx, DWORD PTR [ebx+ebx*2]
	mov	ebx, DWORD PTR _First$143906[esp+640]
	lea	edx, DWORD PTR [ebx+edx*2]
	push	edx
	push	4
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ebx, DWORD PTR _ParticleIndex$143909[esp+636]
	add	ebx, edi
	mov	DWORD PTR _ParticleIndex$143909[esp+636], ebx
$L143911:
	mov	eax, DWORD PTR _i$143895[esp+636]
	mov	edx, DWORD PTR -584+[esp+636]
	mov	ecx, DWORD PTR [ebp+675228]
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	mov	DWORD PTR _i$143895[esp+636], eax
	mov	DWORD PTR -584+[esp+636], edx
	jl	$L143910
	test	esi, esi
	je	SHORT $L143918
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$143908[esp+636]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
	jmp	SHORT $L143919
$L143918:
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L143919:
	mov	eax, DWORD PTR _System$[esp+636]
	cmp	BYTE PTR [eax+1552], 2
	jne	SHORT $L143920
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L143920:

; 3464 : 		unclock(Stats.ParticleTime);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	pop	edi
	mov	DWORD PTR _L$143960[esp+632], 0
	pop	ebx
	je	SHORT $L143962
	rdtsc
	mov	DWORD PTR _L$143960[esp+628], eax
	mov	DWORD PTR _H$143961[esp+628], edx
$L143962:
	mov	eax, DWORD PTR _L$143960[esp+628]
	mov	ecx, DWORD PTR [ebp+19636]
	add	eax, -34				; ffffffdeH
	add	ecx, eax
	mov	DWORD PTR [ebp+19636], ecx
$L126071:
	pop	esi
	pop	ebp

; 3465 : 	}

	add	esp, 620				; 0000026cH
	ret	4
?dnDrawParticles@UD3DRenderDevice@@UAIXAAVASoftParticleSystem@@PAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::dnDrawParticles
_TEXT	ENDS
EXTRN	__imp_??0FVector@@QAE@XZ:NEAR
; Function compile flags: /Ogty
;	COMDAT ?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z
_TEXT	SEGMENT
$T144361 = -348
$T144391 = -352
_PolyFlags$144448 = -380
_PolyFlagsEx$144449 = -364
_i$144458 = -368
_First$144469 = -352
_CurrentTextureInfo$144471 = -128
_ParticleIndex$144472 = -372
_QueuedLineCount$ = -344
_LastStart$ = -272
_SubTextureHeight$ = -360
_ReversePanPassDone$ = -373
_XSystemStart$126209 = -380
_XFraction$126217 = -340
_SubTextureIndex$126218 = -316
_i$126220 = -364
_dwDiffuseEnd$126230 = -300
_UpVector$126231 = -296
_TexLeft$126235 = -372
_TexBottom$126238 = -368
_VertPan$126244 = -336
_System$ = -356
_Frame$ = 8
_Texture$ = 12
$T144015 = -328
$T144016 = -312
$T144017 = -176
$T144018 = -228
$T144019 = -164
$T144020 = -216
$T144021 = -248
$T144022 = -196
$T144023 = -152
$T144024 = -284
$T144025 = -184
$T144026 = -140
$T144027 = -240
$T144028 = -204
_Temp$144067 = -188
_ParticleIndex$144163 = -372
_D$144212 = -372
_D$144216 = -372
_Temp$144267 = -332
?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z PROC NEAR ; UD3DRenderDevice::QueuedLinesFlush, COMDAT
; _this$ = ecx
; _System$ = edx

; 3480 : 	{

	sub	esp, 380				; 0000017cH
	push	ebx
	push	ebp
	mov	ebx, ecx

; 3481 : 		VALIDATE;
; 3482 : 
; 3483 : 		int QueuedLineCount=QueuedLines.Num();

	mov	eax, DWORD PTR [ebx+675240]

; 3484 : 		if(!QueuedLineCount) return;

	test	eax, eax
	push	esi
	mov	esi, edx
	push	edi
	mov	DWORD PTR _System$[esp+396], esi
	mov	DWORD PTR _QueuedLineCount$[esp+396], eax
	je	$L144483

; 3485 : 		SetZBias(0);

	fld	DWORD PTR [ebx+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L144047
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144046
$L144047:
	mov	eax, DWORD PTR [ebx+19124]
	push	0
	push	47					; 0000002fH
	mov	DWORD PTR [ebx+675164], 0
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L144046:

; 3486 : 
; 3487 : 		FVector LastStart[2];

	lea	edi, DWORD PTR _LastStart$[esp+396]
	mov	ebp, 2
$L144058:
	mov	ecx, edi
	call	DWORD PTR __imp_??0FVector@@QAE@XZ
	add	edi, 12					; 0000000cH
	dec	ebp
	jne	SHORT $L144058

; 3488 : 
; 3489 : 		// Compute the height of a sub texture segment
; 3490 : 		float SubTextureHeight=1.f;
; 3491 : 		if(System.SubTextureCount>1) SubTextureHeight=(1.f/System.SubTextureCount);

	mov	eax, DWORD PTR [esi+1664]
	cmp	eax, 1
	mov	DWORD PTR _SubTextureHeight$[esp+396], 1065353216 ; 3f800000H
	mov	DWORD PTR -372+[esp+396], eax
	jle	SHORT $L126204
	fild	DWORD PTR -372+[esp+396]
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR _SubTextureHeight$[esp+396]
$L126204:

; 3581 : 				continue;

	fild	DWORD PTR _QueuedLineCount$[esp+396]
	mov	BYTE PTR _ReversePanPassDone$[esp+396], 0
	fstp	DWORD PTR -352+[esp+396]
$L126207:
	mov	edx, DWORD PTR [esi+112]
	fld	DWORD PTR [edx+1520]
	mov	al, BYTE PTR [esi+1692]
	test	al, 1
	fmul	DWORD PTR [esi+1676]
	fadd	DWORD PTR [esi+1684]
	fst	DWORD PTR _XSystemStart$126209[esp+396]
	fadd	DWORD PTR [esi+1668]
	je	SHORT $L144066
	mov	al, BYTE PTR _ReversePanPassDone$[esp+396]
	test	al, al
	je	SHORT $L144066
	mov	eax, DWORD PTR _XSystemStart$126209[esp+396]
	fstp	DWORD PTR _XSystemStart$126209[esp+396]
	mov	DWORD PTR _Temp$144067[esp+396], eax
	fld	DWORD PTR _Temp$144067[esp+396]
$L144066:
	fsub	DWORD PTR _XSystemStart$126209[esp+396]
	mov	eax, DWORD PTR [esi+1664]
	xor	edi, edi
	cmp	eax, 1
	fdiv	DWORD PTR -352+[esp+396]
	mov	DWORD PTR _SubTextureIndex$126218[esp+396], edi
	fstp	DWORD PTR _XFraction$126217[esp+396]
	jle	SHORT $L126219
	call	DWORD PTR __imp__rand
	cdq
	idiv	DWORD PTR [esi+1664]
	mov	DWORD PTR _SubTextureIndex$126218[esp+396], edx
$L126219:
	cmp	DWORD PTR _QueuedLineCount$[esp+396], edi
	mov	DWORD PTR _i$126220[esp+396], edi
	jle	$L126223

; 3589 : 	}

	npad	7
$L126221:

; 3492 : 
; 3493 : 		// Whether the reverse pan pass has been performed yet or not.
; 3494 : 		bool ReversePanPassDone=false;
; 3495 : 
; 3496 : 		for(;;)
; 3497 : 		{
; 3498 : 			float XSystemStart=System.BeamTexturePanOffsetX+(System.BeamTexturePanX*System.Level->GameTimeSeconds);
; 3499 : 			float XSystemEnd=XSystemStart+System.BeamTextureScaleX;
; 3500 : 
; 3501 : 			if((System.BeamReversePanPass&&ReversePanPassDone))
; 3502 : 				Exchange(XSystemStart,XSystemEnd);
; 3503 : 
; 3504 : 			float XFraction=(XSystemEnd-XSystemStart)/QueuedLineCount;
; 3505 : 
; 3506 : 			int SubTextureIndex=0;
; 3507 : 
; 3508 : 			if(System.SubTextureCount>1) 
; 3509 : 				SubTextureIndex=appRand()%System.SubTextureCount;
; 3510 : 
; 3511 : 			for(int i=0;i<QueuedLineCount;i++)
; 3512 : 			{
; 3513 : 				QueuedLineSegment &l=QueuedLines(i);

	mov	eax, DWORD PTR _i$126220[esp+396]
	mov	edx, DWORD PTR [ebx+675236]
	mov	esi, DWORD PTR _Texture$[esp+392]
	lea	ecx, DWORD PTR [eax+eax*8]
	lea	ebp, DWORD PTR [edx+ecx*4]

; 3514 : 				QueuedParticle &p=QueuedParticleAlloc(Texture);	// Alloc the particle to hold this line segment.

	mov	ecx, DWORD PTR [ebx+675228]
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L144534

; 3492 : 
; 3493 : 		// Whether the reverse pan pass has been performed yet or not.
; 3494 : 		bool ReversePanPassDone=false;
; 3495 : 
; 3496 : 		for(;;)
; 3497 : 		{
; 3498 : 			float XSystemStart=System.BeamTexturePanOffsetX+(System.BeamTexturePanX*System.Level->GameTimeSeconds);
; 3499 : 			float XSystemEnd=XSystemStart+System.BeamTextureScaleX;
; 3500 : 
; 3501 : 			if((System.BeamReversePanPass&&ReversePanPassDone))
; 3502 : 				Exchange(XSystemStart,XSystemEnd);
; 3503 : 
; 3504 : 			float XFraction=(XSystemEnd-XSystemStart)/QueuedLineCount;
; 3505 : 
; 3506 : 			int SubTextureIndex=0;
; 3507 : 
; 3508 : 			if(System.SubTextureCount>1) 
; 3509 : 				SubTextureIndex=appRand()%System.SubTextureCount;
; 3510 : 
; 3511 : 			for(int i=0;i<QueuedLineCount;i++)
; 3512 : 			{
; 3513 : 				QueuedLineSegment &l=QueuedLines(i);

	mov	edx, DWORD PTR [ebx+675224]

; 3589 : 	}

	npad	7

; 3514 : 				QueuedParticle &p=QueuedParticleAlloc(Texture);	// Alloc the particle to hold this line segment.

$L144153:
	cmp	DWORD PTR [edx], esi
	je	SHORT $L144534
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L144153
$L144534:
	cmp	eax, ecx
	jl	SHORT $L144157
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L144535
	mov	edx, DWORD PTR [ebx+675224]
	add	edx, 8

; 3589 : 	}

	npad	1

; 3514 : 				QueuedParticle &p=QueuedParticleAlloc(Texture);	// Alloc the particle to hold this line segment.

$L144158:
	cmp	DWORD PTR [edx], 0
	je	SHORT $L144535
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	jl	SHORT $L144158
$L144535:
	cmp	eax, ecx
	jl	SHORT $L144162
	push	1
	push	16					; 00000010H
	lea	ecx, DWORD PTR [ebx+675224]
	call	DWORD PTR __imp_?AddZeroed@FArray@@QAEHHH@Z
$L144162:
	mov	edx, DWORD PTR [ebx+675224]
	mov	ecx, eax
	shl	ecx, 4
	mov	DWORD PTR [ecx+edx], esi
$L144157:
	shl	eax, 4
	mov	esi, eax
	mov	eax, DWORD PTR [ebx+675224]
	mov	edx, DWORD PTR [eax+esi+8]
	lea	eax, DWORD PTR [eax+esi+8]
	mov	ecx, edx
	inc	ecx
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [ebx+675224]
	mov	edi, DWORD PTR [ecx+esi+8]
	lea	eax, DWORD PTR [ecx+esi]
	mov	ecx, DWORD PTR [eax+12]
	cmp	edi, ecx
	mov	DWORD PTR _ParticleIndex$144163[esp+396], edx
	jl	SHORT $L144164
	inc	ecx
	cmp	ecx, 4
	jge	SHORT $L144197
	mov	ecx, 4
	jmp	SHORT $L144201
$L144197:
	cmp	ecx, 256				; 00000100H
	jle	SHORT $L144201
	mov	ecx, 256				; 00000100H
$L144201:
	add	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [ebx+675224]
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+esi+12]
	lea	edi, DWORD PTR [edx+esi]
	mov	edx, DWORD PTR [ecx]
	inc	eax
	lea	eax, DWORD PTR [eax+eax*8]
	push	OFFSET FLAT:??_C@_1CC@NBJF@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAd?$AA?5?$AAP?$AAa?$AAr?$AAt?$AAi?$AAc?$AAl?$AAe?$AAs?$AA?$AA@ ; `string'
	shl	eax, 4
	push	eax
	mov	eax, DWORD PTR [edi+4]
	push	eax
	call	DWORD PTR [edx+4]
	mov	edx, DWORD PTR _ParticleIndex$144163[esp+396]
	mov	DWORD PTR [edi+4], eax
$L144164:

; 3515 : 				FVector &Start=l.v[0];
; 3516 : 				FVector &End  =l.v[1];
; 3517 : 
; 3518 : 				FD3DParticle *Vertices=p.v; 
; 3519 : 				DWORD dwDiffuseStart=l.StartColor.TrueColor(); 
; 3520 : 				DWORD dwDiffuseEnd  =l.EndColor.TrueColor(); 
; 3521 : 			
; 3522 : 				//FVector forward=Frame->Coords.ZAxis;			
; 3523 : 				FVector UpVector=(Start-ViewLocation) cross (End-ViewLocation);

	fld	DWORD PTR [ebp+12]
	mov	ecx, DWORD PTR [ebx+675224]
	fsub	DWORD PTR [ebx+176]
	mov	eax, DWORD PTR [ecx+esi+4]
	mov	esi, DWORD PTR [ebp+28]
	lea	edx, DWORD PTR [edx+edx*8]
	fstp	DWORD PTR $T144016[esp+396]
	fld	DWORD PTR [ebp+16]
	shl	edx, 4
	fsub	DWORD PTR [ebx+180]
	add	edx, eax
	xor	eax, eax
	mov	DWORD PTR _D$144212[esp+396], esi
	fstp	DWORD PTR $T144016[esp+400]
	fld	DWORD PTR [ebp+20]
	mov	al, BYTE PTR _D$144212[esp+398]
	fsub	DWORD PTR [ebx+184]
	mov	ecx, esi
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	fstp	DWORD PTR $T144016[esp+404]
	fld	DWORD PTR [ebp]
	and	esi, 65280				; 0000ff00H
	fsub	DWORD PTR [ebx+176]
	add	eax, ecx
	add	eax, esi
	fstp	DWORD PTR $T144015[esp+396]
	fld	DWORD PTR [ebp+4]
	mov	esi, DWORD PTR [ebp+32]
	fsub	DWORD PTR [ebx+180]
	mov	edi, eax
	xor	eax, eax
	mov	DWORD PTR _D$144216[esp+396], esi
	fstp	DWORD PTR $T144015[esp+400]
	fld	DWORD PTR [ebp+8]
	mov	al, BYTE PTR _D$144216[esp+398]
	fsub	DWORD PTR [ebx+184]
	mov	ecx, esi
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	fstp	DWORD PTR $T144015[esp+404]
	fld	DWORD PTR $T144015[esp+400]
	and	esi, 65280				; 0000ff00H
	fmul	DWORD PTR $T144016[esp+404]
	fld	DWORD PTR $T144015[esp+404]
	add	eax, ecx
	fmul	DWORD PTR $T144016[esp+400]
	add	eax, esi
	mov	DWORD PTR _dwDiffuseEnd$126230[esp+396], eax
	fsubp	ST(1), ST(0)
	fld	DWORD PTR $T144015[esp+404]
	fmul	DWORD PTR $T144016[esp+396]
	fld	DWORD PTR $T144016[esp+404]
	fmul	DWORD PTR $T144015[esp+396]
	fsubp	ST(1), ST(0)
	fld	DWORD PTR $T144016[esp+400]
	fmul	DWORD PTR $T144015[esp+396]
	fld	DWORD PTR $T144015[esp+400]
	fmul	DWORD PTR $T144016[esp+396]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _UpVector$126231[esp+404]

; 3524 : 				UpVector.Normalize();

	fld	ST(1)
	fmul	ST(0), ST(2)
	fld	DWORD PTR _UpVector$126231[esp+404]
	fmul	DWORD PTR _UpVector$126231[esp+404]
	faddp	ST(1), ST(0)
	fld	ST(1)
	fmul	ST(0), ST(2)
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L144546
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fxch	ST(2)
	fmul	ST(0), ST(2)
	fxch	ST(2)
	fxch	ST(1)
	fmul	ST(0), ST(1)
	fxch	ST(1)
	fld	DWORD PTR _UpVector$126231[esp+404]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$126231[esp+404]
$L144546:

; 3525 : 
; 3526 : 				// texture coordinates:
; 3527 : 				float TexLeft=0.f,
; 3528 : 					  TexTop=1.f,
; 3529 : 					  TexRight=1.f,
; 3530 : 					  TexBottom=0.f;
; 3531 : 
; 3532 : 				if(System.SubTextureCount>1) 

	mov	eax, DWORD PTR _System$[esp+396]
	fstp	ST(0)
	mov	ecx, DWORD PTR [eax+1664]
	fld	DWORD PTR __real@3f800000
	cmp	ecx, 1
	mov	DWORD PTR _TexBottom$126238[esp+396], 0
	jle	SHORT $L126239
	fstp	ST(0)

; 3533 : 				{
; 3534 : 					TexBottom=SubTextureIndex*SubTextureHeight;

	fild	DWORD PTR _SubTextureIndex$126218[esp+396]
	fmul	DWORD PTR _SubTextureHeight$[esp+396]
	fst	DWORD PTR _TexBottom$126238[esp+396]

; 3535 : 					TexTop=TexBottom+SubTextureHeight;

	fadd	DWORD PTR _SubTextureHeight$[esp+396]
$L126239:

; 3536 : 				}
; 3537 : 
; 3538 : 				TexLeft=XSystemStart+(i*XFraction);

	fild	DWORD PTR _i$126220[esp+396]

; 3539 : 				TexRight=TexLeft+XFraction;
; 3540 : 
; 3541 : 				Exchange(TexLeft,TexRight);
; 3542 : 
; 3543 : 				float VertPan=System.BeamTexturePanOffsetY+(System.BeamTexturePanY*System.Level->GameTimeSeconds);

	mov	ecx, DWORD PTR [eax+112]
	fmul	DWORD PTR _XFraction$126217[esp+396]
	fadd	DWORD PTR _XSystemStart$126209[esp+396]
	fst	DWORD PTR _Temp$144267[esp+396]
	fadd	DWORD PTR _XFraction$126217[esp+396]
	fstp	DWORD PTR _TexLeft$126235[esp+396]
	fld	DWORD PTR [ecx+1520]
	fmul	DWORD PTR [eax+1680]
	fadd	DWORD PTR [eax+1688]

; 3544 : 				TexTop+=VertPan;
; 3545 : 				TexBottom+=VertPan;
; 3546 : 
; 3547 : 				if(i)

	mov	eax, DWORD PTR _i$126220[esp+396]
	test	eax, eax
	fst	DWORD PTR _VertPan$126244[esp+396]

; 3548 : 				{
; 3549 : 					Vertices[0].Position=LastStart[0];

	mov	eax, edx
	faddp	ST(1), ST(0)
	fld	DWORD PTR _VertPan$126244[esp+396]
	fadd	DWORD PTR _TexBottom$126238[esp+396]
	fst	DWORD PTR _TexBottom$126238[esp+396]
	je	SHORT $L126245
	mov	ecx, DWORD PTR _LastStart$[esp+396]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _LastStart$[esp+400]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _LastStart$[esp+404]
	mov	DWORD PTR [eax+8], ecx

; 3550 : 					Vertices[1].Position=LastStart[1];

	mov	ecx, DWORD PTR _LastStart$[esp+408]
	lea	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _LastStart$[esp+412]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _LastStart$[esp+416]

; 3551 : 				} else

	jmp	$L144556
$L126245:

; 3552 : 				{
; 3553 : 					Vertices[0].Position=Start+UpVector*l.Width;

	fld	DWORD PTR [ebp+24]
	fld	ST(4)
	fmul	ST(0), ST(1)
	fld	ST(4)
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T144017[esp+400]
	fld	DWORD PTR _UpVector$126231[esp+404]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T144017[esp+404]
	fadd	DWORD PTR [ebp]
	fstp	DWORD PTR $T144018[esp+396]
	mov	ecx, DWORD PTR $T144018[esp+396]
	fstp	ST(0)
	fld	DWORD PTR $T144017[esp+400]
	fadd	DWORD PTR [ebp+4]
	fstp	DWORD PTR $T144018[esp+400]
	fld	DWORD PTR $T144017[esp+404]
	fadd	DWORD PTR [ebp+8]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T144018[esp+400]
	mov	DWORD PTR [eax+4], ecx
	fstp	DWORD PTR $T144018[esp+404]
	mov	ecx, DWORD PTR $T144018[esp+404]
	mov	DWORD PTR [eax+8], ecx

; 3554 : 					Vertices[1].Position=Start-UpVector*l.Width;

	fld	DWORD PTR [ebp+24]
	fld	ST(0)
	lea	eax, DWORD PTR [edx+24]
	fmul	ST(0), ST(5)
	fld	ST(4)
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T144019[esp+400]
	fld	DWORD PTR _UpVector$126231[esp+404]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T144019[esp+404]
	fld	DWORD PTR [ebp]
	fsub	ST(0), ST(1)
	fstp	DWORD PTR $T144020[esp+396]
	mov	ecx, DWORD PTR $T144020[esp+396]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR [ebp+4]
	fsub	DWORD PTR $T144019[esp+400]
	fstp	DWORD PTR $T144020[esp+400]
	fld	DWORD PTR [ebp+8]
	mov	DWORD PTR [eax], ecx
	fsub	DWORD PTR $T144019[esp+404]
	mov	ecx, DWORD PTR $T144020[esp+400]
	mov	DWORD PTR [eax+4], ecx
	fstp	DWORD PTR $T144020[esp+404]
	mov	ecx, DWORD PTR $T144020[esp+404]
$L144556:

; 3555 : 				}
; 3556 : 
; 3557 : 				Vertices[0].Diffuse=dwDiffuseStart;
; 3558 : 				Vertices[0].TextureVector=D3DXVECTOR2(TexRight, TexBottom);

	fld	DWORD PTR _Temp$144267[esp+396]
	mov	DWORD PTR [eax+8], ecx
	fstp	DWORD PTR $T144021[esp+396]
	mov	eax, DWORD PTR $T144021[esp+396]
	fstp	DWORD PTR $T144021[esp+400]
	mov	ecx, DWORD PTR $T144021[esp+400]

; 3559 : 
; 3560 : 				Vertices[1].Diffuse=dwDiffuseStart;
; 3561 : 				Vertices[1].TextureVector=D3DXVECTOR2(TexRight, TexTop);

	fld	DWORD PTR _Temp$144267[esp+396]
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+12], edi
	mov	DWORD PTR [edx+36], edi
	fstp	DWORD PTR $T144022[esp+396]
	mov	eax, DWORD PTR $T144022[esp+396]
	fst	DWORD PTR $T144022[esp+400]
	mov	ecx, DWORD PTR $T144022[esp+400]
	mov	DWORD PTR [edx+44], ecx
	mov	DWORD PTR [edx+40], eax

; 3562 : 
; 3563 : 				Vertices[2].Position=End -UpVector * l.Width; //EndWidth;

	fld	DWORD PTR [ebp+24]
	fld	ST(0)
	lea	esi, DWORD PTR [edx+48]
	fmul	ST(0), ST(4)
	mov	ecx, esi
	fld	ST(3)
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T144023[esp+400]
	fld	DWORD PTR _UpVector$126231[esp+404]
	fmul	ST(0), ST(2)
	fstp	DWORD PTR $T144023[esp+404]
	fld	DWORD PTR [ebp+12]
	fsub	ST(0), ST(1)
	fstp	DWORD PTR $T144024[esp+396]
	mov	eax, DWORD PTR $T144024[esp+396]
	fstp	ST(0)
	fstp	ST(0)
	fld	DWORD PTR [ebp+16]
	fsub	DWORD PTR $T144023[esp+400]
	fstp	DWORD PTR $T144024[esp+400]
	fld	DWORD PTR [ebp+20]
	mov	edi, DWORD PTR $T144024[esp+400]
	fsub	DWORD PTR $T144023[esp+404]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edi
	fstp	DWORD PTR $T144024[esp+404]

; 3564 : 				Vertices[2].Diffuse=dwDiffuseEnd;
; 3565 : 				Vertices[2].TextureVector=D3DXVECTOR2(TexLeft, TexTop);

	fld	DWORD PTR _TexLeft$126235[esp+396]
	mov	edi, DWORD PTR $T144024[esp+404]
	mov	DWORD PTR [ecx+8], edi
	mov	ecx, DWORD PTR _dwDiffuseEnd$126230[esp+396]
	mov	DWORD PTR [edx+60], ecx
	fstp	DWORD PTR $T144025[esp+396]
	mov	ecx, DWORD PTR $T144025[esp+396]
	fstp	DWORD PTR $T144025[esp+400]
	mov	DWORD PTR [edx+64], ecx
	mov	ecx, DWORD PTR $T144025[esp+400]

; 3566 : 
; 3567 : 				Vertices[3]=Vertices[2];
; 3568 : 				
; 3569 : 				Vertices[4].Position=End+UpVector*l.Width; 

	fxch	ST(1)
	mov	DWORD PTR [edx+68], ecx
	lea	edi, DWORD PTR [edx+72]
	mov	ecx, 6
	rep movsd
	mov	ecx, DWORD PTR [ebp+24]
	mov	DWORD PTR $T144361[esp+396], ecx
	fmul	DWORD PTR $T144361[esp+396]
	fstp	DWORD PTR $T144026[esp+396]
	fmul	DWORD PTR $T144361[esp+396]
	fld	DWORD PTR _UpVector$126231[esp+404]
	fmul	DWORD PTR $T144361[esp+396]
	fld	DWORD PTR $T144026[esp+396]
	fadd	DWORD PTR [ebp+12]
	fstp	DWORD PTR $T144027[esp+396]
	mov	esi, DWORD PTR $T144027[esp+396]
	fxch	ST(1)
	fadd	DWORD PTR [ebp+16]

; 3570 : 				Vertices[4].Diffuse=dwDiffuseEnd;
; 3571 : 				Vertices[4].TextureVector=D3DXVECTOR2(TexLeft, TexBottom);
; 3572 : 
; 3573 : 				Vertices[5]=Vertices[0];

	lea	edi, DWORD PTR [edx+120]
	fstp	DWORD PTR $T144027[esp+400]
	fadd	DWORD PTR [ebp+20]
	lea	ebp, DWORD PTR [edx+96]
	mov	ecx, ebp
	mov	DWORD PTR [ecx], esi
	mov	esi, DWORD PTR $T144027[esp+400]
	mov	DWORD PTR [ecx+4], esi
	fstp	DWORD PTR $T144027[esp+404]
	mov	esi, DWORD PTR $T144027[esp+404]
	fld	DWORD PTR _TexLeft$126235[esp+396]
	mov	DWORD PTR [ecx+8], esi
	mov	ecx, DWORD PTR _dwDiffuseEnd$126230[esp+396]
	mov	DWORD PTR [edx+108], ecx
	mov	ecx, DWORD PTR _TexBottom$126238[esp+396]
	mov	DWORD PTR $T144028[esp+400], ecx
	fstp	DWORD PTR $T144028[esp+396]
	mov	ecx, DWORD PTR $T144028[esp+396]
	mov	DWORD PTR [edx+112], ecx
	mov	ecx, DWORD PTR $T144028[esp+400]
	mov	DWORD PTR [edx+116], ecx
	mov	esi, edx

; 3574 : 
; 3575 : 				LastStart[1]=Vertices[2].Position;

	mov	edx, DWORD PTR $T144024[esp+400]
	mov	ecx, 6
	rep movsd
	mov	DWORD PTR _LastStart$[esp+408], eax
	mov	eax, DWORD PTR $T144024[esp+404]
	mov	DWORD PTR _LastStart$[esp+416], eax
	mov	DWORD PTR _LastStart$[esp+412], edx

; 3576 : 				LastStart[0]=Vertices[4].Position;

	mov	ecx, DWORD PTR [ebp]
	mov	DWORD PTR _LastStart$[esp+396], ecx
	mov	edx, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR _QueuedLineCount$[esp+396]
	mov	DWORD PTR _LastStart$[esp+400], edx
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR _LastStart$[esp+404], eax
	mov	eax, DWORD PTR _i$126220[esp+396]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _i$126220[esp+396], eax
	jl	$L126221
$L126223:

; 3577 : 			}
; 3578 : 			if(System.BeamReversePanPass&&!ReversePanPassDone)

	mov	ecx, DWORD PTR _System$[esp+396]
	test	BYTE PTR [ecx+1692], 1
	je	SHORT $L126259
	mov	al, BYTE PTR _ReversePanPassDone$[esp+396]
	test	al, al
	jne	SHORT $L126259

; 3579 : 			{
; 3580 : 				ReversePanPassDone=true;

	mov	BYTE PTR _ReversePanPassDone$[esp+396], 1

; 3581 : 				continue;

	mov	esi, ecx
	jmp	$L126207
$L126259:

; 3582 : 			}
; 3583 : 
; 3584 : 			break;
; 3585 : 		}
; 3586 : 
; 3587 : 		QueuedLines.Clear();
; 3588 : 		QueueParticleFlush(System,Frame);

	mov	eax, DWORD PTR [ebx+675228]
	test	eax, eax
	mov	DWORD PTR [ebx+675240], 0
	je	$L144483
	mov	esi, DWORD PTR _System$[esp+396]
	lea	edx, DWORD PTR _PolyFlagsEx$144449[esp+396]
	push	edx
	mov	edx, DWORD PTR _Frame$[esp+396]
	lea	eax, DWORD PTR _PolyFlags$144448[esp+400]
	push	eax
	mov	ecx, esi
	call	DWORD PTR __imp_?STY2PolyFlags@AActor@@QAIXPAUFSceneNode@@AAK1@Z
	mov	edi, DWORD PTR _PolyFlags$144448[esp+396]
	mov	edx, DWORD PTR _PolyFlagsEx$144449[esp+396]
	mov	al, BYTE PTR [esi+1552]
	or	edi, 256				; 00000100H
	or	edx, 2
	test	al, al
	mov	DWORD PTR _PolyFlags$144448[esp+396], edi
	mov	DWORD PTR _PolyFlagsEx$144449[esp+396], edx
	jne	SHORT $L144450
	mov	eax, edi
	or	eax, -2147483648			; 80000000H
	jmp	SHORT $L144557
$L144450:
	cmp	al, 2
	jne	SHORT $L144452
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]
$L144452:
	mov	eax, DWORD PTR _PolyFlags$144448[esp+396]
	and	eax, 2147483647				; 7fffffffH
$L144557:
	mov	ecx, DWORD PTR [esi+1576]
	mov	DWORD PTR _PolyFlags$144448[esp+396], eax
	mov	eax, 1065353216				; 3f800000H
	cmp	ecx, eax
	jne	SHORT $L144545
	cmp	DWORD PTR [esi+1584], eax
	je	SHORT $L144456
$L144545:
	or	DWORD PTR _PolyFlags$144448[esp+396], 4
$L144456:
	mov	edx, DWORD PTR _PolyFlagsEx$144449[esp+396]
	push	edx
	mov	edx, DWORD PTR _PolyFlags$144448[esp+400]
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	mov	eax, DWORD PTR [esi+1556]
	push	1098907648				; 41800000H
	mov	ecx, eax
	push	0
	push	ecx
	mov	DWORD PTR $T144391[esp+408], eax
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [ebx+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L144491
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144547
$L144491:
	mov	esi, DWORD PTR [ebx+19124]
	fst	DWORD PTR [ebx+675164]
	mov	edi, DWORD PTR [esi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	esi
	call	DWORD PTR [edi+200]
	jmp	SHORT $L144490
$L144547:
	fstp	ST(0)
$L144490:
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	1
	push	eax
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [ebx+16624]
	push	0
	mov	ecx, ebx
	mov	DWORD PTR [ebx+19716], eax
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog
	mov	edx, DWORD PTR [ebx+675228]
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $L144461
	mov	eax, DWORD PTR [ebx+675224]
	add	eax, 8
$L144459:
	add	ecx, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	dec	edx
	jne	SHORT $L144459
$L144461:
	mov	edx, DWORD PTR [ebx+19684]
	lea	esi, DWORD PTR [ecx+ecx*2]
	add	edx, ecx
	shl	esi, 1
	cmp	esi, 16384				; 00004000H
	mov	DWORD PTR [ebx+19684], edx
	jl	SHORT $L144462
	push	3222					; 00000c96H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0DA@DNJO@TotalParticleCount?$CK6?$DMPARTICLE_VE@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L144462:
	push	-1
	lea	ecx, DWORD PTR [ebx+16740]
	push	esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ; FD3DVertexBuffer<FD3DParticle>::Lock
	mov	ebp, eax
	mov	eax, DWORD PTR [ebx+675228]
	test	eax, eax
	mov	DWORD PTR _i$144458[esp+396], 0
	jle	SHORT $L144467
	mov	edx, DWORD PTR [ebx+675224]
	xor	eax, eax
$L144465:
	mov	ecx, DWORD PTR [eax+edx+8]
	test	ecx, ecx
	je	SHORT $L144466
	mov	esi, DWORD PTR [eax+edx+4]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	mov	edx, ecx
	shr	ecx, 2
	mov	edi, ebp
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb
	mov	edx, DWORD PTR [ebx+675224]
	mov	ecx, DWORD PTR [eax+edx+8]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ecx, 4
	add	ebp, ecx
$L144466:
	mov	ecx, DWORD PTR _i$144458[esp+396]
	mov	esi, DWORD PTR [ebx+675228]
	inc	ecx
	add	eax, 16					; 00000010H
	cmp	ecx, esi
	mov	DWORD PTR _i$144458[esp+396], ecx
	jl	SHORT $L144465
$L144467:
	lea	esi, DWORD PTR [ebx+16740]
	mov	ecx, esi
	call	?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ ; FD3DVertexBuffer<FD3DParticle>::Unlock
	mov	ecx, esi
	mov	DWORD PTR _First$144469[esp+396], eax
	call	?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ ; FD3DVertexBuffer<FD3DParticle>::Set
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	xor	esi, esi
	push	esi
	push	1
	xor	edi, edi
	push	eax
	mov	DWORD PTR _ParticleIndex$144472[esp+408], edi
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [ebx+16624]
	mov	DWORD PTR [ebx+19716], eax
	cmp	DWORD PTR [ebx+675228], esi
	mov	DWORD PTR _i$144458[esp+396], esi
	jle	$L144481
	mov	DWORD PTR -360+[esp+396], esi
$L144473:
	mov	eax, DWORD PTR [ebx+675224]
	mov	ecx, DWORD PTR -360+[esp+396]
	mov	ebp, DWORD PTR [ecx+eax+8]
	test	ebp, ebp
	lea	eax, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR [eax], 0
	je	$L144474
	test	esi, esi
	je	SHORT $L144478
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$144471[esp+396]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
$L144478:
	mov	ecx, DWORD PTR [ebx+675224]
	mov	edx, DWORD PTR -360+[esp+396]
	mov	esi, DWORD PTR [edx+ecx]
	test	esi, esi
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	je	$L144479
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	ecx, DWORD PTR _Frame$[esp+392]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+92]
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	-1
	push	0
	push	0
	lea	edx, DWORD PTR _CurrentTextureInfo$144471[esp+412]
	mov	ecx, esi
	call	DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _PolyFlagsEx$144449[esp+396]
	mov	edx, DWORD PTR [esi+196]
	mov	eax, DWORD PTR _PolyFlags$144448[esp+396]
	push	0
	or	edx, ecx
	push	edx
	push	0
	push	eax
	lea	ecx, DWORD PTR _CurrentTextureInfo$144471[esp+412]
	push	ecx
	xor	edx, edx
	mov	ecx, ebx
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture
	mov	ecx, DWORD PTR _PolyFlagsEx$144449[esp+396]
	mov	edx, DWORD PTR [esi+196]
	or	edx, ecx
	push	edx
	mov	edx, DWORD PTR _PolyFlags$144448[esp+400]
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	jmp	SHORT $L144480
$L144479:
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L144480:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ebp+ebp]
	push	edx
	lea	edx, DWORD PTR [edi+edi*2]
	mov	edi, DWORD PTR _First$144469[esp+400]
	lea	edx, DWORD PTR [edi+edx*2]
	push	edx
	push	4
	push	eax
	call	DWORD PTR [ecx+280]
	mov	edi, DWORD PTR _ParticleIndex$144472[esp+396]
	add	edi, ebp
	mov	DWORD PTR _ParticleIndex$144472[esp+396], edi
$L144474:
	mov	eax, DWORD PTR _i$144458[esp+396]
	mov	edx, DWORD PTR -360+[esp+396]
	mov	ecx, DWORD PTR [ebx+675228]
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	mov	DWORD PTR _i$144458[esp+396], eax
	mov	DWORD PTR -360+[esp+396], edx
	jl	$L144473
	test	esi, esi
	je	SHORT $L144481
	mov	eax, DWORD PTR [esi]
	lea	edx, DWORD PTR _CurrentTextureInfo$144471[esp+396]
	mov	ecx, esi
	call	DWORD PTR [eax+76]
	jmp	SHORT $L144482
$L144481:
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L144482:
	mov	eax, DWORD PTR _System$[esp+396]
	cmp	BYTE PTR [eax+1552], 2
	jne	SHORT $L144483
	mov	ebx, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [ebx]
	push	4
	push	23					; 00000017H
	push	ebx
	call	DWORD PTR [ecx+200]
$L144483:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3589 : 	}

	add	esp, 380				; 0000017cH
	ret	12					; 0000000cH
?QueuedLinesFlush@UD3DRenderDevice@@QAIXAAVABeamSystem@@PAUFSceneNode@@PAVUTexture@@K@Z ENDP ; UD3DRenderDevice::QueuedLinesFlush
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z
_TEXT	SEGMENT
_PolyFlagsEx$126264 = -160
_CurrentTextureInfo$126266 = -128
$T144563 = -140
$T144564 = -176
$T144565 = -140
$T144566 = -176
$T144567 = -176
$T144568 = -140
$T144569 = -176
$T144570 = -176
_UpVector$ = -156
$T144571 = -140
$T144572 = -176
$T144573 = -176
$T144574 = -140
$T144575 = -176
$T144576 = -176
_Xor$144585 = -144
$T144628 = -164
_Frame$ = -176
_Texture$ = 8
_PolyFlags$ = 12
_Start$ = 16
_End$ = 28
_StartWidth$ = 40
_EndWidth$ = 44
_StartColor$ = 48
_EndColor$ = 52
_Connected$ = 56
?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z PROC NEAR ; UD3DRenderDevice::dnDraw3DLine, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3605 : 	{

	sub	esp, 176				; 000000b0H

; 3606 : 		VALIDATE;
; 3607 : 
; 3608 : 		if(!RenderLines) 

	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	test	eax, eax
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	DWORD PTR _Frame$[esp+192], edx
	mov	esi, ecx
	je	$L126261

; 3609 : 			return;
; 3610 : 
; 3611 : 		// Special case single width lines:
; 3612 : 		if((StartWidth==1.f)&&(EndWidth==1.f))

	fld	DWORD PTR _StartWidth$[esp+188]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L126263
	fld	DWORD PTR _EndWidth$[esp+188]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$L126263

; 3613 : 		{
; 3614 : 			DWORD PolyFlagsEx=PFX_Clip;
; 3615 : 			if(Texture) PolyFlagsEx|=Texture->PolyFlagsEx;

	mov	ebp, DWORD PTR _Texture$[esp+188]
	test	ebp, ebp
	mov	DWORD PTR _PolyFlagsEx$126264[esp+192], 2
	je	SHORT $L126265
	mov	eax, DWORD PTR [ebp+196]
	or	eax, 2
	mov	DWORD PTR _PolyFlagsEx$126264[esp+192], eax
$L126265:

; 3616 : 
; 3617 : 			SetBlending(PolyFlags,PolyFlagsEx);

	mov	edi, DWORD PTR _PolyFlags$[esp+188]
	mov	eax, edi
	and	eax, 1073741892				; 40000044H
	cmp	eax, 1073741824				; 40000000H
	mov	DWORD PTR $T144628[esp+192], edi
	jne	SHORT $L144581
	mov	eax, DWORD PTR [esi+19148]
	test	eax, eax
	jne	SHORT $L144580
$L144581:
	mov	eax, edi
	and	eax, -1073741825			; bfffffffH
	mov	DWORD PTR $T144628[esp+192], eax
$L144580:
	mov	ecx, DWORD PTR $T144628[esp+192]
	test	cl, 68					; 00000044H
	jne	SHORT $L144582
	test	BYTE PTR _PolyFlagsEx$126264[esp+192], 113 ; 00000071H
	jne	SHORT $L144582
	or	ecx, -2147483648			; 80000000H
	jmp	SHORT $L144754
$L144582:
	test	cl, 4
	je	SHORT $L144584
	and	ecx, -3					; fffffffdH
$L144754:
	mov	DWORD PTR $T144628[esp+192], ecx
$L144584:
	mov	eax, DWORD PTR [esi+19616]
	mov	ebx, DWORD PTR [esi+19620]
	mov	edx, DWORD PTR _PolyFlagsEx$126264[esp+192]
	xor	eax, ecx
	xor	ebx, edx
	test	ah, 1
	mov	DWORD PTR _Xor$144585[esp+192], eax
	je	SHORT $L144587
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	not	ecx
	and	ecx, 256				; 00000100H
	or	ecx, 128				; 00000080H
	shr	ecx, 7
	push	ecx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [edx+200]
$L144587:
	test	bl, 2
	je	SHORT $L144588
	mov	edx, DWORD PTR _PolyFlagsEx$126264[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, 1
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
$L144588:
	test	bl, 8
	je	SHORT $L144589
	mov	edx, DWORD PTR _PolyFlagsEx$126264[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
$L144589:
	mov	eax, DWORD PTR _Xor$144585[esp+192]
	test	eax, -754972601				; d3000847H
	jne	SHORT $L144591
	test	bl, 113					; 00000071H
	je	$L144627
$L144591:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L144593
	test	bl, 113					; 00000071H
	je	$L144613
$L144593:
	test	bl, 1
	je	SHORT $L144594
	test	BYTE PTR _PolyFlagsEx$126264[esp+192], 1
	jne	SHORT $L144594
	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L144595
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	jmp	SHORT $L144596
$L144595:
	mov	edx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L144596:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
$L144594:
	mov	eax, DWORD PTR $T144628[esp+192]
	test	eax, 268435525				; 10000045H
	mov	cl, BYTE PTR _PolyFlagsEx$126264[esp+192]
	jne	SHORT $L144597
	test	cl, 113					; 00000071H
	jne	SHORT $L144597
	xor	edx, edx
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	jmp	$L144613
$L144597:
	test	cl, 64					; 00000040H
	je	SHORT $L144599
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
$L144755:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 4
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L144613
$L144599:
	test	al, 1
	je	SHORT $L144601
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
$L144757:
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L144613
$L144601:
	test	cl, 32					; 00000020H
	je	SHORT $L144603
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L144613
$L144603:
	test	cl, 16					; 00000010H
	je	SHORT $L144605
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	SHORT $L144757
$L144605:
	test	al, 4
	je	SHORT $L144607
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	jmp	$L144755
$L144607:
	test	al, 64					; 00000040H
	je	SHORT $L144609
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 9
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 3
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L144613
$L144609:
	test	eax, 268435456				; 10000000H
	je	SHORT $L144611
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 2
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	jmp	$L144613
$L144611:
	test	cl, 1
	je	$L144613
	mov	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 5
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L144613:
	test	BYTE PTR _Xor$144585[esp+192], 1
	je	SHORT $L144614
	mov	edx, DWORD PTR $T144628[esp+192]
	and	edx, 1
	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L144614:
	mov	eax, DWORD PTR _Xor$144585[esp+192]
	test	eax, eax
	jns	SHORT $L144616
	mov	ecx, DWORD PTR $T144628[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L144616:
	test	BYTE PTR _Xor$144585[esp+192], 2
	je	SHORT $L144619
	test	BYTE PTR $T144628[esp+192], 2
	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L144618
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	jmp	SHORT $L144619
$L144618:
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L144619:
	mov	eax, DWORD PTR _Xor$144585[esp+192]
	test	ah, 8
	je	SHORT $L144620
	mov	edi, DWORD PTR $T144628[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	edi, DWORD PTR _PolyFlags$[esp+188]
$L144620:
	test	DWORD PTR _Xor$144585[esp+192], 1073741824 ; 40000000H
	je	SHORT $L144621
	mov	ecx, DWORD PTR $T144628[esp+192]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 30					; 0000001eH
	and	ecx, 1
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L144621:
	test	DWORD PTR _Xor$144585[esp+192], 50331648 ; 03000000H
	je	SHORT $L144627
	mov	eax, DWORD PTR $T144628[esp+192]
	test	eax, 16777216				; 01000000H
	je	SHORT $L144624
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	3
	jmp	SHORT $L144758
$L144624:
	test	eax, 33554432				; 02000000H
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L144626
	push	3
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	2
	jmp	SHORT $L144758
$L144626:
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]
	push	1
$L144758:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
$L144627:
	mov	edx, DWORD PTR $T144628[esp+192]
	mov	eax, DWORD PTR _PolyFlagsEx$126264[esp+192]

; 3618 : 			SetZBias(0);

	push	1098907648				; 41800000H
	push	0
	push	0
	mov	DWORD PTR [esi+19616], edx
	mov	DWORD PTR [esi+19620], eax
	call	?Clamp@@YAMMMM@Z			; Clamp
	fcom	DWORD PTR [esi+675164]
	add	esp, 12					; 0000000cH
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L144634
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L144743
$L144634:
	mov	edi, DWORD PTR [esi+19124]
	fst	DWORD PTR [esi+675164]
	mov	ebx, DWORD PTR [edi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	edi
	call	DWORD PTR [ebx+200]
	mov	edi, DWORD PTR _PolyFlags$[esp+188]
	jmp	SHORT $L144633
$L144743:
	fstp	ST(0)
$L144633:

; 3619 : 			FTextureInfo CurrentTextureInfo;
; 3620 : 			
; 3621 : 			if(Texture) 

	test	ebp, ebp
	je	SHORT $L126267

; 3622 : 			{
; 3623 : 				Texture->Lock( CurrentTextureInfo, Frame->Viewport->CurrentTime, -1, this );

	mov	ecx, DWORD PTR _Frame$[esp+192]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+172]
	mov	edx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR [ebp]
	push	esi
	push	-1
	push	ecx
	push	edx
	lea	edx, DWORD PTR _CurrentTextureInfo$126266[esp+208]
	mov	ecx, ebp
	call	DWORD PTR [eax+72]

; 3624 : 				SetTexture( 0, CurrentTextureInfo, PolyFlags, 0, PolyFlagsEx );

	mov	eax, DWORD PTR _PolyFlagsEx$126264[esp+192]
	push	0
	push	eax
	push	0
	push	edi
	lea	ecx, DWORD PTR _CurrentTextureInfo$126266[esp+208]
	push	ecx
	xor	edx, edx
	mov	ecx, esi
	call	?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ; UD3DRenderDevice::SetTexture

; 3625 : 			} else

	jmp	SHORT $L126268
$L126267:

; 3626 : 			{
; 3627 : 				//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3628 : 				Direct3DDevice8->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3629 : 				Direct3DDevice8->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L126268:

; 3630 : 			}
; 3631 : 
; 3632 : 			// Handle lines with a width of one:
; 3633 : 			FD3DVertex*	Vertices = (FD3DVertex*) LineVertices.Lock(2);

	push	-1
	lea	edi, DWORD PTR [esi+16720]
	push	2
	mov	ecx, edi
	call	?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ; FD3DVertexBuffer<FD3DVertex>::Lock

; 3634 : 
; 3635 : 			Vertices[0].Position=Start;

	mov	ecx, DWORD PTR _Start$[esp+188]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _Start$[esp+192]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _Start$[esp+196]
	mov	DWORD PTR [edx+8], ecx

; 3636 : 			Vertices[0].Diffuse = FColor(StartColor).TrueColor();

	mov	ecx, DWORD PTR _StartColor$[esp+188]

; 3701 : 
; 3702 : 		Vertices[5]=Vertices[0];

	xor	edx, edx
	mov	dl, BYTE PTR _StartColor$[esp+190]
	mov	ebx, ecx
	and	ebx, 255				; 000000ffH
	shl	ebx, 16					; 00000010H
	and	ecx, 65280				; 0000ff00H
	add	edx, ebx
	add	edx, ecx
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR _End$[esp+188]
	lea	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _End$[esp+192]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _End$[esp+196]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR _EndColor$[esp+188]
	xor	edx, edx
	mov	dl, BYTE PTR _EndColor$[esp+190]
	mov	ebx, ecx
	and	ebx, 255				; 000000ffH
	shl	ebx, 16					; 00000010H
	and	ecx, 65280				; 0000ff00H
	add	edx, ebx
	add	edx, ecx
	mov	DWORD PTR [eax+28], edx
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jne	SHORT $L144664
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L144664:
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L144665
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L144665:
	mov	ebx, DWORD PTR [edi+12]
	mov	ecx, edi
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	ebx
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	ecx, DWORD PTR [esi+19684]
	inc	ecx
	test	ebp, ebp
	mov	DWORD PTR [esi+19684], ecx
	je	SHORT $L126274
	mov	eax, DWORD PTR [ebp]
	lea	edx, DWORD PTR _CurrentTextureInfo$126266[esp+192]
	mov	ecx, ebp
	call	DWORD PTR [eax+76]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3703 : 	}

	add	esp, 176				; 000000b0H
	ret	52					; 00000034H
$L126274:

; 3637 : 
; 3638 : 			Vertices[1].Position=End;
; 3639 : 			Vertices[1].Diffuse = FColor(EndColor).TrueColor();
; 3640 : 
; 3641 : 			INT	First = LineVertices.Unlock();
; 3642 : 
; 3643 : 			LineVertices.Set();
; 3644 : 
; 3645 : 			Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, 1 );
; 3646 : 			Stats.Particles++;
; 3647 : 
; 3648 : 			if(Texture)
; 3649 : 			{
; 3650 : 				Texture->Unlock(CurrentTextureInfo);
; 3651 : 			} else
; 3652 : 			{
; 3653 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3654 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	esi, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [esi]
	push	4
	push	4
	push	0
	push	esi
	call	DWORD PTR [edx+252]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3703 : 	}

	add	esp, 176				; 000000b0H
	ret	52					; 00000034H
$L126263:

; 3655 : 			}
; 3656 : 
; 3657 : 			return;
; 3658 : 		} 
; 3659 : 
; 3660 : 		if(Connected)

	mov	al, BYTE PTR _Connected$[esp+188]
	test	al, al
	je	$L126276

; 3661 : 		{
; 3662 : 			QueuedLineSegment &l=QueuedLines(QueuedLines.Add());

	add	esi, 675236				; 000a4da4H
	push	0
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
	mov	ecx, DWORD PTR [esi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	eax, DWORD PTR [ecx+eax*4]

; 3663 : 
; 3664 : 			l.v[0]=Start;

	mov	ecx, DWORD PTR _Start$[esp+188]
	mov	edx, eax
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _Start$[esp+192]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _Start$[esp+196]
	mov	DWORD PTR [edx+8], ecx

; 3665 : 			l.v[1]=End;

	mov	ecx, DWORD PTR _End$[esp+188]
	lea	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR _End$[esp+192]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR _End$[esp+196]
	mov	DWORD PTR [edx+8], ecx

; 3666 : 			l.Width=StartWidth;

	mov	edx, DWORD PTR _StartWidth$[esp+188]

; 3667 : 			l.StartColor=StartColor;

	mov	ecx, DWORD PTR _StartColor$[esp+188]
	pop	edi
	pop	esi
	mov	DWORD PTR [eax+24], edx

; 3668 : 			l.EndColor=EndColor;

	mov	edx, DWORD PTR _EndColor$[esp+180]
	pop	ebp
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], edx
	pop	ebx

; 3703 : 	}

	add	esp, 176				; 000000b0H
	ret	52					; 00000034H
$L126276:

; 3669 : 			return;
; 3670 : 		} 
; 3671 : 
; 3672 : 		// Draw unconnected non single width lines:
; 3673 : 		QueuedParticle &p=QueuedParticleAlloc(Texture);

	mov	eax, DWORD PTR _Texture$[esp+188]
	push	eax
	mov	ecx, esi
	call	?QueuedParticleAlloc@UD3DRenderDevice@@QAEAAUQueuedParticle@1@PAVUTexture@@@Z ; UD3DRenderDevice::QueuedParticleAlloc

; 3674 : 
; 3675 : 		FD3DParticle *Vertices=p.v; 
; 3676 : 		DWORD dwDiffuseStart = StartColor.TrueColor(); 
; 3677 : 		DWORD dwDiffuseEnd   = EndColor.TrueColor(); 
; 3678 : 
; 3679 : 		// Compute forward and up vectors
; 3680 : 		FVector UpVector=(Start-ViewLocation) cross (End-ViewLocation);

	fld	DWORD PTR _End$[esp+196]
	fsub	DWORD PTR [esi+184]
	xor	ecx, ecx
	mov	cl, BYTE PTR _StartColor$[esp+190]
	mov	ebx, eax
	mov	eax, DWORD PTR _StartColor$[esp+188]
	mov	edx, eax
	and	edx, 255				; 000000ffH
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	ecx, edx
	add	ecx, eax
	mov	eax, DWORD PTR _EndColor$[esp+188]
	mov	edi, ecx
	xor	ecx, ecx
	mov	cl, BYTE PTR _EndColor$[esp+190]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	mov	edx, eax
	fld	DWORD PTR _End$[esp+204]
	and	edx, 255				; 000000ffH
	fsub	DWORD PTR [esi+180]
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	fstp	DWORD PTR [esp+4]
	add	ecx, edx
	fld	DWORD PTR _End$[esp+200]
	add	ecx, eax
	fsub	DWORD PTR [esi+176]
	mov	ebp, ecx
	lea	ecx, DWORD PTR $T144564[esp+204]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Start$[esp+196]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR [esi+184]
	lea	ecx, DWORD PTR $T144563[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Start$[esp+204]
	fsub	DWORD PTR [esi+180]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Start$[esp+200]
	fsub	DWORD PTR [esi+176]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR $T144564[esp+196]
	sub	esp, 12					; 0000000cH
	fmul	DWORD PTR $T144563[esp+204]
	lea	ecx, DWORD PTR _UpVector$[esp+204]
	fld	DWORD PTR $T144563[esp+208]
	fmul	DWORD PTR $T144564[esp+204]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR $T144563[esp+212]
	fmul	DWORD PTR $T144564[esp+204]
	fld	DWORD PTR $T144564[esp+212]
	fmul	DWORD PTR $T144563[esp+204]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T144564[esp+212]
	fmul	DWORD PTR $T144563[esp+208]
	fld	DWORD PTR $T144564[esp+208]
	fmul	DWORD PTR $T144563[esp+212]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z

; 3681 : 		UpVector.Normalize();

	fld	DWORD PTR _UpVector$[esp+196]
	fmul	DWORD PTR _UpVector$[esp+196]
	fld	DWORD PTR _UpVector$[esp+200]
	fmul	DWORD PTR _UpVector$[esp+200]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _UpVector$[esp+192]
	fmul	DWORD PTR _UpVector$[esp+192]
	faddp	ST(1), ST(0)
	fcom	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L144742
	fsqrt
	fdivr	QWORD PTR __real@3ff0000000000000
	fld	DWORD PTR _UpVector$[esp+192]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$[esp+192]
	fld	DWORD PTR _UpVector$[esp+196]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$[esp+196]
	fld	DWORD PTR _UpVector$[esp+200]
	fmul	ST(0), ST(1)
	fstp	DWORD PTR _UpVector$[esp+200]
$L144742:
	fstp	ST(0)

; 3682 : 
; 3683 : 
; 3684 : 		Vertices[0].Position = Start   + UpVector * StartWidth;

	sub	esp, 12					; 0000000cH
	fld	DWORD PTR _UpVector$[esp+212]
	lea	ecx, DWORD PTR $T144565[esp+204]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$[esp+208]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$[esp+204]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Start$[esp+196]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T144565[esp+212]
	lea	ecx, DWORD PTR $T144566[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Start$[esp+204]
	fadd	DWORD PTR $T144565[esp+208]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T144565[esp+204]
	fadd	DWORD PTR _Start$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	ecx, DWORD PTR $T144566[esp+192]
	mov	edx, DWORD PTR $T144566[esp+196]
	mov	eax, ebx
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T144566[esp+200]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 3685 : 		Vertices[0].Diffuse = dwDiffuseStart;
; 3686 : 		Vertices[0].TextureVector = D3DXVECTOR2(1.f, 1.f);

	mov	DWORD PTR $T144567[esp+192], 1065353216	; 3f800000H
	mov	edx, DWORD PTR $T144567[esp+192]
	mov	DWORD PTR $T144567[esp+196], 1065353216	; 3f800000H
	mov	eax, DWORD PTR $T144567[esp+196]
	mov	DWORD PTR [ebx+12], edi
	mov	DWORD PTR [ebx+16], edx
	mov	DWORD PTR [ebx+20], eax

; 3687 : 
; 3688 : 		Vertices[1].Position = Start -  UpVector* StartWidth;

	fld	DWORD PTR _UpVector$[esp+200]
	fmul	DWORD PTR _StartWidth$[esp+188]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T144568[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$[esp+208]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$[esp+204]
	fmul	DWORD PTR _StartWidth$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _Start$[esp+196]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T144568[esp+212]
	lea	ecx, DWORD PTR $T144569[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _Start$[esp+204]
	fsub	DWORD PTR $T144568[esp+208]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _Start$[esp+200]
	fsub	DWORD PTR $T144568[esp+204]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	edx, DWORD PTR $T144569[esp+192]
	mov	eax, DWORD PTR $T144569[esp+196]
	lea	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR $T144569[esp+200]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx

; 3689 : 		Vertices[1].Diffuse = dwDiffuseStart;
; 3690 : 		Vertices[1].TextureVector = D3DXVECTOR2(0.f, 1.f);

	mov	DWORD PTR $T144570[esp+192], 0
	mov	eax, DWORD PTR $T144570[esp+192]
	mov	DWORD PTR $T144570[esp+196], 1065353216	; 3f800000H
	mov	ecx, DWORD PTR $T144570[esp+196]
	mov	DWORD PTR [ebx+36], edi
	mov	DWORD PTR [ebx+40], eax
	mov	DWORD PTR [ebx+44], ecx

; 3691 : 
; 3692 : 		Vertices[2].Position = End -UpVector * EndWidth;

	fld	DWORD PTR _UpVector$[esp+200]
	fmul	DWORD PTR _EndWidth$[esp+188]
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$[esp+208]
	lea	ecx, DWORD PTR $T144571[esp+204]
	fmul	DWORD PTR _EndWidth$[esp+200]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$[esp+204]
	fmul	DWORD PTR _EndWidth$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _End$[esp+196]
	sub	esp, 12					; 0000000cH
	fsub	DWORD PTR $T144571[esp+212]
	lea	ecx, DWORD PTR $T144572[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _End$[esp+204]
	fsub	DWORD PTR $T144571[esp+208]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _End$[esp+200]
	fsub	DWORD PTR $T144571[esp+204]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	eax, DWORD PTR $T144572[esp+192]
	mov	ecx, DWORD PTR $T144572[esp+196]
	lea	esi, DWORD PTR [ebx+48]
	mov	edx, esi
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T144572[esp+200]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax

; 3693 : 		Vertices[2].Diffuse = dwDiffuseEnd;
; 3694 : 		Vertices[2].TextureVector = D3DXVECTOR2(0.f, 0.f);

	mov	DWORD PTR $T144573[esp+192], 0
	mov	ecx, DWORD PTR $T144573[esp+192]
	mov	DWORD PTR [ebx+64], ecx
	mov	DWORD PTR [ebx+60], ebp
	mov	DWORD PTR $T144573[esp+196], 0
	mov	edx, DWORD PTR $T144573[esp+196]
	mov	DWORD PTR [ebx+68], edx

; 3695 : 
; 3696 : 		Vertices[3]=Vertices[2];

	lea	edi, DWORD PTR [ebx+72]
	mov	ecx, 6
	rep movsd

; 3697 : 		
; 3698 : 		Vertices[4].Position = End + UpVector * EndWidth;

	fld	DWORD PTR _UpVector$[esp+200]
	fmul	DWORD PTR _EndWidth$[esp+188]
	sub	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR $T144574[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _UpVector$[esp+208]
	fmul	DWORD PTR _EndWidth$[esp+200]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _UpVector$[esp+204]
	fmul	DWORD PTR _EndWidth$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	fld	DWORD PTR _End$[esp+196]
	sub	esp, 12					; 0000000cH
	fadd	DWORD PTR $T144574[esp+212]
	lea	ecx, DWORD PTR $T144575[esp+204]
	fstp	DWORD PTR [esp+8]
	fld	DWORD PTR _End$[esp+204]
	fadd	DWORD PTR $T144574[esp+208]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR $T144574[esp+204]
	fadd	DWORD PTR _End$[esp+200]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp_??0FVector@@QAE@MMM@Z
	mov	ecx, DWORD PTR $T144575[esp+192]
	mov	edx, DWORD PTR $T144575[esp+196]
	lea	eax, DWORD PTR [ebx+96]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR $T144575[esp+200]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx

; 3699 : 		Vertices[4].Diffuse = dwDiffuseEnd;
; 3700 : 		Vertices[4].TextureVector = D3DXVECTOR2(1.f, 0.f);

	mov	DWORD PTR $T144576[esp+192], 1065353216	; 3f800000H
	mov	edx, DWORD PTR $T144576[esp+192]
	mov	DWORD PTR $T144576[esp+196], 0
	mov	eax, DWORD PTR $T144576[esp+196]

; 3701 : 
; 3702 : 		Vertices[5]=Vertices[0];

	lea	edi, DWORD PTR [ebx+120]
	mov	ecx, 6
	mov	esi, ebx
	mov	DWORD PTR [ebx+108], ebp
	mov	DWORD PTR [ebx+112], edx
	mov	DWORD PTR [ebx+116], eax
	rep movsd
$L126261:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 3703 : 	}

	add	esp, 176				; 000000b0H
	ret	52					; 00000034H
?dnDraw3DLine@UD3DRenderDevice@@QAIXPAUFSceneNode@@PAVUTexture@@KVFVector@@2MMVFColor@@3_N@Z ENDP ; UD3DRenderDevice::dnDraw3DLine
_TEXT	ENDS
PUBLIC	??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@ ; `string'
PUBLIC	??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
PUBLIC	??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@	; `string'
PUBLIC	??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
PUBLIC	??1?$TArray@VFVector@@@@QAE@XZ			; TArray<FVector>::~TArray<FVector>
PUBLIC	?Add@?$TArray@VFVector@@@@QAEHHH@Z		; TArray<FVector>::Add
EXTRN	__imp_?appAtof@@YAMPBG@Z:NEAR
EXTRN	__imp_?Remove@FArray@@QAEXHHH@Z:NEAR
EXTRN	__imp_?ParseCommand@@YAHPAPBGPBG@Z:NEAR
EXTRN	__imp_?Exec@URenderDevice@@UAEHPBGAAVFOutputDevice@@@Z:NEAR
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T144940 DD	0ffffffffH
	DD	FLAT:$L144766
	DD	0ffffffffH
	DD	FLAT:$L144885
$T144925 DD	019930520H
	DD	02H
	DD	FLAT:$T144940
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@ DB 'G', 00H, 'e', 00H
	DB	't', 00H, 'R', 00H, 'e', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ DB ' ', 00H, '%'
	DB	00H, 'i', 00H, 'x', 00H, '%', 00H, 'i', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ DB '%', 00H, 'i', 00H
	DB	'x', 00H, '%', 00H, 'i', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@
_DATA	SEGMENT
??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ DB '..\..\Core\I'
	DB	'nc\UnTemplate.h', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@
_DATA	SEGMENT
??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ DB 'Index<=ArrayNum', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@
_DATA	SEGMENT
??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ DB 'Index+Count<=Array'
	DB	'Num', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@ DB 'L', 00H, 'o'
	DB	00H, 'd', 00H, 'B', 00H, 'i', 00H, 'a', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@
_DATA	SEGMENT
??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@ DB 'T'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'L', 00H, 'o', 00H, 'd', 00H, 'B', 00H, 'i', 00H, 'a'
	DB	00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'f', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z
_TEXT	SEGMENT
_this$ = -56
_Res$126305 = -36
$T144762 = -24
_Cmd$ = 8
_Ar$ = 12
$T144827 = -64
$T144828 = -60
__$EHRec$ = -12
?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z PROC NEAR ; UD3DRenderDevice::Exec, COMDAT
; _this$ = ecx

; 3706 : 	{

	push	-1
	push	$L144939
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 52					; 00000034H

; 3707 : 		VALIDATE;
; 3708 : 
; 3709 : 		if( URenderDevice::Exec( Cmd, Ar ) )

	mov	eax, DWORD PTR _Cmd$[esp+60]
	push	ebx
	mov	ebx, DWORD PTR _Ar$[esp+64]
	push	ebp
	push	esi
	push	edi
	push	ebx
	mov	edi, ecx
	push	eax
	mov	DWORD PTR _this$[esp+88], edi
	call	DWORD PTR __imp_?Exec@URenderDevice@@UAEHPBGAAVFOutputDevice@@@Z
	test	eax, eax
	je	SHORT $L126300

; 3710 : 		{
; 3711 : 			return 1;

	mov	eax, 1
	jmp	$L126299
$L126300:

; 3712 : 		}
; 3713 : 		else if( ParseCommand(&Cmd,TEXT("GetRes")) )

	mov	esi, DWORD PTR __imp_?ParseCommand@@YAHPAPBGPBG@Z
	lea	ecx, DWORD PTR _Cmd$[esp+76]
	push	OFFSET FLAT:??_C@_1O@IFBG@?$AAG?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$AA@ ; `string'
	push	ecx
	call	esi
	add	esp, 8
	test	eax, eax
	je	$L126302

; 3714 : 		{
; 3715 : 			if(DisplayModes.Num())

	mov	ebp, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4
	xor	ebx, ebx
	cmp	ebp, ebx
	je	$L126323

; 3716 : 			{
; 3717 : 				TArray<FVector> Res;

	xor	edi, edi
	mov	DWORD PTR _Res$126305[esp+80], ebx
	mov	DWORD PTR _Res$126305[esp+84], edi
	mov	DWORD PTR _Res$126305[esp+88], ebx

; 3718 : 				for( TArray<D3DDISPLAYMODE>::TIterator It(DisplayModes); It; ++It )

	xor	esi, esi
	cmp	ebp, ebx
	mov	DWORD PTR __$EHRec$[esp+88], ebx
	jle	$L126309

; 3737 : 	}

	npad	7

; 3718 : 				for( TArray<D3DDISPLAYMODE>::TIterator It(DisplayModes); It; ++It )

$L144789:

; 3719 : 					if( GetFormatBPP(It->Format) == 16)

	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	edx, esi
	shl	edx, 4
	mov	ecx, DWORD PTR [edx+eax+12]
	add	edx, eax
	push	ecx
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	add	esp, 4
	cmp	eax, 16					; 00000010H
	jne	$L126308

; 3720 : 						Res.AddUniqueItem( FVector(It->Width, It->Height, 0) );

	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR -52+[esp+80], eax
	mov	DWORD PTR -52+[esp+84], ebx
	fild	QWORD PTR -52+[esp+80]
	mov	DWORD PTR -44+[esp+80], ecx
	mov	DWORD PTR -44+[esp+84], ebx
	xor	ecx, ecx
	cmp	edi, ebx
	fstp	DWORD PTR $T144828[esp+80]
	fild	QWORD PTR -44+[esp+80]
	mov	eax, DWORD PTR $T144828[esp+80]
	mov	DWORD PTR $T144762[esp+84], eax
	mov	DWORD PTR $T144762[esp+88], 0
	fstp	DWORD PTR $T144827[esp+80]
	mov	edx, DWORD PTR $T144827[esp+80]
	mov	DWORD PTR $T144762[esp+80], edx
	jle	SHORT $L144866
	mov	edx, DWORD PTR _Res$126305[esp+80]
	add	edx, 8

; 3737 : 	}

	npad	4

; 3720 : 						Res.AddUniqueItem( FVector(It->Width, It->Height, 0) );

$L144864:
	fld	DWORD PTR [edx-8]
	fcomp	DWORD PTR $T144827[esp+80]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L144855
	fld	DWORD PTR [edx-4]
	fcomp	DWORD PTR $T144828[esp+80]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L144855
	fld	DWORD PTR [edx]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $L126308
$L144855:
	inc	ecx
	add	edx, 12					; 0000000cH
	cmp	ecx, edi
	jl	SHORT $L144864
$L144866:
	push	1
	push	1
	lea	ecx, DWORD PTR _Res$126305[esp+88]
	call	?Add@?$TArray@VFVector@@@@QAEHHH@Z	; TArray<FVector>::Add
	mov	ecx, DWORD PTR _Res$126305[esp+80]
	lea	eax, DWORD PTR [eax+eax*2]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR $T144762[esp+80]
	mov	ecx, DWORD PTR $T144762[esp+84]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR $T144762[esp+88]
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], eax
	mov	edi, DWORD PTR _Res$126305[esp+84]
	mov	ebp, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4
$L126308:
	inc	esi
	cmp	esi, ebp
	jl	$L144789
$L126309:

; 3721 : 				for( INT i=0; i<Res.Num() && i<16/*script limitation*/; i++ )

	cmp	edi, ebx
	jle	SHORT $L126315
	mov	ebp, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 3737 : 	}

	npad	5
$L126313:

; 3721 : 				for( INT i=0; i<Res.Num() && i<16/*script limitation*/; i++ )

	cmp	ebx, 16					; 00000010H
	jge	SHORT $L144938

; 3722 : 					if( Res(i).X<=MaxResWidth && Res(i).Y<=MaxResHeight )

	mov	edx, DWORD PTR _Res$126305[esp+80]
	lea	ecx, DWORD PTR [ebx+ebx*2]
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[esp+80]
	fild	DWORD PTR [ecx+19124]
	fcomp	DWORD PTR [esi]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L126314
	fild	DWORD PTR [ecx+19128]
	fcomp	DWORD PTR [esi+4]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $L126314

; 3723 : 						Ar.Logf( i ? TEXT(" %ix%i") : TEXT("%ix%i"), (INT)Res(i).X, (INT)Res(i).Y );

	test	ebx, ebx
	mov	edi, OFFSET FLAT:??_C@_1O@PMBP@?$AA?5?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ ; `string'
	jne	SHORT $L144764
	mov	edi, OFFSET FLAT:??_C@_1M@NBKC@?$AA?$CF?$AAi?$AAx?$AA?$CF?$AAi?$AA?$AA@ ; `string'
$L144764:
	fld	DWORD PTR [esi+4]
	call	__ftol
	fld	DWORD PTR [esi]
	push	eax
	call	__ftol
	push	eax
	mov	eax, DWORD PTR _Ar$[esp+84]
	push	edi
	push	eax
	call	ebp
	mov	edi, DWORD PTR _Res$126305[esp+100]
	add	esp, 16					; 00000010H
$L126314:
	inc	ebx
	cmp	ebx, edi
	jl	SHORT $L126313
$L144938:

; 3721 : 				for( INT i=0; i<Res.Num() && i<16/*script limitation*/; i++ )

	xor	ebx, ebx
$L126315:

; 3724 : 				return 1;

	cmp	edi, ebx
	mov	DWORD PTR __$EHRec$[esp+88], 1
	mov	esi, edi
	jge	SHORT $L144911
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	edi
	mov	eax, DWORD PTR _Res$126305[esp+96]
	add	esp, 12					; 0000000cH
	cmp	esi, eax
	jle	SHORT $L144911
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L144911:
	push	12					; 0000000cH
	push	esi
	push	ebx
	lea	ecx, DWORD PTR _Res$126305[esp+92]
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	mov	eax, DWORD PTR _Res$126305[esp+80]
	cmp	eax, ebx
	mov	DWORD PTR __$EHRec$[esp+88], -1
	je	SHORT $L144921
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L144921:
	mov	eax, 1
	jmp	SHORT $L126299
$L126302:

; 3725 : 			}
; 3726 : 		}
; 3727 : 		else if( ParseCommand(&Cmd,TEXT("LodBias")) )

	lea	eax, DWORD PTR _Cmd$[esp+76]
	push	OFFSET FLAT:??_C@_1BA@CCID@?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?$AA@ ; `string'
	push	eax
	call	esi
	add	esp, 8
	test	eax, eax
	je	SHORT $L126323

; 3728 : 		{
; 3729 : 			LodBias=appAtof(Cmd);

	mov	ecx, DWORD PTR _Cmd$[esp+76]
	push	ecx
	call	DWORD PTR __imp_?appAtof@@YAMPBG@Z
	fst	DWORD PTR ?LodBias@@3MA			; LodBias

; 3730 : 			Ar.Logf(TEXT("Texture LodBias = %f"),LodBias);	

	push	ecx
	fstp	QWORD PTR [esp]
	push	OFFSET FLAT:??_C@_1CK@ECOM@?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAL?$AAo?$AAd?$AAB?$AAi?$AAa?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAf@ ; `string'
	push	ebx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 3731 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPMAPLODBIAS, *(DWORD*)&LodBias );

	mov	ecx, DWORD PTR ?LodBias@@3MA
	mov	eax, DWORD PTR [edi+19084]
	mov	edx, DWORD PTR [eax]
	add	esp, 16					; 00000010H
	push	ecx
	push	19					; 00000013H
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3732 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MIPMAPLODBIAS, *(DWORD*)&LodBias );

	mov	ecx, DWORD PTR ?LodBias@@3MA
	mov	eax, DWORD PTR [edi+19084]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	19					; 00000013H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 3733 : 			return 1;

	mov	eax, 1
	jmp	SHORT $L126299
$L126323:

; 3734 : 		}
; 3735 : 
; 3736 : 		return 0;

	xor	eax, eax
$L126299:

; 3737 : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+80]
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 64					; 00000040H
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L144766:
	lea	ecx, DWORD PTR _Res$126305[ebp]
	jmp	??1?$TArray@VFVector@@@@QAE@XZ		; TArray<FVector>::~TArray<FVector>
$L144885:
	lea	ecx, DWORD PTR _Res$126305[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L144939:
	mov	eax, OFFSET FLAT:$T144925
	jmp	___CxxFrameHandler
text$x	ENDS
?Exec@UD3DRenderDevice@@UAEHPBGAAVFOutputDevice@@@Z ENDP ; UD3DRenderDevice::Exec
PUBLIC	??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@ ; `string'
PUBLIC	??_C@_04BEIE@this?$AA@				; `string'
PUBLIC	??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@ ; `string'
EXTRN	__imp__DebugBreak@0:NEAR
;	COMDAT ??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@ DB '..\..\Engine'
	DB	'\Inc\UnRenDev.h', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_04BEIE@this?$AA@
_DATA	SEGMENT
??_C@_04BEIE@this?$AA@ DB 'this', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@
_DATA	SEGMENT
??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@ DB 'c'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, '(', 00H
	DB	'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '<', 00H, 'L'
	DB	00H, 'I', 00H, 'N', 00H, 'E', 00H, '_', 00H, 'V', 00H, 'E', 00H
	DB	'R', 00H, 'T', 00H, 'E', 00H, 'X', 00H, 'B', 00H, 'U', 00H, 'F'
	DB	00H, 'F', 00H, 'E', 00H, 'R', 00H, '_', 00H, 'S', 00H, 'I', 00H
	DB	'Z', 00H, 'E', 00H, ')', 00H, '&', 00H, '&', 00H, '(', 00H, 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '>', 00H, '=', 00H
	DB	'0', 00H, ')', 00H, ')', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, '!', 00H, ' ', 00H, 'C', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '=', 00H, '%', 00H, 'i'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, ':', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'x', 00H, ' ', 00H, '[', 00H, '%'
	DB	00H, 's', 00H, ':', 00H, '%', 00H, 'i', 00H, ']', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?_Validate@UD3DRenderDevice@@UAIXPADH@Z
_TEXT	SEGMENT
_Line$ = 8
?_Validate@UD3DRenderDevice@@UAIXPADH@Z PROC NEAR	; UD3DRenderDevice::_Validate, COMDAT
; _this$ = ecx
; _File$ = edx

; 3740 : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 3741 : 		Super::_Validate(File,Line);

	test	esi, esi
	push	edi
	mov	ebx, edx
	jne	SHORT $L144948
	push	178					; 000000b2H
	push	OFFSET FLAT:??_C@_0BM@FAAL@?4?4?2?4?4?2Engine?2Inc?2UnRenDev?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_04BEIE@this?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L144948:

; 3742 : 
; 3743 : 		int Count=Queued3DLineVertices.Num();

	mov	edi, DWORD PTR [esi+675252]

; 3744 : 		if((Count>=LINE_VERTEXBUFFER_SIZE)||(Count<0))

	cmp	edi, 16384				; 00004000H
	jge	SHORT $L126332
	test	edi, edi
	jge	SHORT $L126331
$L126332:

; 3745 : 		{
; 3746 : 			appErrorf(TEXT("check((Count<LINE_VERTEXBUFFER_SIZE)&&(Count>=0)) failed! Count=%i this:%08x [%s:%i]"),Queued3DLineVertices.Num(),this,appFromAnsi(File),Line);

	mov	eax, DWORD PTR _Line$[esp+8]
	push	eax
	push	ebx
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	esi
	push	edi
	push	OFFSET FLAT:??_C@_1KK@HEA@?$AAc?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DM?$AAL?$AAI?$AAN?$AAE?$AA_?$AAV?$AAE@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 24					; 00000018H

; 3747 : 			DebugBreak();

	call	DWORD PTR __imp__DebugBreak@0
$L126331:
	pop	edi
	pop	esi
	pop	ebx

; 3748 : 		}
; 3749 : 
; 3750 : 	}

	ret	4
?_Validate@UD3DRenderDevice@@UAIXPADH@Z ENDP		; UD3DRenderDevice::_Validate
_TEXT	ENDS
PUBLIC	?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z		; TArray<FD3DVertex>::Add
; Function compile flags: /Ogty
;	COMDAT ?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT
_Color$ = 8
_OrigP$ = 28
_OrigQ$ = 40
$T144960 = 28
$T144961 = 28
$T144976 = 28
$T144994 = -20
$T145012 = -16
$T145019 = 8
_I$145026 = -20
_I$145036 = -16
_I$145046 = -20
_I$145050 = -16
$T145070 = 28
$T145088 = 40
$T145106 = 40
$T145124 = 40
_I$145141 = 40
_I$145151 = 8
_I$145161 = 8
_I$145171 = 8
?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z PROC NEAR ; UD3DRenderDevice::Queue3DLine, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3755 : 		if(!RenderLines) 

	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	sub	esp, 20					; 00000014H
	test	eax, eax
	push	esi
	mov	esi, ecx
	je	$L145185

; 3756 : 			return;
; 3757 : 		
; 3758 : 		VALIDATE;
; 3759 : 		// Ensure that we don't overflow the line vertex buffer:
; 3760 : 		if((Queued3DLineVertices.Num()+12)>=LINE_VERTEXBUFFER_SIZE)

	mov	eax, DWORD PTR [esi+675252]
	add	eax, 12					; 0000000cH
	cmp	eax, 16384				; 00004000H
	jl	SHORT $L126337

; 3761 : 			Queued3DLinesFlush(Frame);

	mov	eax, DWORD PTR [esi]
	call	DWORD PTR [eax+160]
$L126337:
	push	ebx
	push	edi

; 3762 : 
; 3763 : 
; 3764 : 		FD3DVertex &v=Queued3DLineVertices(Queued3DLineVertices.Add());

	push	0
	add	esi, 675248				; 000a4db0H
	push	1
	mov	ecx, esi
	call	?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z	; TArray<FD3DVertex>::Add

; 3765 : 
; 3766 : 		v.Position=OrigP;
; 3767 : 		v.Diffuse = FColor(Color).TrueColor() | 0xff000000;

	fld	DWORD PTR _Color$[esp+28]
	mov	edx, DWORD PTR [esi]
	fmul	DWORD PTR __real@43800000
	shl	eax, 4
	add	eax, edx
	mov	edx, DWORD PTR _OrigP$[esp+28]
	fst	DWORD PTR -12+[esp+32]
	mov	edi, eax
	fstp	DWORD PTR $T144976[esp+28]
	mov	eax, DWORD PTR _OrigP$[esp+32]
	mov	ecx, edi
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _OrigP$[esp+36]
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	fld	DWORD PTR $T144976[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145026[esp+32]
	mov	eax, DWORD PTR _I$145026[esp+32]
	test	eax, eax
	jge	SHORT $L145031
	mov	BYTE PTR $T144960[esp+28], 0
	jmp	SHORT $L145030
$L145031:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T144960[esp+28], al
	jl	SHORT $L145030
	mov	BYTE PTR $T144960[esp+28], 255		; 000000ffH
$L145030:
	fld	DWORD PTR _Color$[esp+32]
	fmul	DWORD PTR __real@43800000
	fst	DWORD PTR -8+[esp+32]
	fstp	DWORD PTR $T144994[esp+32]
	fld	DWORD PTR $T144994[esp+32]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145036[esp+32]
	mov	eax, DWORD PTR _I$145036[esp+32]
	test	eax, eax
	jge	SHORT $L145041
	mov	BYTE PTR $T144960[esp+29], 0
	jmp	SHORT $L145040
$L145041:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T144960[esp+29], al
	jl	SHORT $L145040
	mov	BYTE PTR $T144960[esp+29], 255		; 000000ffH
$L145040:
	fld	DWORD PTR _Color$[esp+36]
	fmul	DWORD PTR __real@43800000
	fst	DWORD PTR -4+[esp+32]
	fstp	DWORD PTR $T145012[esp+32]
	fld	DWORD PTR $T145012[esp+32]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145046[esp+32]
	mov	eax, DWORD PTR _I$145046[esp+32]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+52]
	fmul	DWORD PTR __real@43800000
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T144960[esp+30], bl
	fst	DWORD PTR -20+[esp+32]
	fstp	DWORD PTR $T145019[esp+28]
	fld	DWORD PTR $T145019[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145050[esp+32]
	mov	ecx, DWORD PTR _I$145050[esp+32]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	xor	edx, edx
	mov	dl, bl
	mov	BYTE PTR $T144960[esp+43], al
	mov	eax, DWORD PTR $T144960[esp+40]
	add	esp, 12					; 0000000cH
	shl	eax, 16					; 00000010H

; 3768 : 
; 3769 : 		FD3DVertex &v1=Queued3DLineVertices(Queued3DLineVertices.Add());

	push	0
	push	1
	mov	dh, BYTE PTR $T144960[esp+37]
	mov	ecx, esi
	add	edx, eax
	or	edx, -16777216				; ff000000H
	mov	DWORD PTR [edi+12], edx
	call	?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z	; TArray<FD3DVertex>::Add
	mov	edi, DWORD PTR [esi]

; 3770 : 
; 3771 : 		v1.Position=OrigQ;

	mov	edx, DWORD PTR _OrigQ$[esp+28]
	shl	eax, 4
	add	eax, edi
	mov	ecx, eax
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR _OrigQ$[esp+32]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _OrigQ$[esp+36]
	mov	DWORD PTR [ecx+8], edx

; 3772 : 		v1.Diffuse = FColor(Color).TrueColor() | 0xff000000;		

	mov	ecx, DWORD PTR -12+[esp+32]
	mov	DWORD PTR $T145070[esp+28], ecx
	fld	DWORD PTR $T145070[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145141[esp+28]
	mov	ecx, DWORD PTR _I$145141[esp+28]
	test	ecx, ecx
	jge	SHORT $L145147
	mov	BYTE PTR $T144961[esp+28], 0
	jmp	SHORT $L145146
$L145147:
	cmp	ecx, 255				; 000000ffH
	mov	BYTE PTR $T144961[esp+28], cl
	jl	SHORT $L145146
	mov	BYTE PTR $T144961[esp+28], 255		; 000000ffH
$L145146:
	mov	edx, DWORD PTR -8+[esp+32]
	mov	DWORD PTR $T145088[esp+28], edx
	fld	DWORD PTR $T145088[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145151[esp+28]
	mov	ecx, DWORD PTR _I$145151[esp+28]
	test	ecx, ecx
	jge	SHORT $L145157
	xor	bl, bl
	jmp	SHORT $L145188
$L145157:
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $L145155
	mov	bl, cl
	jmp	SHORT $L145188
$L145155:
	or	bl, 255					; 000000ffH
$L145188:
	mov	ecx, DWORD PTR -4+[esp+32]
	mov	BYTE PTR $T144961[esp+29], bl
	mov	DWORD PTR $T145106[esp+28], ecx
	fld	DWORD PTR $T145106[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145161[esp+28]
	mov	ecx, DWORD PTR _I$145161[esp+28]
	test	ecx, ecx
	jge	SHORT $L145167
	xor	cl, cl
	jmp	SHORT $L145189
$L145167:
	cmp	ecx, 255				; 000000ffH
	jl	SHORT $L145189
	or	cl, 255					; 000000ffH
$L145189:
	mov	edx, DWORD PTR -20+[esp+32]
	mov	BYTE PTR $T144961[esp+30], cl
	mov	DWORD PTR $T145124[esp+28], edx
	fld	DWORD PTR $T145124[esp+28]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145171[esp+28]
	mov	edx, DWORD PTR _I$145171[esp+28]
	test	edx, edx
	jge	SHORT $L145177
	mov	BYTE PTR $T144961[esp+31], 0
	jmp	SHORT $L145176
$L145177:
	cmp	edx, 255				; 000000ffH
	mov	BYTE PTR $T144961[esp+31], dl
	jl	SHORT $L145176
	mov	BYTE PTR $T144961[esp+31], 255		; 000000ffH
$L145176:
	xor	edx, edx
	mov	dl, cl
	mov	ecx, DWORD PTR $T144961[esp+28]
	shl	ecx, 16					; 00000010H
	pop	edi
	mov	dh, bl
	pop	ebx
	add	edx, ecx
	or	edx, -16777216				; ff000000H
	mov	DWORD PTR [eax+12], edx
$L145185:
	pop	esi

; 3773 : 	}

	add	esp, 20					; 00000014H
	ret	44					; 0000002cH
?Queue3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ENDP ; UD3DRenderDevice::Queue3DLine
_TEXT	ENDS
PUBLIC	??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@ ; `string'
;	COMDAT ??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@ DB 'Count<LINE_VERTEX'
	DB	'BUFFER_SIZE', 00H				; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT
_First$ = -4
_VertexData$145225 = -4
?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::Queued3DLinesFlush, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3776 : 	{

	push	ecx
	push	ebx
	push	ebp
	mov	ebx, ecx

; 3777 : 		VALIDATE;
; 3778 : 
; 3779 : 		int Count=Queued3DLineVertices.Num();

	mov	ebp, DWORD PTR [ebx+675252]
	push	edi

; 3780 : 
; 3781 : 		// Make sure we don't exceed our maximum size:
; 3782 : 
; 3783 : 		if(!Count) return;

	xor	edi, edi
	cmp	ebp, edi
	je	$L145284

; 3784 : 		SetBlending(PF_TwoSided,PFX_Clip|PFX_FlatShade);

	push	10					; 0000000aH
	mov	edx, 256				; 00000100H
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 3785 : 		SetZBias(0);

	fld	DWORD PTR [ebx+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L145211
	cmp	DWORD PTR ?CacheBlending@@3HA, edi	; CacheBlending
	jne	SHORT $L145210
$L145211:
	mov	eax, DWORD PTR [ebx+19124]
	push	edi
	push	47					; 0000002fH
	mov	DWORD PTR [ebx+675164], edi
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L145210:

; 3786 : 
; 3787 : 		//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3788 : 		//Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_FLAT );
; 3789 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	esi
	push	1
	push	1
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 3790 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]

; 3791 : 
; 3792 : 		check(Count<LINE_VERTEXBUFFER_SIZE); // NJS: URGENT FIX.. iterate through line vertices. - should never happen because of the check in Queue3DLine, but still.

	cmp	ebp, 16384				; 00004000H
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jl	SHORT $L126346
	push	3792					; 00000ed0H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BN@NGCA@Count?$DMLINE_VERTEXBUFFER_SIZE?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L126346:

; 3793 : 		FD3DVertex*	Vertices = (FD3DVertex*) LineVertices.Lock(Count);

	cmp	DWORD PTR [ebx+16724], edi
	jne	SHORT $L145222
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L145222:
	cmp	DWORD PTR [ebx+16728], edi
	jne	SHORT $L145223
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L145223:
	cmp	ebp, DWORD PTR [ebx+16728]
	jl	SHORT $L145226
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L145226:
	mov	eax, DWORD PTR [ebx+16736]
	mov	ecx, DWORD PTR [ebx+16728]
	mov	esi, ebp
	lea	edx, DWORD PTR [eax+ebp]
	shl	esi, 4
	cmp	edx, ecx
	jge	SHORT $L145240
	mov	ecx, DWORD PTR [ebx+16724]
	mov	edx, DWORD PTR [ecx]
	push	4096					; 00001000H
	lea	edi, DWORD PTR _VertexData$145225[esp+24]
	push	edi
	push	esi
	shl	eax, 4
	push	eax
	push	ecx
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L145235
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145235:
	mov	eax, DWORD PTR [ebx+16736]
	mov	DWORD PTR [ebx+16732], eax
	add	eax, ebp
	mov	DWORD PTR [ebx+16736], eax
	jmp	SHORT $L145239
$L145240:
	mov	eax, DWORD PTR [ebx+16724]
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR _VertexData$145225[esp+24]
	push	ecx
	push	esi
	push	edi
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, edi
	jge	SHORT $L145241
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145241:
	mov	DWORD PTR [ebx+16732], edi
	mov	DWORD PTR [ebx+16736], ebp
$L145239:

; 3794 : 		memcpy(Vertices,Queued3DLineVertices.GetData(),Count*sizeof(FD3DVertex));

	mov	edi, DWORD PTR _VertexData$145225[esp+20]
	mov	ecx, esi
	mov	esi, DWORD PTR [ebx+675248]
	mov	edx, ecx
	shr	ecx, 2
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb

; 3795 : 		INT	First = LineVertices.Unlock();

	mov	eax, DWORD PTR [ebx+16724]
	test	eax, eax
	jne	SHORT $L145255
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L145255:
	mov	eax, DWORD PTR [ebx+16724]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L145296
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	edi
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
	jmp	SHORT $L145256
$L145296:
	mov	esi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	edi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
$L145256:

; 3796 : 		LineVertices.Set();

	mov	eax, DWORD PTR [ebx+16720]
	test	eax, eax
	mov	ecx, DWORD PTR [ebx+16732]
	mov	DWORD PTR _First$[esp+20], ecx
	jne	SHORT $L145264
	push	317					; 0000013dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L145264:
	mov	eax, DWORD PTR [ebx+16724]
	test	eax, eax
	jne	SHORT $L145266
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 3806 : 	}

	npad	6

; 3796 : 		LineVertices.Set();

$L145266:
	mov	eax, DWORD PTR [ebx+16720]
	mov	edx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [edx+200]
	test	eax, eax
	jge	SHORT $L145267
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	321					; 00000141H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	edi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	esi
	add	esp, 20					; 00000014H
$L145267:
	mov	eax, DWORD PTR [ebx+16720]
	mov	edx, DWORD PTR [eax]
	push	66					; 00000042H
	push	eax
	call	DWORD PTR [edx+304]
	test	eax, eax
	jge	SHORT $L145272
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	edi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	esi
	add	esp, 20					; 00000014H
$L145272:
	mov	ecx, DWORD PTR [ebx+16724]
	mov	eax, DWORD PTR [ebx+16720]
	mov	edx, DWORD PTR [eax]
	push	16					; 00000010H
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+332]
	test	eax, eax
	jge	SHORT $L145277
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	edi
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	esi
	add	esp, 20					; 00000014H
$L145277:

; 3797 : 
; 3798 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, Count/2 );

	mov	ecx, DWORD PTR [ebx+19124]
	mov	esi, DWORD PTR [ecx]
	mov	eax, ebp
	cdq
	sub	eax, edx
	mov	edx, DWORD PTR _First$[esp+20]
	sar	eax, 1
	push	eax
	push	edx
	push	2
	push	ecx
	call	DWORD PTR [esi+280]

; 3799 : 		// Line code:
; 3800 : 
; 3801 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3802 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3803 : 		//Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_GOURAUD );
; 3804 : 
; 3805 : 		Queued3DLineVertices.Clear();

	mov	DWORD PTR [ebx+675252], 0
	pop	esi
$L145284:
	pop	edi
	pop	ebp
	pop	ebx

; 3806 : 	}

	pop	ecx
	ret	0
?Queued3DLinesFlush@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ENDP ; UD3DRenderDevice::Queued3DLinesFlush
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT
$T145300 = 28
$T145301 = 28
_VertexData$145332 = -24
$T145361 = 28
$T145368 = -20
$T145375 = -16
$T145382 = 8
_I$145388 = -20
_I$145392 = -16
_I$145396 = -20
_I$145400 = -16
$T145417 = 28
$T145424 = 40
$T145431 = 40
$T145438 = 40
_I$145444 = 40
_I$145448 = 8
_I$145452 = 8
_I$145456 = 8
_Color$ = 8
_OrigP$ = 28
_OrigQ$ = 40
?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z PROC NEAR ; UD3DRenderDevice::Draw3DLine, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3810 : 		VALIDATE;
; 3811 : 		if(!RenderLines) return;

	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	sub	esp, 24					; 00000018H
	push	ebx
	xor	ebx, ebx
	cmp	eax, ebx
	push	edi
	mov	edi, ecx
	je	$L126353

; 3812 : 
; 3813 : 		SetBlending(0,PFX_Clip);

	push	2
	xor	edx, edx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 3814 : 		SetZBias(0);

	fld	DWORD PTR [edi+675164]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L145324
	cmp	DWORD PTR ?CacheBlending@@3HA, ebx	; CacheBlending
	jne	SHORT $L145323
$L145324:
	mov	eax, DWORD PTR [edi+19124]
	push	ebx
	push	47					; 0000002fH
	mov	DWORD PTR [edi+675164], ebx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+200]
$L145323:

; 3815 : 
; 3816 : 		FD3DVertex*	Vertices = (FD3DVertex*) LineVertices.Lock(2);

	mov	eax, DWORD PTR [edi+16724]
	cmp	eax, ebx
	push	ebp
	lea	ebp, DWORD PTR [edi+16720]
	push	esi
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L145329
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L145329:
	cmp	DWORD PTR [ebp+8], ebx
	jne	SHORT $L145330
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L145330:
	cmp	DWORD PTR [ebp+8], 2
	jg	SHORT $L145333
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L145333:
	mov	eax, DWORD PTR [ebp+16]
	mov	ecx, DWORD PTR [ebp+8]
	lea	edx, DWORD PTR [eax+2]
	cmp	edx, ecx
	jge	SHORT $L145347
	mov	ecx, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR [ecx]
	push	4096					; 00001000H
	lea	esi, DWORD PTR _VertexData$145332[esp+44]
	push	esi
	push	32					; 00000020H
	shl	eax, 4
	push	eax
	push	ecx
	call	DWORD PTR [edx+44]
	cmp	eax, ebx
	jge	SHORT $L145342
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145342:
	mov	eax, DWORD PTR [ebp+16]
	mov	DWORD PTR [ebp+12], eax
	add	eax, 2
	mov	DWORD PTR [ebp+16], eax
	jmp	SHORT $L145346

; 3840 : 	}

	npad	6

; 3815 : 
; 3816 : 		FD3DVertex*	Vertices = (FD3DVertex*) LineVertices.Lock(2);

$L145347:
	mov	eax, DWORD PTR [ebp+4]
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR _VertexData$145332[esp+44]
	push	ecx
	push	32					; 00000020H
	push	ebx
	push	eax
	call	DWORD PTR [edx+44]
	cmp	eax, ebx
	jge	SHORT $L145348
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145348:
	mov	DWORD PTR [ebp+12], ebx
	mov	DWORD PTR [ebp+16], 2
$L145346:

; 3817 : 
; 3818 : 		//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3819 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	mov	esi, DWORD PTR _VertexData$145332[esp+40]
	push	1
	push	1
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 3820 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3821 : 
; 3822 : 		Vertices[0].Position.X = OrigP.X;
; 3823 : 		Vertices[0].Position.Y = OrigP.Y;
; 3824 : 		Vertices[0].Position.Z = OrigP.Z;
; 3825 : 		Vertices[0].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	fld	DWORD PTR _Color$[esp+36]
	fmul	DWORD PTR __real@43800000
	mov	eax, DWORD PTR _OrigP$[esp+36]
	mov	ecx, DWORD PTR _OrigP$[esp+40]
	mov	edx, DWORD PTR _OrigP$[esp+44]
	fst	DWORD PTR -12+[esp+40]
	mov	DWORD PTR [esi], eax
	fstp	DWORD PTR $T145361[esp+36]
	mov	DWORD PTR [esi+4], ecx
	mov	DWORD PTR [esi+8], edx
	fld	DWORD PTR $T145361[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145388[esp+40]
	mov	eax, DWORD PTR _I$145388[esp+40]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+52]
	fmul	DWORD PTR __real@43800000
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145300[esp+36], al
	fst	DWORD PTR -8+[esp+40]
	fstp	DWORD PTR $T145368[esp+40]
	fld	DWORD PTR $T145368[esp+40]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145392[esp+40]
	mov	ecx, DWORD PTR _I$145392[esp+40]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+56]
	fmul	DWORD PTR __real@43800000
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145300[esp+37], bl
	fst	DWORD PTR -4+[esp+40]
	fstp	DWORD PTR $T145375[esp+40]
	fld	DWORD PTR $T145375[esp+40]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145396[esp+40]
	mov	edx, DWORD PTR _I$145396[esp+40]
	push	255					; 000000ffH
	push	0
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+60]
	fmul	DWORD PTR __real@43800000
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145300[esp+38], al
	fst	DWORD PTR -20+[esp+40]
	fstp	DWORD PTR $T145382[esp+36]
	fld	DWORD PTR $T145382[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145400[esp+40]
	mov	eax, DWORD PTR _I$145400[esp+40]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	xor	ecx, ecx
	mov	cl, BYTE PTR $T145300[esp+50]
	mov	BYTE PTR $T145300[esp+51], al
	mov	edx, DWORD PTR $T145300[esp+48]

; 3826 : 
; 3827 : 		Vertices[1].Position.X = OrigQ.X;

	mov	eax, DWORD PTR _OrigQ$[esp+48]
	shl	edx, 16					; 00000010H
	add	esp, 12					; 0000000cH
	mov	ch, bl
	add	ecx, edx
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR [esi+12], ecx

; 3828 : 		Vertices[1].Position.Y = OrigQ.Y;

	mov	ecx, DWORD PTR _OrigQ$[esp+40]
	mov	DWORD PTR [esi+16], eax

; 3829 : 		Vertices[1].Position.Z = OrigQ.Z;

	mov	edx, DWORD PTR _OrigQ$[esp+44]

; 3830 : 		Vertices[1].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	mov	eax, DWORD PTR -12+[esp+40]
	mov	DWORD PTR [esi+20], ecx
	mov	DWORD PTR [esi+24], edx
	mov	DWORD PTR $T145417[esp+36], eax
	fld	DWORD PTR $T145417[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145444[esp+36]
	mov	ecx, DWORD PTR _I$145444[esp+36]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	edx, DWORD PTR -8+[esp+52]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145301[esp+36], al
	mov	DWORD PTR $T145424[esp+36], edx
	fld	DWORD PTR $T145424[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145448[esp+36]
	mov	eax, DWORD PTR _I$145448[esp+36]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	ecx, DWORD PTR -4+[esp+52]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145301[esp+37], al
	mov	DWORD PTR $T145431[esp+36], ecx
	fld	DWORD PTR $T145431[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145452[esp+36]
	mov	edx, DWORD PTR _I$145452[esp+36]
	push	255					; 000000ffH
	push	0
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	bl, al
	mov	eax, DWORD PTR -20+[esp+52]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145301[esp+38], bl
	mov	DWORD PTR $T145438[esp+36], eax
	fld	DWORD PTR $T145438[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145456[esp+36]
	mov	ecx, DWORD PTR _I$145456[esp+36]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp

; 3831 : 
; 3832 : 		INT	First = LineVertices.Unlock();
; 3833 : 
; 3834 : 		LineVertices.Set();
; 3835 : 
; 3836 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, 1 );
; 3837 : 
; 3838 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );
; 3839 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	xor	edx, edx
	mov	dl, bl
	mov	BYTE PTR $T145301[esp+51], al
	mov	eax, DWORD PTR $T145301[esp+48]
	mov	ecx, eax
	shl	ecx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	esp, 12					; 0000000cH
	add	edx, ecx
	add	edx, eax
	or	edx, -16777216				; ff000000H
	mov	ecx, ebp
	mov	DWORD PTR [esi+28], edx
	call	?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DVertex>::Unlock
	mov	ecx, ebp
	mov	esi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DVertex>::Set
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	esi
	push	2
	push	eax
	call	DWORD PTR [edx+280]
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	edi, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [edi]
	push	4
	push	4
	push	0
	push	edi
	call	DWORD PTR [edx+252]
	pop	esi
	pop	ebp
$L126353:
	pop	edi
	pop	ebx

; 3840 : 	}

	add	esp, 24					; 00000018H
	ret	44					; 0000002cH
?Draw3DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ENDP ; UD3DRenderDevice::Draw3DLine
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z
_TEXT	SEGMENT
$T145474 = 28
$T145475 = 28
_VertexData$145482 = -24
$T145511 = 28
$T145529 = -20
$T145536 = -16
$T145543 = 8
_I$145549 = -24
_I$145559 = -16
_I$145563 = -20
_I$145567 = -16
$T145588 = 28
$T145595 = 40
$T145602 = 40
$T145609 = 40
_I$145615 = 40
_I$145619 = 8
_I$145623 = 8
_I$145627 = 8
_Color$ = 8
_P1$ = 28
_P2$ = 40
?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z PROC NEAR ; UD3DRenderDevice::Draw2DLine, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3844 : 		VALIDATE;
; 3845 : 		//appErrorf(_T("******** Draw2DLine called, please report to Nick"));
; 3846 : 		///*	
; 3847 : 		if(!RenderLines) return;

	mov	eax, DWORD PTR ?RenderLines@@3HA	; RenderLines
	sub	esp, 24					; 00000018H
	test	eax, eax
	push	edi
	mov	edi, ecx
	je	$L126361
	push	ebp
	push	esi

; 3848 : 		SetBlending();

	push	0
	xor	edx, edx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 3849 : 		FD3DTLVertex*	Vertices = (FD3DTLVertex*) ActorVertices.Lock(2);

	mov	eax, DWORD PTR [edi+16704]
	test	eax, eax
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	lea	ebp, DWORD PTR [edi+16700]
	jne	SHORT $L145479
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L145479:
	mov	eax, DWORD PTR [ebp+8]
	test	eax, eax
	jne	SHORT $L145480
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L145480:
	mov	eax, DWORD PTR [ebp+8]
	push	ebx
	mov	ebx, 2
	cmp	eax, ebx
	jg	SHORT $L145483
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L145483:
	mov	ecx, DWORD PTR [ebp+16]
	mov	edx, DWORD PTR [ebp+8]
	lea	eax, DWORD PTR [ecx+2]
	cmp	eax, edx
	mov	eax, DWORD PTR [ebp+4]
	jge	SHORT $L145497
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	esi, DWORD PTR _VertexData$145482[esp+44]
	push	esi
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	80					; 00000050H
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L145492
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145492:
	mov	eax, DWORD PTR [ebp+16]
	mov	DWORD PTR [ebp+12], eax
	add	eax, 2
	mov	DWORD PTR [ebp+16], eax
	jmp	SHORT $L145496
$L145497:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$145482[esp+44]
	push	edx
	push	80					; 00000050H
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L145498
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145498:
	mov	DWORD PTR [ebp+12], 0
	mov	DWORD PTR [ebp+16], ebx
$L145496:

; 3850 : 
; 3851 : 		//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3852 : 		Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_FLAT );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR _VertexData$145482[esp+40]
	push	1
	push	9
	push	eax
	call	DWORD PTR [edx+200]

; 3853 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE  );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3854 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3855 : 
; 3856 : 		Vertices[0].Position.X = P1.X - 0.5f;

	fld	DWORD PTR _P1$[esp+36]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esi]

; 3857 : 		Vertices[0].Position.Y = P1.Y - 0.5f;

	fld	DWORD PTR _P1$[esp+40]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esi+4]

; 3858 : 		Vertices[0].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43;

	fld	DWORD PTR [edi+19492]
	fadd	DWORD PTR [edi+19508]

; 3859 : 		Vertices[0].Position.W = 1.f;

	mov	DWORD PTR [esi+12], 1065353216		; 3f800000H
	fstp	DWORD PTR [esi+8]

; 3860 : 		Vertices[0].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	fld	DWORD PTR _Color$[esp+36]
	fmul	DWORD PTR __real@43800000
	fst	DWORD PTR -12+[esp+40]
	fstp	DWORD PTR $T145511[esp+36]
	fld	DWORD PTR $T145511[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145549[esp+40]
	mov	eax, DWORD PTR _I$145549[esp+40]
	test	eax, eax
	jge	SHORT $L145554
	mov	BYTE PTR $T145474[esp+36], 0
	jmp	SHORT $L145553
$L145554:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T145474[esp+36], al
	jl	SHORT $L145553
	mov	BYTE PTR $T145474[esp+36], 255		; 000000ffH
$L145553:
	fld	DWORD PTR _Color$[esp+40]
	fmul	DWORD PTR __real@43800000
	fst	DWORD PTR -8+[esp+40]
	fstp	DWORD PTR $T145529[esp+40]
	fld	DWORD PTR $T145529[esp+40]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145559[esp+40]
	mov	eax, DWORD PTR _I$145559[esp+40]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+56]
	fmul	DWORD PTR __real@43800000
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145474[esp+37], bl
	fst	DWORD PTR -4+[esp+40]
	fstp	DWORD PTR $T145536[esp+40]
	fld	DWORD PTR $T145536[esp+40]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145563[esp+40]
	mov	ecx, DWORD PTR _I$145563[esp+40]
	push	255					; 000000ffH
	push	0
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	fld	DWORD PTR _Color$[esp+60]
	fmul	DWORD PTR __real@43800000
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145474[esp+38], al
	fst	DWORD PTR -20+[esp+40]
	fstp	DWORD PTR $T145543[esp+36]
	fld	DWORD PTR $T145543[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145567[esp+40]
	mov	edx, DWORD PTR _I$145567[esp+40]
	push	255					; 000000ffH
	push	0
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp

; 3861 : 		Vertices[0].Specular = 0;
; 3862 : 
; 3863 : 		Vertices[1].Position.X = P2.X - 0.5f;

	fld	DWORD PTR _P2$[esp+48]
	fsub	DWORD PTR __real@3f000000
	mov	BYTE PTR $T145474[esp+51], al
	mov	ecx, DWORD PTR $T145474[esp+48]
	xor	eax, eax
	mov	al, BYTE PTR $T145474[esp+50]

; 3864 : 		Vertices[1].Position.Y = P2.Y - 0.5f;
; 3865 : 		Vertices[1].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43;
; 3866 : 		Vertices[1].Position.W = 1.f;
; 3867 : 		Vertices[1].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	mov	edx, DWORD PTR -12+[esp+52]
	shl	ecx, 16					; 00000010H
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T145588[esp+36], edx
	mov	ah, bl
	add	eax, ecx
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], 0
	fstp	DWORD PTR [esi+40]
	fld	DWORD PTR _P2$[esp+40]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esi+44]
	fld	DWORD PTR [edi+19492]
	fadd	DWORD PTR [edi+19508]
	mov	DWORD PTR [esi+52], 1065353216		; 3f800000H
	fstp	DWORD PTR [esi+48]
	fld	DWORD PTR $T145588[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145615[esp+36]
	mov	eax, DWORD PTR _I$145615[esp+36]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	ecx, DWORD PTR -8+[esp+52]
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145475[esp+36], al
	mov	DWORD PTR $T145595[esp+36], ecx
	fld	DWORD PTR $T145595[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145619[esp+36]
	mov	edx, DWORD PTR _I$145619[esp+36]
	push	255					; 000000ffH
	push	0
	push	edx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	BYTE PTR $T145475[esp+49], al
	mov	eax, DWORD PTR -4+[esp+52]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T145602[esp+36], eax
	fld	DWORD PTR $T145602[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145623[esp+36]
	push	255					; 000000ffH
	push	0
	mov	ecx, DWORD PTR _I$145623[esp+44]
	push	ecx
	call	?Clamp@@YAHHHH@Z			; Clamp
	mov	edx, DWORD PTR -20+[esp+52]
	mov	bl, al
	add	esp, 12					; 0000000cH
	mov	BYTE PTR $T145475[esp+38], bl
	mov	DWORD PTR $T145609[esp+36], edx
	fld	DWORD PTR $T145609[esp+36]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$145627[esp+36]
	mov	eax, DWORD PTR _I$145627[esp+36]
	push	255					; 000000ffH
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp

; 3868 : 		Vertices[1].Specular = 0;
; 3869 : 
; 3870 : 		INT	First = ActorVertices.Unlock();
; 3871 : 
; 3872 : 		ActorVertices.Set();
; 3873 : 
; 3874 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, 1 );
; 3875 : 
; 3876 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );
; 3877 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );
; 3878 : 		Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_GOURAUD );

	xor	ecx, ecx
	mov	cl, bl
	mov	BYTE PTR $T145475[esp+51], al
	mov	eax, DWORD PTR $T145475[esp+48]
	mov	edx, eax
	shl	edx, 16					; 00000010H
	and	eax, 65280				; 0000ff00H
	add	esp, 12					; 0000000cH
	add	ecx, edx
	add	ecx, eax
	or	ecx, -16777216				; ff000000H
	mov	DWORD PTR [esi+56], ecx
	mov	DWORD PTR [esi+60], 0
	mov	eax, DWORD PTR [ebp+4]
	test	eax, eax
	pop	ebx
	jne	SHORT $L145646
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 3879 : 	}

	npad	3

; 3868 : 		Vertices[1].Specular = 0;
; 3869 : 
; 3870 : 		INT	First = ActorVertices.Unlock();
; 3871 : 
; 3872 : 		ActorVertices.Set();
; 3873 : 
; 3874 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINELIST, First, 1 );
; 3875 : 
; 3876 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );
; 3877 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );
; 3878 : 		Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_GOURAUD );

$L145646:
	mov	eax, DWORD PTR [ebp+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L145647
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L145647:
	mov	esi, DWORD PTR [ebp+12]
	mov	ecx, ebp
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	esi
	push	2
	push	eax
	call	DWORD PTR [ecx+280]
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	edi, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [edi]
	push	2
	push	9
	push	edi
	call	DWORD PTR [edx+200]
	pop	esi
	pop	ebp
$L126361:
	pop	edi

; 3879 : 	}

	add	esp, 24					; 00000018H
	ret	44					; 0000002cH
?Draw2DLine@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KVFVector@@2@Z ENDP ; UD3DRenderDevice::Draw2DLine
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z
_TEXT	SEGMENT
$T145661 = -4
$T145662 = -4
$T145663 = 36
$T145664 = 36
$T145665 = 28
_Xor$145674 = -8
_PositionZ$ = -8
_Color$ = 8
_X1$ = 28
_Y1$ = 32
_X2$ = 36
_Y2$ = 40
?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z PROC NEAR ; UD3DRenderDevice::Draw2DPoint, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 3883 : 		VALIDATE;
; 3884 : 		if(!RenderPoints) 

	mov	eax, DWORD PTR ?RenderPoints@@3HA	; RenderPoints
	sub	esp, 8
	test	eax, eax
	push	edi
	mov	edi, ecx
	je	$L126369

; 3885 : 			return;
; 3886 : 
; 3887 : 		PreRender(Frame);

	mov	eax, DWORD PTR [edi]
	push	ebx
	push	ebp
	push	esi
	call	DWORD PTR [eax+140]

; 3888 : 		SetBlending(0,PFX_FlatShade);

	mov	eax, DWORD PTR [edi+19616]
	mov	ebx, DWORD PTR [edi+19620]
	xor	eax, -2147483648			; 80000000H
	xor	ebx, 8
	test	ah, 1
	mov	DWORD PTR _Xor$145674[esp+24], eax
	je	SHORT $L145676
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$145674[esp+24]
$L145676:
	test	bl, 2
	je	SHORT $L145677
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$145674[esp+24]
$L145677:
	test	bl, 8
	je	SHORT $L145678
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	9
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$145674[esp+24]
$L145678:
	test	eax, -754972601				; d3000847H
	jne	SHORT $L145680
	test	bl, 113					; 00000071H
	je	$L145716
$L145680:
	test	eax, 268435525				; 10000045H
	jne	SHORT $L145682
	test	bl, 113					; 00000071H
	je	SHORT $L145700
$L145682:
	test	bl, 1
	je	SHORT $L145683
	mov	eax, DWORD PTR [edi+19128]
	test	eax, eax
	mov	eax, DWORD PTR [edi+19124]
	je	SHORT $L145684
	mov	edx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	jmp	SHORT $L145685
$L145684:
	mov	ecx, DWORD PTR [eax]
	push	1
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L145685:
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L145683:
	xor	edx, edx
	mov	ecx, edi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	eax, DWORD PTR _Xor$145674[esp+24]
$L145700:
	test	al, 1
	je	SHORT $L145703
	xor	edx, edx
	mov	ecx, edi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable
	mov	edx, 1
	mov	ecx, edi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend
	mov	edx, 2
	mov	ecx, edi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
	mov	eax, DWORD PTR _Xor$145674[esp+24]
$L145703:
	test	eax, eax
	jns	SHORT $L145705
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$145674[esp+24]
$L145705:
	test	al, 2
	je	SHORT $L145708
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	eax, DWORD PTR _Xor$145674[esp+24]
$L145708:
	test	ah, 8
	je	SHORT $L145709
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR _Xor$145674[esp+24]
$L145709:
	test	eax, 1073741824				; 40000000H
	je	SHORT $L145710
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
	mov	eax, DWORD PTR _Xor$145674[esp+24]
$L145710:
	test	eax, 50331648				; 03000000H
	je	SHORT $L145716
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [ecx+252]
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [edx+252]
$L145716:

; 3889 : 
; 3890 : 		FD3DTLVertex*	Vertices = (FD3DTLVertex*) ActorVertices.Lock(5);

	push	-1
	lea	ebx, DWORD PTR [edi+16700]
	push	5
	mov	ecx, ebx
	mov	DWORD PTR [edi+19616], -2147483648	; 80000000H
	mov	DWORD PTR [edi+19620], 8
	call	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock

; 3891 : 
; 3892 : 		//!!should optimize to avoid changing shade mode, color op, alpha op.
; 3893 : 		//Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, D3DSHADE_FLAT );
; 3894 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE );

	push	1
	push	1
	mov	esi, eax
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 3895 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3896 : 
; 3897 : 		float PositionZ=ProjectionMatrix._33 + ProjectionMatrix._43;

	fld	DWORD PTR [edi+19508]
	fadd	DWORD PTR [edi+19492]

; 3898 : 		Vertices[0].Position.X = X1;
; 3899 : 		Vertices[0].Position.Y = Y1;

	mov	ecx, DWORD PTR _Y1$[esp+20]
	mov	eax, DWORD PTR _X1$[esp+20]

; 3900 : 		Vertices[0].Position.Z = PositionZ;
; 3901 : 		Vertices[0].Position.W = 1.f;
; 3902 : 		Vertices[0].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	edx, DWORD PTR _Color$[esp+20]
	mov	DWORD PTR [esi+4], ecx
	fst	DWORD PTR _PositionZ$[esp+24]
	mov	ebp, 1065353216				; 3f800000H
	fstp	DWORD PTR [esi+8]
	push	edx
	lea	ecx, DWORD PTR $T145661[esp+28]
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+12], ebp
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ

; 3903 : 		Vertices[0].Specular = 0;
; 3904 : 
; 3905 : 		Vertices[1].Position.X = X2;
; 3906 : 		Vertices[1].Position.Y = Y1;

	mov	ecx, DWORD PTR _Y1$[esp+20]

; 3907 : 		Vertices[1].Position.Z = PositionZ;

	mov	edx, DWORD PTR _PositionZ$[esp+24]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+16], eax
	mov	eax, DWORD PTR _X2$[esp+20]
	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+40], eax

; 3908 : 		Vertices[1].Position.W = 1.f;
; 3909 : 		Vertices[1].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	eax, DWORD PTR _Color$[esp+20]
	mov	DWORD PTR [esi+44], ecx
	push	eax
	lea	ecx, DWORD PTR $T145662[esp+28]
	mov	DWORD PTR [esi+48], edx
	mov	DWORD PTR [esi+52], ebp
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ

; 3910 : 		Vertices[1].Specular = 0;
; 3911 : 		
; 3912 : 		Vertices[2].Position.X = X2;

	mov	ecx, DWORD PTR _X2$[esp+20]

; 3913 : 		Vertices[2].Position.Y = Y2;

	mov	edx, DWORD PTR _Y2$[esp+20]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+56], eax

; 3914 : 		Vertices[2].Position.Z = PositionZ;

	mov	eax, DWORD PTR _PositionZ$[esp+24]
	mov	DWORD PTR [esi+60], 0
	mov	DWORD PTR [esi+80], ecx

; 3915 : 		Vertices[2].Position.W = 1.f; 
; 3916 : 		Vertices[2].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	ecx, DWORD PTR _Color$[esp+20]
	push	ecx
	lea	ecx, DWORD PTR $T145663[esp+24]
	mov	DWORD PTR [esi+84], edx
	mov	DWORD PTR [esi+88], eax
	mov	DWORD PTR [esi+92], ebp
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ

; 3917 : 		Vertices[2].Specular = 0;
; 3918 : 
; 3919 : 		Vertices[3].Position.X = X1;

	mov	edx, DWORD PTR _X1$[esp+20]

; 3920 : 		Vertices[3].Position.Y = Y2;
; 3921 : 		Vertices[3].Position.Z = PositionZ;

	mov	ecx, DWORD PTR _PositionZ$[esp+24]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+96], eax
	mov	eax, DWORD PTR _Y2$[esp+20]
	mov	DWORD PTR [esi+100], 0
	mov	DWORD PTR [esi+120], edx
	mov	DWORD PTR [esi+124], eax
	mov	DWORD PTR [esi+128], ecx

; 3922 : 		Vertices[3].Position.W = 1.f;

	mov	DWORD PTR [esi+132], ebp

; 3923 : 		Vertices[3].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	edx, DWORD PTR _Color$[esp+20]
	push	edx
	lea	ecx, DWORD PTR $T145664[esp+24]
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ

; 3924 : 		Vertices[3].Specular = 0;
; 3925 : 
; 3926 : 		Vertices[4].Position.X = X1;
; 3927 : 		Vertices[4].Position.Y = Y1;

	mov	ecx, DWORD PTR _Y1$[esp+20]

; 3928 : 		Vertices[4].Position.Z = PositionZ;

	mov	edx, DWORD PTR _PositionZ$[esp+24]
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+136], eax
	mov	eax, DWORD PTR _X1$[esp+20]
	mov	DWORD PTR [esi+140], 0
	mov	DWORD PTR [esi+160], eax

; 3929 : 		Vertices[4].Position.W = 1.f;
; 3930 : 		Vertices[4].Diffuse = FColor(Color).TrueColor() | 0xff000000;

	lea	eax, DWORD PTR _Color$[esp+20]
	mov	DWORD PTR [esi+164], ecx
	push	eax
	lea	ecx, DWORD PTR $T145665[esp+24]
	mov	DWORD PTR [esi+168], edx
	mov	DWORD PTR [esi+172], ebp
	call	DWORD PTR __imp_??0FColor@@QAE@ABVFPlane@@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?TrueColor@FColor@@QBEKXZ
	or	eax, -16777216				; ff000000H
	mov	DWORD PTR [esi+176], eax

; 3931 : 		Vertices[4].Specular = 0;
; 3932 : 
; 3933 : 		INT	First = ActorVertices.Unlock();

	mov	ecx, ebx
	mov	DWORD PTR [esi+180], 0
	call	?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ; FD3DVertexBuffer<FD3DTLVertex>::Unlock

; 3934 : 
; 3935 : 		ActorVertices.Set();

	mov	ecx, ebx
	mov	esi, eax
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 3936 : 
; 3937 : 		Direct3DDevice8->DrawPrimitive( D3DPT_LINESTRIP, First, 4 );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	esi
	push	3
	push	eax
	call	DWORD PTR [ecx+280]

; 3938 : 
; 3939 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 3940 : 		Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	edi, DWORD PTR [edi+19124]
	mov	eax, DWORD PTR [edi]
	push	4
	push	4
	push	0
	push	edi
	call	DWORD PTR [eax+252]
	pop	esi
	pop	ebp
	pop	ebx
$L126369:
	pop	edi

; 3941 : 	}

	add	esp, 8
	ret	40					; 00000028H
?Draw2DPoint@UD3DRenderDevice@@UAIXPAUFSceneNode@@VFPlane@@KMMMMM@Z ENDP ; UD3DRenderDevice::Draw2DPoint
_TEXT	ENDS
PUBLIC	??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@ ; `string'
PUBLIC	??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@ ; `string'
PUBLIC	??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@ ; `string'
PUBLIC	??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@ ; `string'
_BSS	SEGMENT
_HitPixels DD	040H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@ DB 'Viewport->Hit'
	DB	'YL<=HIT_SIZE', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@
_DATA	SEGMENT
??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@ DB 'Viewport->Hit'
	DB	'XL<=HIT_SIZE', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@
_DATA	SEGMENT
??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'G', 00H, 'e'
	DB	00H, 't', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@
_DATA	SEGMENT
??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'L', 00H, 'o'
	DB	00H, 'c', 00H, 'k', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?PushHit@UD3DRenderDevice@@UAIXPBEH@Z
_TEXT	SEGMENT
_RenderTarget$ = -20
_LockedRect$ = -8
$T145810 = -16
_Data$ = -12
_Count$ = 8
?PushHit@UD3DRenderDevice@@UAIXPBEH@Z PROC NEAR		; UD3DRenderDevice::PushHit, COMDAT
; _this$ = ecx
; _Data$ = edx

; 3948 : 	{

	sub	esp, 20					; 00000014H
	push	ebp
	mov	ebp, ecx

; 3949 : 
; 3950 : 		VALIDATE;
; 3951 : 
; 3952 : 		check(Viewport->HitYL<=HIT_SIZE);

	mov	eax, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [eax+200]
	push	esi
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	edi
	mov	edi, 8
	cmp	ecx, edi
	mov	DWORD PTR _Data$[esp+32], edx
	jle	SHORT $L126382
	push	3952					; 00000f70H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BK@KHEC@Viewport?9?$DOHitYL?$DM?$DNHIT_SIZE?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L126382:

; 3953 : 		check(Viewport->HitXL<=HIT_SIZE);

	mov	ecx, DWORD PTR [ebp+48]
	cmp	DWORD PTR [ecx+196], edi
	jle	SHORT $L126384
	push	3953					; 00000f71H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BK@MKKI@Viewport?9?$DOHitXL?$DM?$DNHIT_SIZE?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L126384:

; 3954 : 
; 3955 : 		// Get the current render target surface.
; 3956 : 		IDirect3DSurface8*	RenderTarget;
; 3957 : 
; 3958 : 		if(FAILED(h=Direct3DDevice8->GetRenderTarget(&RenderTarget)))

	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _RenderTarget$[esp+32]
	push	ecx
	push	eax
	call	DWORD PTR [edx+128]
	test	eax, eax
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L126388

; 3959 : 		{
; 3960 : 			debugf(TEXT("D3D Driver: GetRenderTarget failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp

; 4031 : 	};

	add	esp, 20					; 00000014H
	ret	4
$L126388:

; 3961 : 			return;
; 3962 : 		}
; 3963 : 
; 3964 : 		// Lock the render target.
; 3965 : 
; 3966 : 		D3DLOCKED_RECT	LockedRect;
; 3967 : 
; 3968 : 		if(FAILED(h=RenderTarget->LockRect(&LockedRect,NULL,0)))

	mov	eax, DWORD PTR _RenderTarget$[esp+32]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	lea	edx, DWORD PTR _LockedRect$[esp+40]
	push	edx
	push	eax
	call	DWORD PTR [ecx+36]
	test	eax, eax
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L126392

; 3969 : 		{
; 3970 : 			debugf(TEXT("D3D Driver: LockRect failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebp

; 4031 : 	};

	add	esp, 20					; 00000014H
	ret	4
$L126392:

; 3971 : 			return;
; 3972 : 		}
; 3973 : 
; 3974 : 		// Save the passed info on the working stack.
; 3975 : 
; 3976 : 		INT	Index = HitStack.Add(Count);

	mov	edi, DWORD PTR [ebp+675116]
	mov	edx, DWORD PTR _Count$[esp+28]
	mov	eax, DWORD PTR [ebp+675120]
	lea	esi, DWORD PTR [ebp+675112]
	lea	ecx, DWORD PTR [edi+edx]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L145791
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	1
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L145791:

; 3977 : 
; 3978 : 		appMemcpy(&HitStack(Index),Data,Count);

	mov	ecx, DWORD PTR [esi]
	add	ecx, edi
	push	ebx
	mov	DWORD PTR $T145810[esp+36], ecx
	mov	ecx, DWORD PTR _Count$[esp+32]
	mov	esi, DWORD PTR _Data$[esp+36]
	mov	edi, DWORD PTR $T145810[esp+36]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb

; 3979 : 
; 3980 : 		// Cleanup under cursor.
; 3981 : 		switch( ViewportColorBits )
; 3982 : 		{

	mov	eax, DWORD PTR [ebp+16772]
	cmp	eax, 16					; 00000010H
	je	$L126399
	cmp	eax, 24					; 00000018H
	je	$L126414
	cmp	eax, 32					; 00000020H
	jne	$L126409

; 4010 : 			}
; 4011 : 			case 32:
; 4012 : 			{
; 4013 : 				DWORD* src = (DWORD*) LockedRect.pBits;
; 4014 : 				src = (DWORD*)((BYTE*)src + Viewport->HitX * 4 + Viewport->HitY * LockedRect.Pitch);

	mov	eax, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [eax+192]
	imul	edx, DWORD PTR _LockedRect$[esp+36]

; 4030 : 		SafeRelease(RenderTarget);

	mov	esi, DWORD PTR _LockedRect$[esp+40]
	mov	ecx, DWORD PTR [eax+188]
	add	esi, edx
	mov	edx, DWORD PTR [eax+200]
	xor	edi, edi
	test	edx, edx
	lea	ecx, DWORD PTR [esi+ecx*4]
	jle	$L126409
	mov	esi, DWORD PTR [eax+196]
	mov	ebx, OFFSET FLAT:_HitPixels
$L126435:
	xor	eax, eax
	test	esi, esi
	jle	SHORT $L126436

; 4016 : 				{
; 4017 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	edx, ebx

; 4031 : 	};

	npad	2
$L126439:

; 4018 : 					{
; 4019 : 						HitPixels[X][Y] = src[X];

	mov	esi, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], esi

; 4020 : 						src[X] = IGNOREPIX;

	mov	DWORD PTR [ecx+eax*4], 65037		; 0000fe0dH
	mov	esi, DWORD PTR [ebp+48]
	mov	esi, DWORD PTR [esi+196]
	inc	eax
	add	edx, 32					; 00000020H
	cmp	eax, esi
	jl	SHORT $L126439
$L126436:

; 4015 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src=(DWORD*)((BYTE*)src + LockedRect.Pitch) )

	add	ecx, DWORD PTR _LockedRect$[esp+36]
	mov	edx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [edx+200]
	inc	edi
	add	ebx, 4
	cmp	edi, eax
	jl	SHORT $L126435

; 4021 : 					}
; 4022 : 				}
; 4023 : 				break;

	jmp	$L126409
$L126414:

; 3993 : 					}
; 3994 : 				}
; 3995 : 				break;
; 3996 : 			}
; 3997 : 			case 24:
; 3998 : 			{
; 3999 : 				BYTE* src = (BYTE*) LockedRect.pBits;
; 4000 : 				src = src + Viewport->HitX*3  + Viewport->HitY * LockedRect.Pitch;

	mov	eax, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [eax+192]
	imul	edx, DWORD PTR _LockedRect$[esp+36]
	mov	ecx, DWORD PTR [eax+188]
	lea	edi, DWORD PTR [ecx+ecx*2]

; 4030 : 		SafeRelease(RenderTarget);

	mov	ecx, DWORD PTR _LockedRect$[esp+40]
	add	ecx, edx
	add	edi, ecx
	mov	ecx, DWORD PTR [eax+200]
	xor	ebx, ebx
	test	ecx, ecx
	jle	$L126409
	mov	esi, DWORD PTR [eax+196]
	mov	ecx, OFFSET FLAT:_HitPixels
	mov	DWORD PTR 8+[esp+32], ecx
$L126418:
	xor	edx, edx
	test	esi, esi
	jle	SHORT $L126419

; 4002 : 				{
; 4003 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	eax, edi

; 4031 : 	};

	npad	3
$L126422:

; 4004 : 					{
; 4005 : 						HitPixels[X][Y] = *((DWORD*)&src[X*3]);

	mov	esi, DWORD PTR [eax]
	mov	DWORD PTR [ecx], esi

; 4006 : 						*((DWORD*)&src[X*3]) = IGNOREPIX;

	mov	DWORD PTR [eax], 65037			; 0000fe0dH
	mov	esi, DWORD PTR [ebp+48]
	mov	esi, DWORD PTR [esi+196]
	inc	edx
	add	ecx, 32					; 00000020H
	add	eax, 3
	cmp	edx, esi
	jl	SHORT $L126422
$L126419:

; 4001 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src+=LockedRect.Pitch )

	mov	edx, DWORD PTR _LockedRect$[esp+36]
	mov	ecx, DWORD PTR 8+[esp+32]
	add	edi, edx
	mov	edx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [edx+200]
	inc	ebx
	add	ecx, 4
	cmp	ebx, eax
	mov	DWORD PTR 8+[esp+32], ecx
	jl	SHORT $L126418

; 4007 : 					}
; 4008 : 				}			
; 4009 : 				break;

	jmp	SHORT $L126409
$L126399:

; 3983 : 			case 16:
; 3984 : 			{
; 3985 : 				_WORD* src = (_WORD*) LockedRect.pBits;
; 3986 : 				src = (_WORD*) ((BYTE*)src + Viewport->HitX * 2 + Viewport->HitY * LockedRect.Pitch);

	mov	eax, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [eax+192]
	imul	ecx, DWORD PTR _LockedRect$[esp+36]

; 4030 : 		SafeRelease(RenderTarget);

	mov	esi, DWORD PTR _LockedRect$[esp+40]
	mov	edx, DWORD PTR [eax+188]
	add	esi, ecx
	lea	ecx, DWORD PTR [esi+edx*2]
	mov	edx, DWORD PTR [eax+200]
	xor	edi, edi
	test	edx, edx
	jle	SHORT $L126409
	mov	esi, DWORD PTR [eax+196]
	mov	ebx, OFFSET FLAT:_HitPixels
$L126407:
	xor	eax, eax
	test	esi, esi
	jle	SHORT $L126408

; 3988 : 				{
; 3989 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	edx, ebx

; 4031 : 	};

	npad	5
$L126411:

; 3990 : 					{
; 3991 : 						HitPixels[X][Y] = src[X];

	xor	esi, esi
	mov	si, WORD PTR [ecx+eax*2]
	inc	eax
	add	edx, 32					; 00000020H
	mov	DWORD PTR [edx-32], esi

; 3992 : 						src[X] = IGNOREPIX;

	mov	WORD PTR [ecx+eax*2-2], 65037		; 0000fe0dH
	mov	esi, DWORD PTR [ebp+48]
	mov	esi, DWORD PTR [esi+196]
	cmp	eax, esi
	jl	SHORT $L126411
$L126408:

; 3987 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src=(_WORD*)((BYTE*)src + LockedRect.Pitch) )

	add	ecx, DWORD PTR _LockedRect$[esp+36]
	mov	eax, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [eax+200]
	inc	edi
	add	ebx, 4
	cmp	edi, edx
	jl	SHORT $L126407
$L126409:

; 4024 : 			}
; 4025 : 		}
; 4026 : 
; 4027 : 		// Unlock the render target, and release our reference to it.
; 4028 : 
; 4029 : 		RenderTarget->UnlockRect();

	mov	eax, DWORD PTR _RenderTarget$[esp+36]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+40]

; 4030 : 		SafeRelease(RenderTarget);

	mov	eax, DWORD PTR _RenderTarget$[esp+36]
	test	eax, eax
	pop	ebx
	je	SHORT $L145814
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
$L145814:
	pop	edi
	pop	esi
	pop	ebp

; 4031 : 	};

	add	esp, 20					; 00000014H
	ret	4
?PushHit@UD3DRenderDevice@@UAIXPBEH@Z ENDP		; UD3DRenderDevice::PushHit
_TEXT	ENDS
PUBLIC	??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@ ; `string'
PUBLIC	??_C@_08GCAE@Index?$DO?$DN0?$AA@		; `string'
;	COMDAT ??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@ DB 'Count <= H'
	DB	'itStack.Num()', 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GCAE@Index?$DO?$DN0?$AA@
_DATA	SEGMENT
??_C@_08GCAE@Index?$DO?$DN0?$AA@ DB 'Index>=0', 00H	; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?PopHit@UD3DRenderDevice@@UAIXHH@Z
_TEXT	SEGMENT
_Hit$ = -20
_RenderTarget$ = -24
_LockedRect$ = -8
$T145858 = 8
$T145859 = -16
$T145860 = -20
_Count$ = -12
_bForce$ = 8
?PopHit@UD3DRenderDevice@@UAIXHH@Z PROC NEAR		; UD3DRenderDevice::PopHit, COMDAT
; _this$ = ecx
; _Count$ = edx

; 4035 : 	{

	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	mov	ebp, ecx

; 4036 : 		VALIDATE;
; 4037 : 
; 4038 : 		//debugf(TEXT("POPHIT stacknum   %i  Count %i "),HitStack.Num(),Count);
; 4039 : 		check(Count <= HitStack.Num());

	cmp	edx, DWORD PTR [ebp+675116]
	mov	DWORD PTR _Count$[esp+32], edx
	jle	SHORT $L126447
	push	4039					; 00000fc7H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BI@MCHO@Count?5?$DM?$DN?5HitStack?4Num?$CI?$CJ?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126447:

; 4040 : 		UBOOL Hit=0;
; 4041 : 
; 4042 : 		// Get the current render target surface.
; 4043 : 		IDirect3DSurface8*	RenderTarget;
; 4044 : 
; 4045 : 		if(FAILED(h=Direct3DDevice8->GetRenderTarget(&RenderTarget)))

	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _RenderTarget$[esp+32]
	push	edx
	xor	ebx, ebx
	push	eax
	mov	DWORD PTR _Hit$[esp+40], ebx
	call	DWORD PTR [ecx+128]
	cmp	eax, ebx
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L126452

; 4046 : 		{
; 4047 : 			debugf(TEXT("D3D Driver: GetRenderTarget failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1FA@HABJ@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAG?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
	pop	ebp
	pop	ebx

; 4128 : 	}

	add	esp, 24					; 00000018H
	ret	4
$L126452:

; 4048 : 			return;
; 4049 : 		}
; 4050 : 
; 4051 : 		// Lock the render target.
; 4052 : 		D3DLOCKED_RECT	LockedRect;
; 4053 : 
; 4054 : 		if(FAILED(h=RenderTarget->LockRect(&LockedRect,NULL,0)))

	mov	eax, DWORD PTR _RenderTarget$[esp+32]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	ebx
	lea	ecx, DWORD PTR _LockedRect$[esp+40]
	push	ecx
	push	eax
	call	DWORD PTR [edx+36]
	cmp	eax, ebx
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L126455

; 4055 : 		{
; 4056 : 			debugf(TEXT("D3D Driver: LockRect failed (%s)"),DXGetErrorString8(h));

	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1EC@KMJO@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAL?$AAo?$AAc?$AAk?$AAR?$AAe?$AAc?$AAt@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 12					; 0000000cH
	pop	ebp
	pop	ebx

; 4128 : 	}

	add	esp, 24					; 00000018H
	ret	4
$L126455:

; 4057 : 			return;
; 4058 : 		}
; 4059 : 
; 4060 : 		// Check under cursor and restore.
; 4061 : 		switch( ViewportColorBits )
; 4062 : 		{

	mov	eax, DWORD PTR [ebp+16772]
	cmp	eax, 16					; 00000010H
	push	esi
	push	edi
	je	$L126460
	cmp	eax, 24					; 00000018H
	je	$L126477
	cmp	eax, 32					; 00000020H
	jne	$L126470

; 4093 : 			}
; 4094 : 			case 32:
; 4095 : 			{
; 4096 : 				DWORD* src = (DWORD*) LockedRect.pBits;
; 4097 : 				src = (DWORD*)((BYTE*)src + Viewport->HitX * 4 + Viewport->HitY * LockedRect.Pitch);

	mov	eax, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [eax+192]
	imul	ecx, DWORD PTR _LockedRect$[esp+40]

; 4125 : 		}
; 4126 : 		// Remove the passed info from the working stack.
; 4127 : 		HitStack.Remove( HitStack.Num()-Count, Count );

	mov	esi, DWORD PTR _LockedRect$[esp+44]
	mov	edx, DWORD PTR [eax+188]
	add	esi, ecx
	mov	ecx, DWORD PTR [eax+200]
	xor	edi, edi
	cmp	ecx, ebx
	lea	esi, DWORD PTR [esi+edx*4]
	jle	$L126470
	mov	ecx, DWORD PTR [eax+196]
	mov	ebx, OFFSET FLAT:_HitPixels

; 4128 : 	}

	npad	2

; 4125 : 		}
; 4126 : 		// Remove the passed info from the working stack.
; 4127 : 		HitStack.Remove( HitStack.Num()-Count, Count );

$L126499:
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L126500

; 4099 : 				{
; 4100 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	edx, ebx
$L126503:

; 4101 : 					{						
; 4102 : 						if ( src[X] != IGNOREPIX ) 

	cmp	DWORD PTR [esi+eax*4], 65037		; 0000fe0dH
	je	SHORT $L126506

; 4103 : 							Hit=1;

	mov	DWORD PTR _Hit$[esp+40], 1
$L126506:

; 4104 : 						src[X] = HitPixels[X][Y];						

	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [esi+eax*4], ecx
	mov	ecx, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [ecx+196]
	inc	eax
	add	edx, 32					; 00000020H
	cmp	eax, ecx
	jl	SHORT $L126503
$L126500:

; 4098 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src=(DWORD*)((BYTE*)src + LockedRect.Pitch) )

	add	esi, DWORD PTR _LockedRect$[esp+40]
	mov	edx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [edx+200]
	inc	edi
	add	ebx, 4
	cmp	edi, eax
	jl	SHORT $L126499

; 4105 : 					}
; 4106 : 				}
; 4107 : 				break;

	jmp	$L126470
$L126477:

; 4074 : 					
; 4075 : 					}
; 4076 : 				}
; 4077 : 				break;
; 4078 : 			}
; 4079 : 			case 24:
; 4080 : 			{
; 4081 : 				BYTE* src = (BYTE*) LockedRect.pBits;
; 4082 : 				src = src + Viewport->HitX*3  + Viewport->HitY * LockedRect.Pitch;

	mov	eax, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [eax+192]
	imul	edx, DWORD PTR _LockedRect$[esp+40]
	mov	ecx, DWORD PTR [eax+188]
	lea	edi, DWORD PTR [ecx+ecx*2]

; 4125 : 		}
; 4126 : 		// Remove the passed info from the working stack.
; 4127 : 		HitStack.Remove( HitStack.Num()-Count, Count );

	mov	ecx, DWORD PTR _LockedRect$[esp+44]
	add	ecx, edx
	add	edi, ecx
	mov	ecx, DWORD PTR [eax+200]
	test	ecx, ecx
	jle	$L126470
	mov	edx, DWORD PTR [eax+196]
	mov	ecx, OFFSET FLAT:_HitPixels
	mov	DWORD PTR -16+[esp+40], ecx
$L126481:
	xor	esi, esi
	test	edx, edx
	jle	SHORT $L126482

; 4084 : 				{
; 4085 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	eax, edi

; 4128 : 	}

	npad	3
$L126485:

; 4086 : 					{
; 4087 : 						if( *((DWORD*)&src[X*3]) != IGNOREPIX )

	cmp	DWORD PTR [eax], 65037			; 0000fe0dH
	je	SHORT $L126489

; 4088 : 							Hit=1;

	mov	DWORD PTR _Hit$[esp+40], 1
$L126489:

; 4089 : 						*((DWORD*)&src[X*3]) = HitPixels[X][Y];						

	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ebp+48]
	mov	edx, DWORD PTR [edx+196]
	inc	esi
	add	ecx, 32					; 00000020H
	add	eax, 3
	cmp	esi, edx
	jl	SHORT $L126485
$L126482:

; 4083 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src+=LockedRect.Pitch )

	mov	eax, DWORD PTR _LockedRect$[esp+40]
	mov	ecx, DWORD PTR -16+[esp+40]
	add	edi, eax
	mov	eax, DWORD PTR [ebp+48]
	mov	esi, DWORD PTR [eax+200]
	inc	ebx
	add	ecx, 4
	cmp	ebx, esi
	mov	DWORD PTR -16+[esp+40], ecx
	jl	SHORT $L126481

; 4090 : 					}
; 4091 : 				}			
; 4092 : 				break;

	jmp	SHORT $L126470
$L126460:

; 4063 : 			case 16:
; 4064 : 			{
; 4065 : 				_WORD* src = (_WORD*) LockedRect.pBits;
; 4066 : 				src = (_WORD*) ((BYTE*)src + Viewport->HitX * 2 + Viewport->HitY * LockedRect.Pitch);

	mov	eax, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [eax+192]
	imul	ecx, DWORD PTR _LockedRect$[esp+40]

; 4125 : 		}
; 4126 : 		// Remove the passed info from the working stack.
; 4127 : 		HitStack.Remove( HitStack.Num()-Count, Count );

	mov	esi, DWORD PTR _LockedRect$[esp+44]
	mov	edx, DWORD PTR [eax+188]
	add	esi, ecx
	mov	ecx, DWORD PTR [eax+200]
	xor	edi, edi
	cmp	ecx, ebx
	lea	esi, DWORD PTR [esi+edx*2]
	jle	SHORT $L126470
	mov	ecx, DWORD PTR [eax+196]
	mov	ebx, OFFSET FLAT:_HitPixels

; 4128 : 	}

	npad	3

; 4125 : 		}
; 4126 : 		// Remove the passed info from the working stack.
; 4127 : 		HitStack.Remove( HitStack.Num()-Count, Count );

$L126468:
	xor	eax, eax
	test	ecx, ecx
	jle	SHORT $L126469

; 4068 : 				{
; 4069 : 					for( INT X=0; X<Viewport->HitXL; X++ )

	mov	edx, ebx
$L126472:

; 4070 : 					{
; 4071 : 						if( src[X] != IGNOREPIX )

	cmp	WORD PTR [esi+eax*2], 65037		; 0000fe0dH
	je	SHORT $L126475

; 4072 : 							Hit=1;

	mov	DWORD PTR _Hit$[esp+40], 1
$L126475:

; 4073 : 						src[X] = (_WORD)HitPixels[X][Y];	

	mov	cx, WORD PTR [edx]
	mov	WORD PTR [esi+eax*2], cx
	mov	ecx, DWORD PTR [ebp+48]
	mov	ecx, DWORD PTR [ecx+196]
	inc	eax
	add	edx, 32					; 00000020H
	cmp	eax, ecx
	jl	SHORT $L126472
$L126469:

; 4067 : 				for( INT Y=0; Y<Viewport->HitYL; Y++, src=(_WORD*)((BYTE*)src + LockedRect.Pitch) )

	add	esi, DWORD PTR _LockedRect$[esp+40]
	mov	edx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [edx+200]
	inc	edi
	add	ebx, 4
	cmp	edi, eax
	jl	SHORT $L126468
$L126470:

; 4108 : 			}		
; 4109 : 		}
; 4110 : 
; 4111 : 		// Unlock the render target, and release our reference to it.
; 4112 : 
; 4113 : 		RenderTarget->UnlockRect();

	mov	eax, DWORD PTR _RenderTarget$[esp+40]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+40]

; 4114 : 		SafeRelease(RenderTarget);

	mov	eax, DWORD PTR _RenderTarget$[esp+40]
	xor	esi, esi
	cmp	eax, esi
	je	SHORT $L145842
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR _RenderTarget$[esp+40], esi
$L145842:

; 4115 : 
; 4116 : 		// Handle hit.
; 4117 : 		if( Hit || bForce )

	cmp	DWORD PTR _Hit$[esp+40], esi
	jne	SHORT $L126511
	cmp	DWORD PTR _bForce$[esp+36], esi
	je	SHORT $L126513
$L126511:

; 4118 : 		{
; 4119 : 			if( HitStack.Num() <= *HitSize )

	mov	ecx, DWORD PTR [ebp+675128]
	mov	eax, DWORD PTR [ebp+675116]
	cmp	eax, DWORD PTR [ecx]
	jg	SHORT $L126512

; 4120 : 			{
; 4121 : 				HitCount = HitStack.Num();
; 4122 : 				appMemcpy( HitData, &HitStack(0), HitCount );

	mov	edx, DWORD PTR [ebp+675112]
	mov	DWORD PTR [ebp+675132], eax
	mov	DWORD PTR $T145860[esp+40], eax
	mov	eax, DWORD PTR [ebp+675124]
	mov	DWORD PTR $T145859[esp+40], edx
	mov	DWORD PTR $T145858[esp+36], eax
	mov	ecx, DWORD PTR $T145860[esp+40]
	mov	esi, DWORD PTR $T145859[esp+40]
	mov	edi, DWORD PTR $T145858[esp+36]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb

; 4123 : 			}
; 4124 : 			else HitCount = 0;

	jmp	SHORT $L126513
$L126512:
	mov	DWORD PTR [ebp+675132], esi
$L126513:

; 4125 : 		}
; 4126 : 		// Remove the passed info from the working stack.
; 4127 : 		HitStack.Remove( HitStack.Num()-Count, Count );

	mov	esi, DWORD PTR [ebp+675116]
	mov	edi, DWORD PTR _Count$[esp+40]
	sub	esi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	lea	ebp, DWORD PTR [ebp+675112]
	jns	SHORT $L145870
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L145870:
	cmp	esi, DWORD PTR [ebp+4]
	jle	SHORT $L145871
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L145871:
	mov	eax, DWORD PTR [ebp+4]
	lea	ecx, DWORD PTR [esi+edi]
	cmp	ecx, eax
	jle	SHORT $L145872
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L145872:
	push	1
	push	edi
	push	esi
	mov	ecx, ebp
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 4128 : 	}

	add	esp, 24					; 00000018H
	ret	4
?PopHit@UD3DRenderDevice@@UAIXHH@Z ENDP			; UD3DRenderDevice::PopHit
_TEXT	ENDS
PUBLIC	??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@ ; `string'
PUBLIC	??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@ ; `string'
PUBLIC	__real@408f400000000000
EXTRN	__imp_?appSprintf@@YAHPAGPBGZZ:NEAR
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT ??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@
_DATA	SEGMENT
??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@ DB 't'
	DB	00H, 'o', 00H, 't', 00H, 'a', 00H, 'l', 00H, ':', 00H, '%', 00H
	DB	'.', 00H, '1', 00H, 'f', 00H, 'm', 00H, 's', 00H, ' ', 00H, '('
	DB	00H, 's', 00H, 'u', 00H, 'r', 00H, 'f', 00H, '=', 00H, '%', 00H
	DB	'0', 00H, '4', 00H, 'i', 00H, ',', 00H, ' ', 00H, '%', 00H, '0'
	DB	00H, '3', 00H, '.', 00H, '1', 00H, 'f', 00H, 'm', 00H, 's', 00H
	DB	')', 00H, ' ', 00H, '(', 00H, 'p', 00H, 'o', 00H, 'l', 00H, 'y'
	DB	00H, '=', 00H, '%', 00H, '0', 00H, '5', 00H, 'i', 00H, ',', 00H
	DB	' ', 00H, '%', 00H, '.', 00H, '1', 00H, 'f', 00H, 'm', 00H, 's'
	DB	00H, ' ', 00H, '(', 00H, 'Q', 00H, 'u', 00H, 'e', 00H, 'u', 00H
	DB	'e', 00H, ':', 00H, '%', 00H, '1', 00H, '.', 00H, 'f', 00H, 'm'
	DB	00H, 's', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, '%', 00H, '.', 00H, '1'
	DB	00H, 'f', 00H, 'm', 00H, 's', 00H, ',', 00H, ' ', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'u', 00H, 'p', 00H, ':', 00H, '%', 00H, '1', 00H
	DB	'.', 00H, 'f', 00H, 'm', 00H, 's', 00H, ' ', 00H, '(', 00H, 'L'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, ':', 00H, '%', 00H, 'i', 00H
	DB	' ', 00H, '%', 00H, '1', 00H, '.', 00H, 'f', 00H, 'm', 00H, 's'
	DB	00H, ')', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H
	DB	'P', 00H, 'r', 00H, 'i', 00H, 'm', 00H, ':', 00H, '%', 00H, '.'
	DB	00H, '1', 00H, 'f', 00H, 'm', 00H, 's', 00H, ')', 00H, ' ', 00H
	DB	'(', 00H, '%', 00H, 'i', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 's'
	DB	00H, 'k', 00H, 'e', 00H, 'd', 00H, ')', 00H, ')', 00H, ' ', 00H
	DB	'(', 00H, 't', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '=', 00H, '%'
	DB	00H, 'i', 00H, ',', 00H, ' ', 00H, '%', 00H, '.', 00H, '1', 00H
	DB	'f', 00H, 'm', 00H, 's', 00H, ')', 00H, ' ', 00H, '(', 00H, 'p'
	DB	00H, 'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'l', 00H
	DB	'e', 00H, 's', 00H, '=', 00H, '%', 00H, 'i', 00H, ',', 00H, ' '
	DB	00H, '%', 00H, '.', 00H, '1', 00H, 'f', 00H, 'm', 00H, 's', 00H
	DB	' ', 00H, '(', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 's', 00H, ':', 00H, '%', 00H, 'i'
	DB	00H, ',', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'c', 00H, 'c', 00H
	DB	' ', 00H, 'm', 00H, 'i', 00H, 's', 00H, 's', 00H, 'e', 00H, 's'
	DB	00H, ':', 00H, '%', 00H, 'i', 00H, ')', 00H, ')', 00H, ' ', 00H
	DB	'(', 00H, 'b', 00H, 'e', 00H, 'a', 00H, 'm', 00H, 's', 00H, '='
	DB	00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, '%', 00H, '.', 00H
	DB	'1', 00H, 'f', 00H, 'm', 00H, 's', 00H, ')', 00H, ' ', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, 's', 00H, '=', 00H, '%', 00H, 'i', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@
_DATA	SEGMENT
??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@ DB ' '
	DB	00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	':', 00H, '%', 00H, 's', 00H, ' ', 00H, '(', 00H, 'A', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '/', 00H, 'B', 00H
	DB	'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'R'
	DB	00H, 'a', 00H, 'm', 00H, ':', 00H, '%', 00H, 'i', 00H, 'K', 00H
	DB	'/', 00H, '%', 00H, 'i', 00H, 'K', 00H, ',', 00H, ' ', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, ':', 00H, '%', 00H, 'i', 00H, '/', 00H, '%', 00H, 'i'
	DB	00H, ')', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 's', 00H
	DB	':', 00H, '%', 00H, 'i', 00H, ' ', 00H, '(', 00H, 'u', 00H, 'p'
	DB	00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 's', 00H, ':', 00H
	DB	'%', 00H, 'i', 00H, ',', 00H, ' ', 00H, '%', 00H, '.', 00H, '1'
	DB	00H, 'f', 00H, 'm', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?GetStats@UD3DRenderDevice@@UAIXPAG@Z
_TEXT	SEGMENT
?GetStats@UD3DRenderDevice@@UAIXPAG@Z PROC NEAR		; UD3DRenderDevice::GetStats, COMDAT
; _this$ = ecx
; _Result$ = edx

; 4135 : 	{

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 24					; 00000018H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, edx

; 4136 : 		VALIDATE;
; 4137 : 
; 4138 : 		*Result=0;

	mov	WORD PTR [edi], 0

; 4139 : 		appSprintf
; 4140 : 		(
; 4141 : 			Result,
; 4142 : 			TEXT("total:%.1fms (surf=%04i, %03.1fms) (poly=%05i, %.1fms (Queue:%1.fms Render: %.1fms, VertexSetup:%1.fms (Lock:%i %1.fms) DrawPrim:%.1fms) (%i masked)) (tile=%i, %.1fms) (particles=%i, %.1fms (texture changes:%i, succ misses:%i)) (beams=%i, %.1fms) texuploads=%i"),
; 4143 : 			GSecondsPerCycle * 1000 *(Stats.SurfTime+Stats.PolyTime+Stats.TileTime+Stats.ParticleTime+Stats.BeamTime),
; 4144 : 			Stats.Surfs,
; 4145 : 			GSecondsPerCycle * 1000 * Stats.SurfTime,
; 4146 : 			Stats.Polys,
; 4147 : 			GSecondsPerCycle * 1000 * Stats.PolyTime,
; 4148 : 			GSecondsPerCycle * 1000 * Stats.QueueTime,
; 4149 : 			GSecondsPerCycle * 1000 * Stats.D3DVertexRender,
; 4150 : 			GSecondsPerCycle * 1000 * Stats.D3DVertexSetup,
; 4151 : 			Stats.VBLocks,
; 4152 : 			GSecondsPerCycle * 1000 * Stats.D3DVertexLock,
; 4153 : 			GSecondsPerCycle * 1000 * Stats.D3DPolyTime,
; 4154 : 			Stats.MaskedPolys,
; 4155 : 			Stats.Tiles,
; 4156 : 			GSecondsPerCycle * 1000 * Stats.TileTime,
; 4157 : 			Stats.Particles,
; 4158 : 			GSecondsPerCycle * 1000 * Stats.ParticleTime,			
; 4159 : 			Stats.ParticleTextureChanges,
; 4160 : 			Stats.SuccessorMisses,
; 4161 : 			Stats.Beams,
; 4162 : 			GSecondsPerCycle * 1000 * Stats.BeamTime,			
; 4163 : 			Stats.TexUploads
; 4164 : 		);

	mov	eax, DWORD PTR [esi+19632]
	mov	ecx, DWORD PTR [esi+19640]
	mov	edx, DWORD PTR [esi+19636]
	mov	ebp, DWORD PTR [esi+19692]
	mov	DWORD PTR -16+[esp+40], eax
	mov	eax, DWORD PTR [esi+19624]
	mov	DWORD PTR -20+[esp+40], eax
	mov	eax, DWORD PTR [esi+19704]
	push	eax
	mov	eax, DWORD PTR __imp_?GSecondsPerCycle@@3NA
	sub	esp, 8
	mov	DWORD PTR -12+[esp+52], ecx
	fild	DWORD PTR -12+[esp+52]
	mov	DWORD PTR -8+[esp+52], edx
	mov	ebx, DWORD PTR [esi+19628]
	mov	DWORD PTR -4+[esp+52], ebx
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR -8+[esp+56]
	mov	ebp, DWORD PTR [esi+19696]
	push	ebp
	mov	ebp, DWORD PTR [esi+19688]
	fmul	QWORD PTR [eax]
	push	ebp
	mov	ebp, DWORD PTR [esi+19684]
	sub	esp, 8
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR -16+[esp+76]
	mov	ebp, DWORD PTR [esi+19676]
	sub	esp, 8
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR [esi+19648]
	mov	ebp, DWORD PTR [esi+19672]
	push	ebp
	mov	ebp, DWORD PTR [esi+19708]
	fmul	QWORD PTR [eax]
	sub	esp, 16					; 00000010H
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp+8]
	fild	DWORD PTR [esi+19660]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR [esi+19656]
	sub	esp, 32					; 00000020H
	mov	ebp, DWORD PTR [esi+19668]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp+24]
	fild	DWORD PTR [esi+19652]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp+16]
	fild	DWORD PTR [esi+19644]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp+8]
	fild	DWORD PTR -4+[esp+144]
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	ebp
	fild	DWORD PTR -20+[esp+148]
	sub	esp, 8
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	mov	ebp, DWORD PTR [esi+19664]
	fstp	QWORD PTR [esp]
	push	ebp
	mov	ebp, DWORD PTR -20+[esp+160]
	add	ebp, ebx
	add	ebp, DWORD PTR -16+[esp+160]
	mov	ebx, DWORD PTR __imp_?appSprintf@@YAHPAGPBGZZ
	add	ebp, edx
	add	ebp, ecx
	mov	DWORD PTR -4+[esp+160], ebp
	fild	DWORD PTR -4+[esp+160]
	sub	esp, 8
	fmul	QWORD PTR [eax]
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	OFFSET FLAT:??_C@_1CAK@KINP@?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?3?$AA?$CF?$AA?4?$AA1?$AAf?$AAm?$AAs?$AA?5?$AA?$CI?$AAs?$AAu?$AAr?$AAf?$AA?$DN?$AA?$CF@ ; `string'
	push	edi
	call	ebx

; 4165 : 
; 4166 : 		for( FPixFormat* Fmt=FirstPixelFormat; Fmt; Fmt=Fmt->Next )

	mov	esi, DWORD PTR [esi+16988]
	add	esp, 136				; 00000088H
	test	esi, esi
	je	SHORT $L126520
	mov	ebp, DWORD PTR __imp_?appStrlen@@YAHPBG@Z
$L126518:

; 4167 : 			appSprintf
; 4168 : 			(
; 4169 : 				Result + appStrlen(Result),
; 4170 : 				TEXT(" Format:%s (Active/Binned Ram:%iK/%iK, textures:%i/%i) sets:%i (uploads:%i, %.1fms)"),
; 4171 : 				Fmt->Desc,
; 4172 : 				Fmt->ActiveRAM/1024,
; 4173 : 				Fmt->BinnedRAM/1024,
; 4174 : 				Fmt->Active,
; 4175 : 				Fmt->Binned,
; 4176 : 				Fmt->Sets,
; 4177 : 				Fmt->Uploads,
; 4178 : 				Fmt->UploadCycles * GSecondsPerCycle * 1000.f
; 4179 : 			);

	fild	DWORD PTR [esi+48]
	mov	ecx, DWORD PTR __imp_?GSecondsPerCycle@@3NA
	mov	edx, DWORD PTR [esi+44]
	mov	eax, DWORD PTR [esi+40]
	fmul	QWORD PTR [ecx]
	mov	ecx, DWORD PTR [esi+20]
	sub	esp, 8
	fmul	QWORD PTR __real@408f400000000000
	fstp	QWORD PTR [esp]
	push	edx
	mov	edx, DWORD PTR [esi+32]
	push	eax
	mov	eax, DWORD PTR [esi+24]
	push	ecx
	push	edx
	cdq
	and	edx, 1023				; 000003ffH
	add	eax, edx
	sar	eax, 10					; 0000000aH
	push	eax
	mov	eax, DWORD PTR [esi+36]
	cdq
	and	edx, 1023				; 000003ffH
	add	eax, edx
	sar	eax, 10					; 0000000aH
	push	eax
	mov	eax, DWORD PTR [esi+12]
	push	eax
	push	OFFSET FLAT:??_C@_1KI@FDIG@?$AA?5?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?1?$AAB@ ; `string'
	push	edi
	call	ebp
	lea	ecx, DWORD PTR [edi+eax*2]
	add	esp, 4
	push	ecx
	call	ebx
	mov	esi, DWORD PTR [esi+8]
	add	esp, 44					; 0000002cH
	test	esi, esi
	jne	SHORT $L126518
$L126520:

; 4180 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetStats@UD3DRenderDevice@@UAIXPAG@Z ENDP		; UD3DRenderDevice::GetStats
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z
_TEXT	SEGMENT
?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z PROC NEAR ; UD3DRenderDevice::ClearZ, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 4183 : 		VALIDATE;
; 4184 : 
; 4185 : 		// Clear only the Z-buffer.
; 4186 : 		Direct3DDevice8->Clear( 0, NULL, D3DCLEAR_ZBUFFER|D3DCLEAR_STENCIL, 0, 1.0, 0 );

	mov	eax, DWORD PTR [ecx+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	1065353216				; 3f800000H
	push	0
	push	6
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+144]

; 4187 : 
; 4188 : 	}

	ret	0
?ClearZ@UD3DRenderDevice@@UAIXPAUFSceneNode@@@Z ENDP	; UD3DRenderDevice::ClearZ
_TEXT	ENDS
PUBLIC	??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
;	COMDAT ??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'h', 00H, '=', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8', 00H, '-', 00H, '>'
	DB	00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'I', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 'S', 00H, 'u'
	DB	00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '(', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 'X', 00H, ',', 00H, ' ', 00H, 'V', 00H
	DB	'i', 00H, 'e', 00H, 'w', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't'
	DB	00H, 'Y', 00H, ',', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H
	DB	'F', 00H, 'M', 00H, 'T', 00H, '_', 00H, 'A', 00H, '8', 00H, 'R'
	DB	00H, '8', 00H, 'G', 00H, '8', 00H, 'B', 00H, '8', 00H, ',', 00H
	DB	' ', 00H, '&', 00H, 'T', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'S'
	DB	00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '%', 00H
	DB	's', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'h', 00H, '=', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8', 00H, '-', 00H, '>'
	DB	00H, 'G', 00H, 'e', 00H, 't', 00H, 'F', 00H, 'r', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, '(', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'm', 00H
	DB	'p', 00H, 'S', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'h', 00H, '=', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8', 00H, '-', 00H, '>'
	DB	00H, 'G', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, '(', 00H, '0', 00H, ',', 00H, ' ', 00H, 'D', 00H, '3', 00H
	DB	'D', 00H, 'B', 00H, 'A', 00H, 'C', 00H, 'K', 00H, 'B', 00H, 'U'
	DB	00H, 'F', 00H, 'F', 00H, 'E', 00H, 'R', 00H, '_', 00H, 'T', 00H
	DB	'Y', 00H, 'P', 00H, 'E', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'N'
	DB	00H, 'O', 00H, ',', 00H, ' ', 00H, '&', 00H, 'T', 00H, 'e', 00H
	DB	'm', 00H, 'p', 00H, 'S', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e'
	DB	00H, 'n', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'r', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'T', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 'S', 00H, 'c'
	DB	00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, 'B', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '-', 00H, '>', 00H, 'L'
	DB	00H, 'o', 00H, 'c', 00H, 'k', 00H, 'R', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '(', 00H, '&', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k'
	DB	00H, 'e', 00H, 'd', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	',', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ',', 00H, 'D'
	DB	00H, '3', 00H, 'D', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'O', 00H, 'N'
	DB	00H, 'L', 00H, 'Y', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z
_TEXT	SEGMENT
_TempScreenBuffer$ = -332
_LockedRect$ = -320
_GammaCorrect$ = -256
_Index$ = -328
_X$ = -344
_Y$ = -348
_Desc$126579 = -288
_rl$126580 = -312
_rr$126581 = -300
_gl$126582 = -304
_gr$126583 = -308
_bl$126584 = -328
_br$126585 = -324
_GBitMask$126588 = -336
_BBitMask$126589 = -340
_BitCount$126590 = -348
_Src$126625 = -352
_Pixels$ = -324
_BackBuffer$ = 8
_Src$126637 = -352
_Extra$126639 = -296
_Src$126651 = -352
?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z PROC NEAR ; UD3DRenderDevice::ReadPixels, COMDAT
; _this$ = ecx
; _Pixels$ = edx

; 4190 : 	{

	sub	esp, 352				; 00000160H

; 4191 : 		VALIDATE;
; 4192 : 
; 4193 : 		IDirect3DSurface8*	TempScreenBuffer;
; 4194 : 	
; 4195 : 		if (!BackBuffer)

	mov	eax, DWORD PTR _BackBuffer$[esp+348]
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx
	test	eax, eax

; 4196 : 		{
; 4197 : 			// Create the temp surface to hold the front buffer
; 4198 : 			D3D_CHECK((h=Direct3DDevice8->CreateImageSurface( ViewportX, ViewportY, D3DFMT_A8R8G8B8, &TempScreenBuffer )));

	mov	eax, DWORD PTR [edi+19124]
	mov	DWORD PTR _Pixels$[esp+368], edx
	jne	$L126527
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _TempScreenBuffer$[esp+368]
	push	edx
	mov	edx, DWORD PTR [edi+16764]
	push	21					; 00000015H
	push	edx
	mov	edx, DWORD PTR [edi+16760]
	push	edx
	push	eax
	call	DWORD PTR [ecx+108]
	test	eax, eax
	mov	ebx, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L126529
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4198					; 00001066H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PM@KNH@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	ebx
	add	esp, 20					; 00000014H
$L126529:

; 4199 : 
; 4200 : 			// Fill the temporary surface with the contents of the front buffer.
; 4201 : 			D3D_CHECK((h=Direct3DDevice8->GetFrontBuffer( TempScreenBuffer )));

	mov	ecx, DWORD PTR _TempScreenBuffer$[esp+368]
	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	eax
	call	DWORD PTR [edx+120]
	test	eax, eax
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	$L126545
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4201					; 00001069H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1KE@NMAC@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'

; 4202 : 		}
; 4203 : 		else

	jmp	SHORT $L145988
$L126527:

; 4204 : 		{
; 4205 : 			EndScene();

	dec	DWORD PTR [edi+675184]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]

; 4206 : 
; 4207 : 			// Get a pointer to the back buffer
; 4208 : 			D3D_CHECK((h=Direct3DDevice8->GetBackBuffer(0, D3DBACKBUFFER_TYPE_MONO, &TempScreenBuffer)));

	mov	eax, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _TempScreenBuffer$[esp+368]
	push	ecx
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+64]
	test	eax, eax
	mov	ebx, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	esi, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L126545
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4208					; 00001070H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	esi
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1NI@LHNJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
$L145988:
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	eax
	call	ebx
	add	esp, 20					; 00000014H
$L126545:

; 4209 : 		}
; 4210 : 
; 4211 : 		// Lock the temporary surface.
; 4212 : 		D3DLOCKED_RECT	LockedRect;
; 4213 : 		memset(&LockedRect,0,sizeof(LockedRect));
; 4214 : 
; 4215 : 		D3D_CHECK((TempScreenBuffer->LockRect(&LockedRect,NULL,D3DLOCK_READONLY)));

	mov	eax, DWORD PTR _TempScreenBuffer$[esp+368]
	xor	ecx, ecx
	mov	DWORD PTR _LockedRect$[esp+368], ecx
	mov	ebp, 16					; 00000010H
	push	ebp
	push	ecx
	mov	DWORD PTR _LockedRect$[esp+380], ecx
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _LockedRect$[esp+376]
	push	ecx
	push	eax
	call	DWORD PTR [edx+36]
	test	eax, eax
	jge	SHORT $L126552
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4215					; 00001077H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	esi
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1LE@BAFJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	ebx
	add	esp, 20					; 00000014H
$L126552:

; 4216 : 
; 4217 : 		// Compute gamma correction.
; 4218 : 		BYTE	GammaCorrect[256];
; 4219 : 		INT		Index;
; 4220 : 
; 4221 : 		if(DeviceCaps8.Caps2 & D3DCAPS2_FULLSCREENGAMMA)

	test	DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+12, 131072 ; 00020000H
	je	SHORT $L126560

; 4222 : 		{
; 4223 : 			//FLOAT Gamma = Viewport->GetOuterUClient()->Gamma;
; 4224 : 			FLOAT Brightness = Viewport->GetOuterUClient()->Brightness;

	mov	ecx, DWORD PTR [edi+48]
	mov	edx, DWORD PTR [ecx+24]
	fld	DWORD PTR [edx+112]

; 4225 : 			//FLOAT Contrast = Viewport->GetOuterUClient()->Contrast;
; 4226 : 
; 4227 : 			if(!Brightness) Brightness=0.01;

	fcom	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L126562
	fstp	ST(0)
	fld	DWORD PTR __real@3c23d70a
$L126562:
	fdivr	QWORD PTR __real@3ff0000000000000

; 4228 : 			for(Index = 0;Index < 256;Index++)

	xor	esi, esi
	mov	DWORD PTR _Index$[esp+368], esi
	fstp	QWORD PTR -296+[esp+368]
$L126563:

; 4229 : 				GammaCorrect[Index] = Clamp<INT>(appPow(Index/255.0,1.0/Brightness)*65535.0,0,65535);

	fild	DWORD PTR _Index$[esp+368]
	fmul	QWORD PTR __real@3f70101010101010
	fld	QWORD PTR -296+[esp+368]
	call	__CIpow
	fmul	QWORD PTR __real@40efffe000000000
	call	__ftol
	test	eax, eax
	jge	SHORT $L145936
	xor	eax, eax
	jmp	SHORT $L145935
$L145936:
	cmp	eax, 65535				; 0000ffffH
	jl	SHORT $L145935
	mov	eax, 65535				; 0000ffffH
$L145935:
	mov	BYTE PTR _GammaCorrect$[esp+esi+368], al
	inc	esi
	cmp	esi, 256				; 00000100H
	mov	DWORD PTR _Index$[esp+368], esi
	jl	SHORT $L126563

; 4230 : 
; 4231 : 				//GammaCorrect[Index] = Clamp<INT>( appRound( (Contrast+0.5f)*appPow(Index/255.f,1.0f/Gamma)*65535.f + (Brightness-0.5f)*32768.f - Contrast*32768.f + 16384.f ) / 256, 0, 255 );
; 4232 : 		}
; 4233 : 		else

	jmp	SHORT $L126574
$L126560:

; 4234 : 		{
; 4235 : 			for(Index = 0;Index < 256;Index++)

	xor	eax, eax

; 4391 : 
; 4392 : 	}

	npad	4
$L126572:

; 4236 : 				GammaCorrect[Index] = Index;

	mov	BYTE PTR _GammaCorrect$[esp+eax+368], al
	inc	eax
	cmp	eax, 256				; 00000100H
	jl	SHORT $L126572
$L126574:

; 4237 : 		}
; 4238 : 		
; 4239 : 
; 4240 : 		// Copy the contents of the temporary surface to the destination.
; 4241 : 		FColor*	Dest = Pixels;
; 4242 : 		INT		X, Y;
; 4243 : 
; 4244 : 		if (BackBuffer)

	mov	eax, DWORD PTR _BackBuffer$[esp+364]
	mov	esi, DWORD PTR _Pixels$[esp+368]

; 4245 : 		{
; 4246 : 			D3DSURFACE_DESC	Desc;
; 4247 : 			DWORD			rl, rr, gl, gr, bl, br, mask;
; 4248 : 			DWORD			RBitMask = 0, GBitMask = 0, BBitMask = 0, BitCount = 0;

	xor	ebx, ebx
	test	eax, eax
	je	$L126578

; 4249 : 			DWORD			R, G, B;
; 4250 : 
; 4251 : 			TempScreenBuffer->GetDesc(&Desc);

	mov	eax, DWORD PTR _TempScreenBuffer$[esp+368]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _Desc$126579[esp+368]
	push	edx
	push	eax
	mov	DWORD PTR _GBitMask$126588[esp+376], ebx
	mov	DWORD PTR _BBitMask$126589[esp+376], ebx
	mov	DWORD PTR _BitCount$126590[esp+376], ebx
	call	DWORD PTR [ecx+32]

; 4252 : 
; 4253 : 			switch (Desc.Format)
; 4254 : 			{

	mov	eax, DWORD PTR _Desc$126579[esp+368]
	add	eax, -20				; ffffffecH
	cmp	eax, 5
	ja	SHORT $L126595
	jmp	DWORD PTR $L145990[eax*4]
$L126598:

; 4255 : 				case D3DFMT_R8G8B8:
; 4256 : 				{
; 4257 : 					RBitMask = 0xff0000;

	mov	ebx, 16711680				; 00ff0000H

; 4258 : 					GBitMask = 0x00ff00;

	mov	DWORD PTR _GBitMask$126588[esp+368], 65280 ; 0000ff00H

; 4259 : 					BBitMask = 0x0000ff;

	mov	DWORD PTR _BBitMask$126589[esp+368], 255 ; 000000ffH

; 4260 : 					BitCount = 24;

	mov	DWORD PTR _BitCount$126590[esp+368], 24	; 00000018H

; 4261 : 					break;

	jmp	SHORT $L126595
$L126599:

; 4262 : 				}
; 4263 : 				case D3DFMT_A8R8G8B8:
; 4264 : 				case D3DFMT_X8R8G8B8:
; 4265 : 				{
; 4266 : 					RBitMask = 0xff0000;

	mov	ebx, 16711680				; 00ff0000H

; 4267 : 					GBitMask = 0x00ff00;

	mov	DWORD PTR _GBitMask$126588[esp+368], 65280 ; 0000ff00H

; 4268 : 					BBitMask = 0x0000ff;

	mov	DWORD PTR _BBitMask$126589[esp+368], 255 ; 000000ffH

; 4269 : 					BitCount = 32;

	mov	DWORD PTR _BitCount$126590[esp+368], 32	; 00000020H

; 4270 : 					break;

	jmp	SHORT $L126595
$L126600:

; 4271 : 				}
; 4272 : 				case D3DFMT_R5G6B5:
; 4273 : 				{
; 4274 : 					RBitMask = (31<<11);

	mov	ebx, 63488				; 0000f800H

; 4275 : 					GBitMask = (63<<5 );

	mov	DWORD PTR _GBitMask$126588[esp+368], 2016 ; 000007e0H

; 4276 : 					BBitMask = (31<<0 );
; 4277 : 					BitCount = 16;
; 4278 : 					break;

	jmp	SHORT $L145989
$L126601:

; 4279 : 				}
; 4280 : 				case D3DFMT_X1R5G5B5:
; 4281 : 				case D3DFMT_A1R5G5B5:
; 4282 : 				{
; 4283 : 					RBitMask = (31<<10);

	mov	ebx, 31744				; 00007c00H

; 4284 : 					GBitMask = (31<<5 );

	mov	DWORD PTR _GBitMask$126588[esp+368], 992 ; 000003e0H
$L145989:

; 4285 : 					BBitMask = (31<<0 );

	mov	DWORD PTR _BBitMask$126589[esp+368], 31	; 0000001fH

; 4286 : 					BitCount = 16;

	mov	DWORD PTR _BitCount$126590[esp+368], ebp
$L126595:

; 4287 : 					break;
; 4288 : 				}
; 4289 : 			}
; 4290 : 
; 4291 : 			// Compute needed bit shifts.
; 4292 : 			for( rr=0, mask=RBitMask; !(mask&1); mask>>=1, ++rr );

	xor	ecx, ecx
	test	bl, 1
	mov	DWORD PTR _rr$126581[esp+368], ecx
	mov	eax, ebx
	jne	SHORT $L126604
$L126602:
	shr	eax, 1
	inc	ecx
	test	al, 1
	je	SHORT $L126602
	mov	DWORD PTR _rr$126581[esp+368], ecx
$L126604:

; 4293 : 			for( rl=8; mask&1; mask>>=1, --rl );

	test	al, 1
	mov	ecx, 8
	mov	DWORD PTR _rl$126580[esp+368], ecx
	je	SHORT $L126607

; 4391 : 
; 4392 : 	}

	npad	6
$L126605:

; 4293 : 			for( rl=8; mask&1; mask>>=1, --rl );

	shr	eax, 1
	dec	ecx
	test	al, 1
	jne	SHORT $L126605
	mov	DWORD PTR _rl$126580[esp+368], ecx
$L126607:

; 4294 : 			for( gr=0, mask=GBitMask; !(mask&1); mask>>=1, ++gr );

	mov	eax, DWORD PTR _GBitMask$126588[esp+368]
	xor	ebp, ebp
	test	al, 1
	mov	DWORD PTR _gr$126583[esp+368], ebp
	jne	SHORT $L126610

; 4391 : 
; 4392 : 	}

	npad	7
$L126608:

; 4294 : 			for( gr=0, mask=GBitMask; !(mask&1); mask>>=1, ++gr );

	shr	eax, 1
	inc	ebp
	test	al, 1
	je	SHORT $L126608
	mov	DWORD PTR _gr$126583[esp+368], ebp
$L126610:

; 4295 : 			for( gl=8; mask&1; mask>>=1, --gl );

	test	al, 1
	mov	ecx, 8
	mov	DWORD PTR _gl$126582[esp+368], ecx
	je	SHORT $L126613
$L126611:
	shr	eax, 1
	dec	ecx
	test	al, 1
	jne	SHORT $L126611
	mov	DWORD PTR _gl$126582[esp+368], ecx
$L126613:

; 4296 : 			for( br=0, mask=BBitMask; !(mask&1); mask>>=1, ++br );

	mov	eax, DWORD PTR _BBitMask$126589[esp+368]
	xor	ebp, ebp
	xor	edx, edx
	test	al, 1
	mov	DWORD PTR _br$126585[esp+368], ebp
	jne	SHORT $L126616
$L126614:
	shr	eax, 1
	inc	ebp
	test	al, 1
	je	SHORT $L126614
	mov	DWORD PTR _br$126585[esp+368], ebp
$L126616:

; 4297 : 			for( bl=8; mask&1; mask>>=1, --bl );

	test	al, 1
	mov	ecx, 8
	mov	DWORD PTR _bl$126584[esp+368], ecx
	je	SHORT $L126619

; 4391 : 
; 4392 : 	}

	npad	5
$L126617:

; 4297 : 			for( bl=8; mask&1; mask>>=1, --bl );

	shr	eax, 1
	dec	ecx
	test	al, 1
	jne	SHORT $L126617
	mov	DWORD PTR _bl$126584[esp+368], ecx
$L126619:

; 4298 : 
; 4299 : 			switch (BitCount)
; 4300 : 			{

	mov	eax, DWORD PTR _BitCount$126590[esp+368]
	cmp	eax, 16					; 00000010H
	je	$L126624
	cmp	eax, 24					; 00000018H
	je	$L126636
	cmp	eax, 32					; 00000020H
	jne	$L126667

; 4342 : 				}
; 4343 : 
; 4344 : 				case 32:
; 4345 : 				{
; 4346 : 					DWORD	*Src = (DWORD*) LockedRect.pBits;

	mov	ecx, DWORD PTR _LockedRect$[esp+372]

; 4347 : 					INT		Extra = (LockedRect.Pitch/sizeof(DWORD)) - ViewportX;

	mov	eax, DWORD PTR [edi+16760]

; 4348 : 				
; 4349 : 					for(Y = 0;Y < ViewportY;Y++)

	mov	edx, DWORD PTR [edi+16764]
	mov	DWORD PTR _Src$126651[esp+368], ecx
	mov	ecx, DWORD PTR _LockedRect$[esp+368]
	shr	ecx, 2
	sub	ecx, eax
	test	edx, edx
	mov	DWORD PTR _Y$[esp+368], 0
	jle	$L126667
	lea	edx, DWORD PTR [ecx*4]
	mov	DWORD PTR -296+[esp+368], edx
$L126655:

; 4350 : 					{
; 4351 : 						for(X = 0;X < ViewportX;X++)

	test	eax, eax
	mov	DWORD PTR _X$[esp+368], 0
	jle	SHORT $L126660

; 4391 : 
; 4392 : 	}

	npad	2
$L126658:

; 4352 : 						{		
; 4353 : 							R = (((*Src) & RBitMask) >> rr) << rl;

	mov	eax, DWORD PTR _Src$126651[esp+368]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _rr$126581[esp+368]
	mov	edx, eax
	and	edx, ebx
	shr	edx, cl
	mov	ecx, DWORD PTR _rl$126580[esp+368]

; 4354 : 							G = (((*Src) & GBitMask) >> gr) << gl;

	mov	ebp, eax

; 4355 : 							B = (((*Src) & BBitMask) >> br) << bl;
; 4356 : 
; 4357 : 							GET_COLOR_DWORD(*Dest++) = (R<<16)|(G<<8)|B;

	add	esi, 4
	shl	edx, cl
	and	ebp, DWORD PTR _GBitMask$126588[esp+368]
	mov	ecx, DWORD PTR _gr$126583[esp+368]
	shr	ebp, cl
	mov	ecx, DWORD PTR _gl$126582[esp+368]
	shl	edx, 8
	shl	ebp, cl
	and	eax, DWORD PTR _BBitMask$126589[esp+368]
	mov	ecx, DWORD PTR _br$126585[esp+368]
	shr	eax, cl
	mov	ecx, DWORD PTR _bl$126584[esp+368]
	or	edx, ebp
	shl	edx, 8
	shl	eax, cl
	mov	ecx, DWORD PTR _X$[esp+368]
	or	edx, eax

; 4358 : 							Src++;

	mov	eax, DWORD PTR _Src$126651[esp+368]
	add	eax, 4
	mov	DWORD PTR [esi-4], edx
	mov	DWORD PTR _Src$126651[esp+368], eax
	mov	eax, DWORD PTR [edi+16760]
	inc	ecx
	cmp	ecx, eax
	mov	DWORD PTR _X$[esp+368], ecx
	jl	SHORT $L126658
$L126660:

; 4359 : 						}
; 4360 : 			
; 4361 : 						Src += Extra;

	mov	ecx, DWORD PTR -296+[esp+368]
	mov	edx, DWORD PTR _Src$126651[esp+368]
	add	edx, ecx
	mov	ecx, DWORD PTR _Y$[esp+368]
	mov	DWORD PTR _Src$126651[esp+368], edx
	mov	edx, DWORD PTR [edi+16764]
	inc	ecx
	cmp	ecx, edx
	mov	DWORD PTR _Y$[esp+368], ecx
	jl	$L126655

; 4362 : 					}
; 4363 : 					break;

	jmp	$L126667
$L126636:

; 4319 : 					}
; 4320 : 					break;
; 4321 : 				}
; 4322 : 				case 24:
; 4323 : 				{
; 4324 : 					char	*Src = (char*) LockedRect.pBits;

	mov	eax, DWORD PTR _LockedRect$[esp+372]
	mov	DWORD PTR _Src$126637[esp+368], eax

; 4325 : 					INT		Extra = (LockedRect.Pitch - ViewportX*3);

	mov	eax, DWORD PTR [edi+16760]
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	ebp, ecx
	mov	ecx, DWORD PTR _LockedRect$[esp+368]
	sub	ecx, ebp

; 4326 : 				
; 4327 : 					for(Y = 0;Y < ViewportY;Y++)

	cmp	DWORD PTR [edi+16764], edx
	mov	DWORD PTR _Extra$126639[esp+368], ecx
	mov	DWORD PTR _Y$[esp+368], edx
	jle	$L126667

; 4391 : 
; 4392 : 	}

	npad	3
$L126640:

; 4328 : 					{
; 4329 : 						for(X = 0;X < ViewportX;X++)

	test	eax, eax
	mov	DWORD PTR _X$[esp+368], 0
	jle	SHORT $L126645

; 4391 : 
; 4392 : 	}

	npad	4
$L126643:

; 4330 : 						{		
; 4331 : 							R = (((*((DWORD*)Src)) & RBitMask) >> rr) << rl;

	mov	edx, DWORD PTR _Src$126637[esp+368]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _rr$126581[esp+368]
	mov	edx, eax
	and	edx, ebx
	shr	edx, cl
	mov	ecx, DWORD PTR _rl$126580[esp+368]

; 4332 : 							G = (((*((DWORD*)Src)) & GBitMask) >> gr) << gl;

	mov	ebp, eax

; 4333 : 							B = (((*((DWORD*)Src)) & BBitMask) >> br) << bl;
; 4334 : 
; 4335 : 							GET_COLOR_DWORD(*Dest++) = (R<<16)|(G<<8)|B;

	add	esi, 4
	shl	edx, cl
	and	ebp, DWORD PTR _GBitMask$126588[esp+368]
	mov	ecx, DWORD PTR _gr$126583[esp+368]
	shr	ebp, cl
	mov	ecx, DWORD PTR _gl$126582[esp+368]
	shl	edx, 8
	shl	ebp, cl
	and	eax, DWORD PTR _BBitMask$126589[esp+368]
	mov	ecx, DWORD PTR _br$126585[esp+368]
	shr	eax, cl
	mov	ecx, DWORD PTR _bl$126584[esp+368]
	or	edx, ebp
	shl	edx, 8
	shl	eax, cl
	mov	ecx, DWORD PTR _X$[esp+368]
	or	edx, eax

; 4336 : 							Src+=3;

	mov	eax, DWORD PTR _Src$126637[esp+368]
	add	eax, 3
	mov	DWORD PTR [esi-4], edx
	mov	DWORD PTR _Src$126637[esp+368], eax
	mov	eax, DWORD PTR [edi+16760]
	inc	ecx
	cmp	ecx, eax
	mov	DWORD PTR _X$[esp+368], ecx
	jl	SHORT $L126643

; 4328 : 					{
; 4329 : 						for(X = 0;X < ViewportX;X++)

	mov	ecx, DWORD PTR _Extra$126639[esp+368]
$L126645:

; 4337 : 						}
; 4338 : 			
; 4339 : 						Src += Extra;

	mov	edx, DWORD PTR _Src$126637[esp+368]
	mov	ebp, DWORD PTR [edi+16764]
	add	edx, ecx
	mov	DWORD PTR _Src$126637[esp+368], edx
	mov	edx, DWORD PTR _Y$[esp+368]
	inc	edx
	cmp	edx, ebp
	mov	DWORD PTR _Y$[esp+368], edx
	jl	$L126640

; 4340 : 					}
; 4341 : 					break;

	jmp	$L126667
$L126624:

; 4301 : 				case 16:
; 4302 : 				{
; 4303 : 					WORD	*Src = (WORD*) LockedRect.pBits;

	mov	eax, DWORD PTR _LockedRect$[esp+372]

; 4304 : 					INT		Extra = (LockedRect.Pitch/sizeof(WORD)) - ViewportX;

	mov	ecx, DWORD PTR _LockedRect$[esp+368]

; 4305 : 				
; 4306 : 					for(Y = 0;Y < ViewportY;Y++)

	mov	ebp, DWORD PTR [edi+16764]
	mov	DWORD PTR _Src$126625[esp+368], eax
	mov	eax, DWORD PTR [edi+16760]
	shr	ecx, 1
	sub	ecx, eax
	cmp	ebp, edx
	mov	DWORD PTR _Y$[esp+368], edx
	jle	$L126667
	add	ecx, ecx
	mov	DWORD PTR -296+[esp+368], ecx

; 4391 : 
; 4392 : 	}

	npad	2

; 4305 : 				
; 4306 : 					for(Y = 0;Y < ViewportY;Y++)

$L126629:

; 4307 : 					{
; 4308 : 						for(X = 0;X < ViewportX;X++)

	test	eax, eax
	mov	DWORD PTR _X$[esp+368], 0
	jle	SHORT $L126634

; 4391 : 
; 4392 : 	}

	npad	4
$L126632:

; 4390 : 			BeginScene();

	mov	edx, DWORD PTR _Src$126625[esp+368]
	mov	ecx, DWORD PTR _rr$126581[esp+368]
	xor	eax, eax
	mov	ax, WORD PTR [edx]
	add	esi, 4
	mov	edx, eax
	and	edx, ebx
	shr	edx, cl
	mov	ecx, DWORD PTR _rl$126580[esp+368]
	mov	ebp, eax
	shl	edx, cl
	and	ebp, DWORD PTR _GBitMask$126588[esp+368]
	mov	ecx, DWORD PTR _gr$126583[esp+368]
	shr	ebp, cl
	mov	ecx, DWORD PTR _gl$126582[esp+368]
	shl	edx, 8
	shl	ebp, cl
	and	eax, DWORD PTR _BBitMask$126589[esp+368]
	mov	ecx, DWORD PTR _br$126585[esp+368]
	shr	eax, cl
	mov	ecx, DWORD PTR _bl$126584[esp+368]
	or	edx, ebp
	shl	edx, 8
	shl	eax, cl
	mov	ecx, DWORD PTR _X$[esp+368]
	or	edx, eax
	mov	eax, DWORD PTR _Src$126625[esp+368]
	add	eax, 2
	mov	DWORD PTR [esi-4], edx
	mov	DWORD PTR _Src$126625[esp+368], eax
	mov	eax, DWORD PTR [edi+16760]
	inc	ecx
	cmp	ecx, eax
	mov	DWORD PTR _X$[esp+368], ecx
	jl	SHORT $L126632
$L126634:

; 4309 : 						{		
; 4310 : 							R = (((*Src) & RBitMask) >> rr) << rl;
; 4311 : 							G = (((*Src) & GBitMask) >> gr) << gl;
; 4312 : 							B = (((*Src) & BBitMask) >> br) << bl;
; 4313 : 
; 4314 : 							GET_COLOR_DWORD(*Dest++) = (R<<16)|(G<<8)|B;
; 4315 : 							Src++;
; 4316 : 						}
; 4317 : 			
; 4318 : 						Src += Extra;

	mov	ecx, DWORD PTR -296+[esp+368]
	mov	edx, DWORD PTR _Src$126625[esp+368]
	add	edx, ecx
	mov	ecx, DWORD PTR _Y$[esp+368]
	mov	DWORD PTR _Src$126625[esp+368], edx
	mov	edx, DWORD PTR [edi+16764]
	inc	ecx
	cmp	ecx, edx
	mov	DWORD PTR _Y$[esp+368], ecx
	jl	$L126629

; 4364 : 				}
; 4365 : 			}
; 4366 : 		}
; 4367 : 		else

	jmp	SHORT $L126667
$L126578:

; 4368 : 		{
; 4369 : 			char*	Src = (char*) LockedRect.pBits;
; 4370 : 
; 4371 : 			for(Y = 0;Y < ViewportY;Y++)

	mov	ecx, DWORD PTR [edi+16764]
	test	ecx, ecx
	mov	eax, DWORD PTR _LockedRect$[esp+372]
	jle	SHORT $L126667
	mov	edx, DWORD PTR [edi+16760]
$L126665:

; 4372 : 			{
; 4373 : 				for(X = 0;X < ViewportX;X++)

	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $L126670

; 4391 : 
; 4392 : 	}

	npad	6
$L126668:

; 4374 : 				{
; 4375 : 					GET_COLOR_DWORD(*Dest++) = *((DWORD*) Src);

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [esi], edx
	mov	edx, DWORD PTR [edi+16760]
	add	esi, 4

; 4376 : 					Src += sizeof(DWORD);

	add	eax, 4
	inc	ecx
	cmp	ecx, edx
	jl	SHORT $L126668
$L126670:

; 4377 : 				}
; 4378 : 			
; 4379 : 				Src += (LockedRect.Pitch - (ViewportX * sizeof(DWORD)));

	mov	edx, DWORD PTR [edi+16760]
	mov	ebp, DWORD PTR _LockedRect$[esp+368]
	lea	ecx, DWORD PTR [edx*4]
	sub	ebp, ecx
	mov	ecx, DWORD PTR [edi+16764]
	add	eax, ebp
	inc	ebx
	cmp	ebx, ecx
	jl	SHORT $L126665
$L126667:

; 4380 : 			}
; 4381 : 		}
; 4382 : 		// Unlock the temporary surface.
; 4383 : 
; 4384 : 		TempScreenBuffer->UnlockRect();

	mov	eax, DWORD PTR _TempScreenBuffer$[esp+368]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+40]

; 4385 : 
; 4386 : 		// Release the temporary surface.
; 4387 : 		SafeRelease(TempScreenBuffer);

	mov	eax, DWORD PTR _TempScreenBuffer$[esp+368]
	test	eax, eax
	je	SHORT $L145942
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR _TempScreenBuffer$[esp+368], 0
$L145942:

; 4388 : 
; 4389 : 		if (BackBuffer)

	mov	eax, DWORD PTR _BackBuffer$[esp+364]
	test	eax, eax
	je	SHORT $L145946

; 4390 : 			BeginScene();

	inc	DWORD PTR [edi+675184]
	mov	edi, DWORD PTR [edi+19124]
	mov	edx, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [edx+136]
$L145946:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 4391 : 
; 4392 : 	}

	add	esp, 352				; 00000160H
	ret	4
	npad	2
$L145990:
	DD	$L126598
	DD	$L126599
	DD	$L126599
	DD	$L126600
	DD	$L126601
	DD	$L126601
?ReadPixels@UD3DRenderDevice@@UAIXPAVFColor@@H@Z ENDP	; UD3DRenderDevice::ReadPixels
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?EndFlash@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT
_D3DColor$126687 = -176
$T145998 = -160
_Vertices$126696 = -144
$T146046 = -164
$T146053 = -168
$T146071 = -180
$T146089 = -180
$T146107 = -180
_I$146113 = -180
_I$146123 = -168
_I$146133 = -168
_I$146143 = -168
?EndFlash@UD3DRenderDevice@@UAIXXZ PROC NEAR		; UD3DRenderDevice::EndFlash, COMDAT
; _this$ = ecx

; 4394 : 	{

	sub	esp, 180				; 000000b4H
	push	esi
	mov	esi, ecx

; 4395 : 		VALIDATE;
; 4396 : 
; 4397 : 		if( FlashScale!=FVector(.5f,.5f,.5f) || FlashFog!=FVector(0,0,0) )

	mov	ecx, DWORD PTR [esi+19580]
	mov	eax, 1056964608				; 3f000000H
	cmp	ecx, eax
	jne	SHORT $L146024
	cmp	DWORD PTR [esi+19584], eax
	jne	SHORT $L146024
	cmp	DWORD PTR [esi+19588], eax
	jne	SHORT $L146024
	fld	DWORD PTR [esi+19592]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L146024
	fld	DWORD PTR [esi+19596]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L146024
	fld	DWORD PTR [esi+19600]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L146024
	fld	DWORD PTR [esi+19604]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L146024
	fld	DWORD PTR [esi+19608]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	$L126685
$L146024:

; 4398 : 		{
; 4399 : 			// Set up color.
; 4400 : 			FColor	 D3DColor = FColor(FPlane(FlashFog.X,FlashFog.Y,FlashFog.Z,Min(FlashScale.X*2.f,1.f)));					

	fld	DWORD PTR [esi+19580]
	fadd	ST(0), ST(0)
	fcom	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $L146032
	fstp	DWORD PTR $T146046[esp+184]
	jmp	SHORT $L146033
$L146032:
	fstp	ST(0)
	mov	DWORD PTR $T146046[esp+184], 1065353216	; 3f800000H
$L146033:
	fld	DWORD PTR [esi+19596]
	push	ebx
	fld	DWORD PTR [esi+19600]
	fstp	DWORD PTR $T145998[esp+192]
	fld	DWORD PTR [esi+19604]
	fstp	DWORD PTR $T145998[esp+196]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T146053[esp+188]
	fld	DWORD PTR $T146053[esp+188]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$146113[esp+188]
	mov	eax, DWORD PTR _I$146113[esp+188]
	test	eax, eax
	mov	ebx, 255				; 000000ffH
	jge	SHORT $L146119
	mov	BYTE PTR _D3DColor$126687[esp+188], 0
	jmp	SHORT $L146118
$L146119:
	cmp	eax, ebx
	mov	BYTE PTR _D3DColor$126687[esp+188], al
	jl	SHORT $L146118
	mov	BYTE PTR _D3DColor$126687[esp+188], bl
$L146118:
	fld	DWORD PTR $T145998[esp+192]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T146071[esp+188]
	fld	DWORD PTR $T146071[esp+188]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$146123[esp+188]
	mov	eax, DWORD PTR _I$146123[esp+188]
	test	eax, eax
	jge	SHORT $L146129
	mov	BYTE PTR _D3DColor$126687[esp+189], 0
	jmp	SHORT $L146128
$L146129:
	cmp	eax, ebx
	mov	BYTE PTR _D3DColor$126687[esp+189], al
	jl	SHORT $L146128
	mov	BYTE PTR _D3DColor$126687[esp+189], bl
$L146128:
	fld	DWORD PTR $T145998[esp+196]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T146089[esp+188]
	fld	DWORD PTR $T146089[esp+188]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$146133[esp+188]
	mov	eax, DWORD PTR _I$146133[esp+188]
	test	eax, eax
	jge	SHORT $L146139
	mov	BYTE PTR _D3DColor$126687[esp+190], 0
	jmp	SHORT $L146138
$L146139:
	cmp	eax, ebx
	mov	BYTE PTR _D3DColor$126687[esp+190], al
	jl	SHORT $L146138
	mov	BYTE PTR _D3DColor$126687[esp+190], bl
$L146138:
	fld	DWORD PTR $T146046[esp+188]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T146107[esp+188]
	fld	DWORD PTR $T146107[esp+188]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$146143[esp+188]
	mov	eax, DWORD PTR _I$146143[esp+188]
	push	ebx
	push	0
	push	eax
	call	?Clamp@@YAHHHH@Z			; Clamp

; 4401 : 			D3DCOLOR Color    = D3DCOLOR_RGBA(D3DColor.R, D3DColor.G, D3DColor.B, D3DColor.A);
; 4402 : 
; 4403 : 			// Initialize vertex array
; 4404 : 			FD3DScreenVertex Vertices[4];
; 4405 : 
; 4406 : 			Vertices[0].Position.X = 0;
; 4407 : 			Vertices[0].Position.Y = 0;
; 4408 : 			Vertices[0].Position.W = 0.5f;
; 4409 : 			Vertices[0].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * 0.5f;

	fld	DWORD PTR [esi+19508]
	fmul	DWORD PTR __real@3f000000
	mov	BYTE PTR _D3DColor$126687[esp+203], al
	mov	eax, DWORD PTR _D3DColor$126687[esp+203]
	mov	ecx, DWORD PTR _D3DColor$126687[esp+200]
	fadd	DWORD PTR [esi+19492]
	mov	edx, DWORD PTR _D3DColor$126687[esp+201]
	and	eax, ebx
	and	ecx, ebx
	shl	eax, 8
	fst	DWORD PTR _Vertices$126696[esp+208]
	or	eax, ecx
	mov	ecx, DWORD PTR _D3DColor$126687[esp+202]
	shl	eax, 8
	and	edx, ebx
	or	eax, edx
	and	ecx, ebx
	shl	eax, 8
	or	eax, ecx

; 4410 : 			GET_COLOR_DWORD(Vertices[0].Color) = Color;
; 4411 : 
; 4412 : 			Vertices[1].Position.X = 0;
; 4413 : 			Vertices[1].Position.Y = Viewport->SizeY;

	mov	ecx, DWORD PTR [esi+48]
	mov	DWORD PTR _Vertices$126696[esp+200], 0
	mov	DWORD PTR _Vertices$126696[esp+204], 0
	mov	DWORD PTR _Vertices$126696[esp+212], 1056964608 ; 3f000000H
	mov	DWORD PTR _Vertices$126696[esp+216], eax
	mov	DWORD PTR _Vertices$126696[esp+236], 0
	fild	DWORD PTR [ecx+116]

; 4414 : 			Vertices[1].Position.W = 0.5f;

	mov	DWORD PTR _Vertices$126696[esp+248], 1056964608 ; 3f000000H

; 4415 : 			Vertices[1].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * 0.5f;
; 4416 : 			GET_COLOR_DWORD(Vertices[1].Color) = Color;

	mov	DWORD PTR _Vertices$126696[esp+252], eax
	fstp	DWORD PTR _Vertices$126696[esp+240]
	add	esp, 12					; 0000000cH

; 4417 : 
; 4418 : 			Vertices[2].Position.X = Viewport->SizeX;
; 4419 : 			Vertices[2].Position.Y = Viewport->SizeY;
; 4420 : 			Vertices[2].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * 0.5f;
; 4421 : 			Vertices[2].Position.W = 0.5f;
; 4422 : 			GET_COLOR_DWORD(Vertices[2].Color) = Color;
; 4423 : 
; 4424 : 			Vertices[3].Position.X = Viewport->SizeX;
; 4425 : 			Vertices[3].Position.Y = 0;
; 4426 : 			Vertices[3].Position.W = 0.5f;
; 4427 : 			Vertices[3].Position.Z = ProjectionMatrix._33 + ProjectionMatrix._43 * 0.5f;
; 4428 : 			GET_COLOR_DWORD(Vertices[3].Color) = Color;			
; 4429 : 
; 4430 : 			
; 4431 : 			// Draw it.
; 4432 : 			SetBlending( PF_Translucent| PF_NoOcclude | PF_TwoSided, PFX_Clip );

	mov	ebx, 2
	fst	DWORD PTR _Vertices$126696[esp+232]
	push	ebx
	fild	DWORD PTR [ecx+112]
	mov	edx, 327				; 00000147H
	fstp	DWORD PTR _Vertices$126696[esp+264]
	fild	DWORD PTR [ecx+116]
	mov	DWORD PTR _Vertices$126696[esp+276], 1056964608 ; 3f000000H
	mov	DWORD PTR _Vertices$126696[esp+280], eax
	fstp	DWORD PTR _Vertices$126696[esp+268]
	fst	DWORD PTR _Vertices$126696[esp+272]
	fild	DWORD PTR [ecx+112]
	mov	ecx, esi
	mov	DWORD PTR _Vertices$126696[esp+304], 0
	mov	DWORD PTR _Vertices$126696[esp+312], 1056964608 ; 3f000000H
	fstp	DWORD PTR _Vertices$126696[esp+300]
	mov	DWORD PTR _Vertices$126696[esp+316], eax
	fstp	DWORD PTR _Vertices$126696[esp+308]
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 4433 : 			//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4434 : 			//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );			
; 4435 : 			//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_SRCALPHA );
; 4436 : 			SetAlphaBlendEnable(TRUE);

	mov	eax, DWORD PTR [esi+675176]
	cmp	eax, 1
	jne	SHORT $L146186
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146185
$L146186:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], 1
$L146185:

; 4437 : 			SetSrcBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675168], ebx
	jne	SHORT $L146194
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146192
$L146194:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], ebx
$L146192:

; 4438 : 			SetDstBlend(D3DBLEND_SRCALPHA);

	cmp	DWORD PTR [esi+675172], 5
	jne	SHORT $L146203
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146201
$L146203:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675172], 5
$L146201:

; 4439 : 
; 4440 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_DISABLE ); // v 0.4

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 4441 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2 );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4442 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_ALWAYS );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]

; 4443 : 
; 4444 : 			Direct3DDevice8->SetVertexShader( FD3DScreenVertex::FVF );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	580					; 00000244H
	push	eax
	call	DWORD PTR [edx+304]

; 4445 : 			Direct3DDevice8->DrawPrimitiveUP( D3DPT_TRIANGLEFAN, 2, Vertices, sizeof(FD3DScreenVertex) );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	36					; 00000024H
	lea	edx, DWORD PTR _Vertices$126696[esp+192]
	push	edx
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [ecx+288]

; 4446 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 4447 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4448 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC, D3DCMP_LESSEQUAL );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [ecx+200]

; 4449 : 			SetBlending();

	push	0
	xor	edx, edx
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	pop	ebx
$L126685:
	pop	esi

; 4450 : 		}
; 4451 : 	}

	add	esp, 180				; 000000b4H
	ret	0
?EndFlash@UD3DRenderDevice@@UAIXXZ ENDP			; UD3DRenderDevice::EndFlash
_TEXT	ENDS
PUBLIC	__real@41800000
;	COMDAT __real@41800000
; File ..\..\Core\Inc\UnTemplate.h
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
CONST	ENDS
;	COMDAT ?SetZBias@UD3DRenderDevice@@QAIMM@Z
_TEXT	SEGMENT
_NewZBias$ = 8
_FormerZBias$ = -4
?SetZBias@UD3DRenderDevice@@QAIMM@Z PROC NEAR		; UD3DRenderDevice::SetZBias, COMDAT
; _this$ = ecx

; 4457 : 	{

	push	ecx

; 4458 : 		VALIDATE;
; 4459 : 
; 4460 : 		float FormerZBias=ZBias;
; 4461 : 
; 4462 : 		NewZBias=Clamp(NewZBias,0.f,16.f);

	fld	DWORD PTR _NewZBias$[esp]
	mov	eax, DWORD PTR [ecx+675164]
	fcomp	DWORD PTR __real@00000000
	mov	DWORD PTR _FormerZBias$[esp+4], eax
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L146224
	mov	DWORD PTR _NewZBias$[esp], 0
	jmp	SHORT $L146223
$L146224:
	fld	DWORD PTR _NewZBias$[esp]
	fcomp	DWORD PTR __real@41800000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $L146223
	mov	DWORD PTR _NewZBias$[esp], 1098907648	; 41800000H
$L146223:

; 4463 : 		if(ZBias!=NewZBias || !CacheBlending)

	fld	DWORD PTR [ecx+675164]
	fcomp	DWORD PTR _NewZBias$[esp]
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $L126712
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146228
$L126712:

; 4464 : 		{
; 4465 : 			ZBias=NewZBias;

	mov	edx, DWORD PTR _NewZBias$[esp]

; 4466 : 			Direct3DDevice8->SetRenderState(D3DRS_ZBIAS,ZBias);

	fld	DWORD PTR _NewZBias$[esp]
	push	esi
	mov	esi, DWORD PTR [ecx+19124]
	mov	DWORD PTR [ecx+675164], edx
	push	edi
	mov	edi, DWORD PTR [esi]
	call	__ftol
	push	eax
	push	47					; 0000002fH
	push	esi
	call	DWORD PTR [edi+200]
	pop	edi
	pop	esi
$L146228:

; 4467 : 		}
; 4468 : 
; 4469 : 		return FormerZBias;

	fld	DWORD PTR _FormerZBias$[esp+4]

; 4470 : 	}

	pop	ecx
	ret	4
?SetZBias@UD3DRenderDevice@@QAIMM@Z ENDP		; UD3DRenderDevice::SetZBias
_TEXT	ENDS
PUBLIC	??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@ ; `string'
;	COMDAT ??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@
_DATA	SEGMENT
??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@ DB '('
	DB	'NewSrcBlend>0)&&(NewSrcBlend<=D3DBLEND_BOTHINVSRCALPHA)', 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z
_TEXT	SEGMENT
?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z PROC NEAR ; UD3DRenderDevice::SetSrcBlend, COMDAT
; _this$ = ecx
; _NewSrcBlend$ = edx

; 4473 : 	{

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 4474 : 		D3DBLEND FormerSrcBlend=SrcBlend;

	mov	ebx, DWORD PTR [edi+675168]
	mov	esi, edx

; 4475 : 
; 4476 : 		if(NewSrcBlend!=FormerSrcBlend || !CacheBlending)

	cmp	esi, ebx
	jne	SHORT $L126717
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146232
$L126717:

; 4477 : 		{
; 4478 : 			check((NewSrcBlend>0)&&(NewSrcBlend<=D3DBLEND_BOTHINVSRCALPHA));

	test	esi, esi
	jle	SHORT $L126719
	cmp	esi, 13					; 0000000dH
	jle	SHORT $L126718
$L126719:
	push	4478					; 0000117eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0DJ@JEFN@?$CINewSrcBlend?$DO0?$CJ?$CG?$CG?$CINewSrcBlend?$DM?$DND@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126718:

; 4479 : 			Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND,  NewSrcBlend );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]

; 4480 : 			SrcBlend=NewSrcBlend;

	mov	DWORD PTR [edi+675168], esi
$L146232:
	pop	edi
	pop	esi

; 4481 : 		}
; 4482 : 
; 4483 : 		return FormerSrcBlend;

	mov	eax, ebx
	pop	ebx

; 4484 : 	}

	ret	0
?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ENDP ; UD3DRenderDevice::SetSrcBlend
_TEXT	ENDS
PUBLIC	??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@ ; `string'
;	COMDAT ??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@
_DATA	SEGMENT
??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@ DB '('
	DB	'NewDstBlend>0)&&(NewDstBlend<=D3DBLEND_BOTHINVSRCALPHA)', 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z
_TEXT	SEGMENT
?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z PROC NEAR ; UD3DRenderDevice::SetDstBlend, COMDAT
; _this$ = ecx
; _NewDstBlend$ = edx

; 4487 : 	{

	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 4488 : 		D3DBLEND FormerDstBlend=DstBlend;

	mov	ebx, DWORD PTR [edi+675172]
	mov	esi, edx

; 4489 : 
; 4490 : 		if(NewDstBlend!=FormerDstBlend || !CacheBlending)

	cmp	esi, ebx
	jne	SHORT $L126725
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146236
$L126725:

; 4491 : 		{
; 4492 : 			check((NewDstBlend>0)&&(NewDstBlend<=D3DBLEND_BOTHINVSRCALPHA));

	test	esi, esi
	jle	SHORT $L126727
	cmp	esi, 13					; 0000000dH
	jle	SHORT $L126726
$L126727:
	push	4492					; 0000118cH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0DJ@CJG@?$CINewDstBlend?$DO0?$CJ?$CG?$CG?$CINewDstBlend?$DM?$DND@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126726:

; 4493 : 			Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND,  NewDstBlend );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [ecx+200]

; 4494 : 			DstBlend=NewDstBlend;

	mov	DWORD PTR [edi+675172], esi
$L146236:
	pop	edi
	pop	esi

; 4495 : 		}
; 4496 : 
; 4497 : 		return FormerDstBlend;

	mov	eax, ebx
	pop	ebx

; 4498 : 	}

	ret	0
?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ENDP ; UD3DRenderDevice::SetDstBlend
_TEXT	ENDS
PUBLIC	??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@ ; `string'
;	COMDAT ??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@
_DATA	SEGMENT
??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@ DB '('
	DB	'NewAlphaBlendEnable==TRUE)||(NewAlphaBlendEnable==FALSE)', 00H ; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z
_TEXT	SEGMENT
?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z PROC NEAR ; UD3DRenderDevice::SetAlphaBlendEnable, COMDAT
; _this$ = ecx
; _NewAlphaBlendEnable$ = edx

; 4501 : 	{

	push	ebx
	push	esi
	push	edi
	mov	esi, edx

; 4502 : 		INT FormerAlphaBlendEnable=AlphaBlendEnable;
; 4503 : 		check((NewAlphaBlendEnable==TRUE)||(NewAlphaBlendEnable==FALSE));

	cmp	esi, 1
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+675176]
	je	SHORT $L126732
	test	esi, esi
	je	SHORT $L126732
	push	4503					; 00001197H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0DK@OOPG@?$CINewAlphaBlendEnable?$DN?$DNTRUE?$CJ?$HM?$HM?$CINe@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126732:

; 4504 : 		if(NewAlphaBlendEnable!=FormerAlphaBlendEnable || !CacheBlending )

	cmp	esi, ebx
	jne	SHORT $L126735
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146240
$L126735:

; 4505 : 		{
; 4506 : 			Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, NewAlphaBlendEnable );

	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]

; 4507 : 			AlphaBlendEnable=NewAlphaBlendEnable;

	mov	DWORD PTR [edi+675176], esi
$L146240:
	pop	edi
	pop	esi

; 4508 : 		}
; 4509 : 
; 4510 : 		return FormerAlphaBlendEnable;

	mov	eax, ebx
	pop	ebx

; 4511 : 	}

	ret	0
?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ENDP	; UD3DRenderDevice::SetAlphaBlendEnable
_TEXT	ENDS
PUBLIC	?BeginScene@UD3DRenderDevice@@QAIJXZ		; UD3DRenderDevice::BeginScene
; Function compile flags: /Ogty
;	COMDAT ?BeginScene@UD3DRenderDevice@@QAIJXZ
_TEXT	SEGMENT
?BeginScene@UD3DRenderDevice@@QAIJXZ PROC NEAR		; UD3DRenderDevice::BeginScene, COMDAT
; _this$ = ecx

; 4515 : 		BeginSceneCount++;

	inc	DWORD PTR [ecx+675184]

; 4516 : 		//check(BeginSceneCount==1);
; 4517 : 
; 4518 : 		return Direct3DDevice8->BeginScene();

	mov	ecx, DWORD PTR [ecx+19124]
	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+136]

; 4519 : 	}

	ret	0
?BeginScene@UD3DRenderDevice@@QAIJXZ ENDP		; UD3DRenderDevice::BeginScene
_TEXT	ENDS
PUBLIC	?EndScene@UD3DRenderDevice@@QAIJXZ		; UD3DRenderDevice::EndScene
; Function compile flags: /Ogty
;	COMDAT ?EndScene@UD3DRenderDevice@@QAIJXZ
_TEXT	SEGMENT
?EndScene@UD3DRenderDevice@@QAIJXZ PROC NEAR		; UD3DRenderDevice::EndScene, COMDAT
; _this$ = ecx

; 4523 : 		BeginSceneCount--;

	dec	DWORD PTR [ecx+675184]

; 4524 : 		//check(BeginSceneCount==0);
; 4525 : 
; 4526 : 		return Direct3DDevice8->EndScene();

	mov	ecx, DWORD PTR [ecx+19124]
	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+140]

; 4527 : 	}

	ret	0
?EndScene@UD3DRenderDevice@@QAIJXZ ENDP			; UD3DRenderDevice::EndScene
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SetBlending@UD3DRenderDevice@@QAIXKK@Z
_TEXT	SEGMENT
_PolyFlags$ = -8
_PolyFlagsEx$ = 8
_Xor$ = -4
?SetBlending@UD3DRenderDevice@@QAIXKK@Z PROC NEAR	; UD3DRenderDevice::SetBlending, COMDAT
; _this$ = ecx
; _PolyFlags$ = edx

; 4534 : 	{

	sub	esp, 8
	push	ebx
	push	ebp

; 4535 : 		VALIDATE;
; 4536 : 
; 4537 : 		//if(!GIsEditor) PolyFlags&=~PF_Selected;
; 4538 : 		// Adjust PolyFlags according to Unreal's precedence rules.
; 4539 : 		// Allows gouraud-polygonal fog only if specular is supported (1-pass fogging).
; 4540 : 		if( (PolyFlags & (PF_RenderFog|PF_Translucent|PF_Modulated))!=PF_RenderFog || !UseVertexSpecular )

	mov	eax, edx
	push	esi
	and	eax, 1073741892				; 40000044H
	cmp	eax, 1073741824				; 40000000H
	push	edi
	mov	DWORD PTR _PolyFlags$[esp+24], edx
	mov	esi, ecx
	jne	SHORT $L126743
	mov	eax, DWORD PTR [esi+19148]
	test	eax, eax
	jne	SHORT $L126742
$L126743:

; 4541 : 			PolyFlags &= ~PF_RenderFog;

	and	edx, -1073741825			; bfffffffH
	mov	DWORD PTR _PolyFlags$[esp+24], edx
$L126742:

; 4542 : 
; 4543 : 		if( (!(PolyFlags & (PF_Translucent|PF_Modulated))&&(!(PolyFlagsEx & (PFX_AlphaMap|PFX_LightenModulate|PFX_DarkenModulate|PFX_Translucent2)))) )

	test	dl, 68					; 00000044H
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
	jne	SHORT $L126744
	test	al, 113					; 00000071H
	jne	SHORT $L126744

; 4544 : 			PolyFlags |= PF_Occlude;

	or	edx, -2147483648			; 80000000H

; 4545 : 		else if( PolyFlags & PF_Translucent )

	jmp	SHORT $L146478
$L126744:
	test	dl, 4
	je	SHORT $L126746

; 4546 : 			PolyFlags &= ~PF_Masked;

	and	edx, -3					; fffffffdH
$L146478:
	mov	DWORD PTR _PolyFlags$[esp+24], edx
$L126746:

; 4547 : 
; 4548 : 		// Detect changes in the blending modes.
; 4549 : 		DWORD Xor   = CurrentPolyFlags   ^ PolyFlags;

	mov	ecx, DWORD PTR [esi+19616]

; 4550 : 		DWORD XorEx = CurrentPolyFlagsEx ^ PolyFlagsEx;

	mov	ebx, DWORD PTR [esi+19620]
	xor	ecx, edx
	xor	ebx, eax

; 4551 : 		// Adjust Cull Mode based on 'two sided flag*
; 4552 : 		if(Xor&PF_TwoSided)

	test	ch, 1
	mov	DWORD PTR _Xor$[esp+24], ecx
	je	SHORT $L126749

; 4553 : 		{
; 4554 : 			Direct3DDevice8->SetRenderState( D3DRS_CULLMODE,(PolyFlags&PF_TwoSided)?D3DCULL_NONE:D3DCULL_CCW);

	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	not	edx
	and	edx, 256				; 00000100H
	or	edx, 128				; 00000080H
	shr	edx, 7
	push	edx
	push	22					; 00000016H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L126749:

; 4555 : 		}
; 4556 : 
; 4557 : 		if(XorEx&PFX_Clip)

	test	bl, 2
	mov	edi, 1
	je	SHORT $L126750

; 4558 : 		{
; 4559 : 			Direct3DDevice8->SetRenderState( D3DRS_CLIPPING, (bool)(PolyFlagsEx&PFX_Clip));

	mov	edx, DWORD PTR _PolyFlagsEx$[esp+20]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	shr	edx, 1
	and	edx, edi
	push	edx
	push	136					; 00000088H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L126750:

; 4560 : 		}
; 4561 : 
; 4562 : 		if(XorEx&PFX_FlatShade)

	test	bl, 8
	mov	ebp, 9
	je	SHORT $L126752

; 4563 : 		{
; 4564 : 			Direct3DDevice8->SetRenderState( D3DRS_SHADEMODE, (PolyFlagsEx&PFX_FlatShade)?D3DSHADE_FLAT:D3DSHADE_GOURAUD );

	mov	edx, DWORD PTR _PolyFlagsEx$[esp+20]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	and	dl, 8
	neg	dl
	sbb	edx, edx
	add	edx, 2
	push	edx
	push	ebp
	push	eax
	call	DWORD PTR [ecx+200]
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L126752:

; 4565 : 		}
; 4566 : 
; 4567 : 		if( (Xor  & (PF_Translucent|PF_Modulated|PF_Invisible|PF_Occlude|PF_Masked|PF_Highlighted|PF_NoSmooth|PF_RenderFog|PF_Memorized|PF_Selected)) 
; 4568 : 		  ||(XorEx& (PFX_AlphaMap|PFX_LightenModulate|PFX_DarkenModulate|PFX_Translucent2)))

	test	DWORD PTR _Xor$[esp+24], -754972601	; d3000847H
	jne	SHORT $L126754
	test	bl, 113					; 00000071H
	je	$L126790
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L126754:

; 4569 : 		{
; 4570 : 			if( Xor&(PF_Invisible|PF_Translucent|PF_Modulated|PF_Highlighted) || (XorEx&(PFX_AlphaMap|PFX_LightenModulate|PFX_DarkenModulate|PFX_Translucent2)))

	test	DWORD PTR _Xor$[esp+24], 268435525	; 10000045H
	jne	SHORT $L126756
	test	bl, 113					; 00000071H
	je	$L126776
$L126756:

; 4571 : 			{
; 4572 : 				if ((XorEx & PFX_AlphaMap) && (!(PolyFlagsEx & PFX_AlphaMap)))

	test	bl, 1
	je	SHORT $L126757
	test	al, 1
	jne	SHORT $L126757

; 4573 : 				{
; 4574 : 					if (UseTrilinear)

	mov	eax, DWORD PTR [esi+19128]
	test	eax, eax

; 4575 : 						Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPFILTER , D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L126758
	mov	ecx, DWORD PTR [eax]
	push	2
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 4576 : 					else

	jmp	SHORT $L126759
$L126758:

; 4577 : 						Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPFILTER , D3DTEXF_POINT  );

	mov	edx, DWORD PTR [eax]
	push	edi
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [edx+252]
$L126759:

; 4578 : 					
; 4579 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAREF, 127);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]

; 4580 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHATESTENABLE, FALSE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]
	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
$L126757:

; 4581 : 				}
; 4582 : 
; 4583 : 				if( !(PolyFlags & (PF_Invisible|PF_Translucent|PF_Modulated|PF_Highlighted)) && !(PolyFlagsEx & (PFX_AlphaMap|PFX_LightenModulate|PFX_DarkenModulate|PFX_Translucent2)))

	test	edx, 268435525				; 10000045H
	jne	SHORT $L126760
	test	al, 113					; 00000071H
	jne	SHORT $L126760

; 4584 : 				{
; 4585 : 					SetAlphaBlendEnable(FALSE);

	mov	eax, DWORD PTR [esi+675176]
	test	eax, eax
	jne	SHORT $L146255
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L126776
$L146255:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], 0

; 4586 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, FALSE );
; 4587 : 				}
; 4588 : 				else if( PolyFlagsEx & PFX_Translucent2)

	jmp	$L126776
$L126760:
	test	al, 64					; 00000040H
	je	$L126762

; 4589 : 				{
; 4590 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4591 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, Src);
; 4592 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, Dst );
; 4593 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L146263
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146262
$L146263:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], edi
$L146262:

; 4594 : 					SetSrcBlend(D3DBLEND_SRCALPHA);

	cmp	DWORD PTR [esi+675168], 5
	jne	SHORT $L146271
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146269
$L146271:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], 5
$L146269:

; 4595 : 					SetDstBlend(D3DBLEND_INVSRCCOLOR);

	cmp	DWORD PTR [esi+675172], 4
	jne	SHORT $L146280
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L126776
$L146280:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	4
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675172], 4

; 4596 : 				}
; 4597 : 				else if( PolyFlags & PF_Invisible )

	jmp	$L126776
$L126762:
	test	dl, 1
	je	$L126764

; 4598 : 				{
; 4599 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4600 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ZERO );
; 4601 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
; 4602 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L146289
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146288
$L146289:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], edi
$L146288:

; 4603 : 					SetSrcBlend(D3DBLEND_ZERO);

	cmp	DWORD PTR [esi+675168], edi
	jne	SHORT $L146297
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146295
$L146297:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675168], edi
$L146295:

; 4604 : 					SetDstBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675172], 2
	jne	SHORT $L146306
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L126776
$L146306:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675172], 2

; 4605 : 				}
; 4606 : 				else if(PolyFlagsEx &PFX_DarkenModulate )

	jmp	$L126776
$L126764:
	test	al, 32					; 00000020H
	je	$L126766

; 4607 : 				{
; 4608 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4609 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, 1  );
; 4610 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, 3  );
; 4611 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L146316
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146315
$L146316:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], edi
$L146315:

; 4612 : 					SetSrcBlend(D3DBLEND_ZERO);

	cmp	DWORD PTR [esi+675168], edi
	jne	SHORT $L146324
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146322
$L146324:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], edi
$L146322:

; 4613 : 					SetDstBlend(D3DBLEND_SRCCOLOR);

	cmp	DWORD PTR [esi+675172], 3
	jne	SHORT $L146333
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L126776
$L146333:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	3
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675172], 3

; 4614 : 				}
; 4615 : 				else if( PolyFlagsEx & PFX_LightenModulate )

	jmp	$L126776
$L126766:
	test	al, 16					; 00000010H
	je	SHORT $L126768

; 4616 : 				{
; 4617 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4618 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, 2  );
; 4619 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, 2  );
; 4620 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L146342
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146341
$L146342:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], edi
$L146341:

; 4621 : 					SetSrcBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675168], 2
	jne	SHORT $L146350
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L146295
$L146350:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675168], 2

; 4622 : 					SetDstBlend(D3DBLEND_ONE);
; 4623 : 				} 
; 4624 : 				else if( PolyFlags & PF_Translucent )

	jmp	$L146295
$L126768:
	test	dl, 4
	je	SHORT $L126770

; 4625 : 				{
; 4626 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4627 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
; 4628 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCCOLOR );
; 4629 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L146368
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146367
$L146368:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], edi
$L146367:

; 4630 : 					SetSrcBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675168], 2
	jne	SHORT $L146376
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L146269
$L146376:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], 2

; 4631 : 					SetDstBlend(D3DBLEND_INVSRCCOLOR);
; 4632 : 				}
; 4633 : 				else if( PolyFlags & PF_Modulated )

	jmp	$L146269
$L126770:
	test	dl, 64					; 00000040H
	je	$L126772

; 4634 : 				{
; 4635 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4636 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_DESTCOLOR );
; 4637 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_SRCCOLOR );
; 4638 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L146394
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146393
$L146394:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], edi
$L146393:

; 4639 : 					SetSrcBlend(D3DBLEND_DESTCOLOR);

	cmp	DWORD PTR [esi+675168], ebp
	jne	SHORT $L146402
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146400
$L146402:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebp
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675168], ebp
$L146400:

; 4640 : 					SetDstBlend(D3DBLEND_SRCCOLOR);

	cmp	DWORD PTR [esi+675172], 3
	jne	SHORT $L146411
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L126776
$L146411:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675172], 3

; 4641 : 				}
; 4642 : 				else if( PolyFlags & PF_Highlighted )

	jmp	$L126776
$L126772:
	test	edx, 268435456				; 10000000H
	je	$L126774

; 4643 : 				{
; 4644 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );
; 4645 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ONE );
; 4646 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA );
; 4647 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L146420
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146419
$L146420:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675176], edi
$L146419:

; 4648 : 					SetSrcBlend(D3DBLEND_ONE);

	cmp	DWORD PTR [esi+675168], 2
	jne	SHORT $L146428
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146426
$L146428:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675168], 2
$L146426:

; 4649 : 					SetDstBlend(D3DBLEND_INVSRCALPHA);

	cmp	DWORD PTR [esi+675172], 6
	jne	SHORT $L146437
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	$L126776
$L146437:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	6
	push	20					; 00000014H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675172], 6

; 4650 : 				}
; 4651 : 				else if( PolyFlagsEx & PFX_AlphaMap )

	jmp	$L126776
$L126774:
	test	al, 1
	je	$L126776

; 4652 : 				{
; 4653 : 					//debugf(_T("**Turning alphamap on."));
; 4654 : 					//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE);
; 4655 : 					//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND,  D3DBLEND_SRCALPHA);
; 4656 : 					//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);
; 4657 : 					SetAlphaBlendEnable(TRUE);

	cmp	DWORD PTR [esi+675176], edi
	jne	SHORT $L146446
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146445
$L146446:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	27					; 0000001bH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675176], edi
$L146445:

; 4658 : 					SetSrcBlend(D3DBLEND_SRCALPHA);

	cmp	DWORD PTR [esi+675168], 5
	jne	SHORT $L146454
	mov	eax, DWORD PTR ?CacheBlending@@3HA	; CacheBlending
	test	eax, eax
	jne	SHORT $L146452
$L146454:
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	19					; 00000013H
	push	eax
	call	DWORD PTR [edx+200]
	mov	DWORD PTR [esi+675168], 5
$L146452:

; 4659 : 					SetDstBlend(D3DBLEND_INVSRCALPHA);

	mov	edx, 6
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend

; 4660 : 
; 4661 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAREF, 8);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	8
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [ecx+200]

; 4662 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAFUNC, D3DCMP_GREATER );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [edx+200]

; 4663 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHATESTENABLE, 1 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]

; 4664 : 
; 4665 : 					Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_SELECTARG1);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	2
	push	4
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4666 : 					Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	0
	push	eax
	call	DWORD PTR [ecx+252]

; 4667 : 					Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	6
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4668 : 					
; 4669 : 					Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPFILTER , D3DTEXF_NONE );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	18					; 00000012H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
$L126776:

; 4670 : 				}
; 4671 : 			}
; 4672 : 			
; 4673 : 			if( Xor & PF_Invisible )

	test	BYTE PTR _Xor$[esp+24], 1
	je	SHORT $L126777

; 4674 : 			{
; 4675 : 				UBOOL Invisible = ((PolyFlags&PF_Invisible)!=0);

	mov	edx, DWORD PTR _PolyFlags$[esp+24]
	and	edx, edi

; 4676 : 				SetAlphaBlendEnable(Invisible);

	mov	ecx, esi
	call	?SetAlphaBlendEnable@UD3DRenderDevice@@QAIHH@Z ; UD3DRenderDevice::SetAlphaBlendEnable

; 4677 : 				//Direct3DDevice8->SetRenderState( D3DRS_ALPHABLENDENABLE, Invisible );
; 4678 : 				//Direct3DDevice8->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_ZERO );
; 4679 : 				//Direct3DDevice8->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );
; 4680 : 				SetSrcBlend(D3DBLEND_ZERO);

	mov	edx, edi
	mov	ecx, esi
	call	?SetSrcBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetSrcBlend

; 4681 : 				SetDstBlend(D3DBLEND_ONE);

	mov	edx, 2
	mov	ecx, esi
	call	?SetDstBlend@UD3DRenderDevice@@QAI?AW4_D3DBLEND@@W42@@Z ; UD3DRenderDevice::SetDstBlend
$L126777:

; 4682 : 
; 4683 : 			}
; 4684 : 			if( Xor & PF_Occlude )

	mov	eax, DWORD PTR _Xor$[esp+24]
	test	eax, eax
	jns	SHORT $L126779

; 4685 : 			{
; 4686 : 				Direct3DDevice8->SetRenderState( D3DRS_ZWRITEENABLE, (PolyFlags&PF_Occlude)!=0 );

	mov	ecx, DWORD PTR _PolyFlags$[esp+24]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	shr	ecx, 31					; 0000001fH
	push	ecx
	push	14					; 0000000eH
	push	eax
	call	DWORD PTR [edx+200]
$L126779:

; 4687 : 			}
; 4688 : 			if( Xor & PF_Masked )

	test	BYTE PTR _Xor$[esp+24], 2
	je	SHORT $L126782

; 4689 : 			{
; 4690 : 				if( PolyFlags&PF_Masked )

	test	BYTE PTR _PolyFlags$[esp+24], 2

; 4691 : 				{
; 4692 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAREF, 127 );

	mov	eax, DWORD PTR [esi+19124]
	je	SHORT $L126781
	mov	edx, DWORD PTR [eax]
	push	127					; 0000007fH
	push	24					; 00000018H
	push	eax
	call	DWORD PTR [edx+200]

; 4693 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHAFUNC, D3DCMP_GREATER );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	5
	push	25					; 00000019H
	push	eax
	call	DWORD PTR [ecx+200]

; 4694 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHATESTENABLE, 1 );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [edx+200]

; 4695 : 				}
; 4696 : 				else

	jmp	SHORT $L126782
$L126781:

; 4697 : 				{
; 4698 : 					Direct3DDevice8->SetRenderState( D3DRS_ALPHATESTENABLE, 0 );

	mov	ecx, DWORD PTR [eax]
	push	0
	push	15					; 0000000fH
	push	eax
	call	DWORD PTR [ecx+200]
$L126782:

; 4699 : 				}
; 4700 : 			}
; 4701 : 			if( Xor & PF_NoSmooth )

	mov	ebp, DWORD PTR _Xor$[esp+24]
	test	ebp, 2048				; 00000800H

; 4702 : 			{
; 4703 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MAGFILTER, (PolyFlags & PF_NoSmooth) ? D3DTEXF_POINT : D3DTEXF_LINEAR );

	mov	ebx, DWORD PTR _PolyFlags$[esp+24]
	je	SHORT $L126783
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	edi, ebx
	and	edi, 2048				; 00000800H
	neg	edi
	sbb	edi, edi
	add	edi, 2
	push	edi
	push	16					; 00000010H
	push	0
	push	eax
	call	DWORD PTR [edx+252]

; 4704 : 				Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MINFILTER, (PolyFlags & PF_NoSmooth) ? D3DTEXF_POINT : D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	17					; 00000011H
	push	0
	push	eax
	call	DWORD PTR [ecx+252]
	mov	edi, 1
$L126783:

; 4705 : 			}
; 4706 : 			if( Xor & PF_RenderFog )

	test	ebp, 1073741824				; 40000000H
	je	SHORT $L126784

; 4707 : 			{
; 4708 : 				Direct3DDevice8->SetRenderState( D3DRS_SPECULARENABLE, (PolyFlags&PF_RenderFog)!=0 );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	mov	ecx, ebx
	shr	ecx, 30					; 0000001eH
	and	ecx, edi
	push	ecx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]
$L126784:

; 4709 : 			}
; 4710 : 			if( (Xor & PF_Memorized) || (Xor & PF_Selected) )

	test	ebp, 50331648				; 03000000H
	je	SHORT $L126790

; 4711 : 			{
; 4712 : 				if( PolyFlags&PF_Memorized )

	test	ebx, 16777216				; 01000000H

; 4713 : 				{
; 4714 : 					// Lightmap
; 4715 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	je	SHORT $L126787
	push	4
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 4716 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_SELECTARG2 );

	push	3

; 4717 : 				}
; 4718 : 				else

	jmp	SHORT $L146481
$L126787:

; 4719 : 				if( PolyFlags&PF_Selected )

	test	ebx, 33554432				; 02000000H
	je	SHORT $L126789

; 4720 : 				{
; 4721 : 					// Alphamap
; 4722 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_SELECTARG2 );

	push	3
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 4723 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1 );

	push	2

; 4724 : 				}
; 4725 : 				else

	jmp	SHORT $L146481
$L126789:

; 4726 : 				{
; 4727 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP, D3DTOP_DISABLE );

	push	edi
	push	edi
	push	edi
	push	eax
	call	DWORD PTR [edx+252]

; 4728 : 					Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP, D3DTOP_DISABLE );

	push	edi
$L146481:
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	edi
	push	eax
	call	DWORD PTR [ecx+252]
$L126790:

; 4729 : 				}
; 4730 : 			}
; 4731 : 		}
; 4732 : 
; 4733 : 		CurrentPolyFlags  =PolyFlags;

	mov	edx, DWORD PTR _PolyFlags$[esp+24]

; 4734 : 		CurrentPolyFlagsEx=PolyFlagsEx;

	mov	eax, DWORD PTR _PolyFlagsEx$[esp+20]
	pop	edi
	mov	DWORD PTR [esi+19616], edx
	mov	DWORD PTR [esi+19620], eax
	pop	esi
	pop	ebp
	pop	ebx

; 4735 : 	}

	add	esp, 8
	ret	4
?SetBlending@UD3DRenderDevice@@QAIXKK@Z ENDP		; UD3DRenderDevice::SetBlending
_TEXT	ENDS
PUBLIC	?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ	; UD3DRenderDevice::ReleaseOldestTexture
EXTRN	__aullshr:NEAR
; Function compile flags: /Ogty
;	COMDAT ?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ PROC NEAR ; UD3DRenderDevice::ReleaseOldestTexture, COMDAT
; _this$ = ecx

; 4739 : 	{

	push	ebx
	push	ebp
	mov	ebx, ecx

; 4740 : 		VALIDATE;
; 4741 : 
; 4742 : 		if(!CachedTextures) return;

	mov	eax, DWORD PTR [ebx+236]
	test	eax, eax
	push	esi
	push	edi
	je	$L146507

; 4743 : 
; 4744 : 		INT Threshold=CachedTextures->Filler->PixelFormat->ActiveRAMPeak+1024*1024*3;

	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+4]
	mov	ebp, DWORD PTR [edx+28]
	add	ebp, 3145728				; 00300000H

; 4745 : 		if(Threshold<7*1024*1024) Threshold=7*1024*1024;

	cmp	ebp, 7340032				; 00700000H
	jge	SHORT $L126797
	mov	ebp, 7340032				; 00700000H
$L126797:

; 4746 : 
; 4747 : 		while(CachedTextures && (CachedTextures->Filler->PixelFormat->BinnedRAM>Threshold))

	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+24], ebp
	jle	$L146507

; 4748 : 		{
; 4749 : 			FTexInfo *LowestFrameCount=NULL;

	xor	esi, esi

; 4750 : 			FTexInfo *LowestFrameCountPrevious=NULL;

	xor	edx, edx

; 4751 : 			FTexInfo *Previous=NULL;

	xor	ecx, ecx

; 4752 : 			for(FTexInfo *Iterator=CachedTextures;Iterator;Previous=Iterator,Iterator=Iterator->NextTexture)

	test	eax, eax
	je	$L146507

; 4802 : 
; 4803 : 		}
; 4804 : 	}

	npad	3
$L126803:

; 4753 : 			{
; 4754 : 				if(!LowestFrameCount||(Iterator->FrameCounter<=LowestFrameCount->FrameCounter))

	test	esi, esi
	je	SHORT $L126807
	mov	edi, DWORD PTR [eax+44]
	cmp	edi, DWORD PTR [esi+44]
	jg	SHORT $L126804
$L126807:

; 4755 : 				{
; 4756 : 					// Don't kick out anything that isn't over 60 frames old.
; 4757 : 					if((FrameCounter-Iterator->FrameCounter)>60)

	mov	edi, DWORD PTR [ebx+675104]
	sub	edi, DWORD PTR [eax+44]
	cmp	edi, 60					; 0000003cH
	jle	SHORT $L126804

; 4758 : 					{
; 4759 : 						LowestFrameCount=Iterator;

	mov	esi, eax

; 4760 : 						LowestFrameCountPrevious=Previous;

	mov	edx, ecx
$L126804:
	mov	ecx, eax
	mov	eax, DWORD PTR [eax+52]
	test	eax, eax
	jne	SHORT $L126803

; 4761 : 					}
; 4762 : 				}
; 4763 : 			}
; 4764 : 
; 4765 : 			if(!LowestFrameCount) return;

	test	esi, esi
	je	$L146507

; 4766 : 
; 4767 : 			LowestFrameCount->Filler->PixelFormat->BinnedRAM -= LowestFrameCount->SizeBytes;

	mov	eax, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR [esi+4]
	sub	edi, ecx
	mov	DWORD PTR [eax+24], edi

; 4768 : 			LowestFrameCount->Filler->PixelFormat->Binned--;

	mov	eax, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+20]
	dec	ecx

; 4769 : 
; 4770 : 			// Detach myself from the normal list:
; 4771 : 			if(!LowestFrameCountPrevious)

	test	edx, edx
	mov	DWORD PTR [eax+20], ecx
	jne	SHORT $L126810

; 4772 : 			{
; 4773 : 				CachedTextures=CachedTextures->NextTexture;

	mov	ecx, DWORD PTR [ebx+236]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [ebx+236], edx

; 4774 : 			} else

	jmp	SHORT $L126811
$L126810:

; 4775 : 			{
; 4776 : 				LowestFrameCountPrevious->NextTexture=LowestFrameCount->NextTexture;

	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edx+52], eax
$L126811:

; 4777 : 			}
; 4778 : 
; 4779 : 			INT	HashIndex = ((7*(DWORD)LowestFrameCount->CacheId+(DWORD)(LowestFrameCount->CacheId>>32))) & (ARRAY_COUNT(TextureHash)-1);

	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR [esi+8]
	imul	ecx, 7
	add	eax, ecx
	and	eax, 4095				; 00000fffH

; 4780 : 
; 4781 : 			Previous=NULL;
; 4782 : 			for(Iterator = TextureHash[HashIndex];

	mov	edi, DWORD PTR [ebx+eax*4+240]
	mov	ecx, edi
	xor	edx, edx

; 4783 : 				Iterator && Iterator!=LowestFrameCount;
; 4784 : 				Previous=Iterator,Iterator = Iterator->HashNext)

	test	ecx, ecx
	je	SHORT $L126817
$L126815:
	cmp	ecx, esi
	je	SHORT $L146510
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+48]
	test	ecx, ecx
	jne	SHORT $L126815
$L126817:

; 4785 : 				;
; 4786 : 
; 4787 : 			if(Iterator==LowestFrameCount)

	cmp	ecx, esi
	jne	SHORT $L126820
$L146510:

; 4788 : 			{
; 4789 : 				if(!Previous)

	test	edx, edx
	jne	SHORT $L126819

; 4790 : 				{
; 4791 : 					TextureHash[HashIndex]=TextureHash[HashIndex]->HashNext;

	mov	edx, DWORD PTR [edi+48]
	mov	DWORD PTR [ebx+eax*4+240], edx

; 4792 : 				} else

	jmp	SHORT $L126820
$L126819:

; 4793 : 				{
; 4794 : 					Previous->HashNext=LowestFrameCount->HashNext;

	mov	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edx+48], eax
$L126820:

; 4795 : 				}
; 4796 : 			}
; 4797 : 
; 4798 : 			if(LowestFrameCount->Texture8)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $L146491

; 4799 : 				SafeRelease(LowestFrameCount->Texture8);

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L146491:

; 4800 : 			
; 4801 : 			SafeDelete(LowestFrameCount);

	mov	edx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+236]
	test	eax, eax
	jne	$L126797
$L146507:
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 4802 : 
; 4803 : 		}
; 4804 : 	}

	ret	0
?ReleaseOldestTexture@UD3DRenderDevice@@QAEXXZ ENDP	; UD3DRenderDevice::ReleaseOldestTexture
_TEXT	ENDS
PUBLIC	?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z	; UD3DRenderDevice::SetTextureNULL
; Function compile flags: /Ogty
;	COMDAT ?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z
_TEXT	SEGMENT
?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z PROC NEAR	; UD3DRenderDevice::SetTextureNULL, COMDAT
; _this$ = ecx
; _dwStage$ = edx

; 4807 : 	{

	push	esi
	push	edi
	mov	edi, edx

; 4808 : 		check((dwStage>=0)&&(dwStage<ARRAY_COUNT(Stages)));

	cmp	edi, 8
	mov	esi, ecx
	jb	SHORT $L126830
	push	4808					; 000012c8H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126830:

; 4809 : 
; 4810 : 		Direct3DDevice8->SetTexture( dwStage, NULL );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	edi
	push	eax
	call	DWORD PTR [ecx+244]

; 4811 : 		Stages[dwStage] = &NoTexture;

	lea	edx, DWORD PTR [esi+16624]
	mov	DWORD PTR [esi+edi*4+19712], edx
	pop	edi
	pop	esi

; 4812 : 	}

	ret	0
?SetTextureNULL@UD3DRenderDevice@@QAIXK@Z ENDP		; UD3DRenderDevice::SetTextureNULL
_TEXT	ENDS
PUBLIC	??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@ ; `string'
PUBLIC	??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
EXTRN	__imp_?Load@FTextureInfo@@QAEXXZ:NEAR
EXTRN	__imp_?Unload@FTextureInfo@@QAEXXZ:NEAR
EXTRN	__imp_?CacheMaxColor@FTextureInfo@@QAEXXZ:NEAR
EXTRN	__imp_??0FRainbowPtr@@QAE@PAX@Z:NEAR
EXTRN	__imp_?PrivateStaticClass@UProceduralTexture@@0VUClass@@A:BYTE
;	COMDAT ??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@
; File ..\..\Core\Inc\UnVcWin32.h
_DATA	SEGMENT
??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@ DB 'U'
	DB	00H, 'n', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H
	DB	'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'T', 00H, 'e'
	DB	00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H
	DB	'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@
_DATA	SEGMENT
??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'E', 00H, 'n'
	DB	00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'o', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'f', 00H, 'f'
	DB	00H, 'i', 00H, 'c', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	' ', 00H, 'm', 00H, 'i', 00H, 'p', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, 's', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'(', 00H, 'h', 00H, '=', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, '3', 00H, 'D', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '8', 00H, '-', 00H, '>'
	DB	00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, '(', 00H, 'U', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	',', 00H, 'V', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ','
	DB	00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '.', 00H, 'N', 00H
	DB	'u', 00H, 'm', 00H, 'M', 00H, 'i', 00H, 'p', 00H, 's', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'r', 00H, 's', 00H
	DB	't', 00H, 'M', 00H, 'i', 00H, 'p', 00H, ',', 00H, '0', 00H, ','
	DB	00H, 'F', 00H, 'i', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'r', 00H
	DB	'-', 00H, '>', 00H, 'P', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l'
	DB	00H, 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, '3', 00H, 'D', 00H, 'F', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 'a', 00H, 't', 00H, ',', 00H, ' ', 00H, 'D', 00H, '3'
	DB	00H, 'D', 00H, 'P', 00H, 'O', 00H, 'O', 00H, 'L', 00H, '_', 00H
	DB	'M', 00H, 'A', 00H, 'N', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, ',', 00H, '&', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 'I', 00H
	DB	'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H, 'T', 00H, 'e'
	DB	00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, '8', 00H
	DB	')', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '%'
	DB	00H, 's', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z
_TEXT	SEGMENT
$T146538 = 8
$T146540 = -56
$T146541 = -44
_Threshold$146576 = -76
_L$146615 = 8
_H$146616 = -48
_L$146637 = 12
_H$146638 = 24
_dwStage$ = -64
_Info$ = 8
_PolyFlags$ = 12
_Precache$ = 16
_PolyFlagsEx$ = 20
_IsLightmap$ = 24
_this$ = -68
_Masking$ = -72
_HashIndex$ = 8
_Filler$126853 = 8
_VSize$126880 = -72
_Cycles$126891 = -48
_Count$126895 = -52
_MipIndex$126896 = 8
_ListIndex$126897 = 20
_LockedRect$126901 = -40
_SurfaceDesc$126902 = -32
_BPP$126903 = -60
_u$126909 = -72
?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z PROC NEAR ; UD3DRenderDevice::SetTexture, COMDAT
; _this$ = ecx
; _dwStage$ = edx

; 4815 : 	{

	sub	esp, 76					; 0000004cH
	push	ebx
	push	ebp
	push	esi
	mov	esi, edx

; 4816 : 		check((dwStage>=0)&&(dwStage<ARRAY_COUNT(Stages)));

	cmp	esi, 8
	mov	ebx, ecx
	push	edi
	mov	DWORD PTR _dwStage$[esp+92], esi
	mov	DWORD PTR _this$[esp+92], ebx
	jb	SHORT $L126835
	push	4816					; 000012d0H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0CM@ILAF@?$CIdwStage?$DO?$DN0?$CJ?$CG?$CG?$CIdwStage?$DMARRAY_COU@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L126835:

; 4817 : 
; 4818 : 		UBOOL Masking=(PolyFlags&PF_Masked)?TRUE:FALSE;

	mov	ecx, DWORD PTR _PolyFlags$[esp+88]

; 4819 : 		if(Stages[dwStage] && Stages[dwStage]->CacheId == Info.CacheID && Stages[dwStage]->Masking==Masking)

	mov	eax, DWORD PTR [ebx+esi*4+19712]
	mov	ebp, DWORD PTR _Info$[esp+88]
	shr	ecx, 1
	and	ecx, 1
	test	eax, eax
	mov	DWORD PTR _Masking$[esp+92], ecx
	je	SHORT $L126838
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ebp+4]
	jne	SHORT $L126838
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ebp+8]
	jne	SHORT $L126838
	cmp	DWORD PTR [eax+16], ecx
	je	$L126834
$L126838:

; 4820 : 			return;
; 4821 : 
; 4822 : 		INT	HashIndex = (7 * (DWORD) Info.CacheID + (DWORD) (Info.CacheID >> 32)) & (ARRAY_COUNT(TextureHash) - 1);

	mov	ecx, DWORD PTR [ebp+4]
	mov	eax, DWORD PTR [ebp+8]
	mov	edx, ecx
	imul	edx, 7
	mov	edi, eax
	add	edi, edx
	and	edi, 4095				; 00000fffH

; 4823 : 
; 4824 : 
; 4825 : 		for(FTexInfo* TexInfo = TextureHash[HashIndex];

	mov	esi, DWORD PTR [ebx+edi*4+240]

; 4826 : 			TexInfo && !(TexInfo->CacheId == Info.CacheID && TexInfo->Masking==Masking);
; 4827 : 			TexInfo = TexInfo->HashNext)

	test	esi, esi
	mov	DWORD PTR _HashIndex$[esp+88], edi
	je	SHORT $L146661

; 4972 : 		VALIDATE;
; 4973 : 
; 4974 : 	}

	npad	7
$L126843:

; 4826 : 			TexInfo && !(TexInfo->CacheId == Info.CacheID && TexInfo->Masking==Masking);
; 4827 : 			TexInfo = TexInfo->HashNext)

	mov	edx, DWORD PTR [esi+8]
	cmp	edx, ecx
	jne	SHORT $L126844
	mov	edx, DWORD PTR [esi+12]
	cmp	edx, eax
	jne	SHORT $L126844
	mov	edx, DWORD PTR _Masking$[esp+92]
	cmp	DWORD PTR [esi+16], edx
	je	$L126847
$L126844:
	mov	esi, DWORD PTR [esi+48]
	test	esi, esi
	jne	SHORT $L126843
$L146661:

; 4828 : 			;
; 4829 : 
; 4830 : 		if(!TexInfo)
; 4831 : 		{
; 4832 : 			if(Use2ndTierTextureCache) 

	mov	eax, DWORD PTR [ebx+19156]
	test	eax, eax
	je	$L146651

; 4833 : 				ReleaseOldestTexture();

	mov	eax, DWORD PTR [ebx+236]
	test	eax, eax
	je	$L146651
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx+28]
	add	ecx, 3145728				; 00300000H
	cmp	ecx, 7340032				; 00700000H
	mov	DWORD PTR _Threshold$146576[esp+92], ecx
	jge	SHORT $L146578
	mov	ecx, 7340032				; 00700000H
	mov	DWORD PTR _Threshold$146576[esp+92], ecx
	jmp	SHORT $L146578
$L146689:
	mov	ecx, DWORD PTR _Threshold$146576[esp+92]
$L146578:
	mov	edx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR [edx+4]
	cmp	DWORD PTR [edx+24], ecx
	jle	$L146651
	xor	esi, esi
	xor	edx, edx
	xor	ecx, ecx
	test	eax, eax
	je	$L146651
$L146584:
	test	esi, esi
	je	SHORT $L146588
	mov	edi, DWORD PTR [eax+44]
	cmp	edi, DWORD PTR [esi+44]
	jg	SHORT $L146585
$L146588:
	mov	edi, DWORD PTR [ebx+675104]
	sub	edi, DWORD PTR [eax+44]
	cmp	edi, 60					; 0000003cH
	jle	SHORT $L146585
	mov	esi, eax
	mov	edx, ecx
$L146585:
	mov	ecx, eax
	mov	eax, DWORD PTR [eax+52]
	test	eax, eax
	jne	SHORT $L146584
	test	esi, esi
	je	$L146693
	mov	eax, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR [esi+4]
	sub	edi, ecx
	mov	DWORD PTR [eax+24], edi
	mov	eax, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR [eax+20]
	dec	ecx
	test	edx, edx
	mov	DWORD PTR [eax+20], ecx
	jne	SHORT $L146591
	mov	ecx, DWORD PTR [ebx+236]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [ebx+236], edx
	jmp	SHORT $L146592
$L146591:
	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [edx+52], eax
$L146592:
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, 32					; 00000020H
	call	__aullshr
	mov	ecx, DWORD PTR [esi+8]
	imul	ecx, 7
	add	eax, ecx
	and	eax, 4095				; 00000fffH
	mov	edi, DWORD PTR [ebx+eax*4+240]
	mov	ecx, edi
	xor	edx, edx
	test	ecx, ecx
	je	SHORT $L146596

; 4972 : 		VALIDATE;
; 4973 : 
; 4974 : 	}

	npad	7

; 4833 : 				ReleaseOldestTexture();

$L146594:
	cmp	ecx, esi
	je	SHORT $L146660
	mov	edx, ecx
	mov	ecx, DWORD PTR [ecx+48]
	test	ecx, ecx
	jne	SHORT $L146594
$L146596:
	cmp	ecx, esi
	jne	SHORT $L146599
$L146660:
	test	edx, edx
	jne	SHORT $L146598
	mov	edx, DWORD PTR [edi+48]
	mov	DWORD PTR [ebx+eax*4+240], edx
	jmp	SHORT $L146599
$L146598:
	mov	eax, DWORD PTR [esi+48]
	mov	DWORD PTR [edx+48], eax
$L146599:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $L146566
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L146566:
	mov	edx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ebx+236]
	test	eax, eax
	mov	edi, DWORD PTR _HashIndex$[esp+88]
	jne	$L146689
	jmp	SHORT $L146651
$L146693:
	mov	edi, DWORD PTR _HashIndex$[esp+88]
$L146651:

; 4834 : 
; 4835 : 			// Create a new Direct3D texture.
; 4836 : 			TexInfo = new FTexInfo;

	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_17JBDG@?$AAn?$AAe?$AAw?$AA?$AA@ ; `string'
	push	56					; 00000038H
	call	DWORD PTR [edx]

; 4837 : 			TexInfo->CacheId = Info.CacheID;
; 4838 : 			TexInfo->Masking=Masking;

	mov	edx, DWORD PTR _Masking$[esp+92]
	mov	esi, eax
	mov	eax, DWORD PTR [ebp+4]
	mov	DWORD PTR [esi+8], eax
	mov	ecx, DWORD PTR [ebp+8]
	mov	DWORD PTR [esi+12], ecx
	mov	DWORD PTR [esi+16], edx

; 4839 : 
; 4840 : 			TexInfo->NextTexture = CachedTextures;

	mov	eax, DWORD PTR [ebx+236]
	mov	DWORD PTR [esi+52], eax

; 4841 : 			CachedTextures = TexInfo;

	mov	DWORD PTR [ebx+236], esi

; 4842 : 
; 4843 : 			TexInfo->HashNext = TextureHash[HashIndex];

	mov	ecx, DWORD PTR [ebx+edi*4+240]
	mov	DWORD PTR [esi+48], ecx

; 4844 : 			TextureHash[HashIndex] = TexInfo;

	mov	DWORD PTR [ebx+edi*4+240], esi

; 4845 : 
; 4846 : 			// Get filler object.
; 4847 : 
; 4848 : 			FTexFiller*	Filler = NULL;
; 4849 : 
; 4850 : 			switch(Info.Format)
; 4851 : 			{

	mov	eax, DWORD PTR [ebp+36]
	xor	edi, edi
	cmp	eax, 5
	mov	DWORD PTR _Filler$126853[esp+88], edi
	ja	SHORT $L126866
	jmp	DWORD PTR $L146696[eax*4]
$L126858:

; 4852 : 				case TEXF_P8:    Filler = ( !Format1555.Supported || Use32BitTextures )? (FTexFiller*) &Filler8888_P8 : (FTexFiller*) &Filler1555_P8; break;

	mov	al, BYTE PTR [ebx+16936]
	test	al, al
	je	SHORT $L146532
	mov	eax, DWORD PTR [ebx+19160]
	test	eax, eax
	jne	SHORT $L146532
	lea	edi, DWORD PTR [ebx+18056]
	mov	DWORD PTR _Filler$126853[esp+88], edi
	jmp	SHORT $L126855
$L146532:
	lea	edi, DWORD PTR [ebx+17016]
	mov	DWORD PTR _Filler$126853[esp+88], edi
	jmp	SHORT $L126855
$L126861:

; 4853 : 				case TEXF_DXT1:  Filler = &FillerDXT1; break;

	lea	edi, DWORD PTR [ebx+16992]
	mov	DWORD PTR _Filler$126853[esp+88], edi
	jmp	SHORT $L126855
$L126862:

; 4854 : 				case TEXF_RGBA7: Filler = (!Format1555.Supported || Use32BitTextures ) ? (FTexFiller*) &Filler8888_RGBA7 : (FTexFiller*) &Filler1555_RGBA7; break;

	mov	al, BYTE PTR [ebx+16936]
	test	al, al
	je	SHORT $L146534
	mov	eax, DWORD PTR [ebx+19160]
	test	eax, eax
	jne	SHORT $L146534
	lea	edi, DWORD PTR [ebx+18048]
	mov	DWORD PTR _Filler$126853[esp+88], edi
	jmp	SHORT $L126855
$L146534:
	lea	edi, DWORD PTR [ebx+17008]
	mov	DWORD PTR _Filler$126853[esp+88], edi
	jmp	SHORT $L126855
$L126865:

; 4855 : 				case TEXF_RGBA8: Filler = &Filler8888_RGBA8; break;

	lea	edi, DWORD PTR [ebx+17000]
	mov	DWORD PTR _Filler$126853[esp+88], edi
	jmp	SHORT $L126855
$L126866:

; 4856 : 				default:
; 4857 : 					appErrorf(TEXT("Unsupported Texture Format"));

	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DG@GDLM@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L126855:

; 4858 : 			}
; 4859 : 			
; 4860 : 			TexInfo->Filler=Filler;

	mov	DWORD PTR [esi+40], edi

; 4861 : 			if(Info.bParametric) 

	test	BYTE PTR [ebp+76], 8
	je	SHORT $L126868

; 4862 : 			{
; 4863 : 				TexInfo->UseMips=false;

	mov	DWORD PTR [esi+36], 0

; 4864 : 				Info.NumMips=1;

	mov	DWORD PTR [ebp+64], 1
$L126868:

; 4865 : 			}
; 4866 : 
; 4867 : 			// Calculate the mipmap to use.
; 4868 : 			DWORD	FirstMip = 0;

	xor	edi, edi
	lea	ecx, DWORD PTR [ebp+80]

; 4972 : 		VALIDATE;
; 4973 : 
; 4974 : 	}

	npad	1

; 4865 : 			}
; 4866 : 
; 4867 : 			// Calculate the mipmap to use.
; 4868 : 			DWORD	FirstMip = 0;

$L126871:

; 4869 : 
; 4870 : 			while(Info.Mips[FirstMip]->USize > (INT) DeviceCaps8.MaxTextureWidth || Info.Mips[FirstMip]->VSize > (INT) DeviceCaps8.MaxTextureHeight)

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+88
	jg	SHORT $L126875
	mov	eax, DWORD PTR [eax+8]
	cmp	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+92
	jle	SHORT $L126872
$L126875:

; 4871 : 				if(++FirstMip >= (DWORD) Info.NumMips)

	mov	eax, DWORD PTR [ebp+64]
	inc	edi
	add	ecx, 4
	cmp	edi, eax
	mov	DWORD PTR -72+[esp+92], ecx
	jb	SHORT $L126871

; 4872 : 					appErrorf(TEXT("D3D Driver: Encountered oversize texture without sufficient mipmaps"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1II@DOLE@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAu?$AAn?$AAt?$AAe@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 4873 : 
; 4874 : 			DWORD	USize = Info.Mips[FirstMip]->USize,

	mov	ecx, DWORD PTR -72+[esp+100]
	add	esp, 8
	jmp	SHORT $L126871
$L126872:
	mov	eax, DWORD PTR [ebp+edi*4+80]
	mov	edx, DWORD PTR [eax+4]

; 4875 : 					VSize = Info.Mips[FirstMip]->VSize;

	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _VSize$126880[esp+92], eax

; 4876 : 
; 4877 : 			// Setup the texture info.
; 4878 : 			TexInfo->FirstMip = FirstMip;
; 4879 : 			TexInfo->UScale	= 1.f / (USize * (1 << FirstMip) * Info.UScale);

	mov	ecx, edi
	mov	eax, 1
	shl	eax, cl
	mov	DWORD PTR [esi+20], edi
	mov	DWORD PTR -40+[esp+96], 0

; 4880 : 			TexInfo->VScale	= 1.f / (VSize * (1 << FirstMip) * Info.VScale);
; 4881 : 			TexInfo->UseMips = (FirstMip < (DWORD) Info.NumMips - 1);
; 4882 : 
; 4883 : 			// Create the Direct3D texture.
; 4884 : 			D3D_CHECK((h=Direct3DDevice8->CreateTexture(USize,VSize,Info.NumMips - FirstMip,0,Filler->PixelFormat->Direct3DFormat,

	push	esi
	mov	ecx, eax
	imul	eax, DWORD PTR _VSize$126880[esp+96]
	imul	ecx, edx
	mov	DWORD PTR -40+[esp+96], ecx
	push	1
	fild	QWORD PTR -40+[esp+100]
	mov	DWORD PTR -40+[esp+100], eax
	mov	DWORD PTR -40+[esp+104], 0
	fmul	DWORD PTR [ebp+40]
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR [esi+24]
	fild	QWORD PTR -40+[esp+100]
	fmul	DWORD PTR [ebp+44]
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR [esi+28]
	mov	eax, DWORD PTR [ebp+64]
	dec	eax
	cmp	edi, eax
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR [esi+36], ecx
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _Filler$126853[esp+96]
	mov	eax, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [eax+4]
	push	eax
	mov	eax, DWORD PTR [ebp+64]
	push	0
	sub	eax, edi
	push	eax
	mov	eax, DWORD PTR _VSize$126880[esp+112]
	push	eax
	mov	eax, DWORD PTR [ebx+19124]
	push	edx
	push	eax
	call	DWORD PTR [ecx+80]
	test	eax, eax
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	SHORT $L126883
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	4885					; 00001315H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1BFI@PKNA@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L126883:

; 4885 : 				D3DPOOL_MANAGED,&TexInfo->Texture8)));
; 4886 : 
; 4887 : 			TexInfo->SizeBytes = Info.USize * Info.VSize * TexInfo->Filler->PixelFormat->BitsPerPixel / 8;

	mov	edi, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [edi+4]
	mov	eax, DWORD PTR [eax+16]
	imul	eax, DWORD PTR [ebp+52]
	imul	eax, DWORD PTR [ebp+48]
	cdq
	and	edx, 7
	add	eax, edx
	mov	ecx, eax
	sar	ecx, 3
	mov	DWORD PTR [esi+4], ecx

; 4888 : 			if(!Info.NumMips) TexInfo->SizeBytes+=TexInfo->SizeBytes/3;		

	mov	eax, DWORD PTR [ebp+64]
	test	eax, eax
	jne	SHORT $L126889
	mov	eax, -1431655765			; aaaaaaabH
	mul	ecx
	shr	edx, 1
	add	edx, ecx
	mov	DWORD PTR [esi+4], edx
$L126889:

; 4889 : 
; 4890 : 			TexInfo->Filler->PixelFormat->Binned++;

	mov	eax, DWORD PTR [edi+4]
	inc	DWORD PTR [eax+20]

; 4891 : 			TexInfo->Filler->PixelFormat->BinnedRAM += TexInfo->SizeBytes;

	mov	ecx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [esi+4]
	add	ecx, edx
	mov	DWORD PTR [eax+24], ecx

; 4892 : 
; 4893 : 			Info.bRealtimeChanged = 1;

	or	DWORD PTR [ebp+76], 16			; 00000010H
$L126847:

; 4894 : 		}
; 4895 : 
; 4896 : 		// Transfer texture data.
; 4897 : 		if( Info.bRealtimeChanged /*&& Info.bParametric || (Info.Format==TEXF_RGBA7 && GET_COLOR_DWORD(*Info.MaxColor)==0xFFFFFFFF)*/ )

	test	BYTE PTR [ebp+76], 16			; 00000010H
	je	$L126890

; 4898 : 		{
; 4899 : 			DWORD Cycles=0;
; 4900 : 			clock(Cycles);

	mov	ecx, DWORD PTR __imp__GTimestamp
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	test	edx, edx
	mov	DWORD PTR _L$146615[esp+88], eax
	je	SHORT $L146617
	rdtsc
	mov	DWORD PTR _L$146615[esp+88], eax
	mov	DWORD PTR _H$146616[esp+92], edx
	mov	eax, DWORD PTR _L$146615[esp+88]
$L146617:
	neg	eax
	mov	DWORD PTR _Cycles$126891[esp+92], eax

; 4901 : 
; 4902 : 			// Get ready for blt.		
; 4903 : 			if(!IsLightmap&&!Use2ndTierTextureCache) Info.Load();	// Dynamically load the texture if it hasn't already been done. (auto checks for parametric)

	mov	eax, DWORD PTR _IsLightmap$[esp+88]
	test	eax, eax
	jne	SHORT $L126892
	mov	eax, DWORD PTR [ebx+19156]
	test	eax, eax
	jne	SHORT $L126892
	mov	ecx, ebp
	call	DWORD PTR __imp_?Load@FTextureInfo@@QAEXXZ
$L126892:

; 4904 : 
; 4905 : 			//debugf(_T("Uploading texture:%s"),Info.Texture->GetFullName());
; 4906 : 			Info.CacheMaxColor();

	mov	ecx, ebp
	call	DWORD PTR __imp_?CacheMaxColor@FTextureInfo@@QAEXXZ

; 4907 : 			TexInfo->MaxColor = (Format8888.Supported && Use32BitTextures) ? FColor(255,255,255,1) : *Info.MaxColor;

	mov	al, BYTE PTR [ebx+16884]
	test	al, al
	je	SHORT $L146537
	mov	eax, DWORD PTR [ebx+19160]
	test	eax, eax
	je	SHORT $L146537
	mov	al, 255					; 000000ffH
	mov	BYTE PTR $T146538[esp+88], al
	mov	BYTE PTR $T146538[esp+89], al
	mov	BYTE PTR $T146538[esp+90], al
	mov	BYTE PTR $T146538[esp+91], 1
	lea	eax, DWORD PTR $T146538[esp+88]
	jmp	SHORT $L146539
$L146537:
	mov	eax, DWORD PTR [ebp+32]
$L146539:
	mov	edx, DWORD PTR [eax]

; 4908 : 
; 4909 : 			// Update texture data.
; 4910 : 			TexInfo->Filler->PixelFormat->Uploads++;

	mov	eax, DWORD PTR [esi+40]
	mov	DWORD PTR [esi+32], edx
	mov	eax, DWORD PTR [eax+4]
	inc	DWORD PTR [eax+44]

; 4911 : 			TexInfo->Filler->BeginUpload( TexInfo, Info, PolyFlags, PolyFlagsEx );

	mov	eax, DWORD PTR _PolyFlagsEx$[esp+88]
	mov	ecx, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [ecx]
	push	eax
	mov	eax, DWORD PTR _PolyFlags$[esp+92]
	push	eax
	push	ebp
	push	esi
	call	DWORD PTR [edx]

; 4912 : 			INT	Count = Info.NumMips - TexInfo->FirstMip;

	mov	ecx, DWORD PTR [esi+20]
	mov	eax, DWORD PTR [ebp+64]
	sub	eax, ecx

; 4913 : 			for( INT MipIndex=TexInfo->FirstMip, ListIndex=0; ListIndex<Count; ListIndex++,MipIndex++ )

	test	eax, eax
	mov	DWORD PTR _Count$126895[esp+92], eax
	mov	DWORD PTR _MipIndex$126896[esp+88], ecx
	mov	DWORD PTR _ListIndex$126897[esp+88], 0
	jle	$L126900
	lea	ebx, DWORD PTR [ebp+ecx*4+80]
	mov	DWORD PTR -76+[esp+92], ebx
$L126898:

; 4914 : 			{
; 4915 : 				// Lock the mip-level.
; 4916 : 				D3DLOCKED_RECT	LockedRect;
; 4917 : 				D3DSURFACE_DESC	SurfaceDesc;
; 4918 : 				int				BPP=GetFormatBPP(TexInfo->Filler->PixelFormat->Direct3DFormat);

	mov	edx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP

; 4919 : 
; 4920 : 				TexInfo->Texture8->GetLevelDesc(ListIndex,&SurfaceDesc);

	mov	edi, DWORD PTR _ListIndex$126897[esp+92]
	add	esp, 4
	lea	ecx, DWORD PTR _SurfaceDesc$126902[esp+92]
	push	ecx
	mov	DWORD PTR _BPP$126903[esp+96], eax
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	eax
	call	DWORD PTR [edx+56]

; 4921 : 				TexInfo->Texture8->LockRect(ListIndex,&LockedRect,NULL,0);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	lea	ecx, DWORD PTR _LockedRect$126901[esp+100]
	push	ecx
	push	edi
	push	eax
	call	DWORD PTR [edx+64]

; 4922 : 				
; 4923 : 				if(Info.Mips[MipIndex]->DataPtr)

	mov	edx, DWORD PTR [ebx]
	cmp	DWORD PTR [edx], 0
	je	$L126912

; 4924 : 				{
; 4925 : 					if(Info.Format==TEXF_RGBA7)

	cmp	DWORD PTR [ebp+36], 1
	jne	SHORT $L126905

; 4926 : 					{
; 4927 : 						TexInfo->Filler->UploadMipmap(TexInfo,(BYTE*) LockedRect.pBits,LockedRect.Pitch,Info,MipIndex,PolyFlags);

	mov	ecx, DWORD PTR _PolyFlags$[esp+88]
	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR _MipIndex$126896[esp+88]
	mov	edi, DWORD PTR [eax]
	mov	eax, DWORD PTR _LockedRect$126901[esp+92]
	push	ecx
	push	edx
	mov	edx, DWORD PTR _LockedRect$126901[esp+104]
	push	ebp
	push	eax
	push	ecx
	mov	ecx, esp
	mov	DWORD PTR $T146540[esp+112], esp
	push	edx
	call	DWORD PTR __imp_??0FRainbowPtr@@QAE@PAX@Z
	mov	ecx, DWORD PTR [esi+40]
	push	esi
	call	DWORD PTR [edi+4]

; 4928 : 					} else

	jmp	$L126912
$L126905:

; 4929 : 					{
; 4930 : 						for(DWORD u = 0;u < SurfaceDesc.Width;u += Info.Mips[MipIndex]->USize)

	mov	eax, DWORD PTR _SurfaceDesc$126902[esp+116]
	xor	ecx, ecx
	test	eax, eax
	mov	DWORD PTR _u$126909[esp+92], ecx
	jbe	SHORT $L126912
	mov	eax, DWORD PTR _SurfaceDesc$126902[esp+120]
$L126910:

; 4931 : 							for(DWORD v = 0;v < SurfaceDesc.Height;v += Info.Mips[MipIndex]->VSize)

	xor	edi, edi
	test	eax, eax
	jbe	SHORT $L126911
	imul	ecx, DWORD PTR _BPP$126903[esp+92]
	shr	ecx, 3
	mov	DWORD PTR -56+[esp+92], ecx
	jmp	SHORT $L126914
$L146687:

; 4929 : 					{
; 4930 : 						for(DWORD u = 0;u < SurfaceDesc.Width;u += Info.Mips[MipIndex]->USize)

	mov	ecx, DWORD PTR -56+[esp+92]
$L126914:

; 4932 : 								TexInfo->Filler->UploadMipmap(TexInfo,(BYTE*) LockedRect.pBits + u * BPP / 8 + v * LockedRect.Pitch,LockedRect.Pitch,Info,MipIndex,PolyFlags);

	mov	eax, DWORD PTR [esi+40]
	mov	ebx, DWORD PTR [eax]
	mov	edx, DWORD PTR _PolyFlags$[esp+88]
	mov	eax, DWORD PTR _MipIndex$126896[esp+88]
	push	edx
	push	eax
	mov	eax, DWORD PTR _LockedRect$126901[esp+100]
	mov	edx, edi
	imul	edx, eax
	push	ebp
	push	eax
	mov	eax, DWORD PTR _LockedRect$126901[esp+112]
	add	edx, ecx
	push	ecx
	add	edx, eax
	mov	ecx, esp
	mov	DWORD PTR $T146541[esp+112], esp
	push	edx
	call	DWORD PTR __imp_??0FRainbowPtr@@QAE@PAX@Z
	mov	ecx, DWORD PTR [esi+40]
	push	esi
	call	DWORD PTR [ebx+4]
	mov	ebx, DWORD PTR -76+[esp+92]
	mov	eax, DWORD PTR [ebx]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _SurfaceDesc$126902[esp+120]
	add	edi, edx
	cmp	edi, eax
	jb	SHORT $L146687

; 4931 : 							for(DWORD v = 0;v < SurfaceDesc.Height;v += Info.Mips[MipIndex]->VSize)

	mov	ecx, DWORD PTR _u$126909[esp+92]
$L126911:

; 4929 : 					{
; 4930 : 						for(DWORD u = 0;u < SurfaceDesc.Width;u += Info.Mips[MipIndex]->USize)

	mov	edx, DWORD PTR [ebx]
	mov	edi, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _SurfaceDesc$126902[esp+116]
	add	ecx, edi
	cmp	ecx, edx
	mov	DWORD PTR _u$126909[esp+92], ecx
	jb	SHORT $L126910
$L126912:

; 4933 : 					}
; 4934 : 				}
; 4935 : 
; 4936 : 				// Unlock the mip-level.
; 4937 : 				TexInfo->Texture8->UnlockRect(ListIndex);

	mov	eax, DWORD PTR [esi]
	mov	edi, DWORD PTR _ListIndex$126897[esp+88]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	eax
	call	DWORD PTR [ecx+68]
	mov	edx, DWORD PTR _MipIndex$126896[esp+88]
	mov	eax, DWORD PTR _Count$126895[esp+92]
	inc	edi
	inc	edx
	add	ebx, 4
	cmp	edi, eax
	mov	DWORD PTR _ListIndex$126897[esp+88], edi
	mov	DWORD PTR _MipIndex$126896[esp+88], edx
	mov	DWORD PTR -76+[esp+92], ebx
	jl	$L126898
$L126900:

; 4938 : 			}
; 4939 : 			Stats.TexUploads++;

	mov	eax, DWORD PTR _this$[esp+92]
	inc	DWORD PTR [eax+19704]

; 4940 : 
; 4941 : 			// Unload texture.
; 4942 : 			Info.bRealtimeChanged = 0;

	mov	edx, DWORD PTR [ebp+76]
	and	edx, -17				; ffffffefH

; 4943 : 			
; 4944 : 			if(!Info.bRealtime&&!Info.bParametric&&!IsLightmap&&!Use2ndTierTextureCache&&(Info.Texture&&!Info.Texture->IsA(UProceduralTexture::StaticClass()))) Info.Unload();	

	mov	cl, dl
	test	cl, 12					; 0000000cH
	mov	DWORD PTR [ebp+76], edx
	jne	SHORT $L126919
	mov	ecx, DWORD PTR _IsLightmap$[esp+88]
	test	ecx, ecx
	jne	SHORT $L126919
	mov	ecx, DWORD PTR [eax+19156]
	test	ecx, ecx
	jne	SHORT $L126919
	mov	eax, DWORD PTR [ebp]
	test	eax, eax
	je	SHORT $L126919
	mov	eax, DWORD PTR [eax+36]
	test	eax, eax
	mov	ecx, DWORD PTR __imp_?PrivateStaticClass@UProceduralTexture@@0VUClass@@A
	je	SHORT $L146630
$L146628:
	cmp	eax, ecx
	je	SHORT $L126919
	mov	eax, DWORD PTR [eax+40]
	test	eax, eax
	jne	SHORT $L146628
$L146630:
	xor	eax, eax
	test	ecx, ecx
	sete	al
	test	eax, eax
	jne	SHORT $L126919
	mov	ecx, ebp
	call	DWORD PTR __imp_?Unload@FTextureInfo@@QAEXXZ
$L126919:

; 4945 : 			unclock(Cycles);

	mov	edx, DWORD PTR __imp__GTimestamp
	cmp	DWORD PTR [edx], 0
	mov	DWORD PTR _L$146637[esp+88], 0
	je	SHORT $L146639
	rdtsc
	mov	DWORD PTR _L$146637[esp+88], eax
	mov	DWORD PTR _H$146638[esp+88], edx
$L146639:

; 4946 : 			TexInfo->Filler->PixelFormat->UploadCycles += Cycles;

	mov	eax, DWORD PTR [esi+40]
	mov	edx, DWORD PTR _L$146637[esp+88]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _Cycles$126891[esp+92]
	mov	ebx, DWORD PTR _this$[esp+92]
	lea	ecx, DWORD PTR [edx+ecx-34]
	add	DWORD PTR [eax+48], ecx
$L126890:

; 4947 : 		}
; 4948 : 		
; 4949 : 		if( Precache )

	mov	eax, DWORD PTR _Precache$[esp+88]
	test	eax, eax
	je	SHORT $L126920

; 4950 : 		{
; 4951 : 			Stages[dwStage] = TexInfo;

	mov	edx, DWORD PTR _dwStage$[esp+92]
	mov	DWORD PTR [ebx+edx*4+19712], esi

; 4972 : 		VALIDATE;
; 4973 : 
; 4974 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 76					; 0000004cH
	ret	20					; 00000014H
$L126920:

; 4952 : 			return;
; 4953 : 		}
; 4954 : 		// Update texture info.
; 4955 : 
; 4956 : 		if(TexInfo->FrameCounter != FrameCounter)

	mov	eax, DWORD PTR [esi+44]
	cmp	eax, DWORD PTR [ebx+675104]
	je	SHORT $L126921

; 4957 : 		{
; 4958 : 			TexInfo->Filler->PixelFormat->Active++;

	mov	ecx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [ecx+4]
	inc	DWORD PTR [eax+32]

; 4959 : 			TexInfo->Filler->PixelFormat->ActiveRAM += TexInfo->SizeBytes;

	mov	edx, DWORD PTR [esi+40]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [esi+4]
	add	DWORD PTR [eax+36], ecx
$L126921:

; 4960 : 		}
; 4961 : 
; 4962 : 		TexInfo->FrameCounter = FrameCounter;

	mov	edx, DWORD PTR [ebx+675104]

; 4963 : 		TexInfo->Filler->PixelFormat->Sets++;

	mov	eax, DWORD PTR [esi+40]

; 4964 : 
; 4965 : 		// Set Direct3D state.
; 4966 : 		Direct3DDevice8->SetTexture(dwStage,TexInfo->Texture8);

	mov	edi, DWORD PTR _dwStage$[esp+92]
	mov	DWORD PTR [esi+44], edx
	mov	eax, DWORD PTR [eax+4]
	inc	DWORD PTR [eax+40]
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	edi
	push	eax
	call	DWORD PTR [ecx+244]

; 4967 : 
; 4968 : 		if(!Stages[dwStage] || TexInfo->UseMips != Stages[dwStage]->UseMips)

	mov	eax, DWORD PTR [ebx+edi*4+19712]
	test	eax, eax
	je	SHORT $L126923
	mov	ecx, DWORD PTR [esi+36]
	cmp	ecx, DWORD PTR [eax+36]
	je	SHORT $L126922
$L126923:

; 4969 : 			Direct3DDevice8->SetTextureStageState(dwStage,D3DTSS_MIPFILTER,TexInfo->UseMips == 0 ? D3DTEXF_NONE : UseTrilinear ? D3DTEXF_LINEAR : D3DTEXF_POINT);

	mov	eax, DWORD PTR [esi+36]
	xor	ecx, ecx
	test	eax, eax
	je	SHORT $L146543
	mov	edx, DWORD PTR [ebx+19128]
	test	edx, edx
	setne	cl
	inc	ecx
$L146543:
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	18					; 00000012H
	push	edi
	push	eax
	call	DWORD PTR [edx+252]
$L126922:

; 4970 : 		
; 4971 : 		Stages[dwStage] = TexInfo;

	mov	DWORD PTR [ebx+edi*4+19712], esi
$L126834:

; 4972 : 		VALIDATE;
; 4973 : 
; 4974 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 76					; 0000004cH
	ret	20					; 00000014H
	npad	3
$L146696:
	DD	$L126858
	DD	$L126862
	DD	$L126866
	DD	$L126861
	DD	$L126866
	DD	$L126865
?SetTexture@UD3DRenderDevice@@QAIXKAAUFTextureInfo@@KHKH@Z ENDP ; UD3DRenderDevice::SetTexture
_TEXT	ENDS
PUBLIC	?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ ; UD3DRenderDevice::CleanupRenderTargetResources
; Function compile flags: /Ogty
;	COMDAT ?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ
_TEXT	SEGMENT
_i$ = -4
?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ PROC NEAR ; UD3DRenderDevice::CleanupRenderTargetResources, COMDAT
; _this$ = ecx

; 4978 : 	{

	push	ecx
	push	ebx
	push	edi
	mov	edi, ecx

; 4979 : 		for (INT i = 0; i < RenderTargetArray.Num(); i++)

	mov	eax, DWORD PTR [edi+216]
	xor	ebx, ebx
	cmp	eax, ebx
	mov	DWORD PTR _i$[esp+12], ebx
	jle	SHORT $L126929
	push	ebp
	push	esi
	xor	ebp, ebp

; 4983 : 	}

	npad	7

; 4979 : 		for (INT i = 0; i < RenderTargetArray.Num(); i++)

$L126927:

; 4980 : 			ShutdownRenderTargetRes(&RenderTargetArray(i));

	mov	esi, DWORD PTR [edi+212]
	mov	eax, DWORD PTR [esi+ebp]
	add	esi, ebp
	cmp	eax, ebx
	mov	eax, DWORD PTR [esi+8]
	jne	SHORT $L146721
	cmp	eax, ebx
	jne	SHORT $L146723
	cmp	DWORD PTR [esi+4], ebx
	je	SHORT $L126928
$L146723:
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L126928
$L146721:
	cmp	eax, ebx
	je	SHORT $L146727
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], ebx
$L146727:
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, ebx
	je	SHORT $L146731
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], ebx
$L146731:
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+4], ebx
$L126928:
	mov	eax, DWORD PTR _i$[esp+20]
	mov	ecx, DWORD PTR [edi+216]
	inc	eax
	add	ebp, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$[esp+20], eax
	jl	SHORT $L126927
	pop	esi
	pop	ebp
$L126929:

; 4981 : 
; 4982 : 		SafeRelease(ClipperTexture);

	mov	eax, DWORD PTR [edi+19112]
	cmp	eax, ebx
	je	SHORT $L146737
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi+19112], ebx
$L146737:
	pop	edi
	pop	ebx

; 4983 : 	}

	pop	ecx
	ret	0
?CleanupRenderTargetResources@UD3DRenderDevice@@QAEXXZ ENDP ; UD3DRenderDevice::CleanupRenderTargetResources
_TEXT	ENDS
PUBLIC	?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z ; UD3DRenderDevice::RecognizePixelFormat
; Function compile flags: /Ogty
;	COMDAT ?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z
_TEXT	SEGMENT
_Dest$ = 8
_Direct3DFormat$ = 12
_InDesc$ = 16
?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z PROC NEAR ; UD3DRenderDevice::RecognizePixelFormat, COMDAT
; _this$ = ecx

; 4988 : 		VALIDATE;
; 4989 : 
; 4990 : 		Dest.Supported		 = true;
; 4991 : 		Dest.Direct3DFormat  = Direct3DFormat;

	mov	eax, DWORD PTR _Direct3DFormat$[esp-4]
	mov	edx, DWORD PTR _Dest$[esp-4]
	push	esi
	mov	esi, ecx

; 4992 : 		Dest.Desc		     = InDesc;

	mov	ecx, DWORD PTR _InDesc$[esp]

; 4993 : 		Dest.BitsPerPixel	 = GetFormatBPP(Direct3DFormat);

	push	eax
	mov	BYTE PTR [edx], 1
	mov	DWORD PTR [edx+4], eax
	mov	DWORD PTR [edx+12], ecx
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	DWORD PTR [edx+16], eax

; 4994 : 		Dest.Next            = FirstPixelFormat;

	mov	eax, DWORD PTR [esi+16988]
	add	esp, 4
	mov	DWORD PTR [edx+8], eax

; 4995 : 		FirstPixelFormat     = &Dest;

	mov	DWORD PTR [esi+16988], edx
	pop	esi

; 4996 : 	}

	ret	12					; 0000000cH
?RecognizePixelFormat@UD3DRenderDevice@@QAEXAAUFPixFormat@@W4_D3DFORMAT@@PBG@Z ENDP ; UD3DRenderDevice::RecognizePixelFormat
_TEXT	ENDS
PUBLIC	??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@ ; `string'
PUBLIC	??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@ ; `string'
PUBLIC	??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@ ; `string'
PUBLIC	??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@ ; `string'
PUBLIC	??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@ ; `string'
PUBLIC	??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
PUBLIC	??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
PUBLIC	??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
PUBLIC	??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@ ; `string'
PUBLIC	??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@ ; `string'
PUBLIC	??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@ ; `string'
PUBLIC	??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@ ; `string'
PUBLIC	??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
PUBLIC	??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
PUBLIC	??_C@_08DHAB@InDevice?$AA@			; `string'
PUBLIC	??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@ ; `string'
PUBLIC	??_C@_09FJBK@Direct3D8?$AA@			; `string'
PUBLIC	??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@	; `string'
PUBLIC	??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@ ; `string'
EXTRN	__imp_?SaveConfig@UObject@@QAEXKPBG@Z:NEAR
EXTRN	__imp_??0FColor@@QAE@EEE@Z:NEAR
;	COMDAT ??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@
_DATA	SEGMENT
??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's', 00H, '(', 00H
	DB	'N', 00H, 'e', 00H, 'w', 00H, 'X', 00H, '=', 00H, '%', 00H, 'i'
	DB	00H, ',', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 'Y', 00H, '=', 00H
	DB	'%', 00H, 'i', 00H, ',', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 'C'
	DB	00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 'B', 00H, 'y', 00H
	DB	't', 00H, 'e', 00H, 's', 00H, '=', 00H, '%', 00H, 'i', 00H, ','
	DB	00H, 'F', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 's', 00H, 'c', 00H
	DB	'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, '%', 00H, 'i', 00H, ')'
	DB	00H, ' ', 00H, '(', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H
	DB	':', 00H, '%', 00H, '0', 00H, '8', 00H, 'x', 00H, ')', 00H, ';'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_09FJBK@Direct3D8?$AA@
_DATA	SEGMENT
??_C@_09FJBK@Direct3D8?$AA@ DB 'Direct3D8', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@
_DATA	SEGMENT
??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@ DB 'NewColorBytes<=4', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@
_DATA	SEGMENT
??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@ DB 'S'
	DB	00H, 'u', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'f', 00H, 'u', 00H, 'l', 00H, 'l', 00H, 'y', 00H, ' ', 00H, 't'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ DB '%'
	DB	00H, 's', 00H, ' ', 00H, '(', 00H, '%', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@
_DATA	SEGMENT
??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ DB 'N'
	DB	00H, 'o', 00H, ' ', 00H, 'f', 00H, 'u', 00H, 'l', 00H, 'l', 00H
	DB	's', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, ' '
	DB	00H, 'd', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@
_DATA	SEGMENT
??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ DB 'N'
	DB	00H, 'o', 00H, ' ', 00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, 'd', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@
_DATA	SEGMENT
??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@ DB 'B'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, '-', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 'c', 00H, 'h', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 's'
	DB	00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'm', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, 'x', 00H, '%', 00H, 'i', 00H, 'x', 00H, '%', 00H, 'i', 00H
	DB	' ', 00H, '(', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, '=', 00H, '%', 00H, 'i', 00H, ')', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@ DB 'C'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'D', 00H, 'e', 00H
	DB	'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'F', 00H, 'o', 00H, 'r'
	DB	00H, 'm', 00H, 'a', 00H, 't', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3'
	DB	00H, 'D', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H
	DB	'e', 00H, '8', 00H, '-', 00H, '>', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, '(', 00H, '&', 00H, 'P', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'P', 00H, 'a'
	DB	00H, 'r', 00H, 'm', 00H, 's', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@
_DATA	SEGMENT
??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@ DB 'V'
	DB	00H, 'i', 00H, 'e', 00H, 'w', 00H, 'p', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, 'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, ':', 00H, '%'
	DB	00H, '0', 00H, '8', 00H, 'x', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@
_DATA	SEGMENT
??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'h', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'w', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H
	DB	'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 't'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 's', 00H, 'o'
	DB	00H, 'f', 00H, 't', 00H, 'w', 00H, 'a', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x'
	DB	00H, 'p', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@
_DATA	SEGMENT
??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@ DB 'C'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, '('
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w', 00H
	DB	'a', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'p', 00H, 'r', 00H
	DB	'o', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, ')', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@
_DATA	SEGMENT
??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@ DB 'D'
	DB	00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'i', 00H, 's', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H
	DB	'w', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e'
	DB	00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'p', 00H
	DB	'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '.', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@
_DATA	SEGMENT
??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@ DB '!FAILED(Di'
	DB	'rect3DDevice8->SetViewport(&ViewportInfo))', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@
_DATA	SEGMENT
??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@ DB '!FAILED(Di'
	DB	'rect3DDevice8->GetViewport(&ViewportInfo))', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ DB 'A', 00H
	DB	'8', 00H, 'R', 00H, '8', 00H, 'G', 00H, '8', 00H, 'B', 00H, '8'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ DB 'A', 00H
	DB	'1', 00H, 'R', 00H, '5', 00H, 'G', 00H, '5', 00H, 'B', 00H, '5'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@
_DATA	SEGMENT
??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'M', 00H, 'i'
	DB	00H, 'p', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' '
	DB	00H, 'a', 00H, 'v', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't'
	DB	00H, 'h', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H
	DB	' ', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT
??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'S', 00H, 'u'
	DB	00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 's', 00H
	DB	' ', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 'n'
	DB	00H, 'e', 00H, 'a', 00H, 'r', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT
??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'S', 00H, 'u'
	DB	00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 's', 00H
	DB	' ', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 'l'
	DB	00H, 'a', 00H, 'r', 00H, ' ', 00H, 'g', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@
_DATA	SEGMENT
??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, ' ', 00H, 'D', 00H, 'r', 00H, 'i', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H, 'S', 00H, 'u'
	DB	00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 's', 00H
	DB	' ', 00H, 'B', 00H, 'L', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'D'
	DB	00H, 'I', 00H, 'F', 00H, 'F', 00H, 'U', 00H, 'S', 00H, 'E', 00H
	DB	'A', 00H, 'L', 00H, 'P', 00H, 'H', 00H, 'A', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@
_DATA	SEGMENT
??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@ DB 'Viewport->'
	DB	'ResizeViewport((Fullscreen ? BLIT_Fullscreen : 0) | BLIT_Dire'
	DB	'ct3D, NewX, ViewportY, ViewportColorBits / 8 )', 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_08DHAB@InDevice?$AA@
_DATA	SEGMENT
??_C@_08DHAB@InDevice?$AA@ DB 'InDevice', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	'(', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h'
	DB	00H, '*', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H
	DB	'f', 00H, '(', 00H, 'T', 00H, ')', 00H, ',', 00H, ' ', 00H, 'T'
	DB	00H, ':', 00H, ':', 00H, 'U', 00H, 'S', 00H, 'A', 00H, 'G', 00H
	DB	'E', 00H, ',', 00H, ' ', 00H, 'T', 00H, ':', 00H, ':', 00H, 'F'
	DB	00H, 'V', 00H, 'F', 00H, ',', 00H, ' ', 00H, 'D', 00H, '3', 00H
	DB	'D', 00H, 'P', 00H, 'O', 00H, 'O', 00H, 'L', 00H, '_', 00H, 'D'
	DB	00H, 'E', 00H, 'F', 00H, 'A', 00H, 'U', 00H, 'L', 00H, 'T', 00H
	DB	',', 00H, ' ', 00H, '&', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H
	DB	'e', 00H, 'r', 00H, '8', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@ DB 'U', 00H, 'n'
	DB	00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, 'F', 00H, 'M', 00H, 'T', 00H, '_', 00H
	DB	'A', 00H, '8', 00H, 'R', 00H, '8', 00H, 'G', 00H, '8', 00H, 'B'
	DB	00H, '8', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, 'F', 00H, 'M', 00H, 'T', 00H, '_', 00H
	DB	'X', 00H, '8', 00H, 'R', 00H, '8', 00H, 'G', 00H, '8', 00H, 'B'
	DB	00H, '8', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT
??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, 'F', 00H, 'M', 00H, 'T', 00H, '_', 00H
	DB	'R', 00H, '5', 00H, 'G', 00H, '6', 00H, 'B', 00H, '5', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ DB 'D'
	DB	00H, '3', 00H, 'D', 00H, 'F', 00H, 'M', 00H, 'T', 00H, '_', 00H
	DB	'X', 00H, '1', 00H, 'R', 00H, '5', 00H, 'G', 00H, '5', 00H, 'B'
	DB	00H, '5', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@
_DATA	SEGMENT
??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@ DB 'R'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@
_DATA	SEGMENT
??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@ DB 'C'
	DB	00H, 'l', 00H, 'i', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@
_DATA	SEGMENT
??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ DB 'I'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, '.', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@
_DATA	SEGMENT
??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ DB 'I'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, '(', 00H
	DB	'n', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'r', 00H, 'f'
	DB	00H, 'a', 00H, 'c', 00H, 'e', 00H, ')', 00H, '.', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@
_DATA	SEGMENT
??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'R', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'E', 00H
	DB	'D', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@
_DATA	SEGMENT
??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@ DB 'C'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'D', 00H, 'e', 00H
	DB	'p', 00H, 't', 00H, 'h', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'n'
	DB	00H, 'c', 00H, 'i', 00H, 'l', 00H, 'M', 00H, 'a', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?SetRes@UD3DRenderDevice@@UAIHHHHH@Z
_TEXT	SEGMENT
_FogStart$127074 = -212
_FogEnd$127075 = -224
_Material8$127080 = -100
_DisplayMode$127092 = -168
_i$147423 = -188
_LockedRect$127114 = -188
_SurfaceDesc$127115 = -32
_Bits$127118 = -212
_i$127126 = -188
_i$147508 = -224
_i$147679 = -224
$T147697 = -212
$T146757 = -212
_NewX$ = -188
_NewY$ = 8
_NewColorBytes$ = 12
_Fullscreen$ = 16
_DisplayMode$126948 = -168
_AdapterFormat$ = -220
_BestMode$126965 = -224
_BestError$126966 = -180
_Index$126967 = -220
_PresentParms$ = -152
_i$147317 = -224
?SetRes@UD3DRenderDevice@@UAIHHHHH@Z PROC NEAR		; UD3DRenderDevice::SetRes, COMDAT
; _this$ = ecx
; _NewX$ = edx

; 4999 : 	{

	sub	esp, 224				; 000000e0H

; 5000 : 		debugf(TEXT("SetRes(NewX=%i,NewY=%i,NewColorBytes=%i,Fullscreen%i) (this:%08x);"),NewX,NewY,NewColorBytes,Fullscreen,this);

	mov	eax, DWORD PTR _Fullscreen$[esp+220]
	push	ebx
	push	ebp
	push	esi
	mov	esi, DWORD PTR _NewColorBytes$[esp+232]
	push	edi
	mov	ebp, ecx
	mov	ecx, DWORD PTR _NewY$[esp+236]
	push	ebp
	push	eax
	push	esi
	push	ecx
	push	edx
	mov	DWORD PTR _NewX$[esp+260], edx
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1IG@GNH@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?$CI?$AAN?$AAe?$AAw?$AAX?$AA?$DN?$AA?$CF?$AAi?$AA?0?$AAN?$AAe?$AAw?$AAY?$AA?$DN@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 5001 : 		// Verify my current state:
; 5002 : 		verify(this);

	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	xor	ebx, ebx
	add	esp, 28					; 0000001cH
	cmp	ebp, ebx
	jne	SHORT $L126938
	push	5002					; 0000138aH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_04BEIE@this?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L126938:

; 5003 : 		verify(Direct3D8);

	cmp	DWORD PTR _Direct3D8, ebx
	jne	SHORT $L126939
	push	5003					; 0000138bH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_09FJBK@Direct3D8?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L126939:

; 5004 : 		verify(NewColorBytes<=4);

	cmp	esi, 4
	jle	SHORT $L126941
	push	5004					; 0000138cH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0BB@JBFD@NewColorBytes?$DM?$DN4?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L126941:

; 5005 : 		//if(BeginSceneCount) EndScene();
; 5006 : 		//check(LockCount==0);
; 5007 : 		if(LockCount>0) 

	cmp	DWORD PTR [ebp+675188], ebx
	jle	SHORT $L126943

; 5008 : 			Unlock(0);

	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+96]
$L126943:

; 5009 : 
; 5010 : 		// If D3D already inited, uninit it now.:
; 5011 : 		UnSetRes(NULL,0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L146808
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L146808:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [ebp+216]
	xor	esi, esi
	cmp	eax, ebx
	jle	SHORT $L146818
	xor	edi, edi
$L146816:
	mov	ecx, DWORD PTR [ebp+212]
	add	ecx, edi
	push	ecx
	mov	ecx, ebp
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [ebp+216]
	inc	esi
	add	edi, 20					; 00000014H
	cmp	esi, eax
	jl	SHORT $L146816
$L146818:
	lea	eax, DWORD PTR [ebp+19112]
	push	eax
	mov	DWORD PTR -208+[esp+244], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [ebp+16684]
	push	eax
	mov	DWORD PTR -200+[esp+248], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [ebp+16704]
	push	eax
	mov	DWORD PTR -192+[esp+252], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [ebp+16724]
	push	eax
	mov	DWORD PTR -204+[esp+256], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	lea	eax, DWORD PTR [ebp+16744]
	push	eax
	mov	DWORD PTR -196+[esp+260], eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease

; 5012 : 
; 5013 : 		// Enumerate device display modes.
; 5014 : 		DisplayModes.Empty(Direct3D8->GetAdapterModeCount(BestAdapterIndex));

	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	add	esp, 20					; 00000014H
	push	ecx
	push	eax
	call	DWORD PTR [edx+24]
	push	16					; 00000010H
	mov	ecx, OFFSET FLAT:?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4, ebx
	mov	DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+8, eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 5015 : 
; 5016 : 		for(DWORD Index=0;Index<Direct3D8->GetAdapterModeCount(BestAdapterIndex);Index++)

	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	eax
	xor	esi, esi
	call	DWORD PTR [edx+24]
	test	eax, eax
	jbe	SHORT $L126947
	mov	edi, 640				; 00000280H
$L126945:

; 5017 : 		{
; 5018 : 			D3DDISPLAYMODE	DisplayMode;
; 5019 : 			Direct3D8->EnumAdapterModes(BestAdapterIndex,Index,&DisplayMode);

	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _DisplayMode$126948[esp+240]
	push	ecx
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	esi
	push	ecx
	push	eax
	call	DWORD PTR [edx+28]

; 5020 : 
; 5021 : 			if((DisplayMode.Width >=640)
; 5022 : 			 &&(DisplayMode.Height>=480))

	cmp	DWORD PTR _DisplayMode$126948[esp+240], edi
	jb	SHORT $L126946
	cmp	DWORD PTR _DisplayMode$126948[esp+244], 480 ; 000001e0H
	jb	SHORT $L126946

; 5023 : 				DisplayModes.AddItem(DisplayMode);

	push	16					; 00000010H
	push	1
	mov	ecx, OFFSET FLAT:?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ecx, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	edx, DWORD PTR _DisplayMode$126948[esp+240]
	shl	eax, 4
	add	eax, ecx
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _DisplayMode$126948[esp+244]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _DisplayMode$126948[esp+248]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _DisplayMode$126948[esp+252]
	mov	DWORD PTR [eax+12], ecx
$L126946:
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	eax
	inc	esi
	call	DWORD PTR [edx+24]
	cmp	esi, eax
	jb	SHORT $L126945
$L126947:

; 5024 : 		}
; 5025 : 
; 5026 : 		// Exit if just testing.
; 5027 : 		if(!Viewport)

	mov	ecx, DWORD PTR [ebp+48]
	cmp	ecx, ebx
	jne	$L126950

; 5028 : 		{
; 5029 : 			SaveConfig();

	push	ebx
	push	16384					; 00004000H
	mov	ecx, ebp
	call	DWORD PTR __imp_?SaveConfig@UObject@@QAEXKPBG@Z

; 5030 : 			UnSetRes(TEXT("Successfully tested Direct3D presence"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L146942
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+140]
$L146942:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [ebp+216]
	xor	esi, esi
	cmp	eax, ebx
	jle	SHORT $L146952
	xor	edi, edi

; 5400 : 	}

	npad	3

; 5030 : 			UnSetRes(TEXT("Successfully tested Direct3D presence"),0);

$L146950:
	mov	ecx, DWORD PTR [ebp+212]
	add	ecx, edi
	push	ecx
	mov	ecx, ebp
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [ebp+216]
	inc	esi
	add	edi, 20					; 00000014H
	cmp	esi, eax
	jl	SHORT $L146950
$L146952:
	mov	edx, DWORD PTR -208+[esp+240]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -200+[esp+244]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -192+[esp+248]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -204+[esp+252]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -196+[esp+256]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	add	esp, 20					; 00000014H
	push	ebx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	OFFSET FLAT:??_C@_1EM@JIDN@?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AAf?$AAu?$AAl?$AAl?$AAy?$AA?5?$AAt?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5@ ; `string'
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 20					; 00000014H

; 5031 : 			return 1;

	mov	eax, 1

; 5400 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 224				; 000000e0H
	ret	12					; 0000000cH
$L126950:

; 5032 : 		}
; 5033 : 
; 5034 : 		// Remember parameters.
; 5035 : 		ViewporthWnd       = (HWND)Viewport->GetWindow();

	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+116]

; 5036 : 		ViewportX          = Min( NewX, MaxResWidth  );

	mov	ecx, DWORD PTR _NewX$[esp+240]
	mov	DWORD PTR [ebp+16768], eax
	mov	eax, DWORD PTR [ebp+19164]
	cmp	ecx, eax
	mov	edx, ecx
	jle	SHORT $L147908
	mov	edx, eax
$L147908:

; 5037 : 		ViewportY          = Min( NewY, MaxResHeight );

	mov	eax, DWORD PTR [ebp+19168]
	mov	esi, DWORD PTR _NewY$[esp+236]
	cmp	esi, eax
	mov	DWORD PTR -172+[esp+240], edx
	mov	DWORD PTR [ebp+16760], edx
	jle	SHORT $L147909
	mov	esi, eax
$L147909:

; 5038 : 		ViewportColorBits  = NewColorBytes * 8;

	mov	ecx, DWORD PTR _NewColorBytes$[esp+236]
	lea	eax, DWORD PTR [ecx*8]
	mov	DWORD PTR -212+[esp+240], eax
	mov	DWORD PTR [ebp+16772], eax

; 5039 : 		ViewportFullscreen = Fullscreen;

	mov	eax, DWORD PTR _Fullscreen$[esp+236]

; 5040 : 
; 5041 : 		D3DFORMAT AdapterFormat;
; 5042 : 
; 5043 : 		// See if the window is full screen.
; 5044 : 		if(Fullscreen)

	cmp	eax, ebx
	mov	DWORD PTR -216+[esp+240], esi
	mov	DWORD PTR [ebp+16764], esi
	mov	DWORD PTR [ebp+16776], eax
	je	$L126962

; 5045 : 		{
; 5046 : 			if(DisplayModes.Num()==0 )

	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4
	cmp	eax, ebx
	jne	$L126963

; 5047 : 				return UnSetRes(TEXT("No fullscreen display modes found"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L147033
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+140]
$L147033:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [ebp+216]
	xor	esi, esi
	cmp	eax, ebx
	jle	SHORT $L147043
	xor	edi, edi
$L147041:
	mov	ecx, DWORD PTR [ebp+212]
	add	ecx, edi
	push	ecx
	mov	ecx, ebp
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [ebp+216]
	inc	esi
	add	edi, 20					; 00000014H
	cmp	esi, eax
	jl	SHORT $L147041
$L147043:
	mov	edx, DWORD PTR -208+[esp+240]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -200+[esp+244]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -192+[esp+248]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -204+[esp+252]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -196+[esp+256]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	add	esp, 20					; 00000014H
	push	ebx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	OFFSET FLAT:??_C@_1EE@PDPG@?$AAN?$AAo?$AA?5?$AAf?$AAu?$AAl?$AAl?$AAs?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ ; `string'
	jmp	$L147921
$L126963:

; 5052 : 				BestError = MAXINT;
; 5053 : 
; 5054 : 			for(INT Index = 0;Index < DisplayModes.Num();Index++)

	cmp	eax, ebx
	mov	DWORD PTR _BestMode$126965[esp+240], ebx
	mov	DWORD PTR _BestError$126966[esp+240], 2147483647 ; 7fffffffH
	mov	DWORD PTR _Index$126967[esp+240], ebx
	jle	$L147885
	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	ebx, DWORD PTR -212+[esp+240]
	lea	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR -176+[esp+240], ecx
	jmp	SHORT $L126968
$L147898:

; 5048 : 
; 5049 : 			// Find matching display mode.
; 5050 : 
; 5051 : 			INT	BestMode = 0,

	mov	esi, DWORD PTR -216+[esp+240]
	mov	edx, DWORD PTR -172+[esp+240]

; 5400 : 	}

	npad	7

; 5048 : 
; 5049 : 			// Find matching display mode.
; 5050 : 
; 5051 : 			INT	BestMode = 0,

$L126968:

; 5055 : 			{
; 5056 : 				INT ThisError
; 5057 : 				=	Abs((INT)DisplayModes(Index).Width -(INT)ViewportX)
; 5058 : 				+	Abs((INT)DisplayModes(Index).Height-(INT)ViewportY)
; 5059 : 				+	Abs((INT)GetFormatBPP(DisplayModes(Index).Format)-(INT)ViewportColorBits);

	mov	eax, DWORD PTR [ecx-12]
	sub	eax, edx
	jns	SHORT $L147911
	neg	eax
$L147911:
	mov	edx, eax
	mov	eax, DWORD PTR [ecx-8]
	sub	eax, esi
	jns	SHORT $L147912
	neg	eax
$L147912:
	mov	esi, DWORD PTR [ecx]
	push	esi
	mov	edi, eax
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	ecx, eax
	add	esp, 4
	sub	ecx, ebx
	jns	SHORT $L147089
	neg	ecx
$L147089:
	add	ecx, edi

; 5060 : 
; 5061 : 				if(ThisError < BestError && (GetFormatBPP(DisplayModes(Index).Format)==16 || GetFormatBPP(DisplayModes(Index).Format)==24 || GetFormatBPP(DisplayModes(Index).Format)==32) && (DisplayModes(Index).Format >= D3DFMT_R8G8B8 && DisplayModes(Index).Format <= D3DFMT_X4R4G4B4))

	mov	edi, DWORD PTR _BestError$126966[esp+240]
	add	ecx, edx
	cmp	ecx, edi
	jge	SHORT $L126969
	cmp	eax, 16					; 00000010H
	je	SHORT $L126989
	cmp	eax, 24					; 00000018H
	je	SHORT $L126989
	cmp	eax, 32					; 00000020H
	jne	SHORT $L126969
$L126989:
	cmp	esi, 20					; 00000014H
	jl	SHORT $L126969
	cmp	esi, 30					; 0000001eH
	jg	SHORT $L126969

; 5062 : 				{
; 5063 : 					BestMode = Index;

	mov	edx, DWORD PTR _Index$126967[esp+240]

; 5064 : 					BestError = ThisError;

	mov	edi, ecx
	mov	DWORD PTR _BestMode$126965[esp+240], edx
	mov	DWORD PTR _BestError$126966[esp+240], edi
$L126969:
	mov	eax, DWORD PTR _Index$126967[esp+240]
	mov	ecx, DWORD PTR -176+[esp+240]
	mov	edx, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A+4
	inc	eax
	add	ecx, 16					; 00000010H
	cmp	eax, edx
	mov	DWORD PTR _Index$126967[esp+240], eax
	mov	DWORD PTR -176+[esp+240], ecx
	jl	$L147898

; 5065 : 				//	debugf(NAME_Init,TEXT("Next mode is best match so far:"));
; 5066 : 				}
; 5067 : 				
; 5068 : 				//debugf(NAME_Init,TEXT("Enum modes: %ix%ix%i "),(INT)DisplayModes(Index).Width,(INT)DisplayModes(Index).Height,GetFormatBPP(DisplayModes(Index).Format));
; 5069 : 			}
; 5070 : 
; 5071 : 			if(BestError == MAXINT)

	cmp	edi, 2147483647				; 7fffffffH
	jne	$L126990
	xor	ebx, ebx
$L147885:

; 5072 : 				return UnSetRes(TEXT("No acceptable display modes found"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L147165
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L147165:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	mov	eax, DWORD PTR [ebp+216]
	xor	esi, esi
	cmp	eax, ebx
	jle	SHORT $L147180
	xor	edi, edi
$L147178:
	mov	ecx, DWORD PTR [ebp+212]
	add	ecx, edi
	push	ecx
	mov	ecx, ebp
	call	?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::ShutdownRenderTargetRes
	mov	eax, DWORD PTR [ebp+216]
	inc	esi
	add	edi, 20					; 00000014H
	cmp	esi, eax
	jl	SHORT $L147178
$L147180:
	mov	esi, DWORD PTR -208+[esp+240]
	mov	eax, DWORD PTR [esi]
	cmp	eax, ebx
	je	SHORT $L147174
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi], ebx
$L147174:
	mov	eax, DWORD PTR -200+[esp+240]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -192+[esp+244]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -204+[esp+248]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -196+[esp+252]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	add	esp, 16					; 00000010H
	push	ebx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	OFFSET FLAT:??_C@_1EE@COBK@?$AAN?$AAo?$AA?5?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa@ ; `string'
$L147921:
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	edx
	jmp	$L147910
$L126990:

; 5073 : 
; 5074 : 			ViewportColorBits = GetFormatBPP(DisplayModes(BestMode).Format);

	mov	edx, DWORD PTR _BestMode$126965[esp+240]
	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	shl	edx, 4
	mov	ecx, DWORD PTR [edx+eax+12]
	push	ecx
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	DWORD PTR [ebp+16772], eax

; 5075 : 			ViewportX         = DisplayModes(BestMode).Width;

	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	ecx, DWORD PTR [edx+eax]
	mov	DWORD PTR [ebp+16760], ecx

; 5076 : 			ViewportY         = DisplayModes(BestMode).Height;

	mov	eax, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	ecx, DWORD PTR [edx+eax+4]
	mov	DWORD PTR [ebp+16764], ecx

; 5077 : 
; 5078 : 			AdapterFormat = DisplayModes(BestMode).Format;

	mov	esi, DWORD PTR ?DisplayModes@@3V?$TArray@U_D3DDISPLAYMODE@@@@A
	mov	eax, DWORD PTR [edx+esi+12]
	add	esp, 4

; 5079 : 
; 5080 : 			debugf(NAME_Init,TEXT("Best-match display mode: %ix%ix%i (Error=%i)"),DisplayModes(BestMode).Width,DisplayModes(BestMode).Height,GetFormatBPP(DisplayModes(BestMode).Format),BestError);

	push	edi
	push	eax
	mov	DWORD PTR _AdapterFormat$[esp+248], eax
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	ecx, DWORD PTR [edx+esi]
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx+esi+4]
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	push	eax
	mov	eax, DWORD PTR [edx]
	push	ecx
	push	OFFSET FLAT:??_C@_1FK@OJMD@?$AAB?$AAe?$AAs?$AAt?$AA?9?$AAm?$AAa?$AAt?$AAc?$AAh?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAm@ ; `string'
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 28					; 0000001cH

; 5081 : 
; 5082 : 		}
; 5083 : 		else

	xor	ebx, ebx
	jmp	SHORT $L126993
$L126962:

; 5084 : 		{
; 5085 : #if 0
; 5086 : 			D3DDISPLAYMODE	DisplayMode;
; 5087 : 
; 5088 : 			if(FAILED(h=Direct3D8->GetAdapterDisplayMode(BestAdapterIndex,&DisplayMode)))
; 5089 : 				return UnSetRes(TEXT("GetAdapterDisplayMode"),h);
; 5090 : 
; 5091 : 			AdapterFormat = DisplayMode.Format;
; 5092 : 			ViewportColorBits = GetFormatBPP(AdapterFormat);
; 5093 : #else
; 5094 : 			AdapterFormat = OriginalDisplayMode.Format;

	mov	eax, DWORD PTR ?OriginalDisplayMode@@3U_D3DDISPLAYMODE@@A+12

; 5095 : 			//ViewportX = OriginalDisplayMode.Width;
; 5096 : 			//ViewportY= OriginalDisplayMode.Height;
; 5097 : 			ViewportColorBits = GetFormatBPP(AdapterFormat);

	push	eax
	mov	DWORD PTR _AdapterFormat$[esp+244], eax
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	add	esp, 4
	mov	DWORD PTR [ebp+16772], eax
$L126993:

; 5098 : #endif
; 5099 : 		}
; 5100 : 
; 5101 : 		// Setup the presentation parameters.
; 5102 : 		D3DPRESENT_PARAMETERS PresentParms;
; 5103 : 		appMemzero(&PresentParms,sizeof(PresentParms));

	xor	eax, eax

; 5104 : 
; 5105 : 		//Fullscreen=1;
; 5106 : 		//if(GIsEditor)
; 5107 : 		PresentParms.Flags = D3DPRESENTFLAG_LOCKABLE_BACKBUFFER;
; 5108 : 
; 5109 : 		PresentParms.Windowed = !Fullscreen;

	xor	edx, edx
	mov	ecx, 13					; 0000000dH
	lea	edi, DWORD PTR _PresentParms$[esp+240]
	rep stosd
	mov	ecx, DWORD PTR _Fullscreen$[esp+236]

; 5110 : 		PresentParms.hDeviceWindow = (HWND)ViewporthWnd;

	mov	eax, DWORD PTR [ebp+16768]
	cmp	ecx, ebx
	sete	dl
	mov	esi, 1
	mov	DWORD PTR _PresentParms$[esp+264], eax

; 5111 : 		PresentParms.SwapEffect = Fullscreen ? D3DSWAPEFFECT_DISCARD : D3DSWAPEFFECT_COPY;
; 5112 : 		PresentParms.BackBufferWidth = Max(ViewportX,1);

	mov	eax, DWORD PTR [ebp+16760]
	mov	DWORD PTR _PresentParms$[esp+280], esi
	mov	DWORD PTR _PresentParms$[esp+240], eax
	mov	DWORD PTR _PresentParms$[esp+268], edx
	xor	edx, edx
	cmp	ecx, ebx
	sete	dl
	cmp	eax, esi
	lea	edx, DWORD PTR [edx+edx+1]
	mov	DWORD PTR _PresentParms$[esp+260], edx
	jge	SHORT $L147222
	mov	DWORD PTR _PresentParms$[esp+240], esi
$L147222:

; 5113 : 		PresentParms.BackBufferHeight = Max(ViewportY,1);

	mov	eax, DWORD PTR [ebp+16764]
	cmp	eax, esi
	mov	DWORD PTR _PresentParms$[esp+244], eax
	jge	SHORT $L147230
	mov	DWORD PTR _PresentParms$[esp+244], esi
$L147230:

; 5114 : 		PresentParms.BackBufferCount = (Fullscreen ? (UseTripleBuffering ? 3: 2) : 1);

	cmp	ecx, ebx
	je	SHORT $L146748
	mov	edi, DWORD PTR [ebp+19140]
	xor	eax, eax
	cmp	edi, ebx
	setne	al
	add	eax, 2
	mov	DWORD PTR _PresentParms$[esp+252], eax
	jmp	SHORT $L146749
$L146748:
	mov	DWORD PTR _PresentParms$[esp+252], esi
$L146749:

; 5115 : 		PresentParms.EnableAutoDepthStencil = TRUE;
; 5116 : 		PresentParms.FullScreen_PresentationInterval = Fullscreen ? (UseVSync ? D3DPRESENT_INTERVAL_ONE : D3DPRESENT_INTERVAL_IMMEDIATE) : D3DPRESENT_INTERVAL_DEFAULT;

	cmp	ecx, ebx
	mov	DWORD PTR _PresentParms$[esp+272], esi
	je	SHORT $L146750
	mov	ecx, DWORD PTR [ebp+19144]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -2147483647			; 80000001H
	add	ecx, -2147483648			; 80000000H
	mov	DWORD PTR _PresentParms$[esp+288], ecx
	jmp	SHORT $L146751
$L146750:
	mov	DWORD PTR _PresentParms$[esp+288], ebx
$L146751:

; 5117 : 		PresentParms.FullScreen_RefreshRateInHz=D3DPRESENT_RATE_DEFAULT;
; 5118 : 
; 5119 : 		//PresentParms.FullScreen_PresentationInterval=D3DPRESENT_INTERVAL_DEFAULT/*D3DPRESENT_INTERVAL_ONE*/ /*D3DPRESENT_INTERVAL_IMMEDIATE*/;
; 5120 : 		//PresentParms.SwapEffect=D3DSWAPEFFECT_COPY;
; 5121 : 		
; 5122 : 		// Determine which back buffer format to use.
; 5123 : 		D3DFORMAT BackBufferFormat = (ViewportColorBits == 32 ? D3DFMT_A8R8G8B8 : ViewportColorBits == 16 ? D3DFMT_R5G6B5 : D3DFMT_X8R8G8B8);

	mov	eax, DWORD PTR [ebp+16772]
	cmp	eax, 32					; 00000020H
	mov	DWORD PTR _PresentParms$[esp+284], ebx
	jne	SHORT $L146752
	mov	esi, 21					; 00000015H
	jmp	SHORT $L146753
$L146752:
	xor	edx, edx
	cmp	eax, 16					; 00000010H
	sete	dl
	add	edx, 22					; 00000016H
	mov	esi, edx
$L146753:

; 5124 : 		while(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,D3DUSAGE_RENDERTARGET,D3DRTYPE_SURFACE,BackBufferFormat) != D3D_OK)

	mov	edi, DWORD PTR _AdapterFormat$[esp+240]
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	1
	push	1
	push	edi
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+40]
	test	eax, eax
	je	SHORT $L127007
$L127006:

; 5125 : 		{
; 5126 : 				 if(BackBufferFormat == D3DFMT_A8R8G8B8)	BackBufferFormat = D3DFMT_X8R8G8B8; 

	cmp	esi, 21					; 00000015H
	jne	SHORT $L127009
	mov	esi, 22					; 00000016H

; 5127 : 			else if(BackBufferFormat == D3DFMT_X8R8G8B8)	BackBufferFormat = D3DFMT_R5G6B5;

	jmp	SHORT $L127016
$L127009:
	cmp	esi, 22					; 00000016H
	jne	SHORT $L127011
	mov	esi, 23					; 00000017H

; 5128 : 			else if(BackBufferFormat == D3DFMT_R8G8B8)		BackBufferFormat = D3DFMT_X8R8G8B8;

	jmp	SHORT $L127016
$L127011:
	cmp	esi, 20					; 00000014H
	jne	SHORT $L127013
	mov	esi, 22					; 00000016H

; 5129 : 			else if(BackBufferFormat == D3DFMT_R5G6B5)		BackBufferFormat = D3DFMT_X1R5G5B5;

	jmp	SHORT $L127016
$L127013:
	cmp	esi, 23					; 00000017H
	jne	$L127015
	mov	esi, 24					; 00000018H
$L127016:

; 5131 : 
; 5132 : 			if(Fullscreen)

	cmp	DWORD PTR _Fullscreen$[esp+236], ebx
	je	SHORT $L127018

; 5133 : 				AdapterFormat = BackBufferFormat;

	mov	edi, esi
$L127018:

; 5124 : 		while(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,D3DUSAGE_RENDERTARGET,D3DRTYPE_SURFACE,BackBufferFormat) != D3D_OK)

	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	1
	push	1
	push	edi
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+40]
	test	eax, eax
	jne	SHORT $L127006

; 5133 : 				AdapterFormat = BackBufferFormat;

	mov	DWORD PTR _AdapterFormat$[esp+240], edi
$L127007:

; 5134 : 		}
; 5135 : 
; 5136 : 		PresentParms.BackBufferFormat = BackBufferFormat;
; 5137 : 
; 5138 : 		// Determine which depth buffer format to use.
; 5139 : 		D3DFORMAT DepthFormat = (ViewportColorBits==32 ? D3DFMT_D32 : D3DFMT_D16);

	mov	eax, DWORD PTR [ebp+16772]
	xor	ecx, ecx
	cmp	eax, 32					; 00000020H
	setne	cl
	mov	DWORD PTR _PresentParms$[esp+248], esi
	dec	ecx
	and	ecx, -9					; fffffff7H
	add	ecx, 80					; 00000050H
	mov	edi, ecx

; 5400 : 	}

	npad	1

; 5134 : 		}
; 5135 : 
; 5136 : 		PresentParms.BackBufferFormat = BackBufferFormat;
; 5137 : 
; 5138 : 		// Determine which depth buffer format to use.
; 5139 : 		D3DFORMAT DepthFormat = (ViewportColorBits==32 ? D3DFMT_D32 : D3DFMT_D16);

$L127021:

; 5140 : 
; 5141 : 		while(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,D3DUSAGE_DEPTHSTENCIL,D3DRTYPE_SURFACE,DepthFormat) != D3D_OK ||
; 5142 : 			  Direct3D8->CheckDepthStencilMatch(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,BackBufferFormat,DepthFormat) != D3D_OK)

	mov	ecx, DWORD PTR _AdapterFormat$[esp+240]
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	push	edi
	push	1
	push	2
	push	ecx
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	1
	push	ecx
	push	eax
	call	DWORD PTR [edx+40]
	test	eax, eax
	jne	SHORT $L127025
	mov	ecx, DWORD PTR _AdapterFormat$[esp+240]
	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	push	edi
	push	esi
	push	ecx
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	1
	push	ecx
	push	eax
	call	DWORD PTR [edx+48]
	test	eax, eax
	je	$L127022
$L127025:

; 5143 : 		{
; 5144 : 			     if(DepthFormat == D3DFMT_D32)    DepthFormat = D3DFMT_D24S8;

	cmp	edi, 71					; 00000047H
	jne	$L127026
	mov	edi, 75					; 0000004bH

; 5145 : 			else if(DepthFormat == D3DFMT_D24S8)  DepthFormat = D3DFMT_D16;

	jmp	SHORT $L127021
$L127015:

; 5130 : 			else return UnSetRes(TEXT("CheckDeviceFormat"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx

; 5133 : 				AdapterFormat = BackBufferFormat;

	mov	DWORD PTR _AdapterFormat$[esp+240], edi
	je	SHORT $L147307
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L147307:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	cmp	DWORD PTR [ebp+216], ebx
	mov	DWORD PTR _i$147317[esp+240], ebx
	jle	SHORT $L147323

; 5130 : 			else return UnSetRes(TEXT("CheckDeviceFormat"),0);

	xor	ebx, ebx
$L147319:
	mov	esi, DWORD PTR [ebp+212]
	mov	eax, DWORD PTR [esi+ebx]
	add	esi, ebx
	test	eax, eax
	jne	SHORT $L147316
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L147320
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L147321
$L147320:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	jmp	SHORT $L147913
$L147316:
	lea	edi, DWORD PTR [esi+8]
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ; SafeRelease
	add	esi, 4
	push	esi
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	DWORD PTR [edi], 0
	mov	DWORD PTR [esi], 0
$L147913:
	add	esp, 8
$L147321:
	mov	eax, DWORD PTR _i$147317[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	ebx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$147317[esp+240], eax
	jl	SHORT $L147319
$L147323:
	mov	eax, DWORD PTR -208+[esp+240]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -200+[esp+244]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -192+[esp+248]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -204+[esp+252]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	esi, DWORD PTR -196+[esp+256]
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $L147336
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L147336:
	push	0
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	OFFSET FLAT:??_C@_1CE@EFFL@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAF?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?$AA@ ; `string'
	jmp	$L147914
$L127026:

; 5145 : 			else if(DepthFormat == D3DFMT_D24S8)  DepthFormat = D3DFMT_D16;

	cmp	edi, 75					; 0000004bH
	jne	SHORT $L127028
	mov	edi, 80					; 00000050H

; 5146 : 			else if(DepthFormat == D3DFMT_D16)

	jmp	$L127021
$L127028:
	cmp	edi, 80					; 00000050H
	jne	$L127021

; 5147 : 				return UnSetRes(TEXT("CheckDepthStencilMatch"),0);

	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L147411
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [ebp+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L147411:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	cmp	DWORD PTR [ebp+216], ebx
	mov	DWORD PTR _i$147423[esp+240], ebx
	jle	$L147426
	xor	ebx, ebx
$L147424:
	mov	esi, DWORD PTR [ebp+212]
	mov	eax, DWORD PTR [esi+ebx]
	add	esi, ebx
	test	eax, eax
	jne	$L147419
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L147421
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	$L147425
$L147421:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	jmp	$L147920
$L127022:

; 5148 : 		}
; 5149 : 
; 5150 : 		//debugf(TEXT("Using depth-buffer format %u(%u-bit)"),DepthFormat,GetFormatBPP(DepthFormat));
; 5151 : 		PresentParms.AutoDepthStencilFormat = DepthFormat;
; 5152 : 
; 5153 : #ifdef LOG_PRESENT_PARMS
; 5154 : 		// Dump present parms, useful for debugging.
; 5155 : 		LogPresentParms(PresentParms);
; 5156 : #endif
; 5157 : 
; 5158 : 		if(Direct3DDevice8)

	mov	eax, DWORD PTR [ebp+19124]
	cmp	eax, ebx
	lea	esi, DWORD PTR [ebp+19124]
	mov	DWORD PTR _PresentParms$[esp+276], edi
	je	$L147916

; 5159 : 		{
; 5160 : 			CleanupRenderTargetResources();

	cmp	DWORD PTR [ebp+216], ebx
	mov	DWORD PTR _i$147508[esp+240], ebx
	jle	$L147511
	mov	DWORD PTR -216+[esp+240], ebx

; 5400 : 	}

	npad	4

; 5159 : 		{
; 5160 : 			CleanupRenderTargetResources();

$L147509:
	mov	edi, DWORD PTR [ebp+212]
	mov	ecx, DWORD PTR -216+[esp+240]
	mov	eax, DWORD PTR [edi+ecx]
	add	edi, ecx
	cmp	eax, ebx
	mov	eax, DWORD PTR [edi+8]
	jne	SHORT $L147500
	cmp	eax, ebx
	jne	SHORT $L147502
	cmp	DWORD PTR [edi+4], ebx
	je	SHORT $L147510
$L147502:
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L147510
$L147500:
	cmp	eax, ebx
	je	SHORT $L147494
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], ebx
$L147494:
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, ebx
	je	SHORT $L147498
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi+4], ebx
$L147498:
	mov	DWORD PTR [edi+8], ebx
	mov	DWORD PTR [edi+4], ebx
$L147510:
	mov	eax, DWORD PTR _i$147508[esp+240]
	mov	edx, DWORD PTR -216+[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$147508[esp+240], eax
	mov	DWORD PTR -216+[esp+240], edx
	jl	SHORT $L147509
$L147511:
	mov	edi, DWORD PTR -208+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L147506
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi], ebx
$L147506:

; 5161 : 			CleanupVertexBuffers();

	mov	edi, DWORD PTR -200+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L147570
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi], ebx
$L147570:
	mov	edi, DWORD PTR -192+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L147576
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi], ebx
$L147576:
	mov	edi, DWORD PTR -204+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L147582
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi], ebx
$L147582:
	mov	edi, DWORD PTR -196+[esp+240]
	mov	eax, DWORD PTR [edi]
	cmp	eax, ebx
	je	SHORT $L127033
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi], ebx
$L127033:

; 5162 : 
; 5163 : 			//SafeRelease(Direct3DDevice8);
; 5164 : 
; 5165 : 			D3D_CHECK(Direct3DDevice8->Reset(&PresentParms));

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _PresentParms$[esp+240]
	push	ecx
	push	eax
	call	DWORD PTR [edx+56]
	cmp	eax, ebx
	jge	SHORT $L127035
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	5165					; 0000142dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1IA@JLIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L127035:

; 5166 : 		} 
; 5167 : 
; 5168 : 		if(!Direct3DDevice8)

	cmp	DWORD PTR [esi], ebx
	jne	$L127048
$L147916:

; 5169 : 		{ 
; 5170 : 			//PresentParms.SwapEffect=D3DSWAPEFFECT_DISCARD;
; 5171 : 			PresentParms.MultiSampleType=D3DMULTISAMPLE_NONE;
; 5172 : 			
; 5173 : 			// Create the Direct3D device.
; 5174 : 			if(FAILED(h=Direct3D8->CreateDevice(BestAdapterIndex,D3DDEVTYPE_HAL,ViewporthWnd,D3DCREATE_HARDWARE_VERTEXPROCESSING,&PresentParms,&Direct3DDevice8)))

	mov	eax, DWORD PTR _Direct3D8
	push	esi
	lea	edx, DWORD PTR _PresentParms$[esp+244]
	push	edx
	mov	edx, DWORD PTR [ebp+16768]
	push	64					; 00000040H
	push	edx
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	1
	push	edx
	mov	DWORD PTR _PresentParms$[esp+280], ebx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+60]
	cmp	eax, ebx
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	$L127048

; 5175 : 			{
; 5176 : 				debugf(TEXT("ViewporthWnd:%08x"),ViewporthWnd);

	mov	eax, DWORD PTR [ebp+16768]
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	push	eax
	push	OFFSET FLAT:??_C@_1CE@BLNE@?$AAV?$AAi?$AAe?$AAw?$AAp?$AAo?$AAr?$AAt?$AAh?$AAW?$AAn?$AAd?$AA?3?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AA@ ; `string'
	push	edx
	call	edi

; 5177 : 				debugf(TEXT("Failed to set hardware vertex processing: %s, attempting to set software vertexprocessing"),DXGetErrorString8(h));

	mov	eax, DWORD PTR ?h@@3JA			; h
	add	esp, 12					; 0000000cH
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	push	eax
	push	OFFSET FLAT:??_C@_1LE@DHNM@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAh?$AAa?$AAr?$AAd?$AAw?$AAa@ ; `string'
	push	edx
	call	edi

; 5178 : 				// If hardware vertex processing failed, switch to software:
; 5179 : 				if(FAILED(h=Direct3D8->CreateDevice(BestAdapterIndex,D3DDEVTYPE_HAL,ViewporthWnd,D3DCREATE_SOFTWARE_VERTEXPROCESSING,&PresentParms,&Direct3DDevice8)))

	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	add	esp, 12					; 0000000cH
	push	esi
	lea	edx, DWORD PTR _PresentParms$[esp+244]
	push	edx
	mov	edx, DWORD PTR [ebp+16768]
	push	32					; 00000020H
	push	edx
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+60]
	cmp	eax, ebx
	mov	DWORD PTR ?h@@3JA, eax			; h
	jge	$L127046

; 5180 : 					return UnSetRes(TEXT("CreateDevice (Failed to set software vertex processing)"),h);

	mov	DWORD PTR $T147697[esp+240], eax
	mov	eax, DWORD PTR [ebp+675184]
	cmp	eax, ebx
	je	SHORT $L147667
	mov	esi, DWORD PTR [esi]
	dec	eax
	mov	DWORD PTR [ebp+675184], eax
	mov	eax, DWORD PTR [esi]
	push	esi
	call	DWORD PTR [eax+140]
$L147667:
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [eax+88]
	cmp	DWORD PTR [ebp+216], ebx
	mov	DWORD PTR _i$147679[esp+240], ebx
	jle	SHORT $L147682
	xor	ebx, ebx

; 5400 : 	}

	npad	4

; 5180 : 					return UnSetRes(TEXT("CreateDevice (Failed to set software vertex processing)"),h);

$L147680:
	mov	esi, DWORD PTR [ebp+212]
	mov	eax, DWORD PTR [esi+ebx]
	add	esi, ebx
	test	eax, eax
	jne	SHORT $L147674
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L147676
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L147681
$L147676:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	jmp	SHORT $L147917
$L147674:
	lea	edi, DWORD PTR [esi+8]
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ; SafeRelease
	add	esi, 4
	push	esi
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	DWORD PTR [edi], 0
	mov	DWORD PTR [esi], 0
$L147917:
	add	esp, 8
$L147681:
	mov	eax, DWORD PTR _i$147679[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	ebx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$147679[esp+240], eax
	jl	SHORT $L147680
$L147682:
	mov	eax, DWORD PTR -208+[esp+240]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -200+[esp+244]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -192+[esp+248]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -204+[esp+252]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	esi, DWORD PTR -196+[esp+256]
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $L147693
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L147693:
	mov	edx, DWORD PTR $T147697[esp+240]
	push	edx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1HA@ONNK@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CI?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd@ ; `string'
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	ecx
	jmp	$L147910
$L127046:

; 5181 : 				else
; 5182 : 					debugf(_T("Device is using software vertex processing."));

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1FI@IKFB@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAi?$AAs?$AA?5?$AAu?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAo?$AAf?$AAt@ ; `string'
	push	eax
	call	edi
	add	esp, 8
$L127048:

; 5183 : 			} 
; 5184 : 		}
; 5185 : 
; 5186 : 		// Set viewport.
; 5187 : 		ViewportInfo.X      = 0;
; 5188 : 		ViewportInfo.Y      = 0;
; 5189 : 		ViewportInfo.Width  = ViewportX;

	mov	ecx, DWORD PTR [ebp+16760]

; 5190 : 		ViewportInfo.Height = ViewportY;

	mov	edx, DWORD PTR [ebp+16764]

; 5191 : 		ViewportInfo.MaxZ   = 1.f;
; 5192 : 		ViewportInfo.MinZ   = 0.f;
; 5193 : 		verify(!FAILED(Direct3DDevice8->SetViewport(&ViewportInfo)));

	mov	eax, DWORD PTR [esi]
	lea	edi, DWORD PTR [ebp+19172]
	push	edi
	mov	DWORD PTR [edi], ebx
	mov	DWORD PTR [ebp+19176], ebx
	mov	DWORD PTR [ebp+19180], ecx
	mov	DWORD PTR [ebp+19184], edx
	mov	DWORD PTR [ebp+19192], 1065353216	; 3f800000H
	mov	DWORD PTR [ebp+19188], ebx
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+160]
	test	eax, eax
	jge	SHORT $L127051
	push	5193					; 00001449H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0DF@FMGL@?$CBFAILED?$CIDirect3DDevice8?9?$DOSetView@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L127051:

; 5194 : 		verify(!FAILED(Direct3DDevice8->GetViewport(&ViewportInfo)));

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	eax
	call	DWORD PTR [edx+164]
	test	eax, eax
	jge	SHORT $L127054
	push	5194					; 0000144aH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0DF@HNEL@?$CBFAILED?$CIDirect3DDevice8?9?$DOGetView@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L127054:

; 5195 : 
; 5196 : 		// Handle the texture formats we need.
; 5197 : 		{
; 5198 : 			// Determine which texture formats the device supports by calling CheckDeviceFormat for each supported format.
; 5199 : 			FirstPixelFormat = NULL;
; 5200 : 
; 5201 : 			if(!FAILED(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,0,D3DRTYPE_TEXTURE,D3DFMT_A8R8G8B8)))

	mov	edi, DWORD PTR _AdapterFormat$[esp+240]
	push	21					; 00000015H
	push	3
	push	ebx
	push	edi
	mov	DWORD PTR [ebp+16988], ebx
	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+40]
	test	eax, eax
	jl	SHORT $L147700

; 5202 : 				RecognizePixelFormat(Format8888,D3DFMT_A8R8G8B8,TEXT("A8R8G8B8"));

	lea	edx, DWORD PTR [ebp+16884]
	push	21					; 00000015H
	mov	BYTE PTR [edx], 1
	mov	DWORD PTR [edx+4], 21			; 00000015H
	mov	DWORD PTR [edx+12], OFFSET FLAT:??_C@_1BC@PNPN@?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ebp+16988]
	mov	DWORD PTR [edx+8], eax
	add	esp, 4
	mov	DWORD PTR [ebp+16988], edx
$L147700:

; 5203 : 						
; 5204 : 			if(!FAILED(Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,0,D3DRTYPE_TEXTURE,D3DFMT_A1R5G5B5)))

	mov	edx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	eax, DWORD PTR _Direct3D8
	mov	ecx, DWORD PTR [eax]
	push	25					; 00000019H
	push	3
	push	ebx
	push	edi
	push	1
	push	edx
	push	eax
	call	DWORD PTR [ecx+40]
	test	eax, eax
	jl	SHORT $L147704

; 5205 : 			   RecognizePixelFormat(Format1555,D3DFMT_A1R5G5B5,TEXT("A1R5G5B5"));

	lea	edx, DWORD PTR [ebp+16936]
	push	25					; 00000019H
	mov	BYTE PTR [edx], 1
	mov	DWORD PTR [edx+4], 25			; 00000019H
	mov	DWORD PTR [edx+12], OFFSET FLAT:??_C@_1BC@FEAG@?$AAA?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ ; `string'
	call	?GetFormatBPP@@YAHW4_D3DFORMAT@@@Z	; GetFormatBPP
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR [ebp+16988]
	mov	DWORD PTR [edx+8], eax
	add	esp, 4
	mov	DWORD PTR [ebp+16988], edx
$L147704:

; 5206 : 		}
; 5207 : 
; 5208 : 		// Verify mipmapping supported.
; 5209 : 		if(!(DeviceCaps8.TextureFilterCaps & D3DPTFILTERCAPS_MIPFPOINT)
; 5210 : 		 &&!(DeviceCaps8.TextureFilterCaps & D3DPTFILTERCAPS_MIPFLINEAR))

	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+64
	test	eax, 196608				; 00030000H
	jne	SHORT $L127062

; 5211 : 		{
; 5212 : 			appErrorf(TEXT("D3D Driver: Mipmapping not available with this driver"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GM@CMDP@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAM?$AAi?$AAp?$AAm?$AAa?$AAp?$AAp?$AAi@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8

; 5213 : 		} else

	jmp	SHORT $L127067
$L127062:

; 5214 : 		{
; 5215 : 			if( DeviceCaps8.TextureFilterCaps & D3DPTFILTERCAPS_MIPFLINEAR )

	test	eax, 131072				; 00020000H
	je	SHORT $L127065

; 5216 : 				debugf( NAME_Init, TEXT("D3D Driver: Supports trilinear"));

	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1DO@LJFH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
	push	762					; 000002faH
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 5217 : 			else

	jmp	SHORT $L127067
$L127065:

; 5218 : 				UseTrilinear = 0;

	mov	DWORD PTR [ebp+19128], ebx
$L127067:

; 5219 : 		}
; 5220 : 
; 5221 : 		// Check caps.
; 5222 : 		if( DeviceCaps8.ShadeCaps & D3DPSHADECAPS_SPECULARGOURAUDRGB )

	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+56
	test	ah, 2
	je	SHORT $L127068

; 5223 :  			debugf( NAME_Init, TEXT("D3D Driver: Supports specular gouraud") );

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1EM@HNBH@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
	push	762					; 000002faH
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 5224 : 		else

	jmp	SHORT $L127070
$L127068:

; 5225 : 			UseVertexSpecular = 0;

	mov	DWORD PTR [ebp+19148], ebx
$L127070:

; 5226 : 
; 5227 : 		if( DeviceCaps8.TextureOpCaps & D3DTEXOPCAPS_BLENDDIFFUSEALPHA )

	mov	eax, DWORD PTR ?DeviceCaps8@@3U_D3DCAPS8@@A+144
	test	ah, 8
	je	SHORT $L127071

; 5228 : 			debugf( NAME_Init, TEXT("D3D Driver: Supports BLENDDIFFUSEALPHA") );

	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1EO@FHMI@?$AAD?$AA3?$AAD?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs@ ; `string'
	push	762					; 000002faH
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 12					; 0000000cH

; 5229 : 		else

	jmp	SHORT $L127073
$L127071:

; 5230 : 			DetailTextures = 0;

	mov	DWORD PTR [ebp+104], ebx
$L127073:

; 5231 : 
; 5232 : 
; 5233 : 		// Depth buffering.
; 5234 : 		Direct3DDevice8->SetRenderState( D3DRS_ZENABLE, D3DZB_TRUE  );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	7
	push	eax
	call	DWORD PTR [ecx+200]

; 5235 : #if 0
; 5236 : 		/* NJS: Potentially enable W-buffering if it exists. */
; 5237 : 		if(	DeviceCaps8.RasterCaps & D3DPRASTERCAPS_WBUFFER)
; 5238 : 		{
; 5239 : 			debugf( NAME_Init, TEXT("D3D Driver: Supports w-buffering.") );
; 5240 : 			if((ViewportColorBits==16) ) // NVidia w-buffering in 32-bit color is borked on Pentium III's.
; 5241 : 			{
; 5242 : 				Direct3DDevice8->SetRenderState( D3DRS_ZENABLE, D3DZB_USEW );
; 5243 : 				debugf( NAME_Init, TEXT("D3D Driver: w-buffering enabled.") );
; 5244 : 			} else
; 5245 : 				debugf(NAME_Init, TEXT("D3D Driver: w-buffering NOT enabled."));
; 5246 : 		}
; 5247 : #endif
; 5248 : 
; 5249 : 		// Init render states.
; 5250 : 		{
; 5251 : 			Direct3DDevice8->SetRenderState( D3DRS_SPECULARENABLE, FALSE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	29					; 0000001dH
	push	eax
	call	DWORD PTR [edx+200]

; 5252 : 			Direct3DDevice8->SetRenderState( D3DRS_DITHERENABLE, TRUE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	26					; 0000001aH
	push	eax
	call	DWORD PTR [ecx+200]

; 5253 : 			Direct3DDevice8->SetRenderState( D3DRS_ZFUNC,D3DCMP_LESSEQUAL);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	4
	push	23					; 00000017H
	push	eax
	call	DWORD PTR [edx+200]

; 5254 : 			Direct3DDevice8->SetRenderState( D3DRS_FOGCOLOR, 0 );        

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [ecx+200]

; 5255 : 			Direct3DDevice8->SetRenderState( D3DRS_FOGTABLEMODE, D3DFOG_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [edx+200]

; 5256 : 			FLOAT FogStart=0.f, FogEnd = 65535.f;
; 5257 : 			Direct3DDevice8->SetRenderState( D3DRS_FOGSTART, *(DWORD*)&FogStart );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _FogStart$127074[esp+240], 0
	mov	edx, DWORD PTR _FogStart$127074[esp+240]
	push	edx
	push	36					; 00000024H
	push	eax
	mov	DWORD PTR _FogEnd$127075[esp+252], 1199570688 ; 477fff00H
	call	DWORD PTR [ecx+200]

; 5258 : 			Direct3DDevice8->SetRenderState( D3DRS_FOGEND, *(DWORD*)&FogEnd );

	mov	edx, DWORD PTR _FogEnd$127075[esp+240]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [ecx+200]

; 5259 : 			Direct3DDevice8->SetRenderState( D3DRS_LIGHTING, FALSE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	137					; 00000089H
	push	eax
	call	DWORD PTR [ecx+200]

; 5260 : 			ZBias=-1.f;	// Set ZBias to an invalid state to force it to be reset next time SetZBias is called
; 5261 : 			SrcBlend=(D3DBLEND)0;
; 5262 : 			DstBlend=(D3DBLEND)0;
; 5263 : 			AlphaBlendEnable=-1;

	or	eax, -1
	mov	DWORD PTR [ebp+675176], eax

; 5264 : 			BeginSceneCount=0;
; 5265 : 			LockCount=0;
; 5266 : 			TextureClampMode=-1;

	mov	DWORD PTR [ebp+675180], eax

; 5267 : 
; 5268 : 			D3DMATERIAL8 Material8;
; 5269 : 			memset(&Material8,0,sizeof(Material8));

	xor	eax, eax
	mov	ecx, 17					; 00000011H
	lea	edi, DWORD PTR _Material8$127080[esp+240]
	rep stosd

; 5270 : 
; 5271 : 			Material8.Ambient.r = 1.0f; Material8.Ambient.g = 1.0f; Material8.Ambient.b = 1.0f; Material8.Ambient.a = 1.0f;
; 5272 : 			Material8.Diffuse.r = 0.5f; Material8.Diffuse.g = 0.5f; Material8.Diffuse.b = 0.5f; Material8.Diffuse.a = 1.0f;
; 5273 : 			Material8.Power = 0.f;

	mov	DWORD PTR _Material8$127080[esp+304], eax

; 5274 : 
; 5275 : 			Direct3DDevice8->SetMaterial(&Material8);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ebp+675164], -1082130432	; bf800000H
	mov	DWORD PTR [ebp+675168], ebx
	mov	DWORD PTR [ebp+675172], ebx
	mov	DWORD PTR [ebp+675184], ebx
	mov	DWORD PTR [ebp+675188], ebx
	mov	DWORD PTR _Material8$127080[esp+256], 1065353216 ; 3f800000H
	mov	DWORD PTR _Material8$127080[esp+260], 1065353216 ; 3f800000H
	mov	DWORD PTR _Material8$127080[esp+264], 1065353216 ; 3f800000H
	mov	DWORD PTR _Material8$127080[esp+268], 1065353216 ; 3f800000H
	mov	DWORD PTR _Material8$127080[esp+240], 1056964608 ; 3f000000H
	mov	DWORD PTR _Material8$127080[esp+244], 1056964608 ; 3f000000H
	mov	DWORD PTR _Material8$127080[esp+248], 1056964608 ; 3f000000H
	mov	DWORD PTR _Material8$127080[esp+252], 1065353216 ; 3f800000H
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _Material8$127080[esp+240]
	push	ecx
	push	eax
	call	DWORD PTR [edx+168]

; 5276 : 			Direct3DDevice8->SetRenderState(D3DRS_SHADEMODE,D3DSHADE_GOURAUD);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	9
	push	eax
	call	DWORD PTR [edx+200]

; 5277 : 			Direct3DDevice8->SetRenderState(D3DRS_EMISSIVEMATERIALSOURCE,D3DMCS_COLOR1);

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	148					; 00000094H
	push	eax
	call	DWORD PTR [ecx+200]

; 5278 : 			Direct3DDevice8->SetRenderState(D3DRS_DIFFUSEMATERIALSOURCE,D3DMCS_MATERIAL);

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	145					; 00000091H
	push	eax
	call	DWORD PTR [edx+200]

; 5279 : 		}
; 5280 : 
; 5281 : 		// Init texture stage state.
; 5282 : 		{
; 5283 : 			// Set stage 0 state.
; 5284 : 			//FLOAT LodBias=-0.5f;
; 5285 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPMAPLODBIAS, *(DWORD*)&LodBias );

	mov	edx, DWORD PTR ?LodBias@@3MA
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	19					; 00000013H
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5286 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ADDRESSU,   D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	13					; 0000000dH
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5287 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ADDRESSV,   D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5288 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	2
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5289 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	3
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5290 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	4
	push	1
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5291 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	5
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5292 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	6
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5293 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_MODULATE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	4
	push	4
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5294 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5295 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	ebx
	push	eax
	call	DWORD PTR [edx+252]

; 5296 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_MIPFILTER, (UseTrilinear ? D3DTEXF_LINEAR : D3DTEXF_POINT));

	mov	edi, DWORD PTR [ebp+19128]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	edi, ebx
	setne	dl
	inc	edx
	push	edx
	push	18					; 00000012H
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5297 : 			Direct3DDevice8->SetTextureStageState( 0, D3DTSS_TEXCOORDINDEX, 0 );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	11					; 0000000bH
	push	ebx
	push	eax
	call	DWORD PTR [ecx+252]

; 5298 : 
; 5299 : 			// Set stage 1 state.
; 5300 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MIPMAPLODBIAS, *(DWORD*)&LodBias );

	mov	ecx, DWORD PTR ?LodBias@@3MA
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	19					; 00000013H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5301 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSU,   D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	13					; 0000000dH
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5302 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ADDRESSV,   D3DTADDRESS_WRAP );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	14					; 0000000eH
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5303 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	2
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5304 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLORARG2, D3DTA_CURRENT );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	3
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5305 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	1
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5306 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	5
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5307 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAARG2, D3DTA_CURRENT );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	6
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5308 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_ALPHAOP,   D3DTOP_DISABLE );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	1
	push	4
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5309 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	2
	push	16					; 00000010H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5310 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	17					; 00000011H
	push	1
	push	eax
	call	DWORD PTR [ecx+252]

; 5311 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_MIPFILTER, UseTrilinear ? D3DTEXF_LINEAR : D3DTEXF_POINT  );

	mov	edi, DWORD PTR [ebp+19128]
	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	xor	ecx, ecx
	cmp	edi, ebx
	setne	cl
	inc	ecx
	push	ecx
	push	18					; 00000012H
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5312 : 			Direct3DDevice8->SetTextureStageState( 1, D3DTSS_TEXCOORDINDEX, 1 );

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	push	1
	push	11					; 0000000bH
	push	1
	push	eax
	call	DWORD PTR [edx+252]

; 5313 : 		}
; 5314 : 
; 5315 : 		// Update the viewport.
; 5316 : 		verify(Viewport->ResizeViewport((Fullscreen ? BLIT_Fullscreen : 0) | BLIT_Direct3D, NewX, ViewportY, ViewportColorBits / 8 ));

	mov	edx, DWORD PTR [ebp+16772]
	mov	edi, DWORD PTR _Fullscreen$[esp+236]
	mov	ecx, DWORD PTR [ebp+48]
	mov	eax, DWORD PTR [ecx]
	shr	edx, 3
	push	edx
	mov	edx, DWORD PTR [ebp+16764]
	push	edx
	mov	edx, DWORD PTR _NewX$[esp+248]
	push	edx
	xor	edx, edx
	cmp	edi, ebx
	setne	dl
	or	edx, 16					; 00000010H
	push	edx
	call	DWORD PTR [eax+88]
	test	eax, eax
	jne	SHORT $L127083
	push	5316					; 000014c4H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0HG@OIHH@Viewport?9?$DOResizeViewport?$CI?$CIFullsc@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L127083:

; 5317 : 		Lock( FColor(0,0,0), 0, 0, FPlane(0,0,0,0), FPlane(0,0,0,0), FPlane(0,0,0,0), LOCKR_ClearScreen, NULL, NULL );

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T146757[esp+252]
	call	DWORD PTR __imp_??0FColor@@QAE@EEE@Z
	mov	ebx, DWORD PTR [ebp]
	push	0
	push	0
	push	1
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	push	0
	push	0
	push	0
	push	0
	mov	edi, eax
	call	DWORD PTR __imp_??0FPlane@@QAE@MMMM@Z
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp_??0FPlane@@QAE@MMMM@Z
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	push	0
	push	0
	push	0
	push	0
	call	DWORD PTR __imp_??0FPlane@@QAE@MMMM@Z
	mov	eax, DWORD PTR [edi]
	push	0
	push	eax
	xor	edx, edx
	mov	ecx, ebp
	call	DWORD PTR [ebx+92]

; 5318 : 		Unlock(1);

	mov	eax, DWORD PTR [ebp]
	mov	edx, 1
	mov	ecx, ebp
	call	DWORD PTR [eax+96]

; 5319 : 
; 5320 : 		// Allocate dynamic vertex buffers.
; 5321 : 		WorldVertices.Init(Direct3DDevice8,WORLDSURFACE_VERTEXBUFFER_SIZE);

	mov	eax, DWORD PTR [ebp+16684]
	test	eax, eax
	mov	edi, DWORD PTR [esi]
	lea	ebx, DWORD PTR [ebp+16684]
	je	SHORT $L147733
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [ebx], 0
$L147733:
	test	edi, edi
	jne	SHORT $L147721
	push	255					; 000000ffH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_08DHAB@InDevice?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L147721:
	push	ebx
	push	0
	push	580					; 00000244H
	push	520					; 00000208H
	push	147456					; 00024000H
	mov	DWORD PTR [ebp+16680], edi
	mov	DWORD PTR [ebp+16688], 4096		; 00001000H
	mov	edx, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [edx+92]
	test	eax, eax
	jge	SHORT $L147724
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	263					; 00000107H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L147724:

; 5322 : 		ActorVertices.Init(Direct3DDevice8,ACTORPOLY_VERTEXBUFFER_SIZE);

	mov	eax, DWORD PTR [ebp+16704]
	test	eax, eax
	mov	edi, DWORD PTR [esi]
	lea	ebx, DWORD PTR [ebp+16704]
	je	SHORT $L147764
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [ebx], 0
$L147764:
	test	edi, edi
	jne	SHORT $L147752
	push	255					; 000000ffH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_08DHAB@InDevice?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L147752:
	push	ebx
	push	0
	push	708					; 000002c4H
	push	520					; 00000208H
	push	655360					; 000a0000H
	mov	DWORD PTR [ebp+16700], edi
	mov	DWORD PTR [ebp+16708], 16384		; 00004000H
	mov	eax, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [eax+92]
	test	eax, eax
	jge	SHORT $L147755
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	263					; 00000107H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L147755:

; 5323 : 		LineVertices.Init(Direct3DDevice8,LINE_VERTEXBUFFER_SIZE);

	mov	eax, DWORD PTR [ebp+16724]
	test	eax, eax
	mov	edi, DWORD PTR [esi]
	lea	ebx, DWORD PTR [ebp+16724]
	je	SHORT $L147794
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [ebx], 0
$L147794:
	test	edi, edi
	jne	SHORT $L147783
	push	255					; 000000ffH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_08DHAB@InDevice?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L147783:
	push	ebx
	push	0
	push	66					; 00000042H
	push	520					; 00000208H
	push	262144					; 00040000H
	mov	DWORD PTR [ebp+16720], edi
	mov	DWORD PTR [ebp+16728], 16384		; 00004000H
	mov	edx, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [edx+92]
	test	eax, eax
	jge	SHORT $L147787
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	263					; 00000107H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L147787:

; 5324 : 		ParticleVertices.Init(Direct3DDevice8,PARTICLE_VERTEXBUFFER_SIZE);

	mov	eax, DWORD PTR [ebp+16744]
	test	eax, eax
	mov	edi, DWORD PTR [esi]
	lea	ebx, DWORD PTR [ebp+16744]
	je	SHORT $L147817
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [ebx], 0
$L147817:
	test	edi, edi
	jne	SHORT $L147821
	push	255					; 000000ffH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_08DHAB@InDevice?$AA@	; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L147821:
	push	ebx
	push	0
	push	322					; 00000142H
	push	520					; 00000208H
	push	393216					; 00060000H
	mov	DWORD PTR [ebp+16740], edi
	mov	DWORD PTR [ebp+16748], 16384		; 00004000H
	mov	eax, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [eax+92]
	test	eax, eax
	jge	SHORT $L147824
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	263					; 00000107H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@CNOI@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L147824:

; 5325 : 
; 5326 : 	#ifdef BATCH_PROJECTOR_POLYS
; 5327 : 		ProjectorVertices.Init(Direct3DDevice8, PROJECTOR_VERTEXBUFFER_SIZE);
; 5328 : 	#endif
; 5329 : 		Flush(!GIsEditor);	// Don't force a precache.

	mov	ecx, DWORD PTR __imp_?GIsEditor@@3HA
	mov	edi, DWORD PTR [ecx]
	mov	eax, DWORD PTR [ebp]
	xor	edx, edx
	test	edi, edi
	sete	dl
	mov	ecx, ebp
	call	DWORD PTR [eax+88]

; 5330 : 
; 5331 : 		// JEP...
; 5332 : 		// Determine which rendertarget format to use, and create clipper texture
; 5333 : 		{
; 5334 : 			D3DDISPLAYMODE		DisplayMode;
; 5335 : 
; 5336 : 			Direct3D8->GetAdapterDisplayMode(BestAdapterIndex,&DisplayMode);

	mov	eax, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR _DisplayMode$127092[esp+240]
	push	ecx
	mov	ecx, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	push	ecx
	push	eax
	call	DWORD PTR [edx+32]

; 5337 : 
; 5338 : 			AdapterFormat = DisplayMode.Format;
; 5339 : 
; 5340 : 			//RenderTargetFormat = D3DFMT_R5G6B5;
; 5341 : 			RenderTargetFormat = AdapterFormat;

	mov	eax, DWORD PTR _DisplayMode$127092[esp+252]

; 5342 : 
; 5343 : 			TCHAR *FmtStr = TEXT("Unknown");
; 5344 : 
; 5345 : 			if (Direct3D8->CheckDeviceFormat(BestAdapterIndex,D3DDEVTYPE_HAL,AdapterFormat,D3DUSAGE_RENDERTARGET,D3DRTYPE_SURFACE,RenderTargetFormat) != D3D_OK)

	push	eax
	push	1
	push	1
	push	eax
	mov	DWORD PTR [ebp+19100], eax
	mov	eax, DWORD PTR ?BestAdapterIndex@@3HA	; BestAdapterIndex
	mov	ecx, DWORD PTR _Direct3D8
	mov	edx, DWORD PTR [ecx]
	push	1
	push	eax
	push	ecx
	mov	edi, OFFSET FLAT:??_C@_1BA@JDJI@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@ ; `string'
	call	DWORD PTR [edx+40]
	test	eax, eax
	je	SHORT $L127096

; 5346 : 				RenderTargetFormat = D3DFMT_UNKNOWN;

	mov	DWORD PTR [ebp+19100], 0
$L127096:

; 5347 : 
; 5348 : 			#define FMT2STR(x) case x: FmtStr = TEXT(#x); break;
; 5349 : 
; 5350 : 			switch (RenderTargetFormat)
; 5351 : 			{

	mov	eax, DWORD PTR [ebp+19100]
	add	eax, -21				; ffffffebH
	cmp	eax, 3
	ja	SHORT $L127098
	jmp	DWORD PTR $L147922[eax*4]
$L127101:

; 5352 : 				FMT2STR(D3DFMT_A8R8G8B8);

	mov	edi, OFFSET FLAT:??_C@_1CA@MMOI@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAA?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
	jmp	SHORT $L127098
$L127103:

; 5353 : 				FMT2STR(D3DFMT_X8R8G8B8);

	mov	edi, OFFSET FLAT:??_C@_1CA@NLNL@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA8?$AAR?$AA8?$AAG?$AA8?$AAB?$AA8?$AA?$AA@ ; `string'
	jmp	SHORT $L127098
$L127105:

; 5354 : 				FMT2STR(D3DFMT_R5G6B5);

	mov	edi, OFFSET FLAT:??_C@_1BM@CBJB@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAR?$AA5?$AAG?$AA6?$AAB?$AA5?$AA?$AA@ ; `string'
	jmp	SHORT $L127098
$L127107:

; 5355 : 				FMT2STR(D3DFMT_X1R5G5B5);

	mov	edi, OFFSET FLAT:??_C@_1CA@HCCA@?$AAD?$AA3?$AAD?$AAF?$AAM?$AAT?$AA_?$AAX?$AA1?$AAR?$AA5?$AAG?$AA5?$AAB?$AA5?$AA?$AA@ ; `string'
$L127098:

; 5356 : 			}
; 5357 : 
; 5358 : 			debugf(NAME_Init,TEXT("Rendertarget format: %s"), FmtStr);

	mov	ecx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	edx, DWORD PTR [ecx]
	mov	ebx, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	push	edi
	push	OFFSET FLAT:??_C@_1DA@PNOF@?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?3@ ; `string'
	push	762					; 000002faH
	push	edx
	call	ebx

; 5359 : 		
; 5360 : 			if (RenderTargetFormat != D3DFMT_UNKNOWN)

	mov	eax, DWORD PTR [ebp+19100]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$L127117

; 5361 : 			{
; 5362 : 				// Create a 128x1 clipper texture (also used to fade projected textures out)
; 5363 : 				if (Direct3DDevice8->CreateTexture(128,1,1,0,D3DFMT_R5G6B5,D3DPOOL_MANAGED,&ClipperTexture) == D3D_OK)

	mov	edi, DWORD PTR -208+[esp+240]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	1
	push	23					; 00000017H
	push	0
	push	1
	push	1
	push	128					; 00000080H
	push	eax
	call	DWORD PTR [ecx+80]
	test	eax, eax
	jne	$L127117

; 5364 : 				{
; 5365 : 					debugf(NAME_Init,TEXT("Clipper texture created"));

	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1DA@KNFF@?$AAC?$AAl?$AAi?$AAp?$AAp?$AAe?$AAr?$AA?5?$AAt?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAc?$AAr?$AAe?$AAa@ ; `string'
	push	762					; 000002faH
	push	eax
	call	ebx

; 5366 : 
; 5367 : 					D3DLOCKED_RECT	LockedRect;
; 5368 : 					D3DSURFACE_DESC	SurfaceDesc;
; 5369 : 
; 5370 : 					ClipperTexture->GetLevelDesc(0,&SurfaceDesc);

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR _SurfaceDesc$127115[esp+240]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+56]

; 5371 : 
; 5372 : 					if (ClipperTexture->LockRect(0,&LockedRect,NULL,0) == D3D_OK)

	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	0
	lea	edx, DWORD PTR _LockedRect$127114[esp+248]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+64]
	test	eax, eax
	jne	SHORT $L127117

; 5373 : 					{
; 5374 : 						WORD *Bits = (WORD*)LockedRect.pBits;

	mov	eax, DWORD PTR _LockedRect$127114[esp+244]
	mov	DWORD PTR _Bits$127118[esp+240], eax

; 5375 : 
; 5376 : 						// Create a grey scale ramp
; 5377 : 						for(DWORD u = 0;u < SurfaceDesc.Width; u++)

	mov	eax, DWORD PTR _SurfaceDesc$127115[esp+264]
	xor	ecx, ecx
	test	eax, eax
	jbe	SHORT $L127123

; 5400 : 	}

	npad	2
$L127121:

; 5378 : 						{
; 5379 : 							WORD	Val = (u<<1);
; 5380 : 				
; 5381 : 							if (u == 0)		// This is the pixel that will actually clip out pixels that are behind the near projector plane

	test	ecx, ecx
	lea	eax, DWORD PTR [ecx+ecx]
	jne	SHORT $L127125

; 5382 : 								Val = 255;

	mov	eax, 255				; 000000ffH
$L127125:

; 5383 : 
; 5384 : 							Bits[u] = ((Val>>3)<<11) | ((Val>>2)<<5) | (Val>>3);

	mov	edx, eax
	and	edx, 65528				; 0000fff8H
	mov	ebx, eax
	shr	ax, 3
	shl	edx, 5
	and	ebx, 65532				; 0000fffcH
	or	edx, ebx
	shl	edx, 3
	or	edx, eax
	mov	eax, DWORD PTR _Bits$127118[esp+240]
	mov	WORD PTR [eax+ecx*2], dx
	mov	eax, DWORD PTR _SurfaceDesc$127115[esp+264]
	inc	ecx
	cmp	ecx, eax
	jb	SHORT $L127121
$L127123:

; 5385 : 						}
; 5386 : 
; 5387 : 						ClipperTexture->UnlockRect(0);

	mov	edi, DWORD PTR [edi]
	mov	ecx, DWORD PTR [edi]
	push	0
	push	edi
	call	DWORD PTR [ecx+68]
$L127117:

; 5388 : 					}
; 5389 : 				}
; 5390 : 			}
; 5391 : 
; 5392 : 			// If we already have some render targets, re-create them with (potentially) new format
; 5393 : 			for (INT i = 0; i < RenderTargetArray.Num(); i++)

	mov	eax, DWORD PTR [ebp+216]
	test	eax, eax
	mov	DWORD PTR _i$127126[esp+240], 0
	jle	$L127129
	mov	DWORD PTR -216+[esp+240], 0
$L127127:

; 5394 : 				if (!InitRenderTargetRes(&RenderTargetArray(i)))

	mov	edi, DWORD PTR [ebp+212]
	mov	ecx, DWORD PTR -216+[esp+240]
	mov	eax, DWORD PTR [edi+ecx]
	add	edi, ecx
	test	eax, eax
	jne	SHORT $L147839
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jne	SHORT $L147841
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $L127128
$L147841:
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	push	eax
	jmp	SHORT $L147918
$L147839:
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	lea	ebx, DWORD PTR [edi+4]
	je	SHORT $L147842
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	jne	SHORT $L127128
	push	OFFSET FLAT:??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	jmp	SHORT $L147919
$L147842:
	mov	edx, DWORD PTR [ebp+19100]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	0
	push	edx
	mov	edx, DWORD PTR [edi+16]
	push	1
	push	1
	push	edx
	mov	edx, DWORD PTR [edi+12]
	push	edx
	push	eax
	call	DWORD PTR [ecx+80]
	test	eax, eax
	jne	SHORT $L147886
	mov	ebx, DWORD PTR [ebx]
	mov	eax, DWORD PTR [ebx]
	add	edi, 8
	push	edi
	push	0
	push	ebx
	call	DWORD PTR [eax+60]
	jmp	SHORT $L127128
$L147886:

; 5395 : 					appErrorf(TEXT("SetRes: InitRenderTargetRes FAILED"));

	push	OFFSET FLAT:??_C@_1EG@JNCJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa@ ; `string'
$L147919:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	edx
$L147918:
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L127128:
	mov	eax, DWORD PTR _i$127126[esp+240]
	mov	edx, DWORD PTR -216+[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$127126[esp+240], eax
	mov	DWORD PTR -216+[esp+240], edx
	jl	$L127127
$L127129:

; 5396 : 		}
; 5397 : 		// ...JEP
; 5398 : 
; 5399 : 		return 1;

	mov	eax, 1

; 5400 : 	}

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 224				; 000000e0H
	ret	12					; 0000000cH

; 5147 : 				return UnSetRes(TEXT("CheckDepthStencilMatch"),0);

$L147419:
	lea	edi, DWORD PTR [esi+8]
	push	edi
	call	?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ; SafeRelease
	add	esi, 4
	push	esi
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	DWORD PTR [edi], 0
	mov	DWORD PTR [esi], 0
$L147920:
	add	esp, 8
$L147425:
	mov	eax, DWORD PTR _i$147423[esp+240]
	mov	ecx, DWORD PTR [ebp+216]
	inc	eax
	add	ebx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$147423[esp+240], eax
	jl	$L147424
$L147426:
	mov	eax, DWORD PTR -208+[esp+240]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ; SafeRelease
	mov	ecx, DWORD PTR -200+[esp+244]
	push	ecx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	edx, DWORD PTR -192+[esp+248]
	push	edx
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	eax, DWORD PTR -204+[esp+252]
	push	eax
	call	?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ; SafeRelease
	mov	esi, DWORD PTR -196+[esp+256]
	mov	eax, DWORD PTR [esi]
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $L147438
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi], 0
$L147438:
	push	0
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	OFFSET FLAT:??_C@_1CO@HHEN@?$AAC?$AAh?$AAe?$AAc?$AAk?$AAD?$AAe?$AAp?$AAt?$AAh?$AAS?$AAt?$AAe?$AAn?$AAc?$AAi?$AAl?$AAM?$AAa?$AAt@ ; `string'
$L147914:
	mov	edx, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	eax
$L147910:
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 20					; 00000014H

; 5400 : 	}

	pop	edi
	pop	esi
	pop	ebp
	xor	eax, eax
	pop	ebx
	add	esp, 224				; 000000e0H
	ret	12					; 0000000cH
$L147922:
	DD	$L127101
	DD	$L127103
	DD	$L127105
	DD	$L127107
?SetRes@UD3DRenderDevice@@UAIHHHHH@Z ENDP		; UD3DRenderDevice::SetRes
_TEXT	ENDS
PUBLIC	?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z		; UD3DRenderDevice::UnSetRes
; Function compile flags: /Ogty
;	COMDAT ?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z
_TEXT	SEGMENT
_i$147993 = -8
_Msg$ = -4
_h$ = 8
?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z PROC NEAR	; UD3DRenderDevice::UnSetRes, COMDAT
; _this$ = ecx
; _Msg$ = edx

; 5403 : 	{

	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 5404 : 		if(BeginSceneCount) EndScene();

	mov	eax, DWORD PTR [edi+675184]
	xor	ebx, ebx
	cmp	eax, ebx
	mov	esi, edx
	mov	DWORD PTR _Msg$[esp+20], esi
	je	SHORT $L147928
	dec	eax
	mov	DWORD PTR [edi+675184], eax
	mov	eax, DWORD PTR [edi+19124]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+140]
$L147928:

; 5405 : 
; 5406 : 		Flush(0);

	mov	eax, DWORD PTR [edi]
	xor	edx, edx
	mov	ecx, edi
	call	DWORD PTR [eax+88]

; 5407 : 		CleanupRenderTargetResources();	// JEP: Free render targets

	cmp	DWORD PTR [edi+216], ebx
	mov	DWORD PTR _i$147993[esp+20], ebx
	jle	SHORT $L147996
	push	ebp
	xor	ebp, ebp
$L147994:
	mov	esi, DWORD PTR [edi+212]
	mov	eax, DWORD PTR [esi+ebp]
	add	esi, ebp
	cmp	eax, ebx
	mov	eax, DWORD PTR [esi+8]
	jne	SHORT $L147976
	cmp	eax, ebx
	jne	SHORT $L147978
	cmp	DWORD PTR [esi+4], ebx
	je	SHORT $L147995
$L147978:
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L147995
$L147976:
	cmp	eax, ebx
	je	SHORT $L147982
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ebx
$L147982:
	mov	eax, DWORD PTR [esi+4]
	cmp	eax, ebx
	je	SHORT $L147986
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+4], ebx
$L147986:
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+4], ebx
$L147995:
	mov	eax, DWORD PTR _i$147993[esp+24]
	mov	ecx, DWORD PTR [edi+216]
	inc	eax
	add	ebp, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$147993[esp+24], eax
	jl	SHORT $L147994
	mov	esi, DWORD PTR _Msg$[esp+24]
	pop	ebp
$L147996:
	mov	eax, DWORD PTR [edi+19112]
	cmp	eax, ebx
	je	SHORT $L147990
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+19112], ebx
$L147990:

; 5408 : 		CleanupVertexBuffers();

	mov	eax, DWORD PTR [edi+16684]
	cmp	eax, ebx
	je	SHORT $L148055
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi+16684], ebx
$L148055:
	mov	eax, DWORD PTR [edi+16704]
	cmp	eax, ebx
	je	SHORT $L148061
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+16704], ebx
$L148061:
	mov	eax, DWORD PTR [edi+16724]
	cmp	eax, ebx
	je	SHORT $L148067
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [edi+16724], ebx
$L148067:
	mov	eax, DWORD PTR [edi+16744]
	cmp	eax, ebx
	je	SHORT $L148073
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+16744], ebx
$L148073:

; 5409 : 
; 5410 : 		if( Msg ) debugf(NAME_Init,TEXT("%s (%s)"),Msg,DXGetErrorString8(h));

	cmp	esi, ebx
	je	SHORT $L148078
	mov	edx, DWORD PTR _h$[esp+16]
	push	edx
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	mov	eax, DWORD PTR __imp_?GLog@@3PAVFOutputDevice@@A
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	OFFSET FLAT:??_C@_1BA@CMPN@?$AA?$CF?$AAs?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
	push	762					; 000002faH
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXW4EName@@PBGZZ
	add	esp, 20					; 00000014H
$L148078:
	pop	edi
	pop	esi

; 5411 : 		return 0;

	xor	eax, eax
	pop	ebx

; 5412 : 	}

	add	esp, 8
	ret	4
?UnSetRes@UD3DRenderDevice@@QAIHPBGJ@Z ENDP		; UD3DRenderDevice::UnSetRes
_TEXT	ENDS
PUBLIC	?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z ; UD3DRenderDevice::UpdateModulation
; Function compile flags: /Ogty
;	COMDAT ?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z
_TEXT	SEGMENT
_ModulateThings$ = 8
_FinalColor$ = 12
_MaxColor$ = 16
$T148083 = 12
$T148095 = 12
$T148113 = 16
$T148131 = 16
$T148149 = 16
_I$148166 = 16
_I$148176 = 8
_I$148186 = 8
_I$148196 = 8
?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z PROC NEAR ; UD3DRenderDevice::UpdateModulation, COMDAT
; _this$ = ecx

; 5416 : 		VALIDATE;
; 5417 : 
; 5418 : 		FinalColor *= MaxColor;

	mov	eax, DWORD PTR _FinalColor$[esp-4]
	mov	ecx, DWORD PTR _MaxColor$[esp-4]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	fld	DWORD PTR [ecx+4]
	fmul	DWORD PTR [eax+4]
	fstp	DWORD PTR [eax+4]
	fld	DWORD PTR [ecx+8]

; 5419 : 		return --ModulateThings ? 0xffffffff : (FColor(FinalColor).TrueColor() | 0xff000000);

	mov	ecx, DWORD PTR _ModulateThings$[esp-4]
	fmul	DWORD PTR [eax+8]
	fstp	DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	dec	edx
	mov	DWORD PTR [ecx], edx
	je	SHORT $L148084
	or	eax, -1

; 5420 : 	}

	ret	12					; 0000000cH
$L148084:

; 5419 : 		return --ModulateThings ? 0xffffffff : (FColor(FinalColor).TrueColor() | 0xff000000);

	fld	DWORD PTR [eax]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T148095[esp-4]
	fld	DWORD PTR $T148095[esp-4]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$148166[esp-4]
	mov	ecx, DWORD PTR _I$148166[esp-4]
	test	ecx, ecx
	jge	SHORT $L148172
	mov	BYTE PTR $T148083[esp-4], 0
	jmp	SHORT $L148171
$L148172:
	cmp	ecx, 255				; 000000ffH
	mov	BYTE PTR $T148083[esp-4], cl
	jl	SHORT $L148171
	mov	BYTE PTR $T148083[esp-4], 255		; 000000ffH
$L148171:
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T148113[esp-4]
	fld	DWORD PTR $T148113[esp-4]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$148176[esp-4]
	mov	ecx, DWORD PTR _I$148176[esp-4]
	test	ecx, ecx
	jge	SHORT $L148182
	xor	dl, dl
	jmp	SHORT $L148209
$L148182:
	cmp	ecx, 255				; 000000ffH
	jge	SHORT $L148180
	mov	dl, cl
	jmp	SHORT $L148209
$L148180:
	or	dl, 255					; 000000ffH
$L148209:
	fld	DWORD PTR [eax+8]
	mov	BYTE PTR $T148083[esp-3], dl
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T148131[esp-4]
	fld	DWORD PTR $T148131[esp-4]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$148186[esp-4]
	mov	ecx, DWORD PTR _I$148186[esp-4]
	test	ecx, ecx
	jge	SHORT $L148192
	xor	cl, cl
	jmp	SHORT $L148210
$L148192:
	cmp	ecx, 255				; 000000ffH
	jl	SHORT $L148210
	or	cl, 255					; 000000ffH
$L148210:
	fld	DWORD PTR [eax+12]
	mov	BYTE PTR $T148083[esp-2], cl
	fmul	DWORD PTR __real@43800000
	fstp	DWORD PTR $T148149[esp-4]
	fld	DWORD PTR $T148149[esp-4]
	fsub	DWORD PTR ?Half@?1??appFloor@@YAHM@Z@4MA ; Half
	fistp	DWORD PTR _I$148196[esp-4]
	mov	eax, DWORD PTR _I$148196[esp-4]
	test	eax, eax
	jge	SHORT $L148202
	mov	BYTE PTR $T148083[esp-1], 0
	jmp	SHORT $L148201
$L148202:
	cmp	eax, 255				; 000000ffH
	mov	BYTE PTR $T148083[esp-1], al
	jl	SHORT $L148201
	mov	BYTE PTR $T148083[esp-1], 255		; 000000ffH
$L148201:
	xor	eax, eax
	mov	al, cl
	mov	ecx, DWORD PTR $T148083[esp-4]
	shl	ecx, 16					; 00000010H
	mov	ah, dl
	add	eax, ecx
	or	eax, -16777216				; ff000000H

; 5420 : 	}

	ret	12					; 0000000cH
?UpdateModulation@UD3DRenderDevice@@QAEKAAHAAVFPlane@@ABV2@@Z ENDP ; UD3DRenderDevice::UpdateModulation
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z
_TEXT	SEGMENT
_Enable$ = 8
?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z PROC NEAR	; UD3DRenderDevice::SetDistanceFog, COMDAT
; _this$ = ecx

; 5423 : 	{	

	push	esi
	mov	esi, ecx

; 5424 : 		VALIDATE;
; 5425 : 
; 5426 : 		if((!UseDistanceFog)||(Enable==DistanceFogEnabled)) return;

	mov	eax, DWORD PTR [esi+675196]
	test	eax, eax
	push	edi
	je	$L127144
	mov	edi, DWORD PTR _Enable$[esp+4]
	cmp	edi, DWORD PTR [esi+675192]
	je	$L127144

; 5427 : 
; 5428 : 		if(Enable)

	test	edi, edi

; 5429 : 		{		
; 5430 : 			// Enable fog.
; 5431 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGENABLE, TRUE);

	mov	eax, DWORD PTR [esi+19124]
	je	$L127145
	mov	ecx, DWORD PTR [eax]
	push	ebx
	push	1
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]

; 5432 : 			Direct3DDevice8->SetRenderState(D3DRS_RANGEFOGENABLE, TRUE);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	1
	push	48					; 00000030H
	push	eax
	call	DWORD PTR [edx+200]

; 5433 : 
; 5434 : 			// Set the fog color.
; 5435 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGCOLOR, ((DWORD)(DistanceFogColor.R)<<16) | ((DWORD)(DistanceFogColor.G)<<8) | ((DWORD)(DistanceFogColor.B)));

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dh, BYTE PTR [esi+675208]
	xor	ebx, ebx
	mov	bl, BYTE PTR [esi+675210]
	mov	dl, BYTE PTR [esi+675209]
	shl	edx, 8
	or	edx, ebx
	push	edx
	push	34					; 00000022H
	push	eax
	call	DWORD PTR [ecx+200]

; 5436 : 
; 5437 : 			// Set fog parameters.
; 5438 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGTABLEMODE, D3DFOG_LINEAR);

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	3
	push	35					; 00000023H
	push	eax
	call	DWORD PTR [ecx+200]

; 5439 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGSTART, *(DWORD *)(&DistanceFogBegin));

	mov	ecx, DWORD PTR [esi+675200]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	36					; 00000024H
	push	eax
	call	DWORD PTR [edx+200]

; 5440 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGEND,   *(DWORD *)(&DistanceFogEnd));

	mov	ecx, DWORD PTR [esi+675204]
	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	37					; 00000025H
	push	eax
	call	DWORD PTR [edx+200]
	pop	ebx

; 5444 : 
; 5445 : 		DistanceFogEnabled=Enable;

	mov	DWORD PTR [esi+675192], edi
	pop	edi
	pop	esi

; 5446 : 	}

	ret	4
$L127145:

; 5441 : 		}
; 5442 : 		else
; 5443 : 			Direct3DDevice8->SetRenderState(D3DRS_FOGENABLE, FALSE);		

	mov	edx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [edx+200]

; 5444 : 
; 5445 : 		DistanceFogEnabled=Enable;

	mov	DWORD PTR [esi+675192], edi
$L127144:
	pop	edi
	pop	esi

; 5446 : 	}

	ret	4
?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ENDP		; UD3DRenderDevice::SetDistanceFog
_TEXT	ENDS
PUBLIC	?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ; UD3DRenderDevice::InitRenderTargetRes
; Function compile flags: /Ogty
;	COMDAT ?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z
_TEXT	SEGMENT
_RT$ = 8
?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z PROC NEAR ; UD3DRenderDevice::InitRenderTargetRes, COMDAT
; _this$ = ecx

; 5456 : 	{

	push	esi

; 5457 : 		if (!RT->Active)

	mov	esi, DWORD PTR _RT$[esp]
	cmp	DWORD PTR [esi], 0
	push	edi
	jne	SHORT $L127154

; 5458 : 		{
; 5459 : 			if (RT->pRenderTargetTex || RT->pRenderTargetSurf)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L127156
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	$L127155
$L127156:

; 5460 : 				appErrorf(TEXT("InitRenderTargetRes: RenderTarget is invalid."));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1FM@ONLA@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	pop	edi

; 5475 : 
; 5476 : 		return true;

	mov	eax, 1
	pop	esi

; 5477 : 	}

	ret	4
$L127154:

; 5461 : 			return true;
; 5462 : 		}
; 5463 : 
; 5464 : 		if (RT->pRenderTargetTex)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	lea	edi, DWORD PTR [esi+4]
	je	SHORT $L127158

; 5465 : 		{
; 5466 : 			if (!RT->pRenderTargetSurf)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L127155

; 5467 : 				appErrorf(TEXT("InitRenderTargetRes: RenderTarget is invalid (no surface)."));

	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	pop	edi

; 5475 : 
; 5476 : 		return true;

	mov	eax, 1
	pop	esi

; 5477 : 	}

	ret	4
$L127158:

; 5468 : 			return true;
; 5469 : 		}
; 5470 : 
; 5471 : 		if (Direct3DDevice8->CreateTexture(RT->Width,RT->Height,1,D3DUSAGE_RENDERTARGET,RenderTargetFormat,D3DPOOL_DEFAULT,&RT->pRenderTargetTex) != D3D_OK)

	mov	eax, DWORD PTR [ecx+19124]
	mov	ecx, DWORD PTR [ecx+19100]
	mov	edx, DWORD PTR [eax]
	push	edi
	push	0
	push	ecx
	mov	ecx, DWORD PTR [esi+16]
	push	1
	push	1
	push	ecx
	mov	ecx, DWORD PTR [esi+12]
	push	ecx
	push	eax
	call	DWORD PTR [edx+80]
	test	eax, eax
	je	SHORT $L127162
	pop	edi

; 5472 : 			return false;

	xor	eax, eax
	pop	esi

; 5477 : 	}

	ret	4
$L127162:

; 5473 : 
; 5474 : 		RT->pRenderTargetTex->GetSurfaceLevel(0, &RT->pRenderTargetSurf);

	mov	edi, DWORD PTR [edi]
	mov	edx, DWORD PTR [edi]
	add	esi, 8
	push	esi
	push	0
	push	edi
	call	DWORD PTR [edx+60]
$L127155:
	pop	edi

; 5475 : 
; 5476 : 		return true;

	mov	eax, 1
	pop	esi

; 5477 : 	}

	ret	4
?InitRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ENDP ; UD3DRenderDevice::InitRenderTargetRes
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z
_TEXT	SEGMENT
_RT$ = 8
?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z PROC NEAR ; UD3DRenderDevice::ShutdownRenderTargetRes, COMDAT
; _this$ = ecx

; 5483 : 	{

	push	esi

; 5484 : 		if (!RT->Active)

	mov	esi, DWORD PTR _RT$[esp]
	mov	eax, DWORD PTR [esi]
	push	edi
	xor	edi, edi
	cmp	eax, edi

; 5485 : 		{
; 5486 : 			if (RT->pRenderTargetSurf || RT->pRenderTargetTex)

	mov	eax, DWORD PTR [esi+8]
	jne	SHORT $L127165
	cmp	eax, edi
	jne	SHORT $L127167
	cmp	DWORD PTR [esi+4], edi
	je	SHORT $L127166
$L127167:

; 5487 : 				appErrorf(TEXT("ShutdownRenderTargetRes: RenderTarget is invalid."));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	pop	edi

; 5497 : 
; 5498 : 		return true;

	mov	eax, 1
	pop	esi

; 5499 : 	}

	ret	4
$L127165:

; 5488 : 			return true;
; 5489 : 		}
; 5490 : 
; 5491 : 		SafeRelease(RT->pRenderTargetSurf);

	cmp	eax, edi
	je	SHORT $L148223
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edi
$L148223:

; 5492 : 
; 5493 : 		SafeRelease(RT->pRenderTargetTex);

	mov	eax, DWORD PTR [esi+4]
	cmp	eax, edi
	je	SHORT $L148229
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], edi
$L148229:

; 5494 : 
; 5495 : 		RT->pRenderTargetSurf = NULL;

	mov	DWORD PTR [esi+8], edi

; 5496 : 		RT->pRenderTargetTex = NULL;

	mov	DWORD PTR [esi+4], edi
$L127166:
	pop	edi

; 5497 : 
; 5498 : 		return true;

	mov	eax, 1
	pop	esi

; 5499 : 	}

	ret	4
?ShutdownRenderTargetRes@UD3DRenderDevice@@QAEHPAURenderTargetInfo@1@@Z ENDP ; UD3DRenderDevice::ShutdownRenderTargetRes
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z
_TEXT	SEGMENT
_RenderTarget$ = -20
_W$ = 8
_H$ = 12
?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z PROC NEAR ; UD3DRenderDevice::CreateRenderTarget, COMDAT
; _this$ = ecx

; 5505 : 	{

	sub	esp, 20					; 00000014H
	push	ebx
	push	ebp
	push	esi
	mov	esi, ecx
	push	edi

; 5506 : 		if (RenderTargetFormat == D3DFMT_UNKNOWN)

	mov	edi, DWORD PTR [esi+19100]
	test	edi, edi
	jne	SHORT $L127177
$L148333:
	pop	edi
	pop	esi
	pop	ebp

; 5507 : 			return NULL;

	xor	eax, eax
	pop	ebx

; 5531 : 	}

	add	esp, 20					; 00000014H
	ret	8
$L127177:

; 5508 : 
; 5509 : 		RenderTargetInfo	RenderTarget;
; 5510 : 
; 5511 : 		memset(&RenderTarget, 0, sizeof(RenderTarget));
; 5512 : 
; 5513 : 		RenderTarget.Width = W;
; 5514 : 		RenderTarget.Height = H;

	mov	edx, DWORD PTR _H$[esp+32]
	xor	ecx, ecx
	mov	DWORD PTR _RenderTarget$[esp+36], ecx
	mov	eax, ecx

; 5515 : 
; 5516 : 		RenderTarget.Active = true;
; 5517 : 
; 5518 : 		if (!InitRenderTargetRes(&RenderTarget))

	test	eax, eax
	mov	ebx, ecx
	mov	DWORD PTR _RenderTarget$[esp+48], ecx
	mov	DWORD PTR _RenderTarget$[esp+52], ecx
	mov	ecx, DWORD PTR _W$[esp+32]
	mov	DWORD PTR _RenderTarget$[esp+40], eax
	mov	DWORD PTR _RenderTarget$[esp+44], ebx
	mov	DWORD PTR _RenderTarget$[esp+48], ecx
	mov	DWORD PTR _RenderTarget$[esp+52], edx
	mov	DWORD PTR _RenderTarget$[esp+36], 1
	je	SHORT $L148240
	test	ebx, ebx
	jne	SHORT $L127179
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HG@MLIH@?$AAI?$AAn?$AAi?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AAR?$AAe?$AAs?$AA?3@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L127179
$L148240:
	mov	eax, DWORD PTR [esi+19124]
	mov	ebx, DWORD PTR [eax]
	lea	ebp, DWORD PTR _RenderTarget$[esp+40]
	push	ebp
	push	0
	push	edi
	push	1
	push	1
	push	edx
	push	ecx
	push	eax
	call	DWORD PTR [ebx+80]
	test	eax, eax
	jne	SHORT $L148333
	mov	eax, DWORD PTR _RenderTarget$[esp+40]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _RenderTarget$[esp+44]
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+60]
$L127179:

; 5519 : 			return NULL;
; 5520 : 
; 5521 : 		// Look on the free'd list first
; 5522 : 		if (FreeRenderTargets.Num())

	mov	eax, DWORD PTR [esi+228]
	test	eax, eax
	je	SHORT $L127180

; 5523 : 		{
; 5524 : 			INT FreeIndex = FreeRenderTargets(0);

	mov	eax, DWORD PTR [esi+224]
	mov	ebp, DWORD PTR [eax]

; 5525 : 			RenderTargetArray(FreeIndex) = RenderTarget;

	mov	edx, DWORD PTR [esi+212]
	lea	ebx, DWORD PTR [esi+224]
	lea	ecx, DWORD PTR [ebp+ebp*4]
	lea	edi, DWORD PTR [edx+ecx*4]
	mov	ecx, 5
	lea	esi, DWORD PTR _RenderTarget$[esp+36]
	rep movsd

; 5526 : 			FreeRenderTargets.Remove(0);

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	mov	esi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jge	SHORT $L148261
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L148261:
	cmp	DWORD PTR [ebx+4], 1
	jge	SHORT $L148262
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	esi
	add	esp, 12					; 0000000cH
$L148262:
	push	4
	push	1
	push	0
	mov	ecx, ebx
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi

; 5527 : 			return INDEX_TO_RENDER_TARGET(FreeIndex);

	lea	eax, DWORD PTR [ebp+1]
	pop	ebp
	pop	ebx

; 5531 : 	}

	add	esp, 20					; 00000014H
	ret	8
$L127180:

; 5528 : 		}
; 5529 : 
; 5530 : 		return INDEX_TO_RENDER_TARGET(RenderTargetArray.AddItem(RenderTarget));

	mov	edi, DWORD PTR [esi+216]
	mov	eax, DWORD PTR [esi+220]
	add	esi, 212				; 000000d4H
	lea	ebx, DWORD PTR [edi+1]
	cmp	ebx, eax
	mov	DWORD PTR [esi+4], ebx
	jle	SHORT $L148320
	lea	eax, DWORD PTR [ebx+ebx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ebx+32]
	push	20					; 00000014H
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L148320:
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [edi+edi*4]
	lea	edi, DWORD PTR [edx+ecx*4]
	mov	ecx, 5
	lea	esi, DWORD PTR _RenderTarget$[esp+36]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx

; 5531 : 	}

	add	esp, 20					; 00000014H
	ret	8
?CreateRenderTarget@UD3DRenderDevice@@UAEPAXHH@Z ENDP	; UD3DRenderDevice::CreateRenderTarget
_TEXT	ENDS
PUBLIC	??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@ ; `string'
;	COMDAT ??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@ DB 'D'
	DB	00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'y', 00H
	DB	'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T'
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, ':', 00H
	DB	' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'd', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e'
	DB	00H, 't', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z
_TEXT	SEGMENT
_pRenderTarget$ = 8
?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z PROC NEAR ; UD3DRenderDevice::DestroyRenderTarget, COMDAT
; _this$ = ecx

; 5538 : 		INT	Index = RENDER_TARGET_TO_INDEX(*pRenderTarget);

	mov	eax, DWORD PTR _pRenderTarget$[esp-4]
	push	ebx
	mov	ebx, DWORD PTR [eax]
	dec	ebx
	push	ebp
	push	esi
	push	edi
	mov	ebp, ecx

; 5539 : 
; 5540 : 		if (Index < 0 || Index >= RenderTargetArray.Num())

	js	SHORT $L127189
	cmp	ebx, DWORD PTR [ebp+216]
	jl	SHORT $L127188
$L127189:

; 5541 : 			appErrorf(TEXT("DestroyRenderTarget: Invalid RenderTarget"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1FE@MDFI@?$AAD?$AAe?$AAs?$AAt?$AAr?$AAo?$AAy?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L127188:

; 5542 : 		
; 5543 : 		ShutdownRenderTargetRes(&RenderTargetArray(Index));

	mov	esi, DWORD PTR [ebp+212]
	lea	edi, DWORD PTR [ebx+ebx*4]
	shl	edi, 2
	mov	eax, DWORD PTR [esi+edi]
	add	esi, edi
	test	eax, eax
	mov	eax, DWORD PTR [esi+8]
	jne	SHORT $L148367
	test	eax, eax
	jne	SHORT $L148369
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L148366
$L148369:
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1GE@GOPI@?$AAS?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
	jmp	SHORT $L148366
$L148367:
	test	eax, eax
	je	SHORT $L148361
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], 0
$L148361:
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L148365
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L148365:
	xor	eax, eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+4], eax
$L148366:

; 5544 : 		
; 5545 : 		RenderTargetArray(Index).Active = false;

	mov	edx, DWORD PTR [ebp+212]

; 5546 : 
; 5547 : 		*pRenderTarget = NULL;

	mov	eax, DWORD PTR _pRenderTarget$[esp+12]
	mov	DWORD PTR [edi+edx], 0

; 5548 : 		
; 5549 : 		FreeRenderTargets.AddItem(Index);

	lea	esi, DWORD PTR [ebp+224]
	mov	DWORD PTR [eax], 0
	mov	edi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [edi+1]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L148433
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	ecx, DWORD PTR [eax+ecx+32]
	mov	DWORD PTR [esi+8], ecx
	push	4
	mov	ecx, esi
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edx+edi*4], ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5550 : 	}

	ret	4
$L148433:

; 5548 : 		
; 5549 : 		FreeRenderTargets.AddItem(Index);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax+edi*4], ebx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5550 : 	}

	ret	4
?DestroyRenderTarget@UD3DRenderDevice@@UAEXPAPAX@Z ENDP	; UD3DRenderDevice::DestroyRenderTarget
_TEXT	ENDS
PUBLIC	??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@ ; `string'
PUBLIC	??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ ; `string'
;	COMDAT ??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@ DB 'S'
	DB	00H, 'e', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e'
	DB	00H, 't', 00H, ':', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'R', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@
_DATA	SEGMENT
??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ DB 'A'
	DB	00H, 'd', 00H, 'd', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'R', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a'
	DB	00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'u', 00H
	DB	'r', 00H, 'f', 00H, 00H, 00H			; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z
_TEXT	SEGMENT
_pRenderTarget$ = 8
?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z PROC NEAR	; UD3DRenderDevice::SetRenderTarget, COMDAT
; _this$ = ecx

; 5556 : 	{

	push	ebp

; 5557 : 		INT Index = RENDER_TARGET_TO_INDEX(pRenderTarget);

	mov	ebp, DWORD PTR _pRenderTarget$[esp]
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1]

; 5558 : 
; 5559 : 		if (Index < 0 || Index >= RenderTargetArray.Num())

	test	edi, edi
	mov	esi, ecx
	jl	SHORT $L127196
	cmp	edi, DWORD PTR [esi+216]
	jl	SHORT $L127195
$L127196:

; 5560 : 			appErrorf(TEXT("SetRenderTarget: Invalid RenderTarget"));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1EM@HNNJ@?$AAS?$AAe?$AAt?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAT?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L127195:

; 5561 : 
; 5562 : 		if (!pOriginalZStencil)

	mov	eax, DWORD PTR [esi+19108]
	test	eax, eax
	push	ebx
	lea	ebx, DWORD PTR [esi+19108]
	jne	SHORT $L127198

; 5563 : 		{
; 5564 : 			// Remember the original render targets
; 5565 : 			Direct3DDevice8->GetRenderTarget(&pOriginalRenderTarget);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR [esi+19104]
	push	ecx
	push	eax
	call	DWORD PTR [edx+128]

; 5566 : 			Direct3DDevice8->GetDepthStencilSurface(&pOriginalZStencil);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ebx
	push	eax
	call	DWORD PTR [edx+132]
$L127198:

; 5567 : 		}
; 5568 : 
; 5569 : 		if (!RenderTargetArray(Index).pRenderTargetSurf)

	mov	eax, DWORD PTR [esi+212]
	lea	edi, DWORD PTR [edi+edi*4]
	shl	edi, 2
	mov	ecx, DWORD PTR [edi+eax+8]
	test	ecx, ecx
	pop	ebx
	jne	SHORT $L127199

; 5570 : 			appErrorf(TEXT("AddProjector: NULL RenderTargetSurf"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1EI@PKCN@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L127199:

; 5571 : 
; 5572 : 		// Set the render target
; 5573 : 		Direct3DDevice8->SetRenderTarget(RenderTargetArray(Index).pRenderTargetSurf, NULL);

	mov	edx, DWORD PTR [esi+212]
	mov	edx, DWORD PTR [edi+edx+8]
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	edx
	push	eax
	call	DWORD PTR [ecx+124]

; 5574 : 		
; 5575 : 		// Clear the render target
; 5576 : 		Direct3DDevice8->Clear(0, NULL, D3DCLEAR_TARGET, 0xffffffff, 1.f, 0 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	1065353216				; 3f800000H
	push	-1
	push	1
	push	0
	push	0
	push	eax
	call	DWORD PTR [ecx+144]
	pop	edi

; 5577 : 		/*
; 5578 : 		D3DRECT		Rect;
; 5579 : 
; 5580 : 		Rect.x1 = 1;
; 5581 : 		Rect.y1 = 1;
; 5582 : 		Rect.x2 = 127;
; 5583 : 		Rect.y2 = 127;
; 5584 : 
; 5585 : 		Direct3DDevice8->Clear(1, &Rect, D3DCLEAR_TARGET, 0, 1.f, 0 );
; 5586 : 		*/
; 5587 : 		
; 5588 : 		CurrentRenderTarget = pRenderTarget;

	mov	DWORD PTR [esi+19120], ebp
	pop	esi
	pop	ebp

; 5589 : 	}

	ret	8
?SetRenderTarget@UD3DRenderDevice@@UAEXPAX0@Z ENDP	; UD3DRenderDevice::SetRenderTarget
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ
_TEXT	SEGMENT
?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ PROC NEAR	; UD3DRenderDevice::RestoreRenderTarget, COMDAT
; _this$ = ecx

; 5595 : 	{

	push	esi
	mov	esi, ecx

; 5596 : 		if (!pOriginalZStencil)

	mov	ecx, DWORD PTR [esi+19108]
	push	edi
	xor	edi, edi
	cmp	ecx, edi
	je	SHORT $L127202

; 5597 : 			return;			// Already using original rendertarget
; 5598 : 		
; 5599 : 		// Set the rendertarget/zstencil back to the original
; 5600 : 		Direct3DDevice8->SetRenderTarget(pOriginalRenderTarget, pOriginalZStencil);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR [esi+19104]
	push	ecx
	push	eax
	call	DWORD PTR [edx+124]

; 5601 : 
; 5602 : 		// Release the copies we had
; 5603 : 		SafeRelease(pOriginalRenderTarget);

	mov	eax, DWORD PTR [esi+19104]
	cmp	eax, edi
	je	SHORT $L148454
	mov	edx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [edx+8]
	mov	DWORD PTR [esi+19104], edi
$L148454:

; 5604 : 		SafeRelease(pOriginalZStencil);

	mov	eax, DWORD PTR [esi+19108]
	cmp	eax, edi
	je	SHORT $L148460
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+19108], edi
$L148460:

; 5605 : 
; 5606 : 		// Set them to NULL to we know next time around that we have been restored
; 5607 : 		pOriginalRenderTarget = NULL;

	mov	DWORD PTR [esi+19104], edi

; 5608 : 		pOriginalZStencil = NULL;

	mov	DWORD PTR [esi+19108], edi

; 5609 : 
; 5610 : 		CurrentRenderTarget = NULL;

	mov	DWORD PTR [esi+19120], edi
$L127202:
	pop	edi
	pop	esi

; 5611 : 	}

	ret	0
?RestoreRenderTarget@UD3DRenderDevice@@UAEXXZ ENDP	; UD3DRenderDevice::RestoreRenderTarget
_TEXT	ENDS
PUBLIC	?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z ; UD3DRenderDevice::DrawTex
; Function compile flags: /Ogty
;	COMDAT ?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z
_TEXT	SEGMENT
_VertexData$148483 = 40
_X$ = 8
_Y$ = 12
_XL$ = 16
_YL$ = 20
_U$ = 24
_V$ = 28
_UL$ = 32
_VL$ = 36
_Tex$ = 40
?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z PROC NEAR ; UD3DRenderDevice::DrawTex, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 5622 : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 5623 : 		VALIDATE;
; 5624 : 		
; 5625 : 		SetDistanceFog(false);

	mov	eax, DWORD PTR [esi+675196]
	test	eax, eax
	push	edi
	je	SHORT $L148469
	mov	eax, DWORD PTR [esi+675192]
	test	eax, eax
	je	SHORT $L148469
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	28					; 0000001cH
	push	eax
	call	DWORD PTR [ecx+200]
	mov	DWORD PTR [esi+675192], 0
$L148469:

; 5626 : 	
; 5627 : 		//SetBlending(PFX_DarkenModulate);//PF_Modulated);
; 5628 : 		SetBlending();

	push	0
	xor	edx, edx
	mov	ecx, esi
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending

; 5629 : 		SetTextureNULL(0);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]

; 5630 : 		
; 5631 : 		Direct3DDevice8->SetTexture(0, Tex);

	mov	edx, DWORD PTR _Tex$[esp+8]
	lea	eax, DWORD PTR [esi+16624]
	push	edx
	mov	DWORD PTR [esi+19712], eax
	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	eax
	call	DWORD PTR [ecx+244]

; 5632 : 
; 5633 : 		SetTextureClampMode(1);

	mov	eax, DWORD PTR [esi]
	mov	edx, 1
	mov	ecx, esi
	call	DWORD PTR [eax+212]

; 5634 : 
; 5635 : 		FD3DTLVertex	*Vertices = (FD3DTLVertex*) ActorVertices.Lock(4);

	mov	eax, DWORD PTR [esi+16704]
	test	eax, eax
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	lea	edi, DWORD PTR [esi+16700]
	jne	SHORT $L148480
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148480:
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	jne	SHORT $L148481
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148481:
	cmp	DWORD PTR [edi+8], 4
	jg	SHORT $L148484
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L148484:
	mov	ecx, DWORD PTR [edi+16]
	mov	eax, DWORD PTR [edi+8]
	lea	edx, DWORD PTR [ecx+4]
	cmp	edx, eax
	mov	eax, DWORD PTR [edi+4]
	jge	SHORT $L148498
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$148483[esp+12]
	push	ebx
	lea	ecx, DWORD PTR [ecx+ecx*4]
	push	160					; 000000a0H
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L148493
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L148493:
	mov	eax, DWORD PTR [edi+16]
	mov	DWORD PTR [edi+12], eax
	add	eax, 4
	mov	DWORD PTR [edi+16], eax
	jmp	SHORT $L148497
$L148498:
	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$148483[esp+12]
	push	edx
	push	160					; 000000a0H
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L148499
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L148499:
	mov	DWORD PTR [edi+12], 0
	mov	DWORD PTR [edi+16], 4
$L148497:
	mov	eax, DWORD PTR _VertexData$148483[esp+8]
	lea	ecx, DWORD PTR [eax+8]
	mov	edx, 4
	mov	ebx, 1065353216				; 3f800000H

; 5659 : 	}

	npad	1

; 5634 : 
; 5635 : 		FD3DTLVertex	*Vertices = (FD3DTLVertex*) ActorVertices.Lock(4);

$L127216:

; 5636 : 
; 5637 : 		DWORD dwDiffuse = 0xffffffff;
; 5638 : 
; 5639 : 		for (INT i=0; i<4; i++)
; 5640 : 		{
; 5641 : 			Vertices[i].Diffuse    = dwDiffuse;

	mov	DWORD PTR [ecx+8], -1

; 5642 : 			Vertices[i].Position.Z = 1.0f;

	mov	DWORD PTR [ecx], ebx

; 5643 : 			Vertices[i].Position.W = 1.0f;

	mov	DWORD PTR [ecx+4], ebx
	add	ecx, 40					; 00000028H
	dec	edx
	jne	SHORT $L127216

; 5644 : 		}
; 5645 : 
; 5646 : 		Vertices[0].Position.X=X;    Vertices[0].Position.Y=Y;    Vertices[0].U[0]=U;		Vertices[0].U[1]=V   ;
; 5647 : 		Vertices[1].Position.X=X+XL; Vertices[1].Position.Y=Y;    Vertices[1].U[0]=U+UL; 	Vertices[1].U[1]=V   ;

	fld	DWORD PTR _X$[esp+8]
	mov	edx, DWORD PTR _X$[esp+8]
	fadd	DWORD PTR _XL$[esp+8]
	mov	ecx, DWORD PTR _Y$[esp+8]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR _U$[esp+8]
	fst	DWORD PTR [eax+40]
	mov	DWORD PTR [eax+24], edx
	fld	DWORD PTR _U$[esp+8]
	mov	edx, DWORD PTR _Y$[esp+8]
	fadd	DWORD PTR _UL$[esp+8]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR _V$[esp+8]
	mov	DWORD PTR [eax+44], edx

; 5648 : 		Vertices[2].Position.X=X+XL; Vertices[2].Position.Y=Y+YL; Vertices[2].U[0]=U+UL;    Vertices[2].U[1]=V+VL;
; 5649 : 		Vertices[3].Position.X=X;    Vertices[3].Position.Y=Y+YL; Vertices[3].U[0]=U;	    Vertices[3].U[1]=V+VL;

	mov	edx, DWORD PTR _X$[esp+8]
	fst	DWORD PTR [eax+64]
	fxch	ST(1)
	mov	DWORD PTR [eax+28], ecx
	fstp	DWORD PTR [eax+80]
	mov	DWORD PTR [eax+68], ecx
	fld	DWORD PTR _Y$[esp+8]
	mov	DWORD PTR [eax+120], edx
	fadd	DWORD PTR _YL$[esp+8]
	mov	edx, DWORD PTR _U$[esp+8]
	mov	DWORD PTR [eax+144], edx
	fst	DWORD PTR 12+[esp+8]
	mov	ecx, DWORD PTR 12+[esp+8]
	fstp	DWORD PTR [eax+84]
	mov	DWORD PTR [eax+124], ecx
	fstp	DWORD PTR [eax+104]
	fld	DWORD PTR _V$[esp+8]
	fadd	DWORD PTR _VL$[esp+8]
	fst	DWORD PTR [eax+108]
	fstp	DWORD PTR [eax+148]

; 5650 : 
; 5651 : 		INT	First=ActorVertices.Unlock();

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	jne	SHORT $L148514
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 5659 : 	}

	npad	4

; 5650 : 
; 5651 : 		INT	First=ActorVertices.Unlock();

$L148514:
	mov	eax, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L148515
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L148515:
	mov	ebx, DWORD PTR [edi+12]

; 5652 : 		
; 5653 : 		ActorVertices.Set();

	mov	ecx, edi
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set

; 5654 : 
; 5655 : 		Direct3DDevice8->DrawPrimitive( D3DPT_TRIANGLEFAN, First, 2 );

	mov	eax, DWORD PTR [esi+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	ebx
	push	6
	push	eax
	call	DWORD PTR [ecx+280]

; 5656 : 		Direct3DDevice8->SetTexture(0, NULL);

	mov	eax, DWORD PTR [esi+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]

; 5657 : 		
; 5658 : 		SetTextureClampMode(0);

	mov	eax, DWORD PTR [esi]
	xor	edx, edx
	mov	ecx, esi
	call	DWORD PTR [eax+212]
	pop	edi
	pop	esi
	pop	ebx

; 5659 : 	}

	ret	36					; 00000024H
?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z ENDP ; UD3DRenderDevice::DrawTex
_TEXT	ENDS
PUBLIC	??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ ; `string'
PUBLIC	??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ ; `string'
PUBLIC	??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ ; `string'
PUBLIC	?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::ProjectorInfo>::Add
EXTRN	__imp_?Transpose@FCoords@@QBE?AV1@XZ:NEAR
EXTRN	__imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z:NEAR
;	COMDAT ??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@
; File ..\..\Core\Inc\UnTemplate.h
_DATA	SEGMENT
??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ DB 'A'
	DB	00H, 'd', 00H, 'd', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@
_DATA	SEGMENT
??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ DB 'A'
	DB	00H, 'd', 00H, 'd', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, '2', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@
_DATA	SEGMENT
??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ DB 'A'
	DB	00H, 'd', 00H, 'd', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'R', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'T', 00H, 'a'
	DB	00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, 00H, 00H ; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT ?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z
_TEXT	SEGMENT
_Projector$ = -180
_RT2$127242 = -184
$T148582 = -48
$T148584 = -60
$T148585 = -72
$T148586 = -96
$T148587 = -84
_pRenderTarget$ = 8
_wNear$ = 16
_wFar$ = 20
_FadeScale$ = 24
?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z PROC NEAR ; UD3DRenderDevice::AddProjector, COMDAT
; _this$ = ecx
; _Frame$ = edx

; 5665 : 	{

	sub	esp, 184				; 000000b8H
	push	ebx
	push	ebp
	push	esi
	mov	ebp, edx
	mov	ebx, ecx
	push	edi

; 5666 : 		ProjectorInfo	Projector;
; 5667 : 		
; 5668 : 		Projector.Frame = Frame;

	mov	DWORD PTR _Projector$[esp+200], ebp

; 5669 : 		
; 5670 : 		Projector.CameraToLight = Frame->Coords;

	lea	esi, DWORD PTR [ebp+52]
	mov	ecx, 12					; 0000000cH
	lea	edi, DWORD PTR _Projector$[esp+216]
	rep movsd

; 5671 : 		Projector.CameraToLight <<= Frame->Parent->Uncoords;

	mov	ecx, DWORD PTR [ebp+8]
	lea	eax, DWORD PTR $T148582[esp+200]
	add	ecx, 100				; 00000064H
	push	eax
	call	DWORD PTR __imp_?Transpose@FCoords@@QBE?AV1@XZ
	mov	esi, eax
	push	esi
	lea	ecx, DWORD PTR $T148584[esp+204]
	push	ecx
	lea	ecx, DWORD PTR _Projector$[esp+224]
	call	DWORD PTR __imp_?TransformPointBy@FVector@@QBE?AV1@ABVFCoords@@@Z
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _Projector$[esp+216], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Projector$[esp+220], ecx
	mov	edx, DWORD PTR [eax+8]
	push	esi
	lea	eax, DWORD PTR $T148585[esp+204]
	push	eax
	lea	ecx, DWORD PTR _Projector$[esp+236]
	mov	DWORD PTR _Projector$[esp+232], edx
	call	DWORD PTR __imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Projector$[esp+228], ecx
	mov	edx, DWORD PTR [eax+4]
	push	esi
	lea	ecx, DWORD PTR $T148586[esp+204]
	mov	DWORD PTR _Projector$[esp+236], edx
	mov	eax, DWORD PTR [eax+8]
	push	ecx
	lea	ecx, DWORD PTR _Projector$[esp+248]
	mov	DWORD PTR _Projector$[esp+244], eax
	call	DWORD PTR __imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _Projector$[esp+240], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Projector$[esp+244], ecx
	mov	edx, DWORD PTR [eax+8]
	push	esi
	lea	eax, DWORD PTR $T148587[esp+204]
	push	eax
	lea	ecx, DWORD PTR _Projector$[esp+260]
	mov	DWORD PTR _Projector$[esp+256], edx
	call	DWORD PTR __imp_?TransformVectorBy@FVector@@QBE?AV1@ABVFCoords@@@Z

; 5672 : 		
; 5673 : 		Projector.OneOverX = 1.0f/(float)Frame->X;

	fild	DWORD PTR [ebp+168]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Projector$[esp+252], ecx
	fdivr	DWORD PTR __real@3f800000
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Projector$[esp+256], edx
	mov	eax, DWORD PTR [eax+8]

; 5674 : 		Projector.OneOverY = 1.0f/(float)Frame->Y;
; 5675 : 
; 5676 : 		Projector._33 = wFar / (wFar - wNear);
; 5677 : 		Projector._43 = -Projector._33 * wNear;
; 5678 : 		Projector.FadeScale = FadeScale;

	mov	ecx, DWORD PTR _FadeScale$[esp+196]
	mov	DWORD PTR _Projector$[esp+260], eax

; 5679 : 
; 5680 : 		if (Frame->Level && Frame->Level->Model)

	mov	eax, DWORD PTR [ebp+4]
	test	eax, eax
	mov	DWORD PTR _Projector$[esp+280], ecx
	fstp	DWORD PTR _Projector$[esp+264]
	fild	DWORD PTR [ebp+172]
	fdivr	DWORD PTR __real@3f800000
	fstp	DWORD PTR _Projector$[esp+268]
	fld	DWORD PTR _wFar$[esp+196]
	fsub	DWORD PTR _wNear$[esp+196]
	fdivr	DWORD PTR _wFar$[esp+196]
	fst	DWORD PTR _Projector$[esp+272]
	fmul	DWORD PTR _wNear$[esp+196]
	fchs
	fstp	DWORD PTR _Projector$[esp+276]
	je	SHORT $L127225
	mov	eax, DWORD PTR [eax+152]
	test	eax, eax
	je	SHORT $L127225

; 5681 : 			Projector.GNodes = &Frame->Level->Model->Nodes(0);

	mov	edx, DWORD PTR [eax+88]
	mov	DWORD PTR _Projector$[esp+212], edx

; 5682 : 		else

	jmp	SHORT $L127226
$L127225:

; 5683 : 			Projector.GNodes = NULL;

	mov	DWORD PTR _Projector$[esp+212], 0
$L127226:

; 5684 : 
; 5685 : 		if (pRenderTarget)

	mov	esi, DWORD PTR _pRenderTarget$[esp+196]
	test	esi, esi
	je	$L127244

; 5686 : 		{
; 5687 : 			INT Index = RENDER_TARGET_TO_INDEX(pRenderTarget);

	dec	esi

; 5688 : 
; 5689 : 			if (Index < 0 || Index >= RenderTargetArray.Num())

	test	esi, esi
	jl	SHORT $L127231
	cmp	esi, DWORD PTR [ebx+216]
	jl	SHORT $L127230
$L127231:

; 5690 : 				appErrorf(TEXT("AddProjector: Invalid RenderTarget"));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1EG@EKPK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L127230:

; 5691 : 
; 5692 : 			RenderTargetInfo &RT = RenderTargetArray(Index);

	mov	eax, DWORD PTR [ebx+212]
	lea	edx, DWORD PTR [esi+esi*4]

; 5693 : 
; 5694 : 			// Assign the texture to this projector
; 5695 : 			Projector.pRenderTargetTex = RT.pRenderTargetTex;

	mov	ecx, DWORD PTR [eax+edx*4+4]
	lea	edi, DWORD PTR [eax+edx*4]

; 5696 : 
; 5697 : 	#if 1
; 5698 : 		// Render tex into itself, have convolution smooth texture out
; 5699 : 		#if 1
; 5700 : 			if (CurrentRenderTarget == pRenderTarget)

	mov	edx, DWORD PTR _pRenderTarget$[esp+196]
	cmp	DWORD PTR [ebx+19120], edx
	mov	DWORD PTR _Projector$[esp+204], ecx
	jne	$L127236

; 5701 : 			{
; 5702 : 				if (!TempRT)

	mov	eax, DWORD PTR [ebx+19116]
	test	eax, eax
	jne	SHORT $L127235

; 5703 : 					TempRT = CreateRenderTarget(128, 128);

	mov	eax, DWORD PTR [ebx]
	push	128					; 00000080H
	push	128					; 00000080H
	mov	ecx, ebx
	call	DWORD PTR [eax+220]
	mov	DWORD PTR [ebx+19116], eax
$L127235:

; 5704 : 
; 5705 : 				if (TempRT)

	mov	esi, DWORD PTR [ebx+19116]
	test	esi, esi
	je	$L127236

; 5706 : 				{
; 5707 : 					INT Index2 = RENDER_TARGET_TO_INDEX(TempRT);

	dec	esi

; 5708 : 
; 5709 : 					if (Index2 < 0 || Index2 >= RenderTargetArray.Num())

	test	esi, esi
	jl	SHORT $L127240
	cmp	esi, DWORD PTR [ebx+216]
	jl	SHORT $L127239
$L127240:

; 5710 : 						appErrorf(TEXT("AddProjector: Invalid RenderTarget2"));

	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	push	OFFSET FLAT:??_C@_1EI@BJID@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L127239:

; 5711 : 
; 5712 : 					RenderTargetInfo &RT2 = RenderTargetArray(Index2);

	mov	ecx, DWORD PTR [ebx+212]
	lea	eax, DWORD PTR [esi+esi*4]
	lea	edx, DWORD PTR [ecx+eax*4]

; 5713 : 
; 5714 : 					SetRenderTarget(TempRT, NULL);

	mov	ecx, DWORD PTR [ebx+19116]
	mov	eax, DWORD PTR [ebx]
	push	0
	push	ecx
	mov	ecx, ebx
	mov	DWORD PTR _RT2$127242[esp+208], edx
	call	DWORD PTR [eax+228]

; 5715 : 
; 5716 : 					float Val = (1.0f/128.0f);
; 5717 : 
; 5718 : 					DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,Val*0.5f,Val*0.5f, 1.0f, 1.0f, RT.pRenderTargetTex);

	mov	esi, DWORD PTR [edi+4]
	push	0
	mov	ecx, ebx
	call	?SetDistanceFog@UD3DRenderDevice@@QAEXH@Z ; UD3DRenderDevice::SetDistanceFog
	push	0
	xor	edx, edx
	mov	ecx, ebx
	call	?SetBlending@UD3DRenderDevice@@QAIXKK@Z	; UD3DRenderDevice::SetBlending
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]
	lea	eax, DWORD PTR [ebx+16624]
	push	esi
	mov	DWORD PTR [ebx+19712], eax
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	eax
	call	DWORD PTR [ecx+244]
	mov	eax, DWORD PTR [ebx]
	mov	edx, 1
	mov	ecx, ebx
	call	DWORD PTR [eax+212]
	or	edi, -1
	push	edi
	lea	esi, DWORD PTR [ebx+16700]
	push	4
	mov	ecx, esi
	call	?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ; FD3DVertexBuffer<FD3DTLVertex>::Lock
	lea	ecx, DWORD PTR [eax+8]
	mov	edx, 4
$L148632:
	mov	DWORD PTR [ecx+8], edi
	mov	DWORD PTR [ecx], 1065353216		; 3f800000H
	mov	DWORD PTR [ecx+4], 1065353216		; 3f800000H
	add	ecx, 40					; 00000028H
	dec	edx
	jne	SHORT $L148632
	mov	edi, 998244352				; 3b800000H
	mov	ecx, 1123942400				; 42fe0000H
	mov	edx, 1065385984				; 3f808000H
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+24], edi
	mov	DWORD PTR [eax+28], edi
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], 0
	mov	DWORD PTR [eax+64], edx
	mov	DWORD PTR [eax+68], edi
	mov	DWORD PTR [eax+80], ecx
	mov	DWORD PTR [eax+84], ecx
	mov	DWORD PTR [eax+104], edx
	mov	DWORD PTR [eax+108], edx
	mov	DWORD PTR [eax+120], 0
	mov	DWORD PTR [eax+124], ecx
	mov	DWORD PTR [eax+144], edi
	mov	DWORD PTR [eax+148], edx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L148646
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH

; 5747 : 	}

	npad	4

; 5715 : 
; 5716 : 					float Val = (1.0f/128.0f);
; 5717 : 
; 5718 : 					DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,Val*0.5f,Val*0.5f, 1.0f, 1.0f, RT.pRenderTargetTex);

$L148646:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L148647
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L148647:
	mov	edi, DWORD PTR [esi+12]
	mov	ecx, esi
	call	?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ; FD3DVertexBuffer<FD3DTLVertex>::Set
	mov	eax, DWORD PTR [ebx+19124]
	mov	ecx, DWORD PTR [eax]
	push	2
	push	edi
	push	6
	push	eax
	call	DWORD PTR [ecx+280]
	mov	eax, DWORD PTR [ebx+19124]
	mov	edx, DWORD PTR [eax]
	push	0
	push	0
	push	eax
	call	DWORD PTR [edx+244]
	mov	eax, DWORD PTR [ebx]
	xor	edx, edx
	mov	ecx, ebx
	call	DWORD PTR [eax+212]

; 5719 : 					SetRenderTarget(pRenderTarget, NULL);

	mov	eax, DWORD PTR _pRenderTarget$[esp+196]
	mov	edx, DWORD PTR [ebx]
	push	0
	push	eax
	mov	ecx, ebx
	call	DWORD PTR [edx+228]

; 5720 : 					DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,-Val*0.5f,-Val*0.5f, 1.0f, 1.0f, RT2.pRenderTargetTex);

	mov	ecx, DWORD PTR _RT2$127242[esp+200]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	1065353216				; 3f800000H
	push	1065353216				; 3f800000H
	push	-1149239296				; bb800000H
	push	-1149239296				; bb800000H
	push	1123942400				; 42fe0000H
	push	1123942400				; 42fe0000H
	push	0
	push	0
	mov	edx, ebp
	mov	ecx, ebx
	call	?DrawTex@UD3DRenderDevice@@QAIXPAUFSceneNode@@MMMMMMMMPAUIDirect3DTexture8@@@Z ; UD3DRenderDevice::DrawTex
$L127236:

; 5721 : 				}
; 5722 : 			}
; 5723 : 		#else
; 5724 : 			if (CurrentRenderTarget == pRenderTarget)
; 5725 : 			{
; 5726 : 				float Val = (1.0f/128.0f);
; 5727 : 			
; 5728 : 				EndScene();
; 5729 : 				BeginScene();
; 5730 : 
; 5731 : 				DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,Val*0.5f,Val*0.5f, 1.0f, 1.0f, RT.pRenderTargetTex);
; 5732 : 				DrawTex(Frame, 0.0f, 0.0f, 127.0f, 127.0f,-Val*0.5f,-Val*0.5f, 1.0f, 1.0f, RT.pRenderTargetTex);
; 5733 : 			}
; 5734 : 		#endif
; 5735 : 	#endif
; 5736 : 
; 5737 : 			if (!Projector.pRenderTargetTex)

	mov	eax, DWORD PTR _Projector$[esp+204]
	test	eax, eax
	jne	SHORT $L127244

; 5738 : 				appErrorf(TEXT("AddProjector: NULL RenderTarget"));

	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1EA@OCBK@?$AAA?$AAd?$AAd?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?3?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAR@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 8
$L127244:

; 5739 : 		}
; 5740 : 		else
; 5741 : 		{
; 5742 : 			//Projector.pRenderTargetTex = NULL;
; 5743 : 			//Projector.Texture = Info->Texture;
; 5744 : 		}
; 5745 : 
; 5746 : 		ProjectorArray.AddItem(Projector);

	push	1
	add	ebx, 200				; 000000c8H
	push	1
	mov	ecx, ebx
	call	?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z ; TArray<UD3DRenderDevice::ProjectorInfo>::Add
	mov	edi, eax
	mov	eax, DWORD PTR [ebx]
	imul	edi, 84					; 00000054H
	add	edi, eax
	mov	ecx, 21					; 00000015H
	lea	esi, DWORD PTR _Projector$[esp+200]
	rep movsd
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 5747 : 	}

	add	esp, 184				; 000000b8H
	ret	20					; 00000014H
?AddProjector@UD3DRenderDevice@@UAIXPAUFSceneNode@@PAXPAUFTextureInfo@@MMM@Z ENDP ; UD3DRenderDevice::AddProjector
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?ResetProjectors@UD3DRenderDevice@@UAIXXZ
_TEXT	SEGMENT
?ResetProjectors@UD3DRenderDevice@@UAIXXZ PROC NEAR	; UD3DRenderDevice::ResetProjectors, COMDAT
; _this$ = ecx

; 5754 : 	#ifdef BATCH_PROJECTOR_POLYS
; 5755 : 		FlushProjectorPolys();
; 5756 : 	#endif
; 5757 : 
; 5758 : 		ProjectorArray.Clear();

	mov	DWORD PTR [ecx+204], 0

; 5759 : 	}

	ret	0
?ResetProjectors@UD3DRenderDevice@@UAIXXZ ENDP		; UD3DRenderDevice::ResetProjectors
_TEXT	ENDS
PUBLIC	??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::TArray<UD3DRenderDevice::QueuedPolygon>
PUBLIC	??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::TArray<UD3DRenderDevice::QueuedParticleByTexture>
PUBLIC	??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::TArray<UD3DRenderDevice::QueuedLineSegment>
PUBLIC	??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z		; TArray<FD3DVertex>::TArray<FD3DVertex>
PUBLIC	??_7FTexFiller@UD3DRenderDevice@@6B@		; UD3DRenderDevice::FTexFiller::`vftable'
PUBLIC	??0UD3DRenderDevice@@QAE@ABV0@@Z		; UD3DRenderDevice::UD3DRenderDevice
EXTRN	__imp_??0UObject@@QAE@ABV0@@Z:NEAR
EXTRN	__imp_??_7FExec@@6B@:DWORD
EXTRN	__imp_??_7USubsystem@@6BUObject@@@:BYTE
EXTRN	__imp_??_7USubsystem@@6BFExec@@@:DWORD
EXTRN	__imp_??0FArray@@IAE@HH@Z:NEAR
EXTRN	__imp_??0FString@@QAE@ABV0@@Z:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T149133 DD	0ffffffffH
	DD	FLAT:$L148692
	DD	0ffffffffH
	DD	FLAT:$L148678
	DD	01H
	DD	FLAT:$L148720
	DD	01H
	DD	FLAT:$L148679
	DD	03H
	DD	FLAT:$L148803
	DD	03H
	DD	FLAT:$L148680
	DD	05H
	DD	FLAT:$L148886
	DD	05H
	DD	FLAT:$L148681
	DD	07H
	DD	FLAT:$L148682
	DD	08H
	DD	FLAT:$L148683
	DD	09H
	DD	FLAT:$L148684
	DD	0aH
	DD	FLAT:$L148685
	DD	0bH
	DD	FLAT:$L149038
	DD	0bH
	DD	FLAT:$L148686
	DD	0dH
	DD	FLAT:$L148687
	DD	0eH
	DD	FLAT:$L148688
	DD	0fH
	DD	FLAT:$L148689
$T149112 DD	019930520H
	DD	011H
	DD	FLAT:$T149133
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7FTexFiller@UD3DRenderDevice@@6B@
CONST	SEGMENT
??_7FTexFiller@UD3DRenderDevice@@6B@ DD FLAT:?BeginUpload@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@ABUFTextureInfo@@KK@Z ; UD3DRenderDevice::FTexFiller::`vftable'
	DD	FLAT:?UploadMipmap@FTexFiller@UD3DRenderDevice@@UAEXPAUFTexInfo@2@TFRainbowPtr@@HABUFTextureInfo@@HK@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0UD3DRenderDevice@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -16
_i$148760 = -24
$T148796 = -20
_i$148843 = -24
$T148879 = -20
$T148948 = -136
$T149069 = -20
$T149070 = -24
$T149071 = -28
$T149108 = -228
__$EHRec$ = -12
??0UD3DRenderDevice@@QAE@ABV0@@Z PROC NEAR		; UD3DRenderDevice::UD3DRenderDevice, COMDAT
; _this$ = ecx
	push	-1
	push	$L149132
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 16					; 00000010H
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp+28]
	push	ebp
	push	esi
	push	edi
	mov	ebp, ecx
	push	ebx
	mov	DWORD PTR _this$[esp+48], ebp
	call	DWORD PTR __imp_??0UObject@@QAE@ABV0@@Z
	mov	eax, DWORD PTR __imp_??_7FExec@@6B@
	mov	DWORD PTR [ebp+40], eax
	mov	ecx, DWORD PTR __imp_??_7USubsystem@@6BUObject@@@
	mov	DWORD PTR [ebp], ecx
	mov	edx, DWORD PTR __imp_??_7USubsystem@@6BFExec@@@
	mov	DWORD PTR [ebp+40], edx
	mov	al, BYTE PTR [ebx+44]
	mov	BYTE PTR [ebp+44], al
	mov	ecx, DWORD PTR [ebx+48]
	lea	edx, DWORD PTR [ebx+52]
	mov	DWORD PTR [ebp+48], ecx
	push	edx
	lea	ecx, DWORD PTR [ebp+52]
	mov	DWORD PTR __$EHRec$[esp+56], 0
	call	DWORD PTR __imp_??0FString@@QAE@ABV0@@Z
	mov	eax, DWORD PTR [ebx+64]
	mov	DWORD PTR [ebp+64], eax
	mov	ecx, DWORD PTR [ebx+68]
	mov	DWORD PTR [ebp+68], ecx
	mov	edx, DWORD PTR [ebx+72]
	mov	DWORD PTR [ebp+72], edx
	mov	eax, DWORD PTR [ebx+76]
	mov	DWORD PTR [ebp+76], eax
	mov	ecx, DWORD PTR [ebx+80]
	mov	DWORD PTR [ebp+80], ecx
	mov	edx, DWORD PTR [ebx+84]
	mov	DWORD PTR [ebp+84], edx
	mov	eax, DWORD PTR [ebx+88]
	mov	DWORD PTR [ebp+88], eax
	mov	ecx, DWORD PTR [ebx+92]
	mov	DWORD PTR [ebp+92], ecx
	mov	edx, DWORD PTR [ebx+96]
	mov	DWORD PTR [ebp+96], edx
	mov	eax, DWORD PTR [ebx+100]
	mov	DWORD PTR [ebp+100], eax
	mov	ecx, DWORD PTR [ebx+104]
	mov	DWORD PTR [ebp+104], ecx
	lea	esi, DWORD PTR [ebx+108]
	lea	edi, DWORD PTR [ebp+108]
	mov	ecx, 8
	rep movsd
	lea	esi, DWORD PTR [ebx+140]
	lea	edi, DWORD PTR [ebp+140]
	mov	ecx, 8
	rep movsd
	mov	edx, DWORD PTR [ebx+172]
	mov	DWORD PTR [ebp+172], edx
	lea	eax, DWORD PTR [ebx+176]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR [ebp+176]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	lea	ecx, DWORD PTR [ebx+188]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [ebp+188]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	mov	edx, DWORD PTR __imp_??_7URenderDevice@@6BUObject@@@
	mov	DWORD PTR [ebp], edx
	mov	eax, DWORD PTR __imp_??_7URenderDevice@@6BFExec@@@
	mov	DWORD PTR [ebp+40], eax
	lea	esi, DWORD PTR [ebp+200]
	mov	DWORD PTR __$EHRec$[esp+52], 1
	mov	DWORD PTR $T148796[esp+44], esi
	mov	eax, DWORD PTR [ebx+204]
	xor	edi, edi
	push	84					; 00000054H
	mov	ecx, esi
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	DWORD PTR [esi+4], edi
	cmp	DWORD PTR [ebx+204], edi
	mov	BYTE PTR __$EHRec$[esp+52], 2
	mov	DWORD PTR _i$148760[esp+44], edi
	jle	SHORT $L148763
	mov	DWORD PTR -28+[esp+44], edi
$L148761:
	push	84					; 00000054H
	push	1
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	imul	eax, 84					; 00000054H
	add	eax, DWORD PTR [esi]
	je	SHORT $L148762
	mov	esi, DWORD PTR [ebx+200]
	add	esi, DWORD PTR -28+[esp+44]
	mov	ecx, 21					; 00000015H
	mov	edi, eax
	rep movsd
	mov	esi, DWORD PTR $T148796[esp+44]
	xor	edi, edi
$L148762:
	mov	eax, DWORD PTR _i$148760[esp+44]
	mov	edx, DWORD PTR -28+[esp+44]
	mov	ecx, DWORD PTR [ebx+204]
	inc	eax
	add	edx, 84					; 00000054H
	cmp	eax, ecx
	mov	DWORD PTR _i$148760[esp+44], eax
	mov	DWORD PTR -28+[esp+44], edx
	jl	SHORT $L148761
$L148763:
	mov	eax, DWORD PTR [ebx+216]
	lea	esi, DWORD PTR [ebp+212]
	push	20					; 00000014H
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+56], 3
	mov	DWORD PTR $T148879[esp+48], esi
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	DWORD PTR [esi+4], edi
	cmp	DWORD PTR [ebx+216], edi
	mov	BYTE PTR __$EHRec$[esp+52], 4
	mov	DWORD PTR _i$148843[esp+44], edi
	jle	SHORT $L148846
	mov	DWORD PTR -28+[esp+44], edi
	npad	4
$L148844:
	push	20					; 00000014H
	push	1
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	edx, DWORD PTR [esi]
	lea	ecx, DWORD PTR [eax+eax*4]
	lea	edi, DWORD PTR [edx+ecx*4]
	test	edi, edi
	je	SHORT $L148845
	mov	esi, DWORD PTR [ebx+212]
	add	esi, DWORD PTR -28+[esp+44]
	mov	ecx, 5
	rep movsd
	mov	esi, DWORD PTR $T148879[esp+44]
$L148845:
	mov	eax, DWORD PTR _i$148843[esp+44]
	mov	edx, DWORD PTR -28+[esp+44]
	mov	ecx, DWORD PTR [ebx+216]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$148843[esp+44], eax
	mov	DWORD PTR -28+[esp+44], edx
	jl	SHORT $L148844
	xor	edi, edi
$L148846:
	mov	eax, DWORD PTR [ebx+228]
	lea	esi, DWORD PTR [ebp+224]
	push	4
	mov	ecx, esi
	mov	BYTE PTR __$EHRec$[esp+56], 5
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
	mov	ecx, DWORD PTR [esi+4]
	xor	eax, eax
	cmp	ecx, edi
	jle	SHORT $L148946
	npad	7
$L148944:
	mov	ecx, DWORD PTR [ebx+224]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	ecx, DWORD PTR [esi+4]
	inc	eax
	cmp	eax, ecx
	jl	SHORT $L148944
$L148946:
	mov	edx, DWORD PTR [ebx+236]
	mov	DWORD PTR [ebp+236], edx
	mov	ecx, 4096				; 00001000H
	lea	esi, DWORD PTR [ebx+240]
	lea	edi, DWORD PTR [ebp+240]
	rep movsd
	lea	esi, DWORD PTR [ebx+16624]
	lea	edi, DWORD PTR [ebp+16624]
	mov	ecx, 14					; 0000000eH
	rep movsd
	lea	esi, DWORD PTR [ebx+16680]
	lea	edi, DWORD PTR [ebp+16680]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebx+16700]
	lea	edi, DWORD PTR [ebp+16700]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebx+16720]
	lea	edi, DWORD PTR [ebp+16720]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebx+16740]
	lea	edi, DWORD PTR [ebp+16740]
	mov	ecx, 5
	rep movsd
	mov	eax, DWORD PTR [ebx+16760]
	mov	DWORD PTR [ebp+16760], eax
	mov	ecx, DWORD PTR [ebx+16764]
	mov	DWORD PTR [ebp+16764], ecx
	mov	edx, DWORD PTR [ebx+16768]
	mov	DWORD PTR [ebp+16768], edx
	mov	eax, DWORD PTR [ebx+16772]
	mov	DWORD PTR [ebp+16772], eax
	mov	ecx, DWORD PTR [ebx+16776]
	mov	DWORD PTR [ebp+16776], ecx
	lea	esi, DWORD PTR [ebx+16780]
	lea	edi, DWORD PTR [ebp+16780]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebx+16832]
	lea	edi, DWORD PTR [ebp+16832]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebx+16884]
	lea	edi, DWORD PTR [ebp+16884]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebx+16936]
	lea	edi, DWORD PTR [ebp+16936]
	mov	ecx, 13					; 0000000dH
	rep movsd
	mov	edx, DWORD PTR [ebx+16988]
	mov	DWORD PTR [ebp+16988], edx
	mov	eax, DWORD PTR [ebx+16996]
	mov	DWORD PTR [ebp+16996], eax
	mov	DWORD PTR [ebp+16992], OFFSET FLAT:??_7FTexFillerDXT1@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFillerDXT1::`vftable'
	mov	ecx, DWORD PTR [ebx+17004]
	mov	DWORD PTR [ebp+17004], ecx
	mov	DWORD PTR [ebp+17000], OFFSET FLAT:??_7FTexFiller8888_RGBA8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_RGBA8::`vftable'
	mov	edx, DWORD PTR [ebx+17012]
	mov	DWORD PTR [ebp+17012], edx
	mov	DWORD PTR [ebp+17008], OFFSET FLAT:??_7FTexFiller8888_RGBA7@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_RGBA7::`vftable'
	mov	eax, DWORD PTR [ebx+17020]
	mov	DWORD PTR [ebp+17020], eax
	mov	eax, OFFSET FLAT:??_7FTexFiller@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller::`vftable'
	mov	DWORD PTR [ebp+17016], eax
	lea	esi, DWORD PTR [ebx+17024]
	lea	edi, DWORD PTR [ebp+17024]
	mov	ecx, 256				; 00000100H
	rep movsd
	mov	DWORD PTR [ebp+17016], OFFSET FLAT:??_7FTexFiller8888_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller8888_P8::`vftable'
	mov	ecx, DWORD PTR [ebx+18052]
	mov	BYTE PTR __$EHRec$[esp+52], 11		; 0000000bH
	mov	DWORD PTR [ebp+18052], ecx
	mov	DWORD PTR [ebp+18048], OFFSET FLAT:??_7FTexFiller1555_RGBA7@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller1555_RGBA7::`vftable'
	mov	edx, DWORD PTR [ebx+18060]
	mov	DWORD PTR [ebp+18056], eax
	mov	DWORD PTR [ebp+18060], edx
	lea	esi, DWORD PTR [ebx+18064]
	lea	edi, DWORD PTR [ebp+18064]
	mov	ecx, 256				; 00000100H
	rep movsd
	mov	DWORD PTR [ebp+18056], OFFSET FLAT:??_7FTexFiller1555_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFiller1555_P8::`vftable'
	mov	eax, DWORD PTR [ebx+19092]
	mov	DWORD PTR [ebp+19092], eax
	mov	DWORD PTR [ebp+19088], OFFSET FLAT:??_7FTexFillerP8_P8@UD3DRenderDevice@@6B@ ; UD3DRenderDevice::FTexFillerP8_P8::`vftable'
	mov	ecx, DWORD PTR [ebx+19096]
	mov	DWORD PTR [ebp+19096], ecx
	mov	edx, DWORD PTR [ebx+19100]
	mov	DWORD PTR [ebp+19100], edx
	mov	eax, DWORD PTR [ebx+19104]
	mov	DWORD PTR [ebp+19104], eax
	mov	ecx, DWORD PTR [ebx+19108]
	mov	DWORD PTR [ebp+19108], ecx
	mov	edx, DWORD PTR [ebx+19112]
	mov	DWORD PTR [ebp+19112], edx
	mov	eax, DWORD PTR [ebx+19116]
	mov	DWORD PTR [ebp+19116], eax
	mov	ecx, DWORD PTR [ebx+19120]
	mov	DWORD PTR [ebp+19120], ecx
	mov	edx, DWORD PTR [ebx+19124]
	mov	DWORD PTR [ebp+19124], edx
	mov	eax, DWORD PTR [ebx+19128]
	mov	DWORD PTR [ebp+19128], eax
	mov	ecx, DWORD PTR [ebx+19132]
	mov	DWORD PTR [ebp+19132], ecx
	mov	edx, DWORD PTR [ebx+19136]
	mov	DWORD PTR [ebp+19136], edx
	mov	eax, DWORD PTR [ebx+19140]
	mov	DWORD PTR [ebp+19140], eax
	mov	ecx, DWORD PTR [ebx+19144]
	mov	DWORD PTR [ebp+19144], ecx
	mov	edx, DWORD PTR [ebx+19148]
	mov	DWORD PTR [ebp+19148], edx
	mov	eax, DWORD PTR [ebx+19152]
	mov	DWORD PTR [ebp+19152], eax
	mov	ecx, DWORD PTR [ebx+19156]
	mov	DWORD PTR [ebp+19156], ecx
	mov	edx, DWORD PTR [ebx+19160]
	mov	DWORD PTR [ebp+19160], edx
	mov	eax, DWORD PTR [ebx+19164]
	mov	DWORD PTR [ebp+19164], eax
	mov	ecx, DWORD PTR [ebx+19168]
	mov	DWORD PTR [ebp+19168], ecx
	lea	esi, DWORD PTR [ebx+19172]
	lea	edi, DWORD PTR [ebp+19172]
	mov	ecx, 6
	rep movsd
	lea	esi, DWORD PTR [ebx+19196]
	lea	edi, DWORD PTR [ebp+19196]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19260]
	lea	edi, DWORD PTR [ebp+19260]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19324]
	lea	edi, DWORD PTR [ebp+19324]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19388]
	lea	edi, DWORD PTR [ebp+19388]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19452]
	lea	edi, DWORD PTR [ebp+19452]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebx+19516]
	lea	edi, DWORD PTR [ebp+19516]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	eax, DWORD PTR [ebx+19580]
	lea	ecx, DWORD PTR [ebp+19580]
	mov	edx, eax
	mov	esi, ecx
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	eax, DWORD PTR [ebx+19596]
	mov	edx, eax
	mov	edi, DWORD PTR [edx]
	lea	ecx, DWORD PTR [ebp+19596]
	mov	esi, ecx
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR [ebx+19612]
	mov	DWORD PTR [ebp+19612], ecx
	mov	edx, DWORD PTR [ebx+19616]
	mov	DWORD PTR [ebp+19616], edx
	mov	eax, DWORD PTR [ebx+19620]
	mov	DWORD PTR [ebp+19620], eax
	lea	esi, DWORD PTR [ebx+19624]
	lea	edi, DWORD PTR [ebp+19624]
	mov	ecx, 22					; 00000016H
	rep movsd
	lea	esi, DWORD PTR [ebx+19712]
	lea	edi, DWORD PTR [ebp+19712]
	mov	ecx, 8
	rep movsd
	lea	eax, DWORD PTR [ebp+19744]
	mov	ecx, eax
	sub	ecx, ebp
	mov	edi, ebp
	lea	esi, DWORD PTR [ecx+ebx+16]
	sub	edi, ebx
	mov	DWORD PTR -24+[esp+44], 16384		; 00004000H
$L127258:
	mov	dl, BYTE PTR [esi-16]
	mov	BYTE PTR [eax], dl
	mov	edx, DWORD PTR [esi-16]
	mov	ecx, eax
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [esi-12]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [esi-8]
	mov	DWORD PTR [ecx+8], edx
	mov	ecx, DWORD PTR [esi-4]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [edi+esi], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+24], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+32], edx
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR [eax+36], ecx
	mov	ecx, DWORD PTR -24+[esp+44]
	add	eax, 40					; 00000028H
	add	esi, 40					; 00000028H
	dec	ecx
	mov	DWORD PTR -24+[esp+44], ecx
	jne	SHORT $L127258
	mov	edx, DWORD PTR [ebx+675104]
	mov	DWORD PTR [ebp+675104], edx
	mov	eax, DWORD PTR [ebx+675108]
	mov	DWORD PTR [ebp+675108], eax
	mov	ecx, DWORD PTR [ebx+675116]
	push	1
	lea	esi, DWORD PTR [ebp+675112]
	push	ecx
	mov	ecx, esi
	call	DWORD PTR __imp_??0FArray@@IAE@HH@Z
	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ebx+675112]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR $T149071[esp+44], edx
	mov	DWORD PTR $T149070[esp+44], eax
	mov	DWORD PTR $T149069[esp+44], ecx
	mov	ecx, DWORD PTR $T149071[esp+44]
	mov	esi, DWORD PTR $T149070[esp+44]
	mov	edi, DWORD PTR $T149069[esp+44]
	mov	ebx, ecx
	shr	ecx, 2
	and	ebx, 3
	rep	 movsd
	mov	ecx, ebx
	rep	 movsb
	mov	esi, DWORD PTR ___that$[esp+40]
	mov	edx, DWORD PTR [esi+675124]
	mov	DWORD PTR [ebp+675124], edx
	mov	eax, DWORD PTR [esi+675128]
	mov	DWORD PTR [ebp+675128], eax
	mov	ecx, DWORD PTR [esi+675132]
	mov	DWORD PTR [ebp+675132], ecx
	mov	edx, DWORD PTR [esi+675136]
	mov	DWORD PTR [ebp+675136], edx
	mov	eax, DWORD PTR [esi+675140]
	mov	DWORD PTR [ebp+675140], eax
	mov	ecx, DWORD PTR [esi+675144]
	mov	DWORD PTR [ebp+675144], ecx
	mov	edx, DWORD PTR [esi+675148]
	mov	DWORD PTR [ebp+675148], edx
	mov	eax, DWORD PTR [esi+675152]
	mov	DWORD PTR [ebp+675152], eax
	mov	ecx, DWORD PTR [esi+675156]
	mov	DWORD PTR [ebp+675156], ecx
	mov	edx, DWORD PTR [esi+675160]
	mov	DWORD PTR [ebp+675160], edx
	mov	eax, DWORD PTR [esi+675164]
	mov	DWORD PTR [ebp+675164], eax
	mov	ecx, DWORD PTR [esi+675168]
	mov	DWORD PTR [ebp+675168], ecx
	mov	edx, DWORD PTR [esi+675172]
	mov	DWORD PTR [ebp+675172], edx
	mov	eax, DWORD PTR [esi+675176]
	mov	DWORD PTR [ebp+675176], eax
	mov	ecx, DWORD PTR [esi+675180]
	mov	DWORD PTR [ebp+675180], ecx
	mov	edx, DWORD PTR [esi+675184]
	mov	DWORD PTR [ebp+675184], edx
	mov	eax, DWORD PTR [esi+675188]
	mov	DWORD PTR [ebp+675188], eax
	mov	ecx, DWORD PTR [esi+675192]
	mov	DWORD PTR [ebp+675192], ecx
	mov	edx, DWORD PTR [esi+675196]
	mov	DWORD PTR [ebp+675196], edx
	mov	eax, DWORD PTR [esi+675200]
	mov	DWORD PTR [ebp+675200], eax
	mov	ecx, DWORD PTR [esi+675204]
	mov	DWORD PTR [ebp+675204], ecx
	mov	edx, DWORD PTR [esi+675208]
	lea	eax, DWORD PTR [esi+675212]
	push	eax
	lea	ecx, DWORD PTR [ebp+675212]
	mov	BYTE PTR __$EHRec$[esp+56], 13		; 0000000dH
	mov	DWORD PTR [ebp+675208], edx
	call	??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedPolygon>::TArray<UD3DRenderDevice::QueuedPolygon>
	lea	ecx, DWORD PTR [esi+675224]
	push	ecx
	lea	ecx, DWORD PTR [ebp+675224]
	mov	BYTE PTR __$EHRec$[esp+56], 14		; 0000000eH
	call	??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::TArray<UD3DRenderDevice::QueuedParticleByTexture>
	lea	edx, DWORD PTR [esi+675236]
	push	edx
	lea	ecx, DWORD PTR [ebp+675236]
	mov	BYTE PTR __$EHRec$[esp+56], 15		; 0000000fH
	call	??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z ; TArray<UD3DRenderDevice::QueuedLineSegment>::TArray<UD3DRenderDevice::QueuedLineSegment>
	add	esi, 675248				; 000a4db0H
	push	esi
	lea	ecx, DWORD PTR [ebp+675248]
	mov	BYTE PTR __$EHRec$[esp+56], 16		; 00000010H
	call	??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z	; TArray<FD3DVertex>::TArray<FD3DVertex>
	mov	ecx, DWORD PTR __$EHRec$[esp+44]
	pop	edi
	pop	esi
	mov	DWORD PTR [ebp], OFFSET FLAT:??_7UD3DRenderDevice@@6BUObject@@@ ; UD3DRenderDevice::`vftable'
	mov	DWORD PTR [ebp+40], OFFSET FLAT:??_7UD3DRenderDevice@@6BFExec@@@ ; UD3DRenderDevice::`vftable'
	mov	eax, ebp
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 28					; 0000001cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L148692:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1USubsystem@@UAE@XZ
$L148678:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1URenderDevice@@UAE@XZ
$L148720:
	mov	ecx, DWORD PTR $T148796[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148679:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 200				; 000000c8H
	jmp	??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
$L148803:
	mov	ecx, DWORD PTR $T148879[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148680:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	jmp	??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
$L148886:
	mov	ecx, DWORD PTR $T148948[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148681:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	jmp	??1?$TArray@H@@QAE@XZ			; TArray<int>::~TArray<int>
$L148682:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16680				; 00004128H
	jmp	??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
$L148683:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16700				; 0000413cH
	jmp	??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
$L148684:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16720				; 00004150H
	jmp	??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ ; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
$L148685:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16740				; 00004164H
	jmp	??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ ; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
$L149038:
	mov	ecx, DWORD PTR $T149108[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L148686:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675112				; 000a4d28H
	jmp	??1?$TArray@E@@QAE@XZ			; TArray<unsigned char>::~TArray<unsigned char>
$L148687:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675212				; 000a4d8cH
	jmp	??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
$L148688:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675224				; 000a4d98H
	jmp	??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
$L148689:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 675236				; 000a4da4H
	jmp	??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
$L149132:
	mov	eax, OFFSET FLAT:$T149112
	jmp	___CxxFrameHandler
text$x	ENDS
??0UD3DRenderDevice@@QAE@ABV0@@Z ENDP			; UD3DRenderDevice::UD3DRenderDevice
PUBLIC	??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z	; UD3DRenderDevice::QueuedPolygon::QueuedPolygon
PUBLIC	?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z		; TArray<FD3DVertex>::Empty
PUBLIC	??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z		; UD3DRenderDevice::operator=
PUBLIC	??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z		; operator new
EXTRN	__imp_??4UObject@@QAEAAV0@ABV0@@Z:NEAR
EXTRN	__imp_??4FString@@QAEAAV0@ABV0@@Z:NEAR
; Function compile flags: /Ogty
;	COMDAT ??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_i$149467 = 8
_i$149525 = -4
_i$149583 = -4
___that$ = 8
_i$149641 = -4
_i$149200 = -4
_i$149258 = -4
_i$149316 = 8
??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z PROC NEAR		; UD3DRenderDevice::operator=, COMDAT
; _this$ = ecx
	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR ___that$[esp+12]
	push	esi
	push	edi
	push	ebp
	mov	ebx, ecx
	call	DWORD PTR __imp_??4UObject@@QAEAAV0@ABV0@@Z
	mov	al, BYTE PTR [ebp+44]
	mov	BYTE PTR [ebx+44], al
	mov	ecx, DWORD PTR [ebp+48]
	lea	edx, DWORD PTR [ebp+52]
	mov	DWORD PTR [ebx+48], ecx
	push	edx
	lea	ecx, DWORD PTR [ebx+52]
	call	DWORD PTR __imp_??4FString@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR [ebp+64]
	mov	DWORD PTR [ebx+64], eax
	mov	ecx, DWORD PTR [ebp+68]
	mov	DWORD PTR [ebx+68], ecx
	mov	edx, DWORD PTR [ebp+72]
	mov	DWORD PTR [ebx+72], edx
	mov	eax, DWORD PTR [ebp+76]
	mov	DWORD PTR [ebx+76], eax
	mov	ecx, DWORD PTR [ebp+80]
	mov	DWORD PTR [ebx+80], ecx
	mov	edx, DWORD PTR [ebp+84]
	mov	DWORD PTR [ebx+84], edx
	mov	eax, DWORD PTR [ebp+88]
	mov	DWORD PTR [ebx+88], eax
	mov	ecx, DWORD PTR [ebp+92]
	mov	DWORD PTR [ebx+92], ecx
	mov	edx, DWORD PTR [ebp+96]
	mov	DWORD PTR [ebx+96], edx
	mov	eax, DWORD PTR [ebp+100]
	mov	DWORD PTR [ebx+100], eax
	mov	ecx, DWORD PTR [ebp+104]
	mov	DWORD PTR [ebx+104], ecx
	mov	ecx, ebp
	sub	ecx, ebx
	lea	eax, DWORD PTR [ebx+108]
	mov	DWORD PTR -8+[esp+24], ecx
	mov	edx, 8
	npad	1
$L149154:
	mov	esi, DWORD PTR [ecx+eax]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $L149154
	lea	eax, DWORD PTR [ebx+140]
	mov	edx, 8
$L149158:
	mov	esi, DWORD PTR [eax+ecx]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $L149158
	mov	edx, DWORD PTR [ebp+172]
	mov	DWORD PTR [ebx+172], edx
	lea	eax, DWORD PTR [ebp+176]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR [ebx+176]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	lea	ecx, DWORD PTR [ebp+188]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [ebx+188]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	lea	esi, DWORD PTR [ebp+200]
	lea	ecx, DWORD PTR [ebx+200]
	cmp	ecx, esi
	je	SHORT $L149715
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	84					; 00000054H
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	eax, DWORD PTR [esi+4]
	xor	edi, edi
	cmp	eax, edi
	mov	DWORD PTR _i$149200[esp+24], edi
	jle	SHORT $L149203
	mov	DWORD PTR 8+[esp+20], edi
$L149201:
	push	84					; 00000054H
	lea	edi, DWORD PTR [ebx+200]
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	imul	eax, 84					; 00000054H
	add	eax, DWORD PTR [edi]
	je	SHORT $L149202
	mov	esi, DWORD PTR [esi]
	add	esi, DWORD PTR 8+[esp+20]
	mov	ecx, 21					; 00000015H
	mov	edi, eax
	rep movsd
$L149202:
	mov	eax, DWORD PTR _i$149200[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [ebp+204]
	lea	esi, DWORD PTR [ebp+200]
	inc	eax
	add	edx, 84					; 00000054H
	cmp	eax, ecx
	mov	DWORD PTR _i$149200[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L149201
$L149715:
	xor	edi, edi
$L149203:
	lea	esi, DWORD PTR [ebp+212]
	lea	ecx, DWORD PTR [ebx+212]
	cmp	ecx, esi
	je	SHORT $L149261
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	20					; 00000014H
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	cmp	DWORD PTR [esi+4], edi
	mov	DWORD PTR _i$149258[esp+24], edi
	jle	SHORT $L149261
	mov	DWORD PTR 8+[esp+20], edi
	npad	7
$L149259:
	push	20					; 00000014H
	lea	edi, DWORD PTR [ebx+212]
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edi]
	lea	edi, DWORD PTR [eax+edx*4]
	test	edi, edi
	je	SHORT $L149260
	mov	esi, DWORD PTR [esi]
	add	esi, DWORD PTR 8+[esp+20]
	mov	ecx, 5
	rep movsd
$L149260:
	mov	eax, DWORD PTR _i$149258[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [ebp+216]
	lea	esi, DWORD PTR [ebp+212]
	inc	eax
	add	edx, 20					; 00000014H
	cmp	eax, ecx
	mov	DWORD PTR _i$149258[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L149259
$L149261:
	lea	edi, DWORD PTR [ebp+224]
	lea	esi, DWORD PTR [ebx+224]
	cmp	esi, edi
	je	SHORT $L149319
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	push	4
	mov	ecx, esi
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	mov	DWORD PTR _i$149316[esp+20], 0
	jle	SHORT $L149319
	npad	4
$L149317:
	push	4
	push	1
	mov	ecx, esi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	edx, DWORD PTR [esi]
	lea	eax, DWORD PTR [edx+eax*4]
	test	eax, eax
	je	SHORT $L149318
	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR _i$149316[esp+20]
	mov	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [eax], ecx
$L149318:
	mov	eax, DWORD PTR _i$149316[esp+20]
	mov	ecx, DWORD PTR [edi+4]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _i$149316[esp+20], eax
	jl	SHORT $L149317
$L149319:
	mov	edx, DWORD PTR [ebp+236]
	mov	DWORD PTR [ebx+236], edx
	lea	eax, DWORD PTR [ebx+240]
	mov	ecx, 4096				; 00001000H
$L127262:
	mov	edx, DWORD PTR -8+[esp+24]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], edx
	add	eax, 4
	dec	ecx
	jne	SHORT $L127262
	lea	esi, DWORD PTR [ebp+16624]
	lea	edi, DWORD PTR [ebx+16624]
	mov	ecx, 14					; 0000000eH
	rep movsd
	lea	esi, DWORD PTR [ebp+16680]
	lea	edi, DWORD PTR [ebx+16680]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebp+16700]
	lea	edi, DWORD PTR [ebx+16700]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebp+16720]
	lea	edi, DWORD PTR [ebx+16720]
	mov	ecx, 5
	rep movsd
	lea	esi, DWORD PTR [ebp+16740]
	lea	edi, DWORD PTR [ebx+16740]
	mov	ecx, 5
	rep movsd
	mov	eax, DWORD PTR [ebp+16760]
	mov	DWORD PTR [ebx+16760], eax
	mov	ecx, DWORD PTR [ebp+16764]
	mov	DWORD PTR [ebx+16764], ecx
	mov	edx, DWORD PTR [ebp+16768]
	mov	DWORD PTR [ebx+16768], edx
	mov	eax, DWORD PTR [ebp+16772]
	mov	DWORD PTR [ebx+16772], eax
	mov	ecx, DWORD PTR [ebp+16776]
	mov	DWORD PTR [ebx+16776], ecx
	lea	esi, DWORD PTR [ebp+16780]
	lea	edi, DWORD PTR [ebx+16780]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebp+16832]
	lea	edi, DWORD PTR [ebx+16832]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebp+16884]
	lea	edi, DWORD PTR [ebx+16884]
	mov	ecx, 13					; 0000000dH
	rep movsd
	lea	esi, DWORD PTR [ebp+16936]
	lea	edi, DWORD PTR [ebx+16936]
	mov	ecx, 13					; 0000000dH
	rep movsd
	mov	edx, DWORD PTR [ebp+16988]
	mov	DWORD PTR [ebx+16988], edx
	mov	eax, DWORD PTR [ebp+16996]
	mov	DWORD PTR [ebx+16996], eax
	mov	ecx, DWORD PTR [ebp+17004]
	mov	DWORD PTR [ebx+17004], ecx
	mov	edx, DWORD PTR [ebp+17012]
	mov	DWORD PTR [ebx+17012], edx
	mov	ecx, DWORD PTR [ebp+17020]
	lea	edx, DWORD PTR [ebp+17016]
	lea	eax, DWORD PTR [ebx+17016]
	mov	DWORD PTR [eax+4], ecx
	lea	ecx, DWORD PTR [eax+8]
	sub	edx, eax
	mov	eax, 256				; 00000100H
	npad	4
$L149378:
	mov	esi, DWORD PTR [edx+ecx]
	mov	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	eax
	jne	SHORT $L149378
	mov	edx, DWORD PTR [ebp+18052]
	mov	DWORD PTR [ebx+18052], edx
	mov	eax, DWORD PTR [ebp+18060]
	lea	edx, DWORD PTR [ebp+18056]
	lea	ecx, DWORD PTR [ebx+18056]
	mov	DWORD PTR [ecx+4], eax
	lea	eax, DWORD PTR [ecx+8]
	sub	edx, ecx
	mov	ecx, 256				; 00000100H
$L149401:
	mov	esi, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	ecx
	jne	SHORT $L149401
	mov	ecx, DWORD PTR [ebp+19092]
	mov	DWORD PTR [ebx+19092], ecx
	mov	edx, DWORD PTR [ebp+19096]
	mov	DWORD PTR [ebx+19096], edx
	mov	eax, DWORD PTR [ebp+19100]
	mov	DWORD PTR [ebx+19100], eax
	mov	ecx, DWORD PTR [ebp+19104]
	mov	DWORD PTR [ebx+19104], ecx
	mov	edx, DWORD PTR [ebp+19108]
	mov	DWORD PTR [ebx+19108], edx
	mov	eax, DWORD PTR [ebp+19112]
	mov	DWORD PTR [ebx+19112], eax
	mov	ecx, DWORD PTR [ebp+19116]
	mov	DWORD PTR [ebx+19116], ecx
	mov	edx, DWORD PTR [ebp+19120]
	mov	DWORD PTR [ebx+19120], edx
	mov	eax, DWORD PTR [ebp+19124]
	mov	DWORD PTR [ebx+19124], eax
	mov	ecx, DWORD PTR [ebp+19128]
	mov	DWORD PTR [ebx+19128], ecx
	mov	edx, DWORD PTR [ebp+19132]
	mov	DWORD PTR [ebx+19132], edx
	mov	eax, DWORD PTR [ebp+19136]
	mov	DWORD PTR [ebx+19136], eax
	mov	ecx, DWORD PTR [ebp+19140]
	mov	DWORD PTR [ebx+19140], ecx
	mov	edx, DWORD PTR [ebp+19144]
	mov	DWORD PTR [ebx+19144], edx
	mov	eax, DWORD PTR [ebp+19148]
	mov	DWORD PTR [ebx+19148], eax
	mov	ecx, DWORD PTR [ebp+19152]
	mov	DWORD PTR [ebx+19152], ecx
	mov	edx, DWORD PTR [ebp+19156]
	mov	DWORD PTR [ebx+19156], edx
	mov	eax, DWORD PTR [ebp+19160]
	mov	DWORD PTR [ebx+19160], eax
	mov	ecx, DWORD PTR [ebp+19164]
	mov	DWORD PTR [ebx+19164], ecx
	mov	edx, DWORD PTR [ebp+19168]
	mov	DWORD PTR [ebx+19168], edx
	lea	esi, DWORD PTR [ebp+19172]
	lea	edi, DWORD PTR [ebx+19172]
	mov	ecx, 6
	rep movsd
	lea	esi, DWORD PTR [ebp+19196]
	lea	edi, DWORD PTR [ebx+19196]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19260]
	lea	edi, DWORD PTR [ebx+19260]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19324]
	lea	edi, DWORD PTR [ebx+19324]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19388]
	lea	edi, DWORD PTR [ebx+19388]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19452]
	lea	edi, DWORD PTR [ebx+19452]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	esi, DWORD PTR [ebp+19516]
	lea	edi, DWORD PTR [ebx+19516]
	mov	ecx, 16					; 00000010H
	rep movsd
	lea	eax, DWORD PTR [ebp+19580]
	mov	edx, DWORD PTR [eax]
	lea	ecx, DWORD PTR [ebx+19580]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	lea	ecx, DWORD PTR [ebp+19596]
	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [ebx+19596]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR [ebp+19612]
	mov	DWORD PTR [ebx+19612], edx
	mov	eax, DWORD PTR [ebp+19616]
	mov	DWORD PTR [ebx+19616], eax
	mov	ecx, DWORD PTR [ebp+19620]
	mov	DWORD PTR [ebx+19620], ecx
	lea	esi, DWORD PTR [ebp+19624]
	lea	edi, DWORD PTR [ebx+19624]
	mov	ecx, 22					; 00000016H
	rep movsd
	lea	eax, DWORD PTR [ebx+19712]
	mov	ecx, 8
	npad	4
$L127266:
	mov	edx, DWORD PTR -8+[esp+24]
	mov	edx, DWORD PTR [edx+eax]
	mov	DWORD PTR [eax], edx
	add	eax, 4
	dec	ecx
	jne	SHORT $L127266
	lea	eax, DWORD PTR [ebx+19744]
	mov	edx, 16384				; 00004000H
	npad	6
$L127270:
	mov	ecx, DWORD PTR -8+[esp+24]
	lea	esi, DWORD PTR [ecx+eax]
	mov	edi, eax
	mov	ecx, 10					; 0000000aH
	add	eax, 40					; 00000028H
	dec	edx
	rep movsd
	jne	SHORT $L127270
	mov	edx, DWORD PTR [ebp+675104]
	mov	DWORD PTR [ebx+675104], edx
	mov	eax, DWORD PTR [ebp+675108]
	lea	esi, DWORD PTR [ebp+675112]
	lea	edi, DWORD PTR [ebx+675112]
	cmp	edi, esi
	mov	DWORD PTR [ebx+675108], eax
	je	SHORT $L149470
	mov	ecx, DWORD PTR [esi+4]
	push	ecx
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	mov	DWORD PTR _i$149467[esp+20], 0
	jle	SHORT $L149470
	npad	5
$L149468:
	push	1
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ecx, DWORD PTR [edi]
	add	ecx, eax
	je	SHORT $L149469
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR _i$149467[esp+20]
	mov	dl, BYTE PTR [eax+edx]
	mov	BYTE PTR [ecx], dl
$L149469:
	mov	eax, DWORD PTR _i$149467[esp+20]
	mov	ecx, DWORD PTR [esi+4]
	inc	eax
	cmp	eax, ecx
	mov	DWORD PTR _i$149467[esp+20], eax
	jl	SHORT $L149468
$L149470:
	mov	eax, DWORD PTR [ebp+675124]
	mov	DWORD PTR [ebx+675124], eax
	mov	ecx, DWORD PTR [ebp+675128]
	mov	DWORD PTR [ebx+675128], ecx
	mov	edx, DWORD PTR [ebp+675132]
	mov	DWORD PTR [ebx+675132], edx
	mov	eax, DWORD PTR [ebp+675136]
	mov	DWORD PTR [ebx+675136], eax
	mov	ecx, DWORD PTR [ebp+675140]
	mov	DWORD PTR [ebx+675140], ecx
	mov	edx, DWORD PTR [ebp+675144]
	mov	DWORD PTR [ebx+675144], edx
	mov	eax, DWORD PTR [ebp+675148]
	mov	DWORD PTR [ebx+675148], eax
	mov	ecx, DWORD PTR [ebp+675152]
	mov	DWORD PTR [ebx+675152], ecx
	mov	edx, DWORD PTR [ebp+675156]
	mov	DWORD PTR [ebx+675156], edx
	mov	eax, DWORD PTR [ebp+675160]
	mov	DWORD PTR [ebx+675160], eax
	mov	ecx, DWORD PTR [ebp+675164]
	mov	DWORD PTR [ebx+675164], ecx
	mov	edx, DWORD PTR [ebp+675168]
	mov	DWORD PTR [ebx+675168], edx
	mov	eax, DWORD PTR [ebp+675172]
	mov	DWORD PTR [ebx+675172], eax
	mov	ecx, DWORD PTR [ebp+675176]
	mov	DWORD PTR [ebx+675176], ecx
	mov	edx, DWORD PTR [ebp+675180]
	mov	DWORD PTR [ebx+675180], edx
	mov	eax, DWORD PTR [ebp+675184]
	mov	DWORD PTR [ebx+675184], eax
	mov	ecx, DWORD PTR [ebp+675188]
	mov	DWORD PTR [ebx+675188], ecx
	mov	edx, DWORD PTR [ebp+675192]
	mov	DWORD PTR [ebx+675192], edx
	mov	eax, DWORD PTR [ebp+675196]
	mov	DWORD PTR [ebx+675196], eax
	mov	ecx, DWORD PTR [ebp+675200]
	mov	DWORD PTR [ebx+675200], ecx
	mov	edx, DWORD PTR [ebp+675204]
	mov	DWORD PTR [ebx+675204], edx
	mov	eax, DWORD PTR [ebp+675208]
	lea	esi, DWORD PTR [ebp+675212]
	lea	edi, DWORD PTR [ebx+675212]
	cmp	edi, esi
	mov	DWORD PTR [ebx+675208], eax
	je	SHORT $L149528
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	280					; 00000118H
	mov	ecx, edi
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	ecx, DWORD PTR [esi+4]
	xor	eax, eax
	cmp	ecx, eax
	mov	DWORD PTR _i$149525[esp+24], eax
	jle	SHORT $L149528
	mov	DWORD PTR 8+[esp+20], eax
$L149526:
	push	280					; 00000118H
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	imul	eax, 280				; 00000118H
	add	eax, DWORD PTR [edi]
	je	SHORT $L149527
	mov	ecx, DWORD PTR [esi]
	add	ecx, DWORD PTR 8+[esp+20]
	push	ecx
	mov	ecx, eax
	call	??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z ; UD3DRenderDevice::QueuedPolygon::QueuedPolygon
$L149527:
	mov	eax, DWORD PTR _i$149525[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [esi+4]
	inc	eax
	add	edx, 280				; 00000118H
	cmp	eax, ecx
	mov	DWORD PTR _i$149525[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L149526
$L149528:
	lea	esi, DWORD PTR [ebp+675224]
	lea	edi, DWORD PTR [ebx+675224]
	cmp	edi, esi
	je	SHORT $L149586
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	16					; 00000010H
	mov	ecx, edi
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	ecx, DWORD PTR [esi+4]
	xor	eax, eax
	cmp	ecx, eax
	mov	DWORD PTR _i$149583[esp+24], eax
	jle	SHORT $L149586
	mov	DWORD PTR 8+[esp+20], eax
	npad	5
$L149584:
	push	16					; 00000010H
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ecx, DWORD PTR [edi]
	shl	eax, 4
	add	eax, ecx
	je	SHORT $L149585
	mov	edx, DWORD PTR [esi]
	add	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
$L149585:
	mov	eax, DWORD PTR _i$149583[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [esi+4]
	inc	eax
	add	edx, 16					; 00000010H
	cmp	eax, ecx
	mov	DWORD PTR _i$149583[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L149584
$L149586:
	lea	esi, DWORD PTR [ebp+675236]
	lea	ecx, DWORD PTR [ebx+675236]
	cmp	ecx, esi
	je	SHORT $L149644
	mov	eax, DWORD PTR [esi+4]
	push	eax
	push	36					; 00000024H
	call	DWORD PTR __imp_?Empty@FArray@@QAEXHH@Z
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	mov	DWORD PTR _i$149641[esp+24], 0
	jle	SHORT $L149644
	mov	DWORD PTR 8+[esp+20], 0
	npad	1
$L149642:
	push	36					; 00000024H
	lea	edi, DWORD PTR [ebx+675236]
	push	1
	mov	ecx, edi
	call	DWORD PTR __imp_?Add@FArray@@QAEHHH@Z
	mov	ecx, DWORD PTR [edi]
	lea	eax, DWORD PTR [eax+eax*8]
	lea	edi, DWORD PTR [ecx+eax*4]
	test	edi, edi
	je	SHORT $L149643
	mov	esi, DWORD PTR [esi]
	add	esi, DWORD PTR 8+[esp+20]
	mov	ecx, 9
	rep movsd
$L149643:
	mov	eax, DWORD PTR _i$149641[esp+24]
	mov	edx, DWORD PTR 8+[esp+20]
	mov	ecx, DWORD PTR [ebp+675240]
	lea	esi, DWORD PTR [ebp+675236]
	inc	eax
	add	edx, 36					; 00000024H
	cmp	eax, ecx
	mov	DWORD PTR _i$149641[esp+24], eax
	mov	DWORD PTR 8+[esp+20], edx
	jl	SHORT $L149642
$L149644:
	add	ebp, 675248				; 000a4db0H
	lea	ecx, DWORD PTR [ebx+675248]
	cmp	ecx, ebp
	je	SHORT $L149713
	mov	edx, DWORD PTR [ebp+4]
	push	edx
	call	?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z	; TArray<FD3DVertex>::Empty
	mov	eax, DWORD PTR [ebp+4]
	xor	esi, esi
	test	eax, eax
	jle	SHORT $L149713
	xor	edi, edi
$L149663:
	lea	eax, DWORD PTR [ebx+675248]
	push	eax
	push	16					; 00000010H
	call	??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z	; operator new
	add	esp, 8
	test	eax, eax
	je	SHORT $L149664
	mov	ecx, DWORD PTR [ebp]
	add	ecx, edi
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
$L149664:
	mov	eax, DWORD PTR [ebp+4]
	inc	esi
	add	edi, 16					; 00000010H
	cmp	esi, eax
	jl	SHORT $L149663
$L149713:
	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
	add	esp, 8
	ret	4
??4UD3DRenderDevice@@QAEAAV0@ABV0@@Z ENDP		; UD3DRenderDevice::operator=
_TEXT	ENDS
PUBLIC	??_GUD3DRenderDevice@@UAEPAXI@Z			; UD3DRenderDevice::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GUD3DRenderDevice@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GUD3DRenderDevice@@UAEPAXI@Z PROC NEAR		; UD3DRenderDevice::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1UD3DRenderDevice@@UAE@XZ		; UD3DRenderDevice::~UD3DRenderDevice
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L149734
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [edx+8]
$L149734:
	mov	eax, esi
	pop	esi
	ret	4
??_GUD3DRenderDevice@@UAEPAXI@Z ENDP			; UD3DRenderDevice::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
; Function compile flags: /Ogty
;	COMDAT ??_EUD3DRenderDevice@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EUD3DRenderDevice@@UAEPAXI@Z PROC NEAR		; UD3DRenderDevice::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	test	bl, 2
	push	esi
	mov	esi, ecx
	je	SHORT $L127278
	mov	eax, DWORD PTR [esi-4]
	push	edi
	push	OFFSET FLAT:??1UD3DRenderDevice@@UAE@XZ	; UD3DRenderDevice::~UD3DRenderDevice
	lea	edi, DWORD PTR [esi-4]
	push	eax
	push	675260					; 000a4dbcH
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L149740
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	edi
	call	DWORD PTR [edx+8]
$L149740:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L127278:
	mov	ecx, esi
	call	??1UD3DRenderDevice@@UAE@XZ		; UD3DRenderDevice::~UD3DRenderDevice
	test	bl, 1
	je	SHORT $L149742
	mov	eax, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	esi
	call	DWORD PTR [edx+8]
$L149742:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EUD3DRenderDevice@@UAEPAXI@Z ENDP			; UD3DRenderDevice::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	_DllMain@12
; Function compile flags: /Ogty
;	COMDAT _DllMain@12
_TEXT	SEGMENT
_hInInstance$ = 8
_DllMain@12 PROC NEAR					; COMDAT

; 5928 : IMPLEMENT_PACKAGE(D3DDrv);

	mov	eax, DWORD PTR _hInInstance$[esp-4]
	mov	DWORD PTR _hInstance, eax
	mov	eax, 1
	ret	12					; 0000000cH
_DllMain@12 ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E317
_TEXT	SEGMENT
_$E317	PROC NEAR					; COMDAT
	call	_$E313
	jmp	_$E316
_$E317	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ ; `string'
EXTRN	__imp_?PrivateStaticClass@UObject@@0VUClass@@A:BYTE
EXTRN	__imp_??0UClass@@QAE@W4ENativeConstructor@@KKPAV0@1VFGuid@@PBG33KP6AXPAX@ZP8UObject@@AEXXZ@Z:NEAR
EXTRN	__imp_?PrivateStaticClass@URenderDevice@@0VUClass@@A:BYTE
;	COMDAT ??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@
; File ..\..\Engine\Inc\UnRenDev.h
_DATA	SEGMENT
??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@ DB 'S', 00H, 'y', 00H
	DB	's', 00H, 't', 00H, 'e', 00H, 'm', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
_DATA	SEGMENT
??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ DB 'U'
	DB	00H, 'D', 00H, '3', 00H, 'D', 00H, 'R', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i'
	DB	00H, 'c', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
_DATA	ENDS
;	COMDAT _$E313
_TEXT	SEGMENT
$T149754 = -8
_$E313	PROC NEAR					; COMDAT

; 5929 : IMPLEMENT_CLASS(UD3DRenderDevice);

	sub	esp, 8
	push	ebx
	push	ebp
	push	esi
	push	edi
	sub	esp, 16					; 00000010H
	mov	ebp, esp
	push	OFFSET FLAT:?InternalConstructor@UD3DRenderDevice@@SAXPAX@Z ; UD3DRenderDevice::InternalConstructor
	push	67649540				; 04084004H
	push	OFFSET FLAT:??_C@_1O@KHFL@?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AA?$AA@ ; `string'
	push	OFFSET FLAT:_GPackage
	xor	ecx, ecx
	push	OFFSET FLAT:??_C@_1CC@LEJP@?$AAU?$AAD?$AA3?$AAD?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@+2
	mov	eax, OFFSET FLAT:?StaticConstructor@UD3DRenderDevice@@QAEXXZ ; UD3DRenderDevice::StaticConstructor
	mov	DWORD PTR [ebp], eax
	mov	DWORD PTR [ebp+4], ecx
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	xor	edx, edx
	mov	DWORD PTR [ebp+8], edx
	mov	edx, DWORD PTR __imp_?PrivateStaticClass@UObject@@0VUClass@@A
	xor	esi, esi
	xor	edi, edi
	mov	DWORD PTR [ebp+12], esi
	mov	DWORD PTR [ecx], edi
	xor	ebx, ebx
	mov	DWORD PTR [ecx+4], ebx
	xor	eax, eax
	mov	DWORD PTR [ecx+8], eax
	push	edx
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR __imp_?PrivateStaticClass@URenderDevice@@0VUClass@@A
	push	eax
	push	4
	push	675260					; 000a4dbcH
	push	edi
	mov	ecx, OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A
	mov	DWORD PTR $T149754[esp+100], ebx
	call	DWORD PTR __imp_??0UClass@@QAE@W4ENativeConstructor@@KKPAV0@1VFGuid@@PBG33KP6AXPAX@ZP8UObject@@AEXXZ@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	add	esp, 8
	ret	0
_$E313	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E316
_TEXT	SEGMENT
_$E316	PROC NEAR					; COMDAT
	push	OFFSET FLAT:_$E314
	call	_atexit
	pop	ecx
	ret	0
_$E316	ENDP
_TEXT	ENDS
EXTRN	__imp_??1UClass@@UAE@XZ:NEAR
_BSS	SEGMENT
_$S315	DB	01H DUP (?)
; Function compile flags: /Ogty
_BSS	ENDS
;	COMDAT _$E314
_TEXT	SEGMENT
_$E314	PROC NEAR					; COMDAT
	mov	cl, BYTE PTR _$S315
	mov	al, 1
	test	cl, al
	jne	SHORT $L127399
	or	cl, al
	mov	BYTE PTR _$S315, cl
	mov	ecx, OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A
	jmp	DWORD PTR __imp_??1UClass@@UAE@XZ
$L127399:
	ret	0
_$E314	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E320
_TEXT	SEGMENT
_$E320	PROC NEAR					; COMDAT
	jmp	_$E319
_$E320	ENDP
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT _$E319
_TEXT	SEGMENT
_$E319	PROC NEAR					; COMDAT

; 5929 : IMPLEMENT_CLASS(UD3DRenderDevice);

	mov	DWORD PTR _autoclassUD3DRenderDevice, OFFSET FLAT:?PrivateStaticClass@UD3DRenderDevice@@0VUClass@@A ; UD3DRenderDevice::PrivateStaticClass
	ret	0
_$E319	ENDP
_TEXT	ENDS
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	SEGMENT
$T149813 DD	0ffffffffH
	DD	FLAT:$L149786
$T149809 DD	019930520H
	DD	01H
	DD	FLAT:$T149813
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@E@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@E@@QAE@XZ PROC NEAR				; TArray<unsigned char>::~TArray<unsigned char>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L149812
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L149796
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149796:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L149797
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149797:
	push	1
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L149807
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L149807:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L149786:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L149812:
	mov	eax, OFFSET FLAT:$T149809
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@E@@QAE@XZ ENDP				; TArray<unsigned char>::~TArray<unsigned char>
; Function compile flags: /Ogty
;	COMDAT ?Remove@?$TArray@E@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@E@@QAEXHH@Z PROC NEAR			; TArray<unsigned char>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L127524
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L127524:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L127526
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L127526:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L127528
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L127528:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	1
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@E@@QAEXHH@Z ENDP			; TArray<unsigned char>::Remove
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T149855 DD	0ffffffffH
	DD	FLAT:$L149828
$T149851 DD	019930520H
	DD	01H
	DD	FLAT:$T149855
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@H@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@H@@QAE@XZ PROC NEAR				; TArray<int>::~TArray<int>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L149854
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L149838
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149838:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L149839
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149839:
	push	4
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L149849
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L149849:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L149828:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L149854:
	mov	eax, OFFSET FLAT:$T149851
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@H@@QAE@XZ ENDP				; TArray<int>::~TArray<int>
; Function compile flags: /Ogty
;	COMDAT ?Remove@?$TArray@H@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@H@@QAEXHH@Z PROC NEAR			; TArray<int>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L127590
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L127590:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L127591
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L127591:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L127592
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L127592:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	4
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@H@@QAEXHH@Z ENDP			; TArray<int>::Remove
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T149897 DD	0ffffffffH
	DD	FLAT:$L149870
$T149893 DD	019930520H
	DD	01H
	DD	FLAT:$T149897
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@VFVector@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@VFVector@@@@QAE@XZ PROC NEAR		; TArray<FVector>::~TArray<FVector>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L149896
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L149877
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149877:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L149878
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149878:
	push	12					; 0000000cH
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L149891
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L149891:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L149870:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L149896:
	mov	eax, OFFSET FLAT:$T149893
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@VFVector@@@@QAE@XZ ENDP			; TArray<FVector>::~TArray<FVector>
; Function compile flags: /Ogty
;	COMDAT ??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ
_TEXT	SEGMENT
??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ PROC NEAR ; TArray<_D3DADAPTER_IDENTIFIER8>::TArray<_D3DADAPTER_IDENTIFIER8>, COMDAT
; _this$ = ecx

; 344  : 	{}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ ENDP	; TArray<_D3DADAPTER_IDENTIFIER8>::TArray<_D3DADAPTER_IDENTIFIER8>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T149937 DD	0ffffffffH
	DD	FLAT:$L149910
$T149933 DD	019930520H
	DD	01H
	DD	FLAT:$T149937
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ PROC NEAR ; TArray<_D3DADAPTER_IDENTIFIER8>::~TArray<_D3DADAPTER_IDENTIFIER8>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L149936
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L149917
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149917:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L149918
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149918:
	push	1068					; 0000042cH
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L149931
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L149931:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L149910:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L149936:
	mov	eax, OFFSET FLAT:$T149933
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAE@XZ ENDP	; TArray<_D3DADAPTER_IDENTIFIER8>::~TArray<_D3DADAPTER_IDENTIFIER8>
; Function compile flags: /Ogty
;	COMDAT ??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ
_TEXT	SEGMENT
??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ PROC NEAR	; TArray<_D3DDISPLAYMODE>::TArray<_D3DDISPLAYMODE>, COMDAT
; _this$ = ecx

; 344  : 	{}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ ENDP		; TArray<_D3DDISPLAYMODE>::TArray<_D3DDISPLAYMODE>
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T149977 DD	0ffffffffH
	DD	FLAT:$L149950
$T149973 DD	019930520H
	DD	01H
	DD	FLAT:$T149977
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ PROC NEAR	; TArray<_D3DDISPLAYMODE>::~TArray<_D3DDISPLAYMODE>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L149976
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L149957
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149957:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L149958
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149958:
	push	16					; 00000010H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L149971
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L149971:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L149950:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L149976:
	mov	eax, OFFSET FLAT:$T149973
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@U_D3DDISPLAYMODE@@@@QAE@XZ ENDP		; TArray<_D3DDISPLAYMODE>::~TArray<_D3DDISPLAYMODE>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T150010 DD	0ffffffffH
	DD	FLAT:$L149983
$T150006 DD	019930520H
	DD	01H
	DD	FLAT:$T150010
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L150009
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L149990
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149990:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L149991
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L149991:
	push	84					; 00000054H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L150003
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L150003:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L149983:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150009:
	mov	eax, OFFSET FLAT:$T150006
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::ProjectorInfo>::~TArray<UD3DRenderDevice::ProjectorInfo>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T150043 DD	0ffffffffH
	DD	FLAT:$L150016
$T150039 DD	019930520H
	DD	01H
	DD	FLAT:$T150043
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L150042
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L150023
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150023:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L150024
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150024:
	push	20					; 00000014H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L150036
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L150036:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150016:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150042:
	mov	eax, OFFSET FLAT:$T150039
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::RenderTargetInfo>::~TArray<UD3DRenderDevice::RenderTargetInfo>
; Function compile flags: /Ogty
; File C:\duke4\D3DDrv\Src\Direct3D8.cpp
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ PROC NEAR ; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>, COMDAT
; _this$ = ecx

; 246  : 	{

	push	esi
	mov	esi, ecx

; 247  : 		Exit(); 

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L150060
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L150060:
	pop	esi

; 248  : 	}

	ret	0
??1?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAE@XZ ENDP	; FD3DVertexBuffer<FD3DScreenVertex>::~FD3DVertexBuffer<FD3DScreenVertex>
_TEXT	ENDS
PUBLIC	??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
;	COMDAT ??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@
_DATA	SEGMENT
??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ DB '['
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 'i', 00H
	DB	']', 00H, ' ', 00H, 'D', 00H, '3', 00H, 'D', 00H, ' ', 00H, 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	'V', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '8', 00H
	DB	'-', 00H, '>', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, ' ', 00H
	DB	'*', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o'
	DB	00H, 'f', 00H, '(', 00H, 'T', 00H, ')', 00H, ',', 00H, 'N', 00H
	DB	'u', 00H, 'm', 00H, ' ', 00H, '*', 00H, ' ', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'T', 00H
	DB	')', 00H, ',', 00H, '(', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E'
	DB	00H, '*', 00H, '*', 00H, ')', 00H, ' ', 00H, '&', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, ',', 00H, 'D', 00H, '3', 00H, 'D', 00H
	DB	'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, '_', 00H, 'N', 00H, 'O'
	DB	00H, 'O', 00H, 'V', 00H, 'E', 00H, 'R', 00H, 'W', 00H, 'R', 00H
	DB	'I', 00H, 'T', 00H, 'E', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H	; `string'
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z
_TEXT	SEGMENT
_VertexData$ = -4
_Num$ = 8
_Start$ = 12
?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z PROC NEAR ; FD3DVertexBuffer<FD3DScreenVertex>::Lock, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ecx
	push	ebx

; 276  : 		check(VertexBuffer8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	push	edi
	jne	SHORT $L128290
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128290:

; 277  : 		check(Length);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L128292
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128292:

; 278  : 		check(Num<Length);

	mov	edi, DWORD PTR _Num$[esp+12]
	cmp	edi, DWORD PTR [esi+8]
	jl	SHORT $L128294
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128294:

; 279  : 
; 280  :  		T*	VertexData;
; 281  : 
; 282  : 		// Lock the vertex buffer.
; 283  : 		if(Start!=-1)

	mov	eax, DWORD PTR _Start$[esp+12]
	cmp	eax, -1
	je	SHORT $L128297

; 284  : 		{
; 285  : 			D3D_CHECK(VertexBuffer8->Lock(Start * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	esi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*8]
	shl	edx, 2
	lea	eax, DWORD PTR [eax+eax*8]
	push	edx
	shl	eax, 2
	push	eax
	push	esi
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	$L150068
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	285					; 0000011dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+36]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
$L128297:

; 286  : 		} 
; 287  : 		else if(Rover + Num < Length)

	mov	ecx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [ecx+edi]
	cmp	eax, edx

; 288  : 		{
; 289  : 			D3D_CHECK(VertexBuffer8->Lock(Rover * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	eax, DWORD PTR [esi+4]
	jge	SHORT $L128321
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$[esp+20]
	push	ebx
	lea	ebx, DWORD PTR [edi+edi*8]
	lea	ecx, DWORD PTR [ecx+ecx*8]
	shl	ebx, 2
	push	ebx
	shl	ecx, 2
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L128311
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L128311:

; 290  : 			First =Rover;

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+12], eax

; 291  : 
; 292  : 			Rover+=Num;

	add	eax, edi
	pop	edi
	mov	DWORD PTR [esi+16], eax

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+12]
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
$L128321:

; 293  : 
; 294  : 		} else
; 295  : 		{
; 296  : 			D3D_CHECK(VertexBuffer8->Lock(0,Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_DISCARD));

	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*8]
	shl	edx, 2
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L128322
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L128322:

; 297  : 			First=0;

	mov	DWORD PTR [esi+12], 0

; 298  : 			Rover=Num;

	mov	DWORD PTR [esi+16], edi
$L150068:

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+16]
	pop	edi
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
?Lock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEPAUFD3DScreenVertex@@HH@Z ENDP ; FD3DVertexBuffer<FD3DScreenVertex>::Lock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ
_TEXT	SEGMENT
?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ PROC NEAR ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock, COMDAT
; _this$ = ecx

; 306  : 	{

	push	esi
	mov	esi, ecx

; 307  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L128333
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L128333:

; 308  : 
; 309  : 		D3D_CHECK(VertexBuffer8->Unlock());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L150073
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L150073:

; 310  : 
; 311  : 		return First;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 312  : 	}

	ret	0
?Unlock@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEHXZ ENDP ; FD3DVertexBuffer<FD3DScreenVertex>::Unlock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ
_TEXT	SEGMENT
?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ PROC NEAR ; FD3DVertexBuffer<FD3DScreenVertex>::Set, COMDAT
; _this$ = ecx

; 316  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 317  : 		check(Device);

	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L128342
	push	317					; 0000013dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L128342:

; 318  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L128345
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 324  : 	}

	npad	1

; 318  : 		check(VertexBuffer8);

$L128345:

; 319  : 
; 320  : 		// Set stream source 0 and the vertex shader.
; 321  : 		D3D_CHECK(Device->SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING,FALSE));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	jge	SHORT $L128346
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	321					; 00000141H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L128346:

; 322  : 		D3D_CHECK(Device->SetVertexShader(T::FVF));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	580					; 00000244H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L128353
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L128353:

; 323  : 		D3D_CHECK(Device->SetStreamSource(0,VertexBuffer8,sizeof(T)));

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	36					; 00000024H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L128360
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L128360:
	pop	edi
	pop	esi
	pop	ebx

; 324  : 	}

	ret	0
?Set@?$FD3DVertexBuffer@UFD3DScreenVertex@@@@QAEXXZ ENDP ; FD3DVertexBuffer<FD3DScreenVertex>::Set
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ PROC NEAR	; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>, COMDAT
; _this$ = ecx

; 246  : 	{

	push	esi
	mov	esi, ecx

; 247  : 		Exit(); 

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L150094
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L150094:
	pop	esi

; 248  : 	}

	ret	0
??1?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAE@XZ ENDP	; FD3DVertexBuffer<FD3DTLVertex>::~FD3DVertexBuffer<FD3DTLVertex>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z
_TEXT	SEGMENT
_VertexData$ = -4
_Num$ = 8
_Start$ = 12
?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z PROC NEAR ; FD3DVertexBuffer<FD3DTLVertex>::Lock, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ecx
	push	ebx

; 276  : 		check(VertexBuffer8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	push	edi
	jne	SHORT $L128389
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128389:

; 277  : 		check(Length);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L128390
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128390:

; 278  : 		check(Num<Length);

	mov	edi, DWORD PTR _Num$[esp+12]
	cmp	edi, DWORD PTR [esi+8]
	jl	SHORT $L128391
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128391:

; 279  : 
; 280  :  		T*	VertexData;
; 281  : 
; 282  : 		// Lock the vertex buffer.
; 283  : 		if(Start!=-1)

	mov	eax, DWORD PTR _Start$[esp+12]
	cmp	eax, -1
	je	SHORT $L128393

; 284  : 		{
; 285  : 			D3D_CHECK(VertexBuffer8->Lock(Start * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	esi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*4]
	shl	edx, 3
	lea	eax, DWORD PTR [eax+eax*4]
	push	edx
	shl	eax, 3
	push	eax
	push	esi
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	$L150102
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	285					; 0000011dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+36]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
$L128393:

; 286  : 		} 
; 287  : 		else if(Rover + Num < Length)

	mov	ecx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [ecx+edi]
	cmp	eax, edx

; 288  : 		{
; 289  : 			D3D_CHECK(VertexBuffer8->Lock(Rover * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	eax, DWORD PTR [esi+4]
	jge	SHORT $L128415
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$[esp+20]
	push	ebx
	lea	ebx, DWORD PTR [edi+edi*4]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	shl	ebx, 3
	push	ebx
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L128406
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L128406:

; 290  : 			First =Rover;

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+12], eax

; 291  : 
; 292  : 			Rover+=Num;

	add	eax, edi
	pop	edi
	mov	DWORD PTR [esi+16], eax

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+12]
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
$L128415:

; 293  : 
; 294  : 		} else
; 295  : 		{
; 296  : 			D3D_CHECK(VertexBuffer8->Lock(0,Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_DISCARD));

	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*4]
	shl	edx, 3
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L128416
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L128416:

; 297  : 			First=0;

	mov	DWORD PTR [esi+12], 0

; 298  : 			Rover=Num;

	mov	DWORD PTR [esi+16], edi
$L150102:

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+16]
	pop	edi
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
?Lock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEPAUFD3DTLVertex@@HH@Z ENDP ; FD3DVertexBuffer<FD3DTLVertex>::Lock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ
_TEXT	SEGMENT
?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ PROC NEAR ; FD3DVertexBuffer<FD3DTLVertex>::Unlock, COMDAT
; _this$ = ecx

; 306  : 	{

	push	esi
	mov	esi, ecx

; 307  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L128426
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L128426:

; 308  : 
; 309  : 		D3D_CHECK(VertexBuffer8->Unlock());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L150107
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L150107:

; 310  : 
; 311  : 		return First;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 312  : 	}

	ret	0
?Unlock@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEHXZ ENDP	; FD3DVertexBuffer<FD3DTLVertex>::Unlock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ
_TEXT	SEGMENT
?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ PROC NEAR ; FD3DVertexBuffer<FD3DTLVertex>::Set, COMDAT
; _this$ = ecx

; 316  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 317  : 		check(Device);

	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L128434
	push	317					; 0000013dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L128434:

; 318  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L128436
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 324  : 	}

	npad	1

; 318  : 		check(VertexBuffer8);

$L128436:

; 319  : 
; 320  : 		// Set stream source 0 and the vertex shader.
; 321  : 		D3D_CHECK(Device->SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING,FALSE));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	jge	SHORT $L128437
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	321					; 00000141H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L128437:

; 322  : 		D3D_CHECK(Device->SetVertexShader(T::FVF));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	708					; 000002c4H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L128443
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L128443:

; 323  : 		D3D_CHECK(Device->SetStreamSource(0,VertexBuffer8,sizeof(T)));

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	40					; 00000028H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L128449
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L128449:
	pop	edi
	pop	esi
	pop	ebx

; 324  : 	}

	ret	0
?Set@?$FD3DVertexBuffer@UFD3DTLVertex@@@@QAEXXZ ENDP	; FD3DVertexBuffer<FD3DTLVertex>::Set
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ PROC NEAR	; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>, COMDAT
; _this$ = ecx

; 246  : 	{

	push	esi
	mov	esi, ecx

; 247  : 		Exit(); 

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L150128
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L150128:
	pop	esi

; 248  : 	}

	ret	0
??1?$FD3DVertexBuffer@UFD3DVertex@@@@QAE@XZ ENDP	; FD3DVertexBuffer<FD3DVertex>::~FD3DVertexBuffer<FD3DVertex>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z
_TEXT	SEGMENT
_VertexData$ = -4
_Num$ = 8
_Start$ = 12
?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z PROC NEAR ; FD3DVertexBuffer<FD3DVertex>::Lock, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ecx
	push	ebx

; 276  : 		check(VertexBuffer8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	push	edi
	jne	SHORT $L128477
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128477:

; 277  : 		check(Length);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L128478
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128478:

; 278  : 		check(Num<Length);

	mov	edi, DWORD PTR _Num$[esp+12]
	cmp	edi, DWORD PTR [esi+8]
	jl	SHORT $L128479
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128479:

; 279  : 
; 280  :  		T*	VertexData;
; 281  : 
; 282  : 		// Lock the vertex buffer.
; 283  : 		if(Start!=-1)

	mov	eax, DWORD PTR _Start$[esp+12]
	cmp	eax, -1
	je	SHORT $L128481

; 284  : 		{
; 285  : 			D3D_CHECK(VertexBuffer8->Lock(Start * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	esi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	shl	edi, 4
	push	edi
	shl	eax, 4
	push	eax
	push	esi
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	$L150136
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	285					; 0000011dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+36]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
$L128481:

; 286  : 		} 
; 287  : 		else if(Rover + Num < Length)

	mov	eax, DWORD PTR [esi+16]
	mov	ecx, DWORD PTR [esi+8]
	lea	edx, DWORD PTR [eax+edi]
	cmp	edx, ecx
	jge	SHORT $L128503

; 288  : 		{
; 289  : 			D3D_CHECK(VertexBuffer8->Lock(Rover * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$[esp+20]
	push	ebx
	mov	ebx, edi
	shl	ebx, 4
	push	ebx
	shl	eax, 4
	push	eax
	push	ecx
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L128494
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L128494:

; 290  : 			First =Rover;

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+12], eax

; 291  : 
; 292  : 			Rover+=Num;

	add	eax, edi
	pop	edi
	mov	DWORD PTR [esi+16], eax

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+12]
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
	npad	4
$L128503:

; 293  : 
; 294  : 		} else
; 295  : 		{
; 296  : 			D3D_CHECK(VertexBuffer8->Lock(0,Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_DISCARD));

	mov	eax, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	ecx, DWORD PTR _VertexData$[esp+20]
	push	ecx
	mov	ecx, edi
	shl	ecx, 4
	push	ecx
	push	0
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L128504
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L128504:

; 297  : 			First=0;

	mov	DWORD PTR [esi+12], 0

; 298  : 			Rover=Num;

	mov	DWORD PTR [esi+16], edi
$L150136:

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+16]
	pop	edi
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
?Lock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEPAUFD3DVertex@@HH@Z ENDP ; FD3DVertexBuffer<FD3DVertex>::Lock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ
_TEXT	SEGMENT
?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ PROC NEAR ; FD3DVertexBuffer<FD3DVertex>::Unlock, COMDAT
; _this$ = ecx

; 306  : 	{

	push	esi
	mov	esi, ecx

; 307  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L128514
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L128514:

; 308  : 
; 309  : 		D3D_CHECK(VertexBuffer8->Unlock());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L150141
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L150141:

; 310  : 
; 311  : 		return First;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 312  : 	}

	ret	0
?Unlock@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEHXZ ENDP	; FD3DVertexBuffer<FD3DVertex>::Unlock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ
_TEXT	SEGMENT
?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ PROC NEAR	; FD3DVertexBuffer<FD3DVertex>::Set, COMDAT
; _this$ = ecx

; 316  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 317  : 		check(Device);

	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L128522
	push	317					; 0000013dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L128522:

; 318  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L128524
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 324  : 	}

	npad	1

; 318  : 		check(VertexBuffer8);

$L128524:

; 319  : 
; 320  : 		// Set stream source 0 and the vertex shader.
; 321  : 		D3D_CHECK(Device->SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING,FALSE));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	jge	SHORT $L128525
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	321					; 00000141H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L128525:

; 322  : 		D3D_CHECK(Device->SetVertexShader(T::FVF));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	66					; 00000042H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L128531
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L128531:

; 323  : 		D3D_CHECK(Device->SetStreamSource(0,VertexBuffer8,sizeof(T)));

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	16					; 00000010H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L128537
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L128537:
	pop	edi
	pop	esi
	pop	ebx

; 324  : 	}

	ret	0
?Set@?$FD3DVertexBuffer@UFD3DVertex@@@@QAEXXZ ENDP	; FD3DVertexBuffer<FD3DVertex>::Set
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ
_TEXT	SEGMENT
??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ PROC NEAR	; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>, COMDAT
; _this$ = ecx

; 246  : 	{

	push	esi
	mov	esi, ecx

; 247  : 		Exit(); 

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L150162
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+4], 0
$L150162:
	pop	esi

; 248  : 	}

	ret	0
??1?$FD3DVertexBuffer@UFD3DParticle@@@@QAE@XZ ENDP	; FD3DVertexBuffer<FD3DParticle>::~FD3DVertexBuffer<FD3DParticle>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z
_TEXT	SEGMENT
_VertexData$ = -4
_Num$ = 8
_Start$ = 12
?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z PROC NEAR ; FD3DVertexBuffer<FD3DParticle>::Lock, COMDAT
; _this$ = ecx

; 275  : 	{

	push	ecx
	push	ebx

; 276  : 		check(VertexBuffer8);

	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	mov	esi, ecx
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	push	edi
	jne	SHORT $L128565
	push	276					; 00000114H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128565:

; 277  : 		check(Length);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L128566
	push	277					; 00000115H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06CAAP@Length?$AA@	; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128566:

; 278  : 		check(Num<Length);

	mov	edi, DWORD PTR _Num$[esp+12]
	cmp	edi, DWORD PTR [esi+8]
	jl	SHORT $L128567
	push	278					; 00000116H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0L@GIGE@Num?$DMLength?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L128567:

; 279  : 
; 280  :  		T*	VertexData;
; 281  : 
; 282  : 		// Lock the vertex buffer.
; 283  : 		if(Start!=-1)

	mov	eax, DWORD PTR _Start$[esp+12]
	cmp	eax, -1
	je	SHORT $L128569

; 284  : 		{
; 285  : 			D3D_CHECK(VertexBuffer8->Lock(Start * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	esi, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	push	4096					; 00001000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*2]
	shl	edx, 3
	lea	eax, DWORD PTR [eax+eax*2]
	push	edx
	shl	eax, 3
	push	eax
	push	esi
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	$L150170
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	285					; 0000011dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	ecx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	edx, DWORD PTR [ecx]
	add	esp, 4
	push	eax
	push	OFFSET FLAT:??_C@_1PE@BPNP@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	edx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+36]
	add	esp, 20					; 00000014H
	pop	edi
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
$L128569:

; 286  : 		} 
; 287  : 		else if(Rover + Num < Length)

	mov	ecx, DWORD PTR [esi+16]
	mov	edx, DWORD PTR [esi+8]
	lea	eax, DWORD PTR [ecx+edi]
	cmp	eax, edx

; 288  : 		{
; 289  : 			D3D_CHECK(VertexBuffer8->Lock(Rover * sizeof(T),Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_NOOVERWRITE));

	mov	eax, DWORD PTR [esi+4]
	jge	SHORT $L128591
	mov	edx, DWORD PTR [eax]
	push	4096					; 00001000H
	lea	ebx, DWORD PTR _VertexData$[esp+20]
	push	ebx
	lea	ebx, DWORD PTR [edi+edi*2]
	lea	ecx, DWORD PTR [ecx+ecx*2]
	shl	ebx, 3
	push	ebx
	shl	ecx, 3
	push	ecx
	push	eax
	call	DWORD PTR [edx+44]
	test	eax, eax
	jge	SHORT $L128582
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	289					; 00000121H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1PE@FOHM@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L128582:

; 290  : 			First =Rover;

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [esi+12], eax

; 291  : 
; 292  : 			Rover+=Num;

	add	eax, edi
	pop	edi
	mov	DWORD PTR [esi+16], eax

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+12]
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
$L128591:

; 293  : 
; 294  : 		} else
; 295  : 		{
; 296  : 			D3D_CHECK(VertexBuffer8->Lock(0,Num * sizeof(T),(BYTE**) &VertexData,D3DLOCK_DISCARD));

	mov	ecx, DWORD PTR [eax]
	push	8192					; 00002000H
	lea	edx, DWORD PTR _VertexData$[esp+20]
	push	edx
	lea	edx, DWORD PTR [edi+edi*2]
	shl	edx, 3
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+44]
	test	eax, eax
	jge	SHORT $L128592
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	296					; 00000128H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1MM@PEIK@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L128592:

; 297  : 			First=0;

	mov	DWORD PTR [esi+12], 0

; 298  : 			Rover=Num;

	mov	DWORD PTR [esi+16], edi
$L150170:

; 299  : 		}
; 300  : 
; 301  : 		return VertexData;

	mov	eax, DWORD PTR _VertexData$[esp+16]
	pop	edi
	pop	esi
	pop	ebx

; 302  : 	}

	pop	ecx
	ret	8
?Lock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEPAUFD3DParticle@@HH@Z ENDP ; FD3DVertexBuffer<FD3DParticle>::Lock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ
_TEXT	SEGMENT
?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ PROC NEAR ; FD3DVertexBuffer<FD3DParticle>::Unlock, COMDAT
; _this$ = ecx

; 306  : 	{

	push	esi
	mov	esi, ecx

; 307  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L128602
	push	307					; 00000133H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	add	esp, 12					; 0000000cH
$L128602:

; 308  : 
; 309  : 		D3D_CHECK(VertexBuffer8->Unlock());

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+48]
	test	eax, eax
	jge	SHORT $L150175
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	309					; 00000135H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1GE@ILE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	add	esp, 20					; 00000014H
$L150175:

; 310  : 
; 311  : 		return First;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 312  : 	}

	ret	0
?Unlock@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEHXZ ENDP	; FD3DVertexBuffer<FD3DParticle>::Unlock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ
_TEXT	SEGMENT
?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ PROC NEAR ; FD3DVertexBuffer<FD3DParticle>::Set, COMDAT
; _this$ = ecx

; 316  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 317  : 		check(Device);

	cmp	DWORD PTR [esi], 0
	push	edi
	mov	edi, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	jne	SHORT $L128610
	push	317					; 0000013dH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_06NBPC@Device?$AA@	; `string'
	call	edi
	add	esp, 12					; 0000000cH
$L128610:

; 318  : 		check(VertexBuffer8);

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	jne	SHORT $L128612
	push	318					; 0000013eH
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	push	OFFSET FLAT:??_C@_0O@DFJN@VertexBuffer8?$AA@ ; `string'
	call	edi
	add	esp, 12					; 0000000cH

; 324  : 	}

	npad	1

; 318  : 		check(VertexBuffer8);

$L128612:

; 319  : 
; 320  : 		// Set stream source 0 and the vertex shader.
; 321  : 		D3D_CHECK(Device->SetRenderState(D3DRS_SOFTWAREVERTEXPROCESSING,FALSE));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	0
	push	153					; 00000099H
	push	eax
	call	DWORD PTR [ecx+200]
	test	eax, eax
	mov	edi, DWORD PTR __imp_?Logf@FOutputDevice@@QAAXPBGZZ
	mov	ebx, DWORD PTR __imp_?appFromAnsi@@YAPBGPBD@Z
	jge	SHORT $L128613
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	321					; 00000141H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1KO@HMIJ@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L128613:

; 322  : 		D3D_CHECK(Device->SetVertexShader(T::FVF));

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	322					; 00000142H
	push	eax
	call	DWORD PTR [ecx+304]
	test	eax, eax
	jge	SHORT $L128619
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	322					; 00000142H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	mov	edx, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [edx]
	push	OFFSET FLAT:??_C@_1HE@LLBE@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	eax
	call	edi
	add	esp, 20					; 00000014H
$L128619:

; 323  : 		D3D_CHECK(Device->SetStreamSource(0,VertexBuffer8,sizeof(T)));

	mov	edx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax]
	push	24					; 00000018H
	push	edx
	push	0
	push	eax
	call	DWORD PTR [ecx+332]
	test	eax, eax
	jge	SHORT $L128625
	push	eax
	call	?DXGetErrorString8W@@YGPBGJ@Z		; DXGetErrorString8W
	push	eax
	push	323					; 00000143H
	push	OFFSET FLAT:??_C@_0CC@FBE@C?3?2duke4?2D3DDrv?2Src?2Direct3D8?4cp@ ; `string'
	call	ebx
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __imp_?GError@@3PAVFOutputDeviceError@@A
	mov	ecx, DWORD PTR [eax]
	push	OFFSET FLAT:??_C@_1JK@JILN@?$AA?$FL?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAi?$AA?$FN?$AA?5?$AAD?$AA3?$AAD?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5@ ; `string'
	push	ecx
	call	edi
	add	esp, 20					; 00000014H
$L128625:
	pop	edi
	pop	esi
	pop	ebx

; 324  : 	}

	ret	0
?Set@?$FD3DVertexBuffer@UFD3DParticle@@@@QAEXXZ ENDP	; FD3DVertexBuffer<FD3DParticle>::Set
_TEXT	ENDS
PUBLIC	??0FTransSample@@QAE@ABU0@@Z			; FTransSample::FTransSample
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnFile.h
xdata$x	SEGMENT
$T150258 DD	0ffffffffH
	DD	FLAT:$L150188
$T150249 DD	019930520H
	DD	01H
	DD	FLAT:$T150258
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_Other$ = 8
_this$ = -16
_i$128660 = -20
__$EHRec$ = -12
??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedPolygon>::TArray<UD3DRenderDevice::QueuedPolygon>, COMDAT
; _this$ = ecx

; 350  : 	{

	push	-1
	push	$L150257
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _Other$[esp+36]
	mov	eax, DWORD PTR [edi+4]
	mov	ebx, ecx
	xor	esi, esi
	push	280					; 00000118H
	mov	DWORD PTR _this$[esp+44], ebx
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 351  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 352  : 		{
; 353  : 			ArrayNum=0;

	mov	DWORD PTR [ebx+4], esi

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	cmp	DWORD PTR [edi+4], esi
	mov	DWORD PTR __$EHRec$[esp+48], esi
	mov	DWORD PTR _i$128660[esp+40], esi
	jle	$L150255
	push	ebp
	mov	DWORD PTR -28+[esp+44], esi
$L128661:

; 355  : 				new(*this)T(Other(i));

	mov	esi, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx+8]
	lea	ecx, DWORD PTR [esi+1]
	cmp	ecx, eax
	mov	DWORD PTR [ebx+4], ecx
	jle	SHORT $L150210
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	280					; 00000118H
	mov	ecx, ebx
	mov	DWORD PTR [ebx+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L150210:
	mov	eax, DWORD PTR [ebx]
	imul	esi, 280				; 00000118H
	add	esi, eax
	mov	ecx, esi
	je	SHORT $L128662
	mov	eax, DWORD PTR [edi]
	mov	edi, DWORD PTR -28+[esp+44]
	mov	edx, DWORD PTR [eax+edi]
	add	eax, edi
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	lea	edi, DWORD PTR [eax+16]
	mov	edx, edi
	sub	edx, eax
	mov	ebp, eax
	lea	esi, DWORD PTR [edx+ecx+84]
	sub	ebp, ecx
	mov	DWORD PTR -24+[esp+44], 3

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	npad	6

; 355  : 				new(*this)T(Other(i));

$L150228:
	push	edi
	lea	ecx, DWORD PTR [esi-84]
	call	??0FTransSample@@QAE@ABU0@@Z		; FTransSample::FTransSample
	mov	eax, DWORD PTR [edi+80]
	mov	DWORD PTR [esi-4], eax
	mov	ecx, DWORD PTR [esi+ebp]
	mov	eax, DWORD PTR -24+[esp+44]
	mov	DWORD PTR [esi], ecx
	add	edi, 88					; 00000058H
	add	esi, 88					; 00000058H
	dec	eax
	mov	DWORD PTR -24+[esp+44], eax
	jne	SHORT $L150228
	mov	edi, DWORD PTR _Other$[esp+40]
$L128662:

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	mov	eax, DWORD PTR _i$128660[esp+44]
	mov	edx, DWORD PTR -28+[esp+44]
	mov	ecx, DWORD PTR [edi+4]
	inc	eax
	add	edx, 280				; 00000118H
	cmp	eax, ecx
	mov	DWORD PTR _i$128660[esp+44], eax
	mov	DWORD PTR -28+[esp+44], edx
	jl	$L128661
	pop	ebp
$L150255:

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+40]
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 28					; 0000001cH
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150188:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150257:
	mov	eax, OFFSET FLAT:$T150249
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@ABV0@@Z ENDP ; TArray<UD3DRenderDevice::QueuedPolygon>::TArray<UD3DRenderDevice::QueuedPolygon>
; Function compile flags: /Ogty
;	COMDAT ??0FTransSample@@QAE@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8
??0FTransSample@@QAE@ABU0@@Z PROC NEAR			; FTransSample::FTransSample, COMDAT
; _this$ = ecx
	mov	edx, DWORD PTR ___that$[esp-4]
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	eax, ecx
	mov	esi, edx
	mov	ecx, 8
	mov	edi, eax
	rep movsd
	lea	ecx, DWORD PTR [edx+32]
	mov	edi, ecx
	mov	ebp, DWORD PTR [edi]
	lea	esi, DWORD PTR [eax+32]
	mov	ebx, esi
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	edi, DWORD PTR [edi+8]
	mov	DWORD PTR [ebx+8], edi
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [esi+12], ecx
	lea	ecx, DWORD PTR [edx+48]
	mov	edi, ecx
	mov	ebp, DWORD PTR [edi]
	lea	esi, DWORD PTR [eax+48]
	mov	ebx, esi
	mov	DWORD PTR [ebx], ebp
	mov	ebp, DWORD PTR [edi+4]
	mov	DWORD PTR [ebx+4], ebp
	mov	edi, DWORD PTR [edi+8]
	mov	DWORD PTR [ebx+8], edi
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [esi+12], ecx
	lea	ecx, DWORD PTR [edx+64]
	lea	edx, DWORD PTR [eax+64]
	mov	esi, ecx
	mov	ebx, DWORD PTR [esi]
	mov	edi, edx
	mov	DWORD PTR [edi], ebx
	mov	ebx, DWORD PTR [esi+4]
	mov	DWORD PTR [edi+4], ebx
	mov	esi, DWORD PTR [esi+8]
	mov	DWORD PTR [edi+8], esi
	mov	ecx, DWORD PTR [ecx+12]
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR [edx+12], ecx
	pop	ebx
	ret	4
??0FTransSample@@QAE@ABU0@@Z ENDP			; FTransSample::FTransSample
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T150309 DD	0ffffffffH
	DD	FLAT:$L150282
$T150305 DD	019930520H
	DD	01H
	DD	FLAT:$T150309
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L150308
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L150289
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150289:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L150290
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150290:
	push	280					; 00000118H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L150302
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L150302:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150282:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150308:
	mov	eax, OFFSET FLAT:$T150305
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::QueuedPolygon>::~TArray<UD3DRenderDevice::QueuedPolygon>
; Function compile flags: /Ogty
;	COMDAT ?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedPolygon>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L150478
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	280					; 00000118H
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L150478:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEHHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedPolygon>::Add
_TEXT	ENDS
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnFile.h
xdata$x	SEGMENT
$T150541 DD	0ffffffffH
	DD	FLAT:$L150485
$T150533 DD	019930520H
	DD	01H
	DD	FLAT:$T150541
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12
_Other$ = 8
_this$ = -16
??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::TArray<UD3DRenderDevice::QueuedParticleByTexture>, COMDAT
; _this$ = ecx

; 350  : 	{

	push	-1
	push	$L150540
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	mov	ebx, DWORD PTR _Other$[esp+16]
	mov	eax, DWORD PTR [ebx+4]
	push	ebp
	push	esi
	mov	esi, ecx
	xor	ebp, ebp
	push	16					; 00000010H
	mov	DWORD PTR _this$[esp+32], esi
	mov	DWORD PTR [esi], ebp
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 351  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 352  : 		{
; 353  : 			ArrayNum=0;

	mov	DWORD PTR [esi+4], ebp

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	cmp	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR __$EHRec$[esp+36], ebp
	jle	SHORT $L150538
	mov	DWORD PTR 8+[esp+24], ebp
	push	edi

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	npad	7

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

$L128748:

; 355  : 				new(*this)T(Other(i));

	mov	edi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [edi+1]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L150506
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	16					; 00000010H
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L150506:
	mov	eax, DWORD PTR [esi]
	shl	edi, 4
	add	edi, eax
	je	SHORT $L128749
	mov	ecx, DWORD PTR [ebx]
	add	ecx, DWORD PTR 8+[esp+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edi], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edi+12], eax
$L128749:
	mov	ecx, DWORD PTR 8+[esp+28]
	mov	eax, DWORD PTR [ebx+4]
	inc	ebp
	add	ecx, 16					; 00000010H
	cmp	ebp, eax
	mov	DWORD PTR 8+[esp+28], ecx
	jl	SHORT $L128748
	pop	edi
$L150538:

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150485:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150540:
	mov	eax, OFFSET FLAT:$T150533
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@ABV0@@Z ENDP ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::TArray<UD3DRenderDevice::QueuedParticleByTexture>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T150574 DD	0ffffffffH
	DD	FLAT:$L150547
$T150570 DD	019930520H
	DD	01H
	DD	FLAT:$T150574
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L150573
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L150557
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150557:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L150558
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150558:
	push	16					; 00000010H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L150568
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L150568:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150547:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150573:
	mov	eax, OFFSET FLAT:$T150570
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::~TArray<UD3DRenderDevice::QueuedParticleByTexture>
;	COMDAT xdata$x
; File ..\..\Core\Inc\UnFile.h
xdata$x	SEGMENT
$T150640 DD	0ffffffffH
	DD	FLAT:$L150583
$T150631 DD	019930520H
	DD	01H
	DD	FLAT:$T150640
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12
_Other$ = 8
_this$ = -16
_i$128822 = -20
??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedLineSegment>::TArray<UD3DRenderDevice::QueuedLineSegment>, COMDAT
; _this$ = ecx

; 350  : 	{

	push	-1
	push	$L150639
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 8
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR _Other$[esp+24]
	mov	eax, DWORD PTR [ebp+4]
	mov	ebx, ecx
	push	esi
	xor	esi, esi
	push	36					; 00000024H
	mov	DWORD PTR _this$[esp+36], ebx
	mov	DWORD PTR [ebx], esi
	mov	DWORD PTR [ebx+4], eax
	mov	DWORD PTR [ebx+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 351  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 352  : 		{
; 353  : 			ArrayNum=0;

	mov	DWORD PTR [ebx+4], esi

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	cmp	DWORD PTR [ebp+4], esi
	mov	DWORD PTR __$EHRec$[esp+40], esi
	mov	DWORD PTR _i$128822[esp+32], esi
	jle	SHORT $L150636
	push	edi
	mov	DWORD PTR 8+[esp+32], esi

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	npad	1

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

$L128823:

; 355  : 				new(*this)T(Other(i));

	mov	esi, DWORD PTR [ebx+4]
	mov	eax, DWORD PTR [ebx+8]
	lea	ecx, DWORD PTR [esi+1]
	cmp	ecx, eax
	mov	DWORD PTR [ebx+4], ecx
	jle	SHORT $L150604
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	36					; 00000024H
	mov	ecx, ebx
	mov	DWORD PTR [ebx+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L150604:
	mov	edx, DWORD PTR [ebx]
	lea	ecx, DWORD PTR [esi+esi*8]
	lea	edi, DWORD PTR [edx+ecx*4]
	test	edi, edi
	je	SHORT $L128824
	mov	esi, DWORD PTR [ebp]
	add	esi, DWORD PTR 8+[esp+32]
	mov	ecx, 9
	rep movsd
$L128824:
	mov	eax, DWORD PTR _i$128822[esp+36]
	mov	edx, DWORD PTR 8+[esp+32]
	mov	ecx, DWORD PTR [ebp+4]
	inc	eax
	add	edx, 36					; 00000024H
	cmp	eax, ecx
	mov	DWORD PTR _i$128822[esp+36], eax
	mov	DWORD PTR 8+[esp+32], edx
	jl	SHORT $L128823
	pop	edi
$L150636:

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 20					; 00000014H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150583:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150639:
	mov	eax, OFFSET FLAT:$T150631
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@ABV0@@Z ENDP ; TArray<UD3DRenderDevice::QueuedLineSegment>::TArray<UD3DRenderDevice::QueuedLineSegment>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T150673 DD	0ffffffffH
	DD	FLAT:$L150646
$T150669 DD	019930520H
	DD	01H
	DD	FLAT:$T150673
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ PROC NEAR ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L150672
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L150656
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150656:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L150657
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150657:
	push	36					; 00000024H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L150667
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L150667:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150646:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150672:
	mov	eax, OFFSET FLAT:$T150669
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAE@XZ ENDP ; TArray<UD3DRenderDevice::QueuedLineSegment>::~TArray<UD3DRenderDevice::QueuedLineSegment>
PUBLIC	??3@YAXPAX0@Z					; operator delete
;	COMDAT xdata$x
; File ..\..\Engine\Inc\UnTex.h
xdata$x	SEGMENT
$T150733 DD	0ffffffffH
	DD	FLAT:$L150684
$T150723 DD	019930520H
	DD	01H
	DD	FLAT:$T150733
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT
$T150680 = 12
$T150681 = 8
__$EHRec$ = -12
_n$ = 8
_Constructed$ = 12
_this$ = -20
?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add, COMDAT
; _this$ = ecx

; 484  : 	{

	push	-1
	push	$L150732
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 8

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp+16]
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	ebx, DWORD PTR [edi+4]
	lea	esi, DWORD PTR [ebx+eax]
	cmp	esi, DWORD PTR [edi+8]
	mov	DWORD PTR _this$[esp+32], edi
	mov	DWORD PTR -16+[esp+32], ebx
	mov	DWORD PTR [edi+4], esi
	jle	SHORT $L150689
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	ecx, DWORD PTR [eax+esi+32]
	mov	DWORD PTR [edi+8], ecx
	push	36					; 00000024H
	mov	ecx, edi
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L150689:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)

	mov	eax, DWORD PTR _Constructed$[esp+28]
	test	eax, eax
	je	SHORT $L150729

; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)

	cmp	ebx, esi
	jge	SHORT $L150729
	push	ebp
	lea	ebp, DWORD PTR [ebx+ebx*8]
	shl	ebp, 2
	sub	esi, ebx

; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);
; 495  : 	}

	npad	7

; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)

$L128856:

; 491  : 				new(&(*this)(i)) T;

	mov	eax, DWORD PTR [edi]
	add	eax, ebp
	mov	DWORD PTR $T150681[esp+32], eax
	mov	DWORD PTR $T150680[esp+32], eax
	mov	DWORD PTR __$EHRec$[esp+44], 0
	je	SHORT $L150716
	mov	edi, eax
	mov	ebx, 2

; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);
; 495  : 	}

	npad	3

; 491  : 				new(&(*this)(i)) T;

$L150715:
	mov	ecx, edi
	call	DWORD PTR __imp_??0FVector@@QAE@XZ
	add	edi, 12					; 0000000cH
	dec	ebx
	jne	SHORT $L150715
	mov	edi, DWORD PTR _this$[esp+36]
	mov	ebx, DWORD PTR -16+[esp+36]
$L150716:
	add	ebp, 36					; 00000024H
	dec	esi
	mov	DWORD PTR __$EHRec$[esp+44], -1
	jne	SHORT $L128856
	pop	ebp
$L150729:

; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);
; 495  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+32]
	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 20					; 00000014H
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150684:
	mov	eax, DWORD PTR $T150681[ebp-4]
	push	eax
	mov	ecx, DWORD PTR $T150680[ebp-4]
	push	ecx
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
$L150732:
	mov	eax, OFFSET FLAT:$T150723
	jmp	___CxxFrameHandler
text$x	ENDS
?Add@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEHHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedLineSegment>::Add
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnFile.h
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 639  : }

	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T150801 DD	0ffffffffH
	DD	FLAT:$L150745
$T150793 DD	019930520H
	DD	01H
	DD	FLAT:$T150801
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File ..\..\Core\Inc\UnTemplate.h
xdata$x	ENDS
;	COMDAT ??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12
_Other$ = 8
_this$ = -16
??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z PROC NEAR	; TArray<FD3DVertex>::TArray<FD3DVertex>, COMDAT
; _this$ = ecx

; 350  : 	{

	push	-1
	push	$L150800
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	mov	ebx, DWORD PTR _Other$[esp+16]
	mov	eax, DWORD PTR [ebx+4]
	push	ebp
	push	esi
	mov	esi, ecx
	xor	ebp, ebp
	push	16					; 00000010H
	mov	DWORD PTR _this$[esp+32], esi
	mov	DWORD PTR [esi], ebp
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z

; 351  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 352  : 		{
; 353  : 			ArrayNum=0;

	mov	DWORD PTR [esi+4], ebp

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

	cmp	DWORD PTR [ebx+4], ebp
	mov	DWORD PTR __$EHRec$[esp+36], ebp
	jle	SHORT $L150798
	mov	DWORD PTR 8+[esp+24], ebp
	push	edi

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	npad	7

; 354  : 			for( INT i=0; i<Other.ArrayNum; i++ )

$L128910:

; 355  : 				new(*this)T(Other(i));

	mov	edi, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi+8]
	lea	ecx, DWORD PTR [edi+1]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L150768
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	16					; 00000010H
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L150768:
	mov	eax, DWORD PTR [esi]
	shl	edi, 4
	add	edi, eax
	je	SHORT $L128911
	mov	ecx, DWORD PTR [ebx]
	add	ecx, DWORD PTR 8+[esp+28]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edi], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edi+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edi+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edi+12], eax
$L128911:
	mov	ecx, DWORD PTR 8+[esp+28]
	mov	eax, DWORD PTR [ebx+4]
	inc	ebp
	add	ecx, 16					; 00000010H
	cmp	ebp, eax
	mov	DWORD PTR 8+[esp+28], ecx
	jl	SHORT $L128910
	pop	edi
$L150798:

; 356  : 		}
; 357  : 		else if( sizeof(T)!=1 )
; 358  : 		{
; 359  : 			for( INT i=0; i<ArrayNum; i++ )
; 360  : 				(*this)(i) = Other(i);
; 361  : 		}
; 362  : 		else
; 363  : 		{
; 364  : 			appMemcpy( &(*this)(0), (void *)&Other(0), ArrayNum * sizeof(T) );
; 365  : 		}
; 366  : 	}

	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150745:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150800:
	mov	eax, OFFSET FLAT:$T150793
	jmp	___CxxFrameHandler
text$x	ENDS
??0?$TArray@UFD3DVertex@@@@QAE@ABV0@@Z ENDP		; TArray<FD3DVertex>::TArray<FD3DVertex>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T150834 DD	0ffffffffH
	DD	FLAT:$L150807
$T150830 DD	019930520H
	DD	01H
	DD	FLAT:$T150834
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??1?$TArray@UFD3DVertex@@@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1?$TArray@UFD3DVertex@@@@QAE@XZ PROC NEAR		; TArray<FD3DVertex>::~TArray<FD3DVertex>, COMDAT
; _this$ = ecx

; 371  : 	{

	push	-1
	push	$L150833
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+28], esi

; 372  : 		checkSlow(ArrayNum>=0);
; 373  : 		checkSlow(ArrayMax>=ArrayNum);
; 374  : 		Remove( 0, ArrayNum );

	mov	edi, DWORD PTR [esi+4]
	test	edi, edi
	mov	ebx, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	mov	DWORD PTR __$EHRec$[esp+36], 0
	jge	SHORT $L150817
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150817:
	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L150818
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebx
	add	esp, 12					; 0000000cH
$L150818:
	push	16					; 00000010H
	push	edi
	push	0
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z

; 375  : 	}

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+36], -1
	je	SHORT $L150828
	mov	ecx, DWORD PTR __imp_?GMalloc@@3PAVFMalloc@@A
	mov	ecx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [ecx]
	push	eax
	call	DWORD PTR [edx+8]
$L150828:
	mov	ecx, DWORD PTR __$EHRec$[esp+28]
	pop	edi
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L150807:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	DWORD PTR __imp_??1FArray@@QAE@XZ
$L150833:
	mov	eax, OFFSET FLAT:$T150830
	jmp	___CxxFrameHandler
text$x	ENDS
??1?$TArray@UFD3DVertex@@@@QAE@XZ ENDP			; TArray<FD3DVertex>::~TArray<FD3DVertex>
; Function compile flags: /Ogty
;	COMDAT ?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z PROC NEAR		; TArray<FD3DVertex>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L150872
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	16					; 00000010H
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L150872:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@UFD3DVertex@@@@QAEHHH@Z ENDP		; TArray<FD3DVertex>::Add
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8
??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z PROC NEAR ; UD3DRenderDevice::QueuedPolygon::QueuedPolygon, COMDAT
; _this$ = ecx
	push	ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	push	ebx
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	push	ebp
	mov	DWORD PTR [eax+12], edx
	lea	ebp, DWORD PTR [eax+16]
	push	esi
	mov	edx, ebp
	sub	edx, eax
	mov	esi, eax
	sub	esi, ecx
	push	edi
	lea	ebx, DWORD PTR [ebp+76]
	lea	edx, DWORD PTR [edx+ecx+60]
	mov	DWORD PTR -4+[esp+20], esi
	mov	DWORD PTR 8+[esp+16], 3
	npad	1
$L128973:
	lea	esi, DWORD PTR [edx-60]
	mov	edi, ebp
	mov	ecx, 8
	rep movsd
	lea	ecx, DWORD PTR [edx-28]
	mov	edi, DWORD PTR [ecx]
	lea	esi, DWORD PTR [ebx-44]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR [edx-16]
	mov	DWORD PTR [ebx-32], ecx
	lea	ecx, DWORD PTR [edx-12]
	mov	edi, DWORD PTR [ecx]
	lea	esi, DWORD PTR [ebx-28]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR [edx]
	mov	esi, DWORD PTR -4+[esp+20]
	mov	DWORD PTR [esi+edx], ecx
	lea	ecx, DWORD PTR [edx+4]
	mov	edi, DWORD PTR [ecx]
	lea	esi, DWORD PTR [ebx-12]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [ebx], ecx
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [ebx+4], ecx
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [ebx+8], ecx
	mov	ecx, DWORD PTR 8+[esp+16]
	add	ebp, 88					; 00000058H
	add	ebx, 88					; 00000058H
	add	edx, 88					; 00000058H
	dec	ecx
	mov	DWORD PTR 8+[esp+16], ecx
	jne	$L128973
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
??0QueuedPolygon@UD3DRenderDevice@@QAE@ABU01@@Z ENDP	; UD3DRenderDevice::QueuedPolygon::QueuedPolygon
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z PROC NEAR ; TArray<_D3DADAPTER_IDENTIFIER8>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L150929
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	1068					; 0000042cH
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L150929:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@U_D3DADAPTER_IDENTIFIER8@@@@QAEHHH@Z ENDP	; TArray<_D3DADAPTER_IDENTIFIER8>::Add
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z PROC NEAR ; TArray<UD3DRenderDevice::ProjectorInfo>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L150988
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	84					; 00000054H
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L150988:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEHHH@Z ENDP ; TArray<UD3DRenderDevice::ProjectorInfo>::Add
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::ProjectorInfo>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L130575
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130575:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L130576
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130576:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L130577
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130577:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	84					; 00000054H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UProjectorInfo@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::ProjectorInfo>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::RenderTargetInfo>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L130608
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130608:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L130609
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130609:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L130610
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130610:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	20					; 00000014H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@URenderTargetInfo@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::RenderTargetInfo>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedPolygon>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L130630
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130630:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L130631
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130631:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L130632
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130632:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	280					; 00000118H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UQueuedPolygon@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedPolygon>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L130652
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130652:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L130653
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130653:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L130654
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130654:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	16					; 00000010H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UQueuedParticleByTexture@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedParticleByTexture>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z PROC NEAR ; TArray<UD3DRenderDevice::QueuedLineSegment>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L130674
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130674:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L130675
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130675:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L130676
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130676:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	36					; 00000024H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UQueuedLineSegment@UD3DRenderDevice@@@@QAEXHH@Z ENDP ; TArray<UD3DRenderDevice::QueuedLineSegment>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z
_TEXT	SEGMENT
_Index$ = 8
_Count$ = 12
?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z PROC NEAR	; TArray<FD3DVertex>::Remove, COMDAT
; _this$ = ecx

; 507  : 	{

	push	ebx
	push	ebp

; 508  : 		check(Index>=0);

	mov	ebp, DWORD PTR __imp_?appFailAssert@@YAXPBD0H@Z
	push	esi
	push	edi
	mov	edi, DWORD PTR _Index$[esp+12]
	test	edi, edi
	mov	esi, ecx
	jge	SHORT $L130696
	push	508					; 000001fcH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_08GCAE@Index?$DO?$DN0?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130696:

; 509  : 		check(Index<=ArrayNum);

	cmp	edi, DWORD PTR [esi+4]
	jle	SHORT $L130697
	push	509					; 000001fdH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BA@FEMP@Index?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130697:

; 510  : 		check(Index+Count<=ArrayNum);

	mov	ebx, DWORD PTR _Count$[esp+12]
	mov	ecx, DWORD PTR [esi+4]
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jle	SHORT $L130698
	push	510					; 000001feH
	push	OFFSET FLAT:??_C@_0BM@MLGP@?4?4?2?4?4?2Core?2Inc?2UnTemplate?4h?$AA@ ; `string'
	push	OFFSET FLAT:??_C@_0BG@BEDF@Index?$CLCount?$DM?$DNArrayNum?$AA@ ; `string'
	call	ebp
	add	esp, 12					; 0000000cH
$L130698:

; 511  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 512  : 			for( INT i=Index; i<Index+Count; i++ )
; 513  : 				(&(*this)(i))->~T();
; 514  : 		FArray::Remove( Index, Count, sizeof(T) );

	push	16					; 00000010H
	push	ebx
	push	edi
	mov	ecx, esi
	call	DWORD PTR __imp_?Remove@FArray@@QAEXHHH@Z
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 515  : 	}

	ret	8
?Remove@?$TArray@UFD3DVertex@@@@QAEXHH@Z ENDP		; TArray<FD3DVertex>::Remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z
_TEXT	SEGMENT
_Slack$ = 8
?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z PROC NEAR	; TArray<FD3DVertex>::Empty, COMDAT
; _this$ = ecx

; 518  : 		if( TTypeInfo<T>::NeedsDestructor() )
; 519  : 			for( INT i=0; i<ArrayNum; i++ )
; 520  : 				(&(*this)(i))->~T();
; 521  : 		FArray::Empty( sizeof(T), Slack );

	mov	eax, DWORD PTR _Slack$[esp-4]
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR _Slack$[esp-4], 16		; 00000010H
	jmp	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
?Empty@?$TArray@UFD3DVertex@@@@QAEXH@Z ENDP		; TArray<FD3DVertex>::Empty
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Add@?$TArray@VFVector@@@@QAEHHH@Z
_TEXT	SEGMENT
_n$ = 8
?Add@?$TArray@VFVector@@@@QAEHHH@Z PROC NEAR		; TArray<FVector>::Add, COMDAT
; _this$ = ecx

; 485  : 		checkSlow(!TTypeInfo<T>::DefinitelyNeedsDestructor());
; 486  : 		INT Index = FArray::Add( n, sizeof(T) );

	mov	eax, DWORD PTR _n$[esp-4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [edi+eax]
	cmp	esi, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+4], esi
	jle	SHORT $L151079
	lea	eax, DWORD PTR [esi+esi*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	edx, DWORD PTR [eax+esi+32]
	push	12					; 0000000cH
	mov	DWORD PTR [ecx+8], edx
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L151079:

; 487  : 		// CDH... needed a form of array Add which calls constructor
; 488  : 		if (Constructed)
; 489  : 		{
; 490  : 			for (INT i=Index; i<Index+n; i++)
; 491  : 				new(&(*this)(i)) T;
; 492  : 		}
; 493  : 		// ...CDH
; 494  : 		return(Index);

	mov	eax, edi
	pop	edi
	pop	esi

; 495  : 	}

	ret	8
?Add@?$TArray@VFVector@@@@QAEHHH@Z ENDP			; TArray<FVector>::Add
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Clamp@@YAHHHH@Z
_TEXT	SEGMENT
_X$ = 8
_Min$ = 12
_Max$ = 16
?Clamp@@YAHHHH@Z PROC NEAR				; Clamp, COMDAT

; 110  : 	return X<Min ? Min : X<Max ? X : Max;

	mov	ecx, DWORD PTR _X$[esp-4]
	mov	eax, DWORD PTR _Min$[esp-4]
	cmp	ecx, eax
	jl	SHORT $L151084
	mov	eax, DWORD PTR _Max$[esp-4]
	cmp	ecx, eax
	jge	SHORT $L151084
	mov	eax, ecx
$L151084:

; 111  : }

	ret	0
?Clamp@@YAHHHH@Z ENDP					; Clamp
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Clamp@@YAMMMM@Z
_TEXT	SEGMENT
_X$ = 8
_Min$ = 12
_Max$ = 16
?Clamp@@YAMMMM@Z PROC NEAR				; Clamp, COMDAT

; 110  : 	return X<Min ? Min : X<Max ? X : Max;

	fld	DWORD PTR _X$[esp-4]
	fcomp	DWORD PTR _Min$[esp-4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L151092
	fld	DWORD PTR _Min$[esp-4]

; 111  : }

	ret	0
$L151092:

; 110  : 	return X<Min ? Min : X<Max ? X : Max;

	fld	DWORD PTR _X$[esp-4]
	fcomp	DWORD PTR _Max$[esp-4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $L151090
	fld	DWORD PTR _X$[esp-4]

; 111  : }

	ret	0
$L151090:

; 110  : 	return X<Min ? Min : X<Max ? X : Max;

	fld	DWORD PTR _Max$[esp-4]

; 111  : }

	ret	0
?Clamp@@YAMMMM@Z ENDP					; Clamp
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z
_TEXT	SEGMENT
_pointer$ = 8
?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z PROC NEAR	; SafeRelease, COMDAT

; 174  : {

	push	esi

; 175  : 	HRESULT hr=D3D_OK;
; 176  : 	if(pointer)

	mov	esi, DWORD PTR _pointer$[esp]
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $L131260

; 177  : 	{
; 178  : 		hr=pointer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 179  : 		pointer=NULL;

	mov	DWORD PTR [esi], 0
$L131260:
	pop	esi

; 180  : 	}
; 181  : 
; 182  : 	return hr;
; 183  : }

	ret	0
?SafeRelease@@YAJAAPAUIDirect3DTexture8@@@Z ENDP	; SafeRelease
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z
_TEXT	SEGMENT
_pointer$ = 8
?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z PROC NEAR	; SafeRelease, COMDAT

; 174  : {

	push	esi

; 175  : 	HRESULT hr=D3D_OK;
; 176  : 	if(pointer)

	mov	esi, DWORD PTR _pointer$[esp]
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $L131267

; 177  : 	{
; 178  : 		hr=pointer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 179  : 		pointer=NULL;

	mov	DWORD PTR [esi], 0
$L131267:
	pop	esi

; 180  : 	}
; 181  : 
; 182  : 	return hr;
; 183  : }

	ret	0
?SafeRelease@@YAJAAPAUIDirect3DSurface8@@@Z ENDP	; SafeRelease
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z
_TEXT	SEGMENT
_pointer$ = 8
?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z PROC NEAR ; SafeRelease, COMDAT

; 174  : {

	push	esi

; 175  : 	HRESULT hr=D3D_OK;
; 176  : 	if(pointer)

	mov	esi, DWORD PTR _pointer$[esp]
	mov	ecx, DWORD PTR [esi]
	xor	eax, eax
	test	ecx, ecx
	je	SHORT $L131293

; 177  : 	{
; 178  : 		hr=pointer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 179  : 		pointer=NULL;

	mov	DWORD PTR [esi], 0
$L131293:
	pop	esi

; 180  : 	}
; 181  : 
; 182  : 	return hr;
; 183  : }

	ret	0
?SafeRelease@@YAJAAPAUIDirect3DVertexBuffer8@@@Z ENDP	; SafeRelease
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z
_TEXT	SEGMENT
_Array$ = 12
??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z PROC NEAR	; operator new, COMDAT

; 587  : {

	push	esi

; 588  : 	INT Index = Array.FArray::Add(1,sizeof(T));

	mov	esi, DWORD PTR _Array$[esp]
	mov	eax, DWORD PTR [esi+8]
	push	edi
	mov	edi, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [edi+1]
	cmp	ecx, eax
	mov	DWORD PTR [esi+4], ecx
	jle	SHORT $L151112
	lea	eax, DWORD PTR [ecx+ecx*2]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	lea	eax, DWORD PTR [eax+ecx+32]
	push	16					; 00000010H
	mov	ecx, esi
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp_?Realloc@FArray@@IAEXH@Z
$L151112:

; 589  : 	return &Array(Index);

	mov	ecx, DWORD PTR [esi]
	mov	eax, edi
	shl	eax, 4
	pop	edi
	add	eax, ecx
	pop	esi

; 590  : }

	ret	0
??2@YAPAXIAAV?$TArray@UFD3DVertex@@@@@Z ENDP		; operator new
_TEXT	ENDS
END
