/*=============================================================================
	WinDrv.cpp: Unreal Windows viewport and platform driver.
	Copyright 1997-1999 Epic Games, Inc. All Rights Reserved.

Revision history:
	* Created by Tim Sweeney.
=============================================================================*/

#include "..\..\Engine\Src\EnginePrivate.h"

/*-----------------------------------------------------------------------------
	Global functions.
-----------------------------------------------------------------------------*/

//
// Return a DirectDraw error message.
// Error messages commented out are DirectDraw II error messages.
//
TCHAR* ddError( HRESULT Result )
{
	switch( Result )
	{
		case DD_OK:									return TEXT("DD_OK");
		case DDERR_ALREADYINITIALIZED:				return TEXT("DDERR_ALREADYINITIALIZED");
		case DDERR_BLTFASTCANTCLIP:					return TEXT("DDERR_BLTFASTCANTCLIP");
		case DDERR_CANNOTATTACHSURFACE:				return TEXT("DDERR_CANNOTATTACHSURFACE");
		case DDERR_CANNOTDETACHSURFACE:				return TEXT("DDERR_CANNOTDETACHSURFACE");
		case DDERR_CANTCREATEDC:					return TEXT("DDERR_CANTCREATEDC");
		case DDERR_CANTDUPLICATE:					return TEXT("DDERR_CANTDUPLICATE");
		case DDERR_CLIPPERISUSINGHWND:				return TEXT("DDERR_CLIPPERISUSINGHWND");
		case DDERR_COLORKEYNOTSET:					return TEXT("DDERR_COLORKEYNOTSET");
		case DDERR_CURRENTLYNOTAVAIL:				return TEXT("DDERR_CURRENTLYNOTAVAIL");
		case DDERR_DIRECTDRAWALREADYCREATED:		return TEXT("DDERR_DIRECTDRAWALREADYCREATED");
		case DDERR_EXCEPTION:						return TEXT("DDERR_EXCEPTION");
		case DDERR_EXCLUSIVEMODEALREADYSET:			return TEXT("DDERR_EXCLUSIVEMODEALREADYSET");
		case DDERR_GENERIC:							return TEXT("DDERR_GENERIC");
		case DDERR_HEIGHTALIGN:						return TEXT("DDERR_HEIGHTALIGN");
		case DDERR_HWNDALREADYSET:					return TEXT("DDERR_HWNDALREADYSET");
		case DDERR_HWNDSUBCLASSED:					return TEXT("DDERR_HWNDSUBCLASSED");
		case DDERR_IMPLICITLYCREATED:				return TEXT("DDERR_IMPLICITLYCREATED");
		case DDERR_INCOMPATIBLEPRIMARY:				return TEXT("DDERR_INCOMPATIBLEPRIMARY");
		case DDERR_INVALIDCAPS:						return TEXT("DDERR_INVALIDCAPS");
		case DDERR_INVALIDCLIPLIST:					return TEXT("DDERR_INVALIDCLIPLIST");
		case DDERR_INVALIDDIRECTDRAWGUID:			return TEXT("DDERR_INVALIDDIRECTDRAWGUID");
		case DDERR_INVALIDMODE:						return TEXT("DDERR_INVALIDMODE");
		case DDERR_INVALIDOBJECT:					return TEXT("DDERR_INVALIDOBJECT");
		case DDERR_INVALIDPARAMS:					return TEXT("DDERR_INVALIDPARAMS");
		case DDERR_INVALIDPIXELFORMAT:				return TEXT("DDERR_INVALIDPIXELFORMAT");
		case DDERR_INVALIDPOSITION:					return TEXT("DDERR_INVALIDPOSITION");
		case DDERR_INVALIDRECT:						return TEXT("DDERR_INVALIDRECT");
		case DDERR_LOCKEDSURFACES:					return TEXT("DDERR_LOCKEDSURFACES");
		case DDERR_NO3D:							return TEXT("DDERR_NO3D");
		case DDERR_NOALPHAHW:						return TEXT("DDERR_NOALPHAHW");
		case DDERR_NOBLTHW:							return TEXT("DDERR_NOBLTHW");
		case DDERR_NOCLIPLIST:						return TEXT("DDERR_NOCLIPLIST");
		case DDERR_NOCLIPPERATTACHED:				return TEXT("DDERR_NOCLIPPERATTACHED");
		case DDERR_NOCOLORCONVHW:					return TEXT("DDERR_NOCOLORCONVHW");
		case DDERR_NOCOLORKEY:						return TEXT("DDERR_NOCOLORKEY");
		case DDERR_NOCOLORKEYHW:					return TEXT("DDERR_NOCOLORKEYHW");
		case DDERR_NOCOOPERATIVELEVELSET:			return TEXT("DDERR_NOCOOPERATIVELEVELSET");
		case DDERR_NODC:							return TEXT("DDERR_NODC");
		case DDERR_NODDROPSHW:						return TEXT("DDERR_NODDROPSHW");
		case DDERR_NODIRECTDRAWHW:					return TEXT("DDERR_NODIRECTDRAWHW");
		case DDERR_NOEMULATION:						return TEXT("DDERR_NOEMULATION");
		case DDERR_NOEXCLUSIVEMODE:					return TEXT("DDERR_NOEXCLUSIVEMODE");
		case DDERR_NOFLIPHW:						return TEXT("DDERR_NOFLIPHW");
		case DDERR_NOGDI:							return TEXT("DDERR_NOGDI");
		case DDERR_NOHWND:							return TEXT("DDERR_NOHWND");
		case DDERR_NOMIRRORHW:						return TEXT("DDERR_NOMIRRORHW");
		case DDERR_NOOVERLAYDEST:					return TEXT("DDERR_NOOVERLAYDEST");
		case DDERR_NOOVERLAYHW:						return TEXT("DDERR_NOOVERLAYHW");
		case DDERR_NOPALETTEATTACHED:				return TEXT("DDERR_NOPALETTEATTACHED");
		case DDERR_NOPALETTEHW:						return TEXT("DDERR_NOPALETTEHW");
		case DDERR_NORASTEROPHW:					return TEXT("DDERR_NORASTEROPHW");
		case DDERR_NOROTATIONHW:					return TEXT("DDERR_NOROTATIONHW");
		case DDERR_NOSTRETCHHW:						return TEXT("DDERR_NOSTRETCHHW");
		case DDERR_NOT4BITCOLOR:					return TEXT("DDERR_NOT4BITCOLOR");
		case DDERR_NOT4BITCOLORINDEX:				return TEXT("DDERR_NOT4BITCOLORINDEX");
		case DDERR_NOT8BITCOLOR:					return TEXT("DDERR_NOT8BITCOLOR");
		case DDERR_NOTAOVERLAYSURFACE:				return TEXT("DDERR_NOTAOVERLAYSURFACE");
		case DDERR_NOTEXTUREHW:						return TEXT("DDERR_NOTEXTUREHW");
		case DDERR_NOTFLIPPABLE:					return TEXT("DDERR_NOTFLIPPABLE");
		case DDERR_NOTFOUND:						return TEXT("DDERR_NOTFOUND");
		case DDERR_NOTLOCKED:						return TEXT("DDERR_NOTLOCKED");
		case DDERR_NOTPALETTIZED:					return TEXT("DDERR_NOTPALETTIZED");
		case DDERR_NOVSYNCHW:						return TEXT("DDERR_NOVSYNCHW");
		case DDERR_NOZBUFFERHW:						return TEXT("DDERR_NOZBUFFERHW");
		case DDERR_NOZOVERLAYHW:					return TEXT("DDERR_NOZOVERLAYHW");
		case DDERR_OUTOFCAPS:						return TEXT("DDERR_OUTOFCAPS");
		case DDERR_OUTOFMEMORY:						return TEXT("DDERR_OUTOFMEMORY");
		case DDERR_OUTOFVIDEOMEMORY:				return TEXT("DDERR_OUTOFVIDEOMEMORY");
		case DDERR_OVERLAYCANTCLIP:					return TEXT("DDERR_OVERLAYCANTCLIP");
		case DDERR_OVERLAYCOLORKEYONLYONEACTIVE:	return TEXT("DDERR_OVERLAYCOLORKEYONLYONEACTIVE");
		case DDERR_OVERLAYNOTVISIBLE:				return TEXT("DDERR_OVERLAYNOTVISIBLE");
		case DDERR_PALETTEBUSY:						return TEXT("DDERR_PALETTEBUSY");
		case DDERR_PRIMARYSURFACEALREADYEXISTS:		return TEXT("DDERR_PRIMARYSURFACEALREADYEXISTS");
		case DDERR_REGIONTOOSMALL:					return TEXT("DDERR_REGIONTOOSMALL");
		case DDERR_SURFACEALREADYATTACHED:			return TEXT("DDERR_SURFACEALREADYATTACHED");
		case DDERR_SURFACEALREADYDEPENDENT:			return TEXT("DDERR_SURFACEALREADYDEPENDENT");
		case DDERR_SURFACEBUSY:						return TEXT("DDERR_SURFACEBUSY");
		case DDERR_SURFACEISOBSCURED:				return TEXT("DDERR_SURFACEISOBSCURED");
		case DDERR_SURFACELOST:						return TEXT("DDERR_SURFACELOST");
		case DDERR_SURFACENOTATTACHED:				return TEXT("DDERR_SURFACENOTATTACHED");
		case DDERR_TOOBIGHEIGHT:					return TEXT("DDERR_TOOBIGHEIGHT");
		case DDERR_TOOBIGSIZE:						return TEXT("DDERR_TOOBIGSIZE");
		case DDERR_TOOBIGWIDTH:						return TEXT("DDERR_TOOBIGWIDTH");
		case DDERR_UNSUPPORTED:						return TEXT("DDERR_UNSUPPORTED");
		case DDERR_UNSUPPORTEDFORMAT:				return TEXT("DDERR_UNSUPPORTEDFORMAT");
		case DDERR_UNSUPPORTEDMASK:					return TEXT("DDERR_UNSUPPORTEDMASK");
		case DDERR_UNSUPPORTEDMODE:					return TEXT("DDERR_UNSUPPORTEDMODE");
		case DDERR_VERTICALBLANKINPROGRESS:			return TEXT("DDERR_VERTICALBLANKINPROGRESS");
		case DDERR_WASSTILLDRAWING:					return TEXT("DDERR_WASSTILLDRAWING");
		case DDERR_WRONGMODE:						return TEXT("DDERR_WRONGMODE");
		case DDERR_XALIGN:							return TEXT("DDERR_XALIGN");
		case DDERR_CANTPAGELOCK:					return TEXT("DDERR_CANTPAGELOCK");
		case DDERR_CANTPAGEUNLOCK:					return TEXT("DDERR_CANTPAGEUNLOCK");
		case DDERR_DCALREADYCREATED:				return TEXT("DDERR_DCALREADYCREATED");
		case DDERR_INVALIDSURFACETYPE:				return TEXT("DDERR_INVALIDSURFACETYPE");
		case DDERR_NOMIPMAPHW:						return TEXT("DDERR_NOMIPMAPHW");
		case DDERR_NOTPAGELOCKED:					return TEXT("DDERR_NOTPAGELOCKED");
		case DDERR_CANTLOCKSURFACE:					return TEXT("DDERR_CANTLOCKSURFACE");
/*
		case D3DERR_BADMAJORVERSION:				return TEXT("D3DERR_BADMAJORVERSION");
		case D3DERR_BADMINORVERSION:				return TEXT("D3DERR_BADMINORVERSION");
		case D3DERR_INVALID_DEVICE:					return TEXT("D3DERR_INVALID_DEVICE");
		case D3DERR_EXECUTE_CREATE_FAILED:			return TEXT("D3DERR_EXECUTE_CREATE_FAILED");
		case D3DERR_EXECUTE_DESTROY_FAILED:			return TEXT("D3DERR_EXECUTE_DESTROY_FAILED");
		case D3DERR_EXECUTE_LOCK_FAILED:			return TEXT("D3DERR_EXECUTE_LOCK_FAILED");
		case D3DERR_EXECUTE_UNLOCK_FAILED:			return TEXT("D3DERR_EXECUTE_UNLOCK_FAILED");
		case D3DERR_EXECUTE_LOCKED:					return TEXT("D3DERR_EXECUTE_LOCKED");
		case D3DERR_EXECUTE_NOT_LOCKED:				return TEXT("D3DERR_EXECUTE_NOT_LOCKED");
		case D3DERR_EXECUTE_FAILED:					return TEXT("D3DERR_EXECUTE_FAILED");
		case D3DERR_EXECUTE_CLIPPED_FAILED:			return TEXT("D3DERR_EXECUTE_CLIPPED_FAILED");
		case D3DERR_TEXTURE_NO_SUPPORT:				return TEXT("D3DERR_TEXTURE_NO_SUPPORT");
		case D3DERR_TEXTURE_CREATE_FAILED:			return TEXT("D3DERR_TEXTURE_CREATE_FAILED");
		case D3DERR_TEXTURE_DESTROY_FAILED:			return TEXT("D3DERR_TEXTURE_DESTROY_FAILED");
		case D3DERR_TEXTURE_LOCK_FAILED:			return TEXT("D3DERR_TEXTURE_LOCK_FAILED");
		case D3DERR_TEXTURE_UNLOCK_FAILED:			return TEXT("D3DERR_TEXTURE_UNLOCK_FAILED");
		case D3DERR_TEXTURE_LOAD_FAILED:			return TEXT("D3DERR_TEXTURE_LOAD_FAILED");
		case D3DERR_TEXTURE_SWAP_FAILED:			return TEXT("D3DERR_TEXTURE_SWAP_FAILED");
		case D3DERR_TEXTURE_LOCKED:					return TEXT("D3DERR_TEXTURE_LOCKED");
		case D3DERR_TEXTURE_NOT_LOCKED:				return TEXT("D3DERR_TEXTURE_NOT_LOCKED");
		case D3DERR_TEXTURE_GETSURF_FAILED:			return TEXT("D3DERR_TEXTURE_GETSURF_FAILED");
		case D3DERR_MATRIX_CREATE_FAILED:			return TEXT("D3DERR_MATRIX_CREATE_FAILED");
		case D3DERR_MATRIX_DESTROY_FAILED:			return TEXT("D3DERR_MATRIX_DESTROY_FAILED");
		case D3DERR_MATRIX_SETDATA_FAILED:			return TEXT("D3DERR_MATRIX_SETDATA_FAILED");
		case D3DERR_MATRIX_GETDATA_FAILED:			return TEXT("D3DERR_MATRIX_GETDATA_FAILED");
		case D3DERR_SETVIEWPORTDATA_FAILED:			return TEXT("D3DERR_SETVIEWPORTDATA_FAILED");
		case D3DERR_MATERIAL_CREATE_FAILED:			return TEXT("D3DERR_MATERIAL_CREATE_FAILED");
		case D3DERR_MATERIAL_DESTROY_FAILED:		return TEXT("D3DERR_MATERIAL_DESTROY_FAILED");
		case D3DERR_MATERIAL_SETDATA_FAILED:		return TEXT("D3DERR_MATERIAL_SETDATA_FAILED");
		case D3DERR_MATERIAL_GETDATA_FAILED:		return TEXT("D3DERR_MATERIAL_GETDATA_FAILED");
		case D3DERR_LIGHT_SET_FAILED:				return TEXT("D3DERR_LIGHT_SET_FAILED");
		case D3DERR_SCENE_IN_SCENE:					return TEXT("D3DERR_SCENE_IN_SCENE");
		case D3DERR_SCENE_NOT_IN_SCENE:				return TEXT("D3DERR_SCENE_NOT_IN_SCENE");
		case D3DERR_SCENE_BEGIN_FAILED:				return TEXT("D3DERR_SCENE_BEGIN_FAILED");
		case D3DERR_SCENE_END_FAILED:				return TEXT("D3DERR_SCENE_END_FAILED");
		case D3DERR_INBEGIN:						return TEXT("D3DERR_INBEGIN");
		case D3DERR_NOTINBEGIN:						return TEXT("D3DERR_NOTINBEGIN");
*/
		default:									return TEXT("Unknown error");
	}
}

TCHAR* diError( HRESULT Result )
{
	switch( Result )
	{
		case DIERR_OLDDIRECTINPUTVERSION: 			return TEXT("DIERR_OLDDIRECTINPUTVERSION");
		case DIERR_BETADIRECTINPUTVERSION: 			return TEXT("DIERR_BETADIRECTINPUTVERSION");
		case DIERR_BADDRIVERVER: 					return TEXT("DIERR_BADDRIVERVER");
		case DIERR_DEVICENOTREG: 					return TEXT("DIERR_DEVICENOTREG");
		case DIERR_NOTFOUND: 						return TEXT("DIERR_NOTFOUND, DIERR_READONLY, DIERR_OBJECTNOTFOUND or DIERR_HANDLEEXISTS");
		case DIERR_INVALIDPARAM: 					return TEXT("DIERR_INVALIDPARAM");
		case DIERR_NOINTERFACE: 					return TEXT("DIERR_NOINTERFACE");
		case DIERR_GENERIC: 						return TEXT("DIERR_GENERIC");
		case DIERR_OUTOFMEMORY: 					return TEXT("DIERR_OUTOFMEMORY");
		case DIERR_UNSUPPORTED: 					return TEXT("DIERR_UNSUPPORTED");
		case DIERR_NOTINITIALIZED: 					return TEXT("DIERR_NOTINITIALIZED");
		case DIERR_ALREADYINITIALIZED: 				return TEXT("DIERR_ALREADYINITIALIZED");
		case DIERR_NOAGGREGATION: 					return TEXT("DIERR_NOAGGREGATION");
		case DIERR_OTHERAPPHASPRIO: 				return TEXT("DIERR_OTHERAPPHASPRIO");
		case DIERR_INPUTLOST: 						return TEXT("DIERR_INPUTLOST");
		case DIERR_ACQUIRED: 						return TEXT("DIERR_ACQUIRED");
		case DIERR_NOTACQUIRED: 					return TEXT("DIERR_NOTACQUIRED");
		case DIERR_INSUFFICIENTPRIVS: 				return TEXT("DIERR_INSUFFICIENTPRIVS");
		case DIERR_DEVICEFULL: 						return TEXT("DIERR_DEVICEFULL");
		case DIERR_MOREDATA: 						return TEXT("DIERR_MOREDATA");
		case DIERR_NOTDOWNLOADED: 					return TEXT("DIERR_NOTDOWNLOADED");
		case DIERR_HASEFFECTS: 						return TEXT("DIERR_HASEFFECTS");
		case DIERR_NOTEXCLUSIVEACQUIRED: 			return TEXT("DIERR_NOTEXCLUSIVEACQUIRED");
		case DIERR_INCOMPLETEEFFECT: 				return TEXT("DIERR_INCOMPLETEEFFECT");
		case DIERR_NOTBUFFERED: 					return TEXT("DIERR_NOTBUFFERED");
		case DIERR_EFFECTPLAYING: 					return TEXT("DIERR_EFFECTPLAYING");

		default:									return TEXT("Unknown error");
	}
}
/*-----------------------------------------------------------------------------
	The End.
-----------------------------------------------------------------------------*/
