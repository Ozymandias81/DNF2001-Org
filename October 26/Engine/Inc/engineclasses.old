/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if _MSC_VER
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Spawned)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(KillCredit)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(InterpolateEnd)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(FootZoneChange)
AUTOGENERATE_NAME(HeadZoneChange)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(BlockedByMover)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(Expired)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(SeeMonster)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(BotDesireability)
AUTOGENERATE_NAME(PostNetReceive)
AUTOGENERATE_NAME(KeyType)
AUTOGENERATE_NAME(KeyEvent)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerTimeout)
AUTOGENERATE_NAME(Possess)
AUTOGENERATE_NAME(UnPossess)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(PreRender)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(RenderOverlays)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(WalkTexture)
AUTOGENERATE_NAME(BroadcastMessage)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(Update)
AUTOGENERATE_NAME(AlterDestination)
AUTOGENERATE_NAME(SpawnNotification)
AUTOGENERATE_NAME(UpdateTactics)
AUTOGENERATE_NAME(GlobalTrigger)
AUTOGENERATE_NAME(dncServerCommand)
AUTOGENERATE_NAME(TriggerBySurface)
AUTOGENERATE_NAME(EvalBones)
AUTOGENERATE_NAME(EvalVert)
AUTOGENERATE_NAME(InterpolateBegin)
AUTOGENERATE_NAME(EnemyIsVisible)
AUTOGENERATE_NAME(SawEnemy)
AUTOGENERATE_NAME(UpdateTimers)
AUTOGENERATE_NAME(AnimEndEx)
AUTOGENERATE_NAME(OnEvalBones)
AUTOGENERATE_NAME(DoorframeImpact)
AUTOGENERATE_NAME(Used)
AUTOGENERATE_NAME(Examine)
AUTOGENERATE_NAME(UnExamine)
AUTOGENERATE_NAME(AlmostClosed)
AUTOGENERATE_NAME(AnimTick)
AUTOGENERATE_NAME(FinishedLoading)
AUTOGENERATE_NAME(StoppedMoving)
AUTOGENERATE_NAME(DuckHeld)
AUTOGENERATE_NAME(JumpHeld)
AUTOGENERATE_NAME(PostNetInitial)
AUTOGENERATE_NAME(Initialize)
AUTOGENERATE_NAME(ServerTick)
AUTOGENERATE_NAME(PlaySwingSound)
AUTOGENERATE_NAME(Stopped)
AUTOGENERATE_NAME(SetLadderState)
AUTOGENERATE_NAME(OnLadder)
AUTOGENERATE_NAME(OffLadder)
AUTOGENERATE_NAME(SetRopeClimbState)
AUTOGENERATE_NAME(JumpOffLadder)
AUTOGENERATE_NAME(CalcView)
AUTOGENERATE_NAME(ParticleHurtRadius)
AUTOGENERATE_NAME(ScriptTriggerOnDismount)
AUTOGENERATE_NAME(Resolved)
AUTOGENERATE_NAME(ResolveFailed)
AUTOGENERATE_NAME(ReceivedText)
AUTOGENERATE_NAME(ReceivedLine)
AUTOGENERATE_NAME(ReceivedBinary)
AUTOGENERATE_NAME(Accepted)
AUTOGENERATE_NAME(Opened)
AUTOGENERATE_NAME(Closed)
AUTOGENERATE_NAME(PushedByMover)
AUTOGENERATE_NAME(Locked)
AUTOGENERATE_NAME(Unlocked)

#ifndef NAMES_ONLY

enum EMusicTransition
{
    MTRAN_None              =0,
    MTRAN_Instant           =1,
    MTRAN_Segue             =2,
    MTRAN_Fade              =3,
    MTRAN_FastFade          =4,
    MTRAN_SlowFade          =5,
    MTRAN_MAX               =6,
};
enum ESoundSlot
{
    SLOT_None               =0,
    SLOT_Misc               =1,
    SLOT_Pain               =2,
    SLOT_Interact           =3,
    SLOT_Ambient            =4,
    SLOT_Talk               =5,
    SLOT_Interface          =6,
    SLOT_MAX                =7,
};
enum ELightDetail
{
    LTD_Normal              =0,
    LTD_NormalNoSpecular    =1,
    LTD_Classic             =2,
    LTD_SingleDynamic       =3,
    LTD_SingleFixed         =4,
    LTD_AmbientOnly         =5,
    LTD_MAX                 =6,
};
enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Unused               =19,
    LE_MAX                  =20,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_TexturePaletteOnce   =8,
    LT_TexturePaletteLoop   =9,
    LT_StringLight          =10,
    LT_MAX                  =11,
};
enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_Alpha               =5,
    STY_MAX                 =6,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_Terraform            =6,
    DT_SpriteAnimOnce       =7,
    DT_StaticMesh           =8,
    DT_DX8Mesh              =9,
    DT_MAX                  =10,
};
enum ENetRole
{
    ROLE_None               =0,
    ROLE_DumbProxy          =1,
    ROLE_SimulatedProxy     =2,
    ROLE_AutonomousProxy    =3,
    ROLE_Authority          =4,
    ROLE_MAX                =5,
};
enum EMountType
{
    MOUNT_Actor             =0,
    MOUNT_MeshSurface       =1,
    MOUNT_MeshBone          =2,
    MOUNT_MAX               =3,
};
enum ETraceHitCategory
{
    TH_Bullet               =0,
    TH_LaserBurn            =1,
    TH_Foot                 =2,
    TH_Chainsaw             =3,
    TH_Shrink               =4,
    TH_Freeze               =5,
    TH_NoMaterialEffectBullet=6,
    TH_MAX                  =7,
};
enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Swimming           =3,
    PHYS_Flying             =4,
    PHYS_Rotating           =5,
    PHYS_Projectile         =6,
    PHYS_Rolling            =7,
    PHYS_Interpolating      =8,
    PHYS_MovingBrush        =9,
    PHYS_Spider             =10,
    PHYS_Trailer            =11,
    PHYS_Rope               =12,
    PHYS_WheeledVehicle     =13,
    PHYS_Jetpack            =14,
    PHYS_MAX                =15,
};
enum EFacialExpression
{
    FACE_NoChange           =0,
    FACE_Normal             =1,
    FACE_Breathe1           =2,
    FACE_Breathe2           =3,
    FACE_Clenched           =4,
    FACE_Frown              =5,
    FACE_Pain1              =6,
    FACE_Pain2              =7,
    FACE_Roar               =8,
    FACE_AngrySmile         =9,
    FACE_HappySmile         =10,
    FACE_Sneer              =11,
    FACE_Surprise           =12,
    FACE_Scared1            =13,
    FACE_MAX                =14,
};
enum EDamageOverTime
{
    DOT_Electrical          =0,
    DOT_Fire                =1,
    DOT_Cold                =2,
    DOT_Poison              =3,
    DOT_Radiation           =4,
    DOT_Biochemical         =5,
    DOT_Water               =6,
    DOT_Burnout             =7,
    DOT_None                =8,
    DOT_MAX                 =9,
};
enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_Unknown15            =21,
    IK_Unknown16            =22,
    IK_Unknown17            =23,
    IK_Unknown18            =24,
    IK_Unknown19            =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_Unknown3C            =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_UnknownA4            =164,
    IK_UnknownA5            =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_UnknownB9            =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_UnknownC1            =193,
    IK_UnknownC2            =194,
    IK_UnknownC3            =195,
    IK_UnknownC4            =196,
    IK_UnknownC5            =197,
    IK_UnknownC6            =198,
    IK_UnknownC7            =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_JoyX                 =224,
    IK_JoyY                 =225,
    IK_JoyZ                 =226,
    IK_JoyR                 =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_UnknownEA            =234,
    IK_UnknownEB            =235,
    IK_MouseWheelUp         =236,
    IK_MouseWheelDown       =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_JoyPovUp             =240,
    IK_JoyPovDown           =241,
    IK_JoyPovLeft           =242,
    IK_JoyPovRight          =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};
enum EInputAction
{
    IST_None                =0,
    IST_Press               =1,
    IST_Hold                =2,
    IST_Release             =3,
    IST_Axis                =4,
    IST_MAX                 =5,
};
enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};

struct AActor_eventKeyEvent_Parms
{
    BYTE Key;
    BYTE Action;
    FLOAT Delta;
    BITFIELD ReturnValue;
};
struct AActor_eventKeyType_Parms
{
    BYTE Key;
    BITFIELD ReturnValue;
};
struct AActor_eventCalcView_Parms
{
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct AActor_eventGlobalTrigger_Parms
{
    FName TriggerEvent;
    class APawn* Instigator;
    class AActor* Other;
};
struct AActor_eventRenderTexture_Parms
{
    class UScriptedTexture* Tex;
};
struct AActor_eventTravelPostAccept_Parms
{
};
struct AActor_eventTravelPreAccept_Parms
{
};
struct AActor_eventPostNetReceive_Parms
{
};
struct AActor_eventPostNetInitial_Parms
{
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
    class UClass* OptionalClass;
};
struct AActor_eventBroadcastMessage_Parms
{
    FString Msg;
    BITFIELD bBeep;
    FName Type;
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventRenderOverlays_Parms
{
    class UCanvas* Canvas;
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventDemoPlaySound_Parms
{
    class USound* Sound;
    BYTE Slot;
    FLOAT Volume;
    BITFIELD bNoOverride;
    FLOAT Radius;
    FLOAT Pitch;
    BITFIELD bMonitorSound;
};
struct AActor_eventTakeDamage_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector Momentum;
    class UClass* DamageType;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
};
struct AActor_eventUnExamine_Parms
{
    class AActor* Other;
};
struct AActor_eventExamine_Parms
{
    class AActor* Other;
};
struct AActor_eventEndedRotation_Parms
{
};
struct AActor_eventInterpolateEnd_Parms
{
    class AActor* Other;
};
struct AActor_eventInterpolateBegin_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventPushedByMover_Parms
{
    class AActor* Other;
    FVector PushedVelocity;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventKillCredit_Parms
{
    class AActor* Other;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPostTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventStopped_Parms
{
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};
struct AActor_eventTimer_Parms
{
    INT TimerNum;
};
struct AActor_eventUsed_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventTriggerBySurface_Parms
{
    INT SurfaceIndex;
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventExpired_Parms
{
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventSpawned_Parms
{
};
struct AActor_eventOnEvalBones_Parms
{
    INT Channel;
    BITFIELD ReturnValue;
};
struct AActor_eventAnimEndEx_Parms
{
    INT Channel;
};
struct AActor_eventAnimEnd_Parms
{
};
class ENGINE_API AActor : public UObject
{
public:
    BITFIELD bStatic:1 GCC_PACK(4);
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bStasis:1;
    BITFIELD bForceStasis:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bAssimilated:1;
    BITFIELD bIsPawn:1;
    BITFIELD bDestroyed:1;
    BITFIELD bIsMover:1;
    BITFIELD bRenderActor:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bTickNotRelevant:1;
    BITFIELD bTickNotColliding:1;
    BITFIELD bTicked:1;
    BITFIELD bAlwaysTick:1;
    BITFIELD bAnimByOwner:1;
    BITFIELD bClientAnim:1;
    BITFIELD bLightChanged:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bForcePhysicsUpdate:1;
    BITFIELD bAlwaysVisible:1;
    BITFIELD bPortalView:1;
    FName PortalViewName GCC_PACK(4);
    BITFIELD bNetTemporary:1 GCC_PACK(4);
    BITFIELD bNetOptional:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bSimFall:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bDirectional:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bNoDrawEditorLines:1;
    BITFIELD bSelected:1;
    BITFIELD bMemorized:1;
    BITFIELD bHighlighted:1;
    BITFIELD bEdLocked:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    class AActor* Owner GCC_PACK(4);
    class AActor* Base;
    FPointRegion Region;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    BYTE StandingCount;
    BYTE MiscNumber;
    BYTE LatentByte;
    INT LatentInt;
    FLOAT LatentFloat;
    class AActor* LatentActor;
    class AActor* Deleted;
    INT CollisionTag;
    INT LightingTag;
    INT OtherTag;
    INT ExtraTag;
    INT SpecialTag;
    BITFIELD bScriptInitialized:1 GCC_PACK(4);
    BITFIELD bSpawnInitialized2:1;
    class AActor* Target GCC_PACK(4);
    class APawn* Instigator;
    class AInventory* Inventory;
    TArray<class AActor*> Touching;
    FName InitialState;
    FName Group;
    FName Tag;
    FName Event;
    BITFIELD GrabTrigger:1 GCC_PACK(4);
    FName AttachTag GCC_PACK(4);
    FName StartingInterpolationPoint;
    FLOAT TimeWarp;
    FLOAT TimerRate[6];
    FLOAT TimerCounter[6];
    INT TimerLoop[6];
    INT MaxTimers;
    FLOAT LifeSpan;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    BITFIELD bCollideActors:1 GCC_PACK(4);
    BITFIELD bCollideWorld:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bProjTarget:1;
    BITFIELD bMeshLowerByCollision:1;
    BITFIELD bPushByRotation:1;
    BITFIELD bCancelPushByRotation:1;
    FLOAT PushVelocityScale GCC_PACK(4);
    FVector Location;
    FRotator Rotation;
    FCoords CoordinateFrame;
    FVector OldLocation;
    FVector ColLocation;
    FVector Velocity;
    FVector Acceleration;
    FRotator CamRotAdjust;
    FLOAT GroundFriction;
    BITFIELD bUseCoordinateFrame:1 GCC_PACK(4);
    BYTE Physics GCC_PACK(4);
    BITFIELD PhysNoneOnStop:1 GCC_PACK(4);
    BITFIELD bBounce:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bRotateByQuat:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    BITFIELD bMoveToDesired:1;
    FVector DesiredLocation GCC_PACK(4);
    FLOAT DesiredLocationSeconds;
    FLOAT Mass;
    FLOAT Buoyancy;
    FRotator RotationRate;
    FRotator DesiredRotation;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class AActor* PendingTouch;
    class AActor* TickBefore;
    FVector SurfaceForce;
    BYTE TraceHitCategory;
    BITFIELD bTraceHitRicochets:1 GCC_PACK(4);
    BITFIELD bLastRicochet:1;
    BITFIELD bBeamTraceHit:1;
    class UClass* HitPackageLevelClass GCC_PACK(4);
    class UClass* HitPackageClass;
    class UClass* TraceDamageType;
    class UClass* WaterSplashClass;
    class AActor* MountParent;
    FVector MountPreviousLocation;
    FRotator MountPreviousRotation;
    INT MountMeshSurfaceTri;
    FVector MountMeshSurfaceBarys;
    BYTE MountType;
    BITFIELD IndependentRotation:1 GCC_PACK(4);
    BYTE DismountPhysics GCC_PACK(4);
    BITFIELD DestroyOnDismount:1 GCC_PACK(4);
    FName MountParentTag GCC_PACK(4);
    FVector MountOrigin;
    FRotator MountAngles;
    FName MountMeshItem;
    BITFIELD bMountRotationRelative:1 GCC_PACK(4);
    FRotator MountRelativeRotation GCC_PACK(4);
    BITFIELD bEstablishedRelativeBase:1 GCC_PACK(4);
    FCoords MountRelativeBase GCC_PACK(4);
    BYTE Role;
    BYTE RemoteRole;
    INT NetTag;
    FLOAT NetPriority;
    FLOAT NetUpdateFrequency;
    BITFIELD bNetInitial:1 GCC_PACK(4);
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bNetSee:1;
    BITFIELD bNetHear:1;
    BITFIELD bNetFeel:1;
    BITFIELD bSimulatedPawn:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bForceCollisionRep:1;
    BITFIELD bDontSimulateMotion:1;
    BITFIELD bDontReplicateSkin:1;
    BITFIELD bDontReplicateMesh:1;
    BYTE DrawType GCC_PACK(4);
    BYTE Style;
    class UTexture* Sprite;
    class UTexture* Texture;
    class UTexture* Skin;
    class UMesh* Mesh;
    class UMeshInstance* MeshInstance;
    INT DX8MeshHandle;
    FLOAT LastRenderTime;
    BITFIELD bShadowCast:1 GCC_PACK(4);
    BITFIELD bUnlit:1;
    BITFIELD bNoSmooth:1;
    BITFIELD bParticles:1;
    BITFIELD bRandomFrame:1;
    BITFIELD bMeshEnviroMap:1;
    BITFIELD bMeshCurvy:1;
    BITFIELD bIgnoreBList:1;
    BITFIELD bDontReflect:1;
    BITFIELD bOwnerSeeSpecial:1;
    FLOAT MeshLowerHeight GCC_PACK(4);
    BITFIELD ComputeMeshExtent:1 GCC_PACK(4);
    FVector MeshLastScreenExtentMin GCC_PACK(4);
    FVector MeshLastScreenExtentMax;
    class UClass* RenderIteratorClass;
    class URenderIterator* RenderInterface;
    class AMeshDecal* MeshDecalLink;
    FLOAT Alpha;
    FLOAT BillboardRotation;
    BITFIELD Bilinear:1 GCC_PACK(4);
    class UModel* Brush GCC_PACK(4);
    FLOAT DrawScale;
    FVector PrePivot;
    FLOAT ScaleGlow;
    BYTE AmbientGlow;
    BYTE Fatness;
    BYTE SkinIndex;
    BITFIELD AffectMeshes:1 GCC_PACK(4);
    BITFIELD bDarkLight:1;
    BYTE LightType GCC_PACK(4);
    BYTE LightEffect;
    BYTE LightBrightness;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightRadius;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BYTE VolumeBrightness;
    BYTE VolumeRadius;
    BYTE VolumeFog;
    BITFIELD bSpecialLit:1 GCC_PACK(4);
    BITFIELD bActorShadows:1;
    BITFIELD bCorona:1;
    FLOAT LightStringStart GCC_PACK(4);
    BITFIELD LightStringLoop:1 GCC_PACK(4);
    FName LightString GCC_PACK(4);
    FName LightStringRed;
    FName LightStringGreen;
    FName LightStringBlue;
    BYTE LightDetail;
    INT MaxDesiredActorLights;
    INT MinDesiredActorLights;
    INT CurrentDesiredActorLights;
    BITFIELD AmbientApproxComptued:1 GCC_PACK(4);
    FPlane AmbientApprox GCC_PACK(4);
    FPlane AmbientApproxPrevious;
    BITFIELD bAnimFinished:1 GCC_PACK(4);
    BITFIELD bAnimLoop:1;
    BITFIELD bAnimNotify:1;
    BITFIELD bAnimBlendAdditive:1;
    FName AnimSequence GCC_PACK(4);
    FLOAT AnimFrame;
    FLOAT AnimRate;
    FLOAT AnimBlend;
    FLOAT TweenRate;
    FLOAT AnimLast;
    FLOAT AnimMinRate;
    FLOAT OldAnimRate;
    FPlane SimAnim;
    BITFIELD bUpdateSimAnim:1 GCC_PACK(4);
    class AMeshEffect* MeshEffect GCC_PACK(4);
    BYTE SoundRadius;
    BYTE SoundVolume;
    BYTE SoundPitch;
    class USound* AmbientSound;
    FLOAT MonitorSoundLevel;
    FLOAT TransientSoundVolume;
    FLOAT TransientSoundRadius;
    BITFIELD bCarriedItem:1 GCC_PACK(4);
    BITFIELD bDifficulty0:1;
    BITFIELD bDifficulty1:1;
    BITFIELD bDifficulty2:1;
    BITFIELD bDifficulty3:1;
    BITFIELD bSinglePlayer:1;
    BITFIELD bNet:1;
    BITFIELD bNetSpecial:1;
    FLOAT OddsOfAppearing GCC_PACK(4);
    DECLARE_FUNCTION(execSetToMount);
    DECLARE_FUNCTION(execGetMountLocation);
    DECLARE_FUNCTION(execMultiply_ColorFloat);
    DECLARE_FUNCTION(execAdd_ColorColor);
    DECLARE_FUNCTION(execMultiply_FloatColor);
    DECLARE_FUNCTION(execSubtract_ColorColor);
    DECLARE_FUNCTION(execScreenShotIsValid);
    DECLARE_FUNCTION(execScreenshot);
    DECLARE_FUNCTION(execGetSavedGameLongInfo);
    DECLARE_FUNCTION(execGetSavedGameInfo);
    DECLARE_FUNCTION(execGetNumSavedGames);
    DECLARE_FUNCTION(execDeleteSavedGame);
    DECLARE_FUNCTION(execSaveGame);
    DECLARE_FUNCTION(execLoadGame);
    DECLARE_FUNCTION(execParentalLockIsOn);
    DECLARE_FUNCTION(execSetParentalLockStatus);
    DECLARE_FUNCTION(execValidateParentalLockPassword);
    DECLARE_FUNCTION(execSetParentalLockPassword);
    DECLARE_FUNCTION(execGetNextPlayerProfile);
    DECLARE_FUNCTION(execDestroyPlayerProfile);
    DECLARE_FUNCTION(execCreatePlayerProfile);
    DECLARE_FUNCTION(execSwitchToPlayerProfile);
    DECLARE_FUNCTION(execProfileSwitchNeedsReLaunch);
    DECLARE_FUNCTION(execGetCurrentPlayerProfile);
    DECLARE_FUNCTION(execSendMailMessage);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execBasedActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execGetNextMDSMapList);
    DECLARE_FUNCTION(execGetNextMDSMap);
    DECLARE_FUNCTION(execGetNextClass);
    DECLARE_FUNCTION(execGetNextThing);
    DECLARE_FUNCTION(execGetNextIntDesc);
    DECLARE_FUNCTION(execGetNextInt);
    DECLARE_FUNCTION(execGetURLMap);
    DECLARE_FUNCTION(execGetNextSkin);
    DECLARE_FUNCTION(execGetMapName);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execMakeNoise);
    DECLARE_FUNCTION(execGetSoundDuration);
    DECLARE_FUNCTION(execDemoPlaySound);
    DECLARE_FUNCTION(execPlayOwnedSound);
    DECLARE_FUNCTION(execStopSound);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execSetTimerCounter);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execMeshGetTexture);
    DECLARE_FUNCTION(execRenameAllSurfaces);
    DECLARE_FUNCTION(execSetSurfaceName);
    DECLARE_FUNCTION(execSetSurfaceTexture);
    DECLARE_FUNCTION(execGetSurfaceTexture);
    DECLARE_FUNCTION(execGetSurfaceVPan);
    DECLARE_FUNCTION(execGetSurfaceUPan);
    DECLARE_FUNCTION(execSetSurfacePan);
    DECLARE_FUNCTION(execFindNameForSurface);
    DECLARE_FUNCTION(execFindSurfaceByName);
    DECLARE_FUNCTION(execTraceWaterPoint);
    DECLARE_FUNCTION(execIsInWaterRegion);
    DECLARE_FUNCTION(execGetPointRegion);
    DECLARE_FUNCTION(execTraceTexture);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execNativeEvalSlack);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execGetMeshInstance);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execGetAnimGroup);
    DECLARE_FUNCTION(execSetAnimGroup);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execTweenAnim);
    DECLARE_FUNCTION(execLoopAnim);
    DECLARE_FUNCTION(execPlayAnim);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execForcedGetFrame);
    DECLARE_FUNCTION(execAutonomousPhysics);
    DECLARE_FUNCTION(execDropToFloor);
    DECLARE_FUNCTION(execFindSpot);
    DECLARE_FUNCTION(execMoveActor);
    DECLARE_FUNCTION(execMoveSmooth);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMove);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execSpeakText);
    DECLARE_FUNCTION(execNameForString);
    DECLARE_FUNCTION(execMusicPlay);
    DECLARE_FUNCTION(execConsoleCommand);
    inline BITFIELD __fastcall eventKeyEvent(BYTE Key, BYTE Action, FLOAT Delta)
    {
        AActor_eventKeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        Parms.Action=Action;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_KeyEvent),&Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventKeyType(BYTE Key)
    {
        AActor_eventKeyType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        ProcessEvent(FindFunctionChecked(ENGINE_KeyType),&Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventCalcView(FVector& CameraLocation, FRotator& CameraRotation)
    {
        AActor_eventCalcView_Parms Parms;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_CalcView),&Parms);
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    inline void __fastcall eventGlobalTrigger(FName TriggerEvent, class APawn* Instigator, class AActor* Other)
    {
        AActor_eventGlobalTrigger_Parms Parms;
        Parms.TriggerEvent=TriggerEvent;
        Parms.Instigator=Instigator;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GlobalTrigger),&Parms);
    }
    inline void __fastcall eventRenderTexture(class UScriptedTexture* Tex)
    {
        AActor_eventRenderTexture_Parms Parms;
        Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderTexture),&Parms);
    }
    inline void __fastcall eventTravelPostAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
    }
    inline void __fastcall eventTravelPreAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
    }
    inline void __fastcall eventPostNetReceive()
    {
        if(IsProbing(NAME_PostNetReceive)) {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetReceive),NULL);
        }
    }
    inline void __fastcall eventPostNetInitial()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetInitial),NULL);
    }
    inline void __fastcall eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    inline void __fastcall eventPostBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
    }
    inline void __fastcall eventBroadcastLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, class UClass* OptionalClass)
    {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        Parms.OptionalClass=OptionalClass;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
    }
    inline void __fastcall eventBroadcastMessage(const FString& Msg, BITFIELD bBeep, FName Type)
    {
        AActor_eventBroadcastMessage_Parms Parms;
        Parms.Msg=Msg;
        Parms.bBeep=bBeep;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastMessage),&Parms);
    }
    inline void __fastcall eventPreBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
    }
    inline void __fastcall eventRenderOverlays(class UCanvas* Canvas)
    {
        AActor_eventRenderOverlays_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderOverlays),&Parms);
    }
    inline void __fastcall eventBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
    }
    inline void __fastcall eventPostTeleport(class ATeleporter* OutTeleporter)
    {
        AActor_eventPostTeleport_Parms Parms;
        Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
    }
    inline BITFIELD __fastcall eventPreTeleport(class ATeleporter* InTeleporter)
    {
        AActor_eventPreTeleport_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InTeleporter=InTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventDemoPlaySound(class USound* Sound, BYTE Slot, FLOAT Volume, BITFIELD bNoOverride, FLOAT Radius, FLOAT Pitch, BITFIELD bMonitorSound)
    {
        AActor_eventDemoPlaySound_Parms Parms;
        Parms.Sound=Sound;
        Parms.Slot=Slot;
        Parms.Volume=Volume;
        Parms.bNoOverride=bNoOverride;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.bMonitorSound=bMonitorSound;
        ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
    }
    inline void __fastcall eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, class UClass* DamageType)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.Damage=Damage;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLocation=HitLocation;
        Parms.Momentum=Momentum;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
    }
    inline void __fastcall eventKilledBy(class APawn* EventInstigator)
    {
        AActor_eventKilledBy_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
    }
    inline void __fastcall eventFellOutOfWorld()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),NULL);
    }
    inline void __fastcall eventUnExamine(class AActor* Other)
    {
        AActor_eventUnExamine_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnExamine),&Parms);
    }
    inline void __fastcall eventExamine(class AActor* Other)
    {
        AActor_eventExamine_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Examine),&Parms);
    }
    inline void __fastcall eventEndedRotation()
    {
        if(IsProbing(NAME_EndedRotation)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
        }
    }
    inline void __fastcall eventInterpolateEnd(class AActor* Other)
    {
        AActor_eventInterpolateEnd_Parms Parms;
        if(IsProbing(NAME_InterpolateEnd)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_InterpolateEnd),&Parms);
        }
    }
    inline void __fastcall eventInterpolateBegin(class AActor* Other)
    {
        AActor_eventInterpolateBegin_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_InterpolateBegin),&Parms);
    }
    inline void __fastcall eventEncroachedBy(class AActor* Other)
    {
        AActor_eventEncroachedBy_Parms Parms;
        if(IsProbing(NAME_EncroachedBy)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
        }
    }
    inline void __fastcall eventPushedByMover(class AActor* Other, FVector PushedVelocity)
    {
        AActor_eventPushedByMover_Parms Parms;
        Parms.Other=Other;
        Parms.PushedVelocity=PushedVelocity;
        ProcessEvent(FindFunctionChecked(ENGINE_PushedByMover),&Parms);
    }
    inline BITFIELD __fastcall eventEncroachingOn(class AActor* Other)
    {
        AActor_eventEncroachingOn_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_EncroachingOn)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
        }
        return Parms.ReturnValue;
    }
    inline class AActor* __fastcall eventSpecialHandling(class APawn* Other)
    {
        AActor_eventSpecialHandling_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_SpecialHandling)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
        }
        return Parms.ReturnValue;
    }
    inline void __fastcall eventKillCredit(class AActor* Other)
    {
        AActor_eventKillCredit_Parms Parms;
        if(IsProbing(NAME_KillCredit)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_KillCredit),&Parms);
        }
    }
    inline void __fastcall eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        if(IsProbing(NAME_Detach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
        }
    }
    inline void __fastcall eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        if(IsProbing(NAME_Attach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
        }
    }
    inline void __fastcall eventBaseChange()
    {
        if(IsProbing(NAME_BaseChange)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
        }
    }
    inline void __fastcall eventBump(class AActor* Other)
    {
        AActor_eventBump_Parms Parms;
        if(IsProbing(NAME_Bump)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
        }
    }
    inline void __fastcall eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        if(IsProbing(NAME_UnTouch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
        }
    }
    inline void __fastcall eventPostTouch(class AActor* Other)
    {
        AActor_eventPostTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
    }
    inline void __fastcall eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        if(IsProbing(NAME_Touch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
        }
    }
    inline void __fastcall eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        if(IsProbing(NAME_ZoneChange)) {
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
        }
    }
    inline void __fastcall eventStopped()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Stopped),NULL);
    }
    inline void __fastcall eventLanded(FVector HitNormal)
    {
        AActor_eventLanded_Parms Parms;
        if(IsProbing(NAME_Landed)) {
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
        }
    }
    inline void __fastcall eventFalling()
    {
        if(IsProbing(NAME_Falling)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
        }
    }
    inline void __fastcall eventHitWall(FVector HitNormal, class AActor* HitWall)
    {
        AActor_eventHitWall_Parms Parms;
        if(IsProbing(NAME_HitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
        }
    }
    inline void __fastcall eventTimer(INT TimerNum)
    {
        AActor_eventTimer_Parms Parms;
        if(IsProbing(NAME_Timer)) {
        Parms.TimerNum=TimerNum;
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),&Parms);
        }
    }
    inline void __fastcall eventUsed(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUsed_Parms Parms;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Used),&Parms);
    }
    inline void __fastcall eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
    }
    inline void __fastcall eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
    }
    inline void __fastcall eventTriggerBySurface(INT SurfaceIndex)
    {
        AActor_eventTriggerBySurface_Parms Parms;
        Parms.SurfaceIndex=SurfaceIndex;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerBySurface),&Parms);
    }
    inline void __fastcall eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUnTrigger_Parms Parms;
        if(IsProbing(NAME_UnTrigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
        }
    }
    inline void __fastcall eventTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTrigger_Parms Parms;
        if(IsProbing(NAME_Trigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
        }
    }
    inline void __fastcall eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
        }
    }
    inline void __fastcall eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        if(IsProbing(NAME_LostChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
        }
    }
    inline void __fastcall eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        if(IsProbing(NAME_GainedChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
        }
    }
    inline void __fastcall eventExpired()
    {
        if(IsProbing(NAME_Expired)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Expired),NULL);
        }
    }
    inline void __fastcall eventDestroyed()
    {
        if(IsProbing(NAME_Destroyed)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
        }
    }
    inline void __fastcall eventSpawned()
    {
        if(IsProbing(NAME_Spawned)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Spawned),NULL);
        }
    }
    inline BITFIELD __fastcall eventOnEvalBones(INT Channel)
    {
        AActor_eventOnEvalBones_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(ENGINE_OnEvalBones),&Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventAnimEndEx(INT Channel)
    {
        AActor_eventAnimEndEx_Parms Parms;
        Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEndEx),&Parms);
    }
    inline void __fastcall eventAnimEnd()
    {
        if(IsProbing(NAME_AnimEnd)) {
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),NULL);
        }
    }
    DECLARE_CLASS(AActor,UObject,0|CLASS_NativeReplication)
    #include "AActor.h"
};


class ENGINE_API AInfoActor : public AActor
{
public:
    DECLARE_CLASS(AInfoActor,AActor,0)
    NO_DEFAULT_CONSTRUCTOR(AInfoActor)
};


class ENGINE_API AInfo : public AInfoActor
{
public:
    DECLARE_CLASS(AInfo,AInfoActor,0)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};


class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient)
    NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};

enum EReceiveMode
{
    RMODE_Manual            =0,
    RMODE_Event             =1,
    RMODE_MAX               =2,
};
enum ELinkMode
{
    MODE_Text               =0,
    MODE_Line               =1,
    MODE_Binary             =2,
    MODE_MAX                =3,
};

struct AInternetLink_eventResolveFailed_Parms
{
};
struct AInternetLink_eventResolved_Parms
{
    FIpAddr Addr;
};
class ENGINE_API AInternetLink : public AInternetInfo
{
public:
    BYTE LinkMode;
    INT Socket;
    INT Port;
    INT RemoteSocket;
    INT PrivateResolveInfo;
    INT DataPending;
    BYTE ReceiveMode;
    DECLARE_FUNCTION(execGetLocalIP);
    DECLARE_FUNCTION(execValidate);
    DECLARE_FUNCTION(execStringToIpAddr);
    DECLARE_FUNCTION(execIpAddrToString);
    DECLARE_FUNCTION(execGetLastError);
    DECLARE_FUNCTION(execResolve);
    DECLARE_FUNCTION(execParseURL);
    DECLARE_FUNCTION(execIsDataPending);
    inline void __fastcall eventResolveFailed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ResolveFailed),NULL);
    }
    inline void __fastcall eventResolved(FIpAddr Addr)
    {
        AInternetLink_eventResolved_Parms Parms;
        Parms.Addr=Addr;
        ProcessEvent(FindFunctionChecked(ENGINE_Resolved),&Parms);
    }
    DECLARE_CLASS(AInternetLink,AInternetInfo,0|CLASS_Transient)
    #include "AInternetLink.h"
};


struct AUdpLink_eventReceivedBinary_Parms
{
    FIpAddr Addr;
    INT Count;
    BYTE B[255];
};
struct AUdpLink_eventReceivedLine_Parms
{
    FIpAddr Addr;
    FString Line;
};
struct AUdpLink_eventReceivedText_Parms
{
    FIpAddr Addr;
    FString Text;
};
class ENGINE_API AUdpLink : public AInternetLink
{
public:
    INT BroadcastAddr;
    DECLARE_FUNCTION(execReadBinary);
    DECLARE_FUNCTION(execReadText);
    DECLARE_FUNCTION(execSendBinary);
    DECLARE_FUNCTION(execSendText);
    DECLARE_FUNCTION(execBindPort);
    inline void __fastcall eventReceivedBinary(FIpAddr Addr, INT Count, BYTE* B)
    {
        AUdpLink_eventReceivedBinary_Parms Parms;
        Parms.Addr=Addr;
        Parms.Count=Count;
        appMemcpy(&Parms.B,&B,sizeof(Parms.B));
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedBinary),&Parms);
    }
    inline void __fastcall eventReceivedLine(FIpAddr Addr, const FString& Line)
    {
        AUdpLink_eventReceivedLine_Parms Parms;
        Parms.Addr=Addr;
        Parms.Line=Line;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedLine),&Parms);
    }
    inline void __fastcall eventReceivedText(FIpAddr Addr, const FString& Text)
    {
        AUdpLink_eventReceivedText_Parms Parms;
        Parms.Addr=Addr;
        Parms.Text=Text;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedText),&Parms);
    }
    DECLARE_CLASS(AUdpLink,AInternetLink,0|CLASS_Transient)
    #include "AUdpLink.h"
};

enum ELinkState
{
    STATE_Initialized       =0,
    STATE_Ready             =1,
    STATE_Listening         =2,
    STATE_Connecting        =3,
    STATE_Connected         =4,
    STATE_ListenClosePending=5,
    STATE_ConnectClosePending=6,
    STATE_ListenClosing     =7,
    STATE_ConnectClosing    =8,
    STATE_MAX               =9,
};

struct ATcpLink_eventReceivedBinary_Parms
{
    INT Count;
    BYTE B[255];
};
struct ATcpLink_eventReceivedLine_Parms
{
    FString Line;
};
struct ATcpLink_eventReceivedText_Parms
{
    FString Text;
};
struct ATcpLink_eventClosed_Parms
{
};
struct ATcpLink_eventOpened_Parms
{
};
struct ATcpLink_eventAccepted_Parms
{
};
class ENGINE_API ATcpLink : public AInternetLink
{
public:
    BYTE LinkState;
    FIpAddr RemoteAddr;
    class UClass* AcceptClass;
    TArray<BYTE> SendFIFO;
    DECLARE_FUNCTION(execReadBinary);
    DECLARE_FUNCTION(execReadText);
    DECLARE_FUNCTION(execSendBinary);
    DECLARE_FUNCTION(execSendText);
    DECLARE_FUNCTION(execIsConnected);
    DECLARE_FUNCTION(execClose);
    DECLARE_FUNCTION(execOpen);
    DECLARE_FUNCTION(execListen);
    DECLARE_FUNCTION(execBindPort);
    inline void __fastcall eventReceivedBinary(INT Count, BYTE* B)
    {
        ATcpLink_eventReceivedBinary_Parms Parms;
        Parms.Count=Count;
        appMemcpy(&Parms.B,&B,sizeof(Parms.B));
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedBinary),&Parms);
    }
    inline void __fastcall eventReceivedLine(const FString& Line)
    {
        ATcpLink_eventReceivedLine_Parms Parms;
        Parms.Line=Line;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedLine),&Parms);
    }
    inline void __fastcall eventReceivedText(const FString& Text)
    {
        ATcpLink_eventReceivedText_Parms Parms;
        Parms.Text=Text;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceivedText),&Parms);
    }
    inline void __fastcall eventClosed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Closed),NULL);
    }
    inline void __fastcall eventOpened()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Opened),NULL);
    }
    inline void __fastcall eventAccepted()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Accepted),NULL);
    }
    DECLARE_CLASS(ATcpLink,AInternetLink,0|CLASS_Transient)
    #include "ATcpLink.h"
};


struct AMutator_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator;
    class AMutator* NextDamageMutator;
    class UClass* DefaultWeapon;
    inline void __fastcall eventPostRender(class UCanvas* Canvas)
    {
        AMutator_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    DECLARE_CLASS(AMutator,AInfo,0)
    NO_DEFAULT_CONSTRUCTOR(AMutator)
};


class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0)
    NO_DEFAULT_CONSTRUCTOR(AReplicationInfo)
};


class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit GameName;
    FStringNoInit GameClass;
    BITFIELD bTeamGame:1 GCC_PACK(4);
    BITFIELD bClassicDeathMessages:1;
    BITFIELD bStopCountDown:1;
    BITFIELD bMeshAccurateHits:1;
    INT RemainingTime GCC_PACK(4);
    INT ElapsedTime;
    INT RemainingMinute;
    FLOAT SecondCount;
    INT NumPlayers;
    INT NumSpectators;
    FLOAT UpdateTimer;
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    INT Region;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    FStringNoInit GameEndedComments;
    class APlayerReplicationInfo* PRIArray[32];
    DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication)
    #include "AGameReplicationInfo.h"
};


class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit PlayerName;
    FStringNoInit OldName;
    INT PlayerID;
    FStringNoInit TeamName;
    BYTE Team;
    INT TeamID;
    FLOAT Score;
    FLOAT Deaths;
    class UClass* VoiceType;
    class ADecoration* HasFlag;
    INT Ping;
    BYTE PacketLoss;
    BITFIELD bIsFemale:1 GCC_PACK(4);
    BITFIELD bIsABot:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bAdmin:1;
    class UTexture* TalkTexture GCC_PACK(4);
    class AZoneInfo* PlayerZone;
    class Alocationid* PlayerLocation;
    INT StartTime;
    INT TimeAcc;
    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication)
    #include "APlayerReplicationInfo.h"
};


class ENGINE_API ASavedMove : public AInfo
{
public:
    class ASavedMove* NextMove;
    FLOAT TimeStamp;
    FLOAT Delta;
    BITFIELD bRun:1 GCC_PACK(4);
    BITFIELD bDuck:1;
    BITFIELD bPressedJump:1;
    BITFIELD bFire:1;
    BITFIELD bAltFire:1;
    BITFIELD bForceFire:1;
    BITFIELD bForceAltFire:1;
    BYTE moveButtons GCC_PACK(4);
    DECLARE_CLASS(ASavedMove,AInfo,0)
    NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};

enum EAX10_Env
{
    Generic                 =0,
    PaddedCell              =1,
    Room                    =2,
    Bathroom                =3,
    LivingRoom              =4,
    StoneRoom               =5,
    Auditorium              =6,
    ConcertHall             =7,
    Cave                    =8,
    Arena                   =9,
    Hangar                  =10,
    CarpetedHallway         =11,
    Hallway                 =12,
    StoneCorridor           =13,
    Alley                   =14,
    Forrest                 =15,
    City                    =16,
    Mountain                =17,
    Quarry                  =18,
    Plain                   =19,
    ParkingLot              =20,
    SewerPipe               =21,
    UnderWater              =22,
    Drugged                 =23,
    Dizzy                   =24,
    Psychotic               =25,
};

struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    FName ZoneTag;
    FName SkyZoneTag;
    FVector ZoneGravity;
    FVector ZoneVelocity;
    FLOAT ZoneGroundFriction;
    FLOAT ZoneFluidFriction;
    FLOAT ZoneTerminalVelocity;
    FName ZonePlayerEvent;
    FName ZonePlayerExitEvent;
    INT ZonePlayerCount;
    INT NumCarcasses;
    FStringNoInit ZoneName;
    class Alocationid* locationid;
    INT MaxCarcasses;
    class USound* EntrySound;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* ExitActor;
    class ASkyZoneInfo* SkyZone;
    FLOAT DefaultVisibilityRadius;
    BITFIELD bWaterZone:1 GCC_PACK(4);
    BITFIELD bWetZone:1;
    BITFIELD bFogZone:1;
    BITFIELD bKillZone:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bGravityZone:1;
    BITFIELD bDestructive:1;
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BITFIELD bTerrainZone:1;
    BITFIELD bDistanceFog:1;
    FName MidThunderEvent GCC_PACK(4);
    FName FarThunderEvent;
    BYTE AmbientBrightness;
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    INT originalFogDistance;
    FLOAT originalFogDensity;
    FColor originalFogColor;
    FColor FogColor;
    FLOAT FogDensity;
    BYTE FogDistance;
    BITFIELD FogEnabled:1 GCC_PACK(4);
    FLOAT ClipDistance GCC_PACK(4);
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bReverbZone:1 GCC_PACK(4);
    BITFIELD bRaytraceReverb:1;
    FLOAT SpeedOfSound GCC_PACK(4);
    BYTE MasterGain;
    INT CutoffHz;
    BYTE Delay[6];
    BYTE Gain[6];
    BYTE EAX10_Environment;
    FLOAT EAX10_Volume;
    FLOAT EAX10_DecayTime;
    FLOAT EAX10_Damping;
    class UTexture* LensFlare[12];
    FLOAT LensFlareOffset[12];
    FLOAT LensFlareScale[12];
    BYTE DOT_Type;
    FLOAT DOT_Duration;
    FLOAT DOT_ExitDuration;
    FLOAT DOT_Time;
    FLOAT DOT_Damage;
    BYTE TriggerDOTType;
    BYTE MinLightCount;
    BYTE MaxLightCount;
    INT MinLightingPolyCount;
    INT MaxLightingPolyCount;
    DECLARE_FUNCTION(execZoneActors);
    inline void __fastcall eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        if(IsProbing(NAME_ActorLeaving)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
        }
    }
    inline void __fastcall eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        if(IsProbing(NAME_ActorEntered)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
        }
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0|CLASS_NativeReplication)
    #include "AZoneInfo.h"
};


struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
struct AWarpZoneInfo_eventGenerate_Parms
{
};
class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1 GCC_PACK(4);
    INT iWarpZone GCC_PACK(4);
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    inline void __fastcall eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
    }
    inline void __fastcall eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ENetMode
{
    NM_Standalone           =0,
    NM_DedicatedServer      =1,
    NM_ListenServer         =2,
    NM_Client               =3,
    NM_MAX                  =4,
};
enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_LoadingNoLogo    =2,
    LEVACT_Saving           =3,
    LEVACT_Connecting       =4,
    LEVACT_Precaching       =5,
    LEVACT_MAX              =6,
};
struct ENGINE_API FObjectiveInfo
{
    FStringNoInit Text;
    BITFIELD Complete:1 GCC_PACK(4);
};


struct ALevelInfo_eventFinishedLoading_Parms
{
};
struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    FLOAT TimeDilation;
    FLOAT TimeSeconds;
    FLOAT TimeDeltaSeconds;
    FLOAT GameTimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LocationName;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    FStringNoInit Pauser;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    BITFIELD bLonePlayer:1 GCC_PACK(4);
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bHighDetailMode:1;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    FStringNoInit Mp3 GCC_PACK(4);
    FStringNoInit Mp3Prefix;
    class UMusic* Song;
    BYTE SongSection;
    BYTE CdTrack;
    FLOAT PlayerDoppler;
    FLOAT Brightness;
    class UTexture* Screenshot;
    class UTexture* CloudcastTexture;
    class UTexture* DefaultTexture;
    INT HubStackLevel;
    BYTE LevelAction;
    INT LevelLoadState;
    INT NumSaves;
    INT NumLoads;
    BITFIELD bNeverPrecache:1 GCC_PACK(4);
    BYTE NetMode GCC_PACK(4);
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    class UClass* DefaultGameType;
    class AGameInfo* Game;
    class ANavigationPoint* NavigationPointList;
    class APawn* PawnList;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1 GCC_PACK(4);
    FLOAT NextSwitchCountdown GCC_PACK(4);
    class ASoftParticleSystem* ParticleSystems;
    class ATriggerPortal* TriggerPortals;
    INT AIProfile[8];
    FLOAT AvgAITime;
    class ABoneRope* RopeList;
    class ASpawnNotify* SpawnNotify;
    INT North;
    FObjectiveInfo ObjectiveInfos[6];
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execGetLocalURL);
    inline void __fastcall eventFinishedLoading()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FinishedLoading),NULL);
    }
    inline void __fastcall eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0)
    NO_DEFAULT_CONSTRUCTOR(ALevelInfo)
};


struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* PlayerPawn;
};
struct AGameInfo_eventPostLogin_Parms
{
    class APlayerPawn* NewPlayer;
};
struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class UClass* SpawnClass;
    class APlayerPawn* ReturnValue;
};
struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString Address;
    FString Error;
    FString FailCode;
};
struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};
struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};
struct AGameInfo_eventDetailChange_Parms
{
};
struct AGameInfo_eventGameEnding_Parms
{
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    INT ItemGoals;
    INT KillGoals;
    INT SecretGoals;
    BYTE Difficulty;
    BITFIELD bNoMonsters:1 GCC_PACK(4);
    BITFIELD bMuteSpectators:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bRestartLevel:1;
    BITFIELD bPauseable:1;
    BITFIELD bCoopWeaponMode:1;
    BITFIELD bClassicDeathMessages:1;
    BITFIELD bLowGore:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bVeryLowGore:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bDeathMatch:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bPlayDeathSequence:1;
    BITFIELD bPlayStartLevelSequence:1;
    BITFIELD bRespawnMarkers:1;
    BITFIELD bMeshAccurateHits:1;
    FLOAT AutoAim GCC_PACK(4);
    FLOAT GameSpeed;
    FLOAT StartTime;
    class UClass* DefaultPlayerClass;
    class UClass* DefaultWeapon;
    INT MaxSpectators;
    INT NumSpectators;
    FStringNoInit AdminPassword;
    FStringNoInit GamePassword;
    class UClass* ScoreboardType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit GameOptionsMenuType;
    FStringNoInit BotMenuType;
    FStringNoInit MapMenuType;
    FStringNoInit ServerMenuType;
    class UClass* HUDType;
    class UClass* MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    FStringNoInit SpecialDamageString;
    FStringNoInit SwitchLevelMessage;
    INT SentText;
    FStringNoInit DefaultPlayerName;
    FStringNoInit LeftMessage;
    FStringNoInit FailedSpawnMessage;
    FStringNoInit FailedPlaceMessage;
    FStringNoInit FailedTeamMessage;
    FStringNoInit NameChangedMessage;
    FStringNoInit EnteredMessage;
    FStringNoInit GameName;
    FStringNoInit MaxedOutMessage;
    FStringNoInit WrongPassword;
    FStringNoInit NeedPassword;
    FStringNoInit IPBanned;
    INT MaxPlayers;
    INT NumPlayers;
    INT CurrentID;
    FStringNoInit IPPolicies[50];
    class UClass* DeathMessageClass;
    class UClass* DMMessageClass;
    class UClass* MutatorClass;
    class AMutator* BaseMutator;
    class AMutator* DamageMutator;
    class UClass* WaterZoneType;
    INT DefaultPlayerState;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ServerLogName;
    INT DemoBuild;
    INT DemoHasTuts;
    FStringNoInit RandomNames[32];
    FStringNoInit SortedRandomNames[32];
    INT RandomNameIndex;
    INT UsedRandomNames[32];
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execGetNetworkNumber);
    inline void __fastcall eventAcceptInventory(class APawn* PlayerPawn)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
    }
    inline void __fastcall eventPostLogin(class APlayerPawn* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
    }
    inline class APlayerPawn* __fastcall eventLogin(const FString& Portal, const FString& Options, FString& Error, class UClass* SpawnClass)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        Parms.SpawnClass=SpawnClass;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    inline void __fastcall eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.Address=Address;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    inline FString __fastcall eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
        Error=Parms.Error;
    }
    inline void __fastcall eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    inline void __fastcall eventGameEnding()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};


class ENGINE_API AMaterial : public AInfoActor
{
public:
    class USound* HitSounds[32];
    INT HitSoundsCount;
    FName HitTrigger;
    class UClass* BulletHitEffect;
    class UClass* BulletHitSpawn;
    FDamageCategoryEffectStruct DamageCategoryEffect[10];
    class USound* FootstepSounds[32];
    INT FootstepSoundsCount;
    FName FootstepTrigger;
    BITFIELD FootstepSoundWhenCrouching:1 GCC_PACK(4);
    class USound* FootstepLandSound GCC_PACK(4);
    FLOAT Friction;
    BITFIELD bClimbable:1 GCC_PACK(4);
    BITFIELD bLockClimbers:1;
    BITFIELD bPenetrable:1;
    BITFIELD bIsMirror:1;
    class UTexture* ChangeTextureOnHit GCC_PACK(4);
    FVector AppliedForce;
    DECLARE_CLASS(AMaterial,AInfoActor,0)
    NO_DEFAULT_CONSTRUCTOR(AMaterial)
};


class ENGINE_API ALight : public AInfoActor
{
public:
    DECLARE_CLASS(ALight,AInfoActor,0)
    NO_DEFAULT_CONSTRUCTOR(ALight)
};

struct ENGINE_API FLensFlare
{
    class UTexture* FlareTexture;
    FLOAT Offset;
    FLOAT Scale;
    INT AdditionalCopies;
    FLOAT RotationFactor;
    FLOAT RotationVelocity;
    FLOAT DistanceScaleFactor;
    FLOAT OriginScale;
    FLOAT InnerRadiusScale;
    FLOAT OuterRadiusScale;
    BITFIELD UseCone:1 GCC_PACK(4);
};


class ENGINE_API AFlareLight : public ALight
{
public:
    FLensFlare LensFlares[16];
    FLOAT InnerRadius;
    FLOAT OuterRadius;
    BITFIELD ActorsBlock:1 GCC_PACK(4);
    BITFIELD MeshAccurate:1;
    DECLARE_CLASS(AFlareLight,ALight,0)
    NO_DEFAULT_CONSTRUCTOR(AFlareLight)
};


class ENGINE_API ATriggerLight : public ALight
{
public:
    FLOAT ChangeTime;
    BITFIELD bInitiallyOn:1 GCC_PACK(4);
    BITFIELD bDelayFullOn:1;
    FLOAT RemainOnTime GCC_PACK(4);
    FLOAT InitialBrightness;
    FLOAT Alpha;
    FLOAT Direction;
    class AActor* SavedTrigger;
    FLOAT poundTime;
    DECLARE_CLASS(ATriggerLight,ALight,0)
    NO_DEFAULT_CONSTRUCTOR(ATriggerLight)
};


class ENGINE_API ADamageType : public AInfoActor
{
public:
    BITFIELD bGibDamage:1 GCC_PACK(4);
    BITFIELD bBloodEffect:1;
    FStringNoInit DamageName GCC_PACK(4);
    FStringNoInit DeathMessage;
    class UTexture* Icon;
    DECLARE_CLASS(ADamageType,AInfoActor,0)
    NO_DEFAULT_CONSTRUCTOR(ADamageType)
};


class ENGINE_API AKeypoint : public AInfoActor
{
public:
    DECLARE_CLASS(AKeypoint,AInfoActor,0)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API AInterpolationStation : public AKeypoint
{
public:
    DECLARE_CLASS(AInterpolationStation,AKeypoint,0)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationStation)
};


class ENGINE_API Alocationid : public AKeypoint
{
public:
    FStringNoInit LocationName;
    FLOAT Radius;
    class Alocationid* NextLocation;
    DECLARE_CLASS(Alocationid,AKeypoint,0)
    NO_DEFAULT_CONSTRUCTOR(Alocationid)
};

enum EMotionType
{
    MOTION_Linear           =0,
    MOTION_Spline           =1,
    MOTION_MAX              =2,
};

class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    FLOAT RateModifier;
    BITFIELD RateIsTime:1 GCC_PACK(4);
    BITFIELD RateIsSpeed:1;
    FLOAT GameSpeedModifier GCC_PACK(4);
    FLOAT FovModifier;
    BITFIELD bSkipNextPath:1 GCC_PACK(4);
    FLOAT ScreenFlashScale GCC_PACK(4);
    FVector ScreenFlashFog;
    FName TriggerEvent;
    BITFIELD InterpolateRotation:1 GCC_PACK(4);
    BYTE MotionType GCC_PACK(4);
    class AInterpolationPoint* Prev;
    class AInterpolationPoint* Next;
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationPoint)
};


class ENGINE_API APolyMarker : public AKeypoint
{
public:
    DECLARE_CLASS(APolyMarker,AKeypoint,0)
    NO_DEFAULT_CONSTRUCTOR(APolyMarker)
};


class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};


struct AMeshEffect_eventEvalVert_Parms
{
    INT Channel;
    class AActor* A;
    FVector V;
};
struct AMeshEffect_eventEvalBones_Parms
{
    INT Channel;
    class AActor* A;
};
class ENGINE_API AMeshEffect : public AInfoActor
{
public:
    BITFIELD bAffectsBones:1 GCC_PACK(4);
    BITFIELD bAffectsVerts:1;
    inline void __fastcall eventEvalVert(INT Channel, class AActor* A, FVector& V)
    {
        AMeshEffect_eventEvalVert_Parms Parms;
        Parms.Channel=Channel;
        Parms.A=A;
        Parms.V=V;
        ProcessEvent(FindFunctionChecked(ENGINE_EvalVert),&Parms);
        V=Parms.V;
    }
    inline void __fastcall eventEvalBones(INT Channel, class AActor* A)
    {
        AMeshEffect_eventEvalBones_Parms Parms;
        Parms.Channel=Channel;
        Parms.A=A;
        ProcessEvent(FindFunctionChecked(ENGINE_EvalBones),&Parms);
    }
    DECLARE_CLASS(AMeshEffect,AInfoActor,0)
    NO_DEFAULT_CONSTRUCTOR(AMeshEffect)
};


struct ASpawnNotify_eventSpawnNotification_Parms
{
    class AActor* A;
    class AActor* ReturnValue;
};
class ENGINE_API ASpawnNotify : public AInfoActor
{
public:
    class UClass* ActorClass;
    class ASpawnNotify* Next;
    inline class AActor* __fastcall eventSpawnNotification(class AActor* A)
    {
        ASpawnNotify_eventSpawnNotification_Parms Parms;
        Parms.ReturnValue=0;
        Parms.A=A;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnNotification),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ASpawnNotify,AInfoActor,0)
    NO_DEFAULT_CONSTRUCTOR(ASpawnNotify)
};


struct ANavigationPoint_eventAccept_Parms
{
    class AActor* Incoming;
    class AActor* Source;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventSpecialCost_Parms
{
    class APawn* Seeker;
    INT ReturnValue;
};
class ENGINE_API ANavigationPoint : public AInfoActor
{
public:
    FName ownerTeam;
    BITFIELD taken:1 GCC_PACK(4);
    INT upstreamPaths[16] GCC_PACK(4);
    INT Paths[16];
    INT PrunedPaths[16];
    class ANavigationPoint* VisNoReachPaths[16];
    INT visitedWeight;
    class AActor* RouteCache;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* startPath;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    BITFIELD bPlayerOnly:1 GCC_PACK(4);
    BITFIELD bEndPoint:1;
    BITFIELD bEndPointOnly:1;
    BITFIELD bSpecialCost:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bCoverPoint:1;
    BITFIELD bDuckPoint:1;
    BITFIELD bSnipePoint:1;
    BITFIELD bExitOnCantSee:1;
    BITFIELD bExitOnDistance:1;
    FLOAT ExitDistance GCC_PACK(4);
    FLOAT OffsetDistance;
    BITFIELD bExitWhenClose:1 GCC_PACK(4);
    FName BreakConnectTag GCC_PACK(4);
    DECLARE_FUNCTION(execdescribeSpec);
    inline BITFIELD __fastcall eventAccept(class AActor* Incoming, class AActor* Source)
    {
        ANavigationPoint_eventAccept_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Incoming=Incoming;
        Parms.Source=Source;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
        return Parms.ReturnValue;
    }
    inline INT __fastcall eventSpecialCost(class APawn* Seeker)
    {
        ANavigationPoint_eventSpecialCost_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Seeker=Seeker;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ANavigationPoint,AInfoActor,0)
    NO_DEFAULT_CONSTRUCTOR(ANavigationPoint)
};


class ENGINE_API ALiftExit : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    DECLARE_CLASS(ALiftExit,ANavigationPoint,0)
    NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};


class ENGINE_API ALiftCenter : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    FLOAT MaxZDiffAdd;
    FLOAT MaxDist2D;
    FVector LiftOffset;
    DECLARE_CLASS(ALiftCenter,ANavigationPoint,0)
    NO_DEFAULT_CONSTRUCTOR(ALiftCenter)
};


class ENGINE_API AWarpZoneMarker : public ANavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(AWarpZoneMarker,ANavigationPoint,0)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneMarker)
};


class ENGINE_API AButtonMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(AButtonMarker,ANavigationPoint,0)
    NO_DEFAULT_CONSTRUCTOR(AButtonMarker)
};


class ENGINE_API ATriggerMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(ATriggerMarker,ANavigationPoint,0)
    NO_DEFAULT_CONSTRUCTOR(ATriggerMarker)
};


class ENGINE_API AInventorySpot : public ANavigationPoint
{
public:
    class AInventory* markedItem;
    DECLARE_CLASS(AInventorySpot,ANavigationPoint,0)
    NO_DEFAULT_CONSTRUCTOR(AInventorySpot)
};


class ENGINE_API APlayerStart : public ANavigationPoint
{
public:
    BYTE TeamNumber;
    BITFIELD bSinglePlayerStart:1 GCC_PACK(4);
    BITFIELD bCoopStart:1;
    BITFIELD bEnabled:1;
    DECLARE_CLASS(APlayerStart,ANavigationPoint,0)
    NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};


class ENGINE_API ATeleporter : public ANavigationPoint
{
public:
    FStringNoInit URL;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    BITFIELD MusicChange:1;
    FStringNoInit MusicFilename GCC_PACK(4);
    FVector TargetVelocity;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ANavigationPoint,0)
    NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0)
    NO_DEFAULT_CONSTRUCTOR(APathNode)
};


struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AHUD : public AInfoActor
{
public:
    INT HudMode;
    INT Crosshair;
    FStringNoInit HUDConfigWindowType;
    class AMutator* HUDMutator;
    class APlayerPawn* PlayerOwner;
    FLOAT HUDScaleX;
    FLOAT HUDScaleY;
    INT currentInventoryCategory;
    INT currentInventoryItem;
    FLOAT InventoryGoAwayDelay;
    INT visibleCategories;
    BITFIELD bDrawObjectives:1 GCC_PACK(4);
    FColor WhiteColor GCC_PACK(4);
    FColor RedColor;
    FColor LightGreenColor;
    FColor DarkGreenColor;
    FColor GreenColor;
    FColor CyanColor;
    FColor UnitColor;
    FColor BlueColor;
    FColor GoldColor;
    FColor PurpleColor;
    FColor TurqColor;
    FColor GrayColor;
    FColor FaceColor;
    FColor LightBlueColor;
    FColor DarkBlueColor;
    FColor BlackColor;
    FColor OrangeColor;
    inline void __fastcall eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    inline void __fastcall eventPreRender(class UCanvas* Canvas)
    {
        AHUD_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    DECLARE_CLASS(AHUD,AInfoActor,0|CLASS_Config)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


class ENGINE_API ATriggers : public AInfoActor
{
public:
    DECLARE_CLASS(ATriggers,AInfoActor,0)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_PlayerProximityAndUse=5,
    TT_PlayerProximityAndLookUse=6,
    TT_TagProximity         =7,
    TT_EventProximity       =8,
    TT_PlayerProximityAndLook=9,
    TT_MAX                  =10,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType;
    FName LookUseTags[16];
    FName LookUseEvents[16];
    class AActor* LookUseTriggered[16];
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bUnTriggerOnceOnly:1;
    BITFIELD bTriggered:1;
    BITFIELD bUnTriggered:1;
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType GCC_PACK(4);
    class UClass* ClassProximityType2;
    FName TagEventProximity;
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    FName UntriggerEvent;
    BITFIELD bTriggerWhenCrouched:1 GCC_PACK(4);
    class AActor* TriggerActor GCC_PACK(4);
    class AActor* TriggerActor2;
    BITFIELD PlayerTriggered:1 GCC_PACK(4);
    INT Touches GCC_PACK(4);
    DECLARE_CLASS(ATrigger,ATriggers,0)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};

enum EConnectionStatus
{
    EDNC_CONNECTING         =0,
    EDNC_CONNECTED          =1,
    EDNC_DISCONNECTED       =2,
    EDNC_MAX                =3,
};

struct ADukeNet_eventdncServerCommand_Parms
{
    FString Command;
};
class ENGINE_API ADukeNet : public AInfoActor
{
public:
    FStringNoInit CDKey;
    FStringNoInit DisconnectReason;
    FStringNoInit DefaultServerAddress;
    INT DefaultServerPort;
    BYTE ConnectionState;
    DECLARE_FUNCTION(execURLDownloadBanner);
    DECLARE_FUNCTION(execdncCommand);
    DECLARE_FUNCTION(execdncUpdate);
    DECLARE_FUNCTION(execdncShutdown);
    DECLARE_FUNCTION(execdncInitialize);
    inline void __fastcall eventdncServerCommand(const FString& Command)
    {
        ADukeNet_eventdncServerCommand_Parms Parms;
        Parms.Command=Command;
        ProcessEvent(FindFunctionChecked(ENGINE_dncServerCommand),&Parms);
    }
    DECLARE_CLASS(ADukeNet,AInfoActor,0|CLASS_Config)
    #include "ADukeNet.h"
};

enum ELodMode
{
    LOD_Full                =0,
    LOD_StopMinimum         =1,
    LOD_Disabled            =2,
    LOD_MAX                 =3,
};

class ENGINE_API ARenderActor : public AActor
{
public:
    BITFIELD bEMPulsed:1 GCC_PACK(4);
    BITFIELD bSteelSkin:1;
    BITFIELD bSpecialLook:1;
    BITFIELD bHighDetail:1;
    BITFIELD bCollisionForRenderBox:1;
    class UTexture* MultiSkins[8] GCC_PACK(4);
    FLOAT LODBias;
    BYTE LodMode;
    FLOAT LodScale;
    FLOAT LodOffset;
    FLOAT VisibilityRadius;
    FLOAT VisibilityHeight;
    BITFIELD bUseViewportForZ:1 GCC_PACK(4);
    FLOAT SpriteProjForward GCC_PACK(4);
    BITFIELD bOwnerNoSee:1 GCC_PACK(4);
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bOwnerGetFrameOnly:1;
    BITFIELD bHeated:1;
    BITFIELD bHeatNoHide:1;
    FLOAT HeatIntensity GCC_PACK(4);
    FLOAT HeatRadius;
    FLOAT HeatFalloff;
    INT net_bAnimFinished[4];
    INT net_bAnimLoop[4];
    INT net_bAnimNotify[4];
    INT net_bAnimBlendAdditive[4];
    FName net_AnimSequence[4];
    FLOAT net_AnimFrame[4];
    FLOAT net_AnimRate[4];
    FLOAT net_AnimBlend[4];
    FLOAT net_TweenRate[4];
    FLOAT net_AnimLast[4];
    FLOAT net_AnimMinRate[4];
    FLOAT net_OldAnimRate[4];
    FPlane net_SimAnim[4];
    BITFIELD bExaminable:1 GCC_PACK(4);
    BITFIELD bNoFOVOnExamine:1;
    FLOAT ExamineFOV GCC_PACK(4);
    FLOAT ExamineRadius;
    BITFIELD bExamineRadiusCheck:1 GCC_PACK(4);
    INT Health GCC_PACK(4);
    FStringNoInit ItemName;
    BITFIELD bNotTargetable:1 GCC_PACK(4);
    BITFIELD bTakeMomentum:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bClientUse:1;
    BITFIELD bBurning:1;
    BITFIELD bFlammable:1;
    BITFIELD bIgnitable:1;
    class AActorImmolation* ImmolationActor GCC_PACK(4);
    class UClass* ImmolationClass;
    BITFIELD bFreezable:1 GCC_PACK(4);
    class AActorFreeze* FreezeActor GCC_PACK(4);
    class UClass* FreezeClass;
    DECLARE_CLASS(ARenderActor,AActor,0|CLASS_NativeReplication)
    #include "ARenderActor.h"
};

enum EIntelligence
{
    BRAINS_NONE             =0,
    BRAINS_REPTILE          =1,
    BRAINS_MAMMAL           =2,
    BRAINS_HUMAN            =3,
    BRAINS_MAX              =4,
};
enum EAttitude
{
    ATTITUDE_Fear           =0,
    ATTITUDE_Hate           =1,
    ATTITUDE_Frenzy         =2,
    ATTITUDE_Threaten       =3,
    ATTITUDE_Ignore         =4,
    ATTITUDE_Friendly       =5,
    ATTITUDE_Follow         =6,
    ATTITUDE_MAX            =7,
};
enum ESwimDepth
{
    Swim_None               =0,
    Swim_Shallow            =1,
    Swim_Deep               =2,
    Swim_MAX                =3,
};
enum ELadderState
{
    LADDER_None             =0,
    LADDER_Forward          =1,
    LADDER_Forward_Right    =2,
    LADDER_Right            =3,
    LADDER_Backward_Right   =4,
    LADDER_Backward         =5,
    LADDER_Backward_Left    =6,
    LADDER_Left             =7,
    LADDER_Forward_Left     =8,
    LADDER_Num_Directions   =9,
    LADDER_MAX              =10,
};
enum ERopeClimbState
{
    RS_ClimbNone            =0,
    RS_ClimbUp              =1,
    RS_ClimbDown            =2,
    RS_MAX                  =3,
};
enum EUpperBodyState
{
    UB_Relaxed              =0,
    UB_Alert                =1,
    UB_WeaponDown           =2,
    UB_WeaponUp             =3,
    UB_Firing               =4,
    UB_Reloading            =5,
    UB_ReloadFinished       =6,
    UB_ShieldDown           =7,
    UB_ShieldUp             =8,
    UB_ShieldAlert          =9,
    UB_HoldOneHanded        =10,
    UB_HoldTwoHanded        =11,
    UB_Turret               =12,
    UB_MAX                  =13,
};
enum EMovementState
{
    MS_None                 =0,
    MS_Waiting              =1,
    MS_Walking              =2,
    MS_Running              =3,
    MS_RopeIdle             =4,
    MS_RopeClimbUp          =5,
    MS_RopeClimbDown        =6,
    MS_LadderIdle           =7,
    MS_LadderClimbUp        =8,
    MS_LadderClimbDown      =9,
    MS_MAX                  =10,
};
enum EPostureState
{
    PS_None                 =0,
    PS_Standing             =1,
    PS_Crouching            =2,
    PS_Jumping              =3,
    PS_Swimming             =4,
    PS_Ladder               =5,
    PS_Rope                 =6,
    PS_Turret               =7,
    PS_MAX                  =8,
};
enum EControlState
{
    CS_None                 =0,
    CS_Normal               =1,
    CS_Flying               =2,
    CS_Swimming             =3,
    CS_Dead                 =4,
    CS_Spectating           =5,
    CS_Stasis               =6,
    CS_Rope                 =7,
    CS_Ladder               =8,
    CS_MAX                  =9,
};
enum EStateChange
{
    SC_Enter                =0,
    SC_Exit                 =1,
    SC_MAX                  =2,
};
enum EPawnBodyPart
{
    BODYPART_Default        =0,
    BODYPART_Head           =1,
    BODYPART_Chest          =2,
    BODYPART_Stomach        =3,
    BODYPART_Crotch         =4,
    BODYPART_ShoulderLeft   =5,
    BODYPART_ShoulderRight  =6,
    BODYPART_HandLeft       =7,
    BODYPART_HandRight      =8,
    BODYPART_KneeLeft       =9,
    BODYPART_KneeRight      =10,
    BODYPART_FootLeft       =11,
    BODYPART_FootRight      =12,
    BODYPART_MAX            =13,
};
struct ENGINE_API FSPawnDOT
{
    FLOAT Damage;
    FLOAT Time;
    FLOAT Counter;
    FLOAT Duration;
    FLOAT LastDamageTime;
};


struct APawn_eventAnimTick_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventUpdateTactics_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventAlterDestination_Parms
{
};
struct APawn_eventBlockedByMover_Parms
{
};
struct APawn_eventSawEnemy_Parms
{
};
struct APawn_eventEnemyIsVisible_Parms
{
};
struct APawn_eventEnemyNotVisible_Parms
{
};
struct APawn_eventSeeMonster_Parms
{
    class AActor* Seen;
};
struct APawn_eventSeePlayer_Parms
{
    class AActor* Seen;
};
struct APawn_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
};
struct APawn_eventClientHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
};
struct APawn_eventWalkTexture_Parms
{
    class UTexture* Texture;
    FVector StepLocation;
    FVector StepNormal;
};
struct APawn_eventHeadZoneChange_Parms
{
    class AZoneInfo* newHeadZone;
};
struct APawn_eventFootZoneChange_Parms
{
    class AZoneInfo* newFootZone;
};
struct APawn_eventLongFall_Parms
{
};
struct APawn_eventMayFall_Parms
{
};
struct APawn_eventPlayerTimeout_Parms
{
};
struct APawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
    class UClass* OptionalClass;
};
struct APawn_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventClientMessage_Parms
{
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventUpdateTimers_Parms
{
    FLOAT DeltaSeconds;
};
struct APawn_eventSetRopeClimbState_Parms
{
    BYTE NewState;
};
struct APawn_eventSetLadderState_Parms
{
    BYTE NewState;
};
class ENGINE_API APawn : public ARenderActor
{
public:
    BYTE ControlState;
    BYTE PostureState;
    BYTE MovementState;
    BYTE UpperBodyState;
    BYTE RopeClimbState;
    BYTE LadderState;
    class APawn* nextPawn;
    FLOAT Skill;
    BITFIELD bSnatched:1 GCC_PACK(4);
    class AActor* Enemy GCC_PACK(4);
    BITFIELD bFixedEnemy:1 GCC_PACK(4);
    BITFIELD bRotateToEnemy:1;
    BITFIELD bFromWall:1;
    BITFIELD bHunting:1;
    BITFIELD bJumpOffPawn:1;
    BITFIELD bShootSpecial:1;
    BITFIELD bAdvancedTactics:1;
    FLOAT MeleeRange GCC_PACK(4);
    FVector LastSeenPos;
    FVector LastSeeingPos;
    FLOAT LastSeenTime;
    FLOAT CombatStyle;
    FLOAT Alertness;
    FName NextState;
    FName NextLabel;
    BYTE PlayerReStartState;
    BITFIELD bMuffledHearing:1 GCC_PACK(4);
    FLOAT HearThroughWallDist GCC_PACK(4);
    BITFIELD bNoHeightMod:1 GCC_PACK(4);
    BYTE AttitudeToPlayer GCC_PACK(4);
    BYTE Intelligence;
    FLOAT HearingThreshold;
    FVector noise1spot;
    FLOAT noise1time;
    FLOAT noise1loudness;
    FVector noise2spot;
    FLOAT noise2time;
    FLOAT noise2loudness;
    BYTE Visibility;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT SightCounter;
    BITFIELD bNoRotConstraint:1 GCC_PACK(4);
    BITFIELD bCanStrafe:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bCanDoSpecial:1;
    INT EgoKillValue GCC_PACK(4);
    BITFIELD bFlyingVehicle:1 GCC_PACK(4);
    FStringNoInit CharacterName GCC_PACK(4);
    FLOAT Energy;
    FLOAT EnergyDrain;
    INT Cash;
    INT DieCount;
    INT KillCount;
    BITFIELD bIsHuman:1 GCC_PACK(4);
    BITFIELD bIsPlayer:1;
    BITFIELD bIsFemale:1;
    BITFIELD bTakeDamage:1;
    class UClass* SearchableItems[5] GCC_PACK(4);
    class AWeapon* Weapon;
    class AWeapon* LastWeapon;
    class AInventory* SelectedItem;
    class AInventory* UsedItem;
    class AInventory* ShieldItem;
    class AInventory* OldUsedItem;
    class ADecoration* CarriedDecoration;
    BITFIELD bGodMode:1 GCC_PACK(4);
    class UClass* DropWhenKilled GCC_PACK(4);
    FLOAT UseDistance;
    BITFIELD bNeverSwitchOnPickup:1 GCC_PACK(4);
    BITFIELD bAutoActivate:1;
    FLOAT MeleeDamageMultiplier GCC_PACK(4);
    class USound* GrabSound;
    class USound* TossSound;
    class ADecoration* MountedDecorations[6];
    class UClass* Accessories[6];
    BITFIELD ShieldProtection:1 GCC_PACK(4);
    BITFIELD bWeaponsActive:1;
    class UClass* LastWeaponClass GCC_PACK(4);
    class AWeapon* PendingWeapon;
    FLOAT RemainingAir;
    FLOAT LastPainSound;
    FLOAT DamageScaling;
    FName DamageBone;
    INT CurrentAmmoMode;
    BITFIELD NoDecorationPain:1 GCC_PACK(4);
    BITFIELD bAlienBlood:1;
    FStringNoInit BloodHitDecalName GCC_PACK(4);
    class UClass* BloodHitDecal;
    FStringNoInit BloodPuffName;
    class UClass* BloodPuff;
    FSPawnDOT PawnDOT[8];
    FVector DamageLocation;
    INT ExplosiveArea;
    BITFIELD bHumanSkeleton:1 GCC_PACK(4);
    BITFIELD bForcePeriphery:1;
    BITFIELD bForceHitWall:1;
    FLOAT TopAnimBlend GCC_PACK(4);
    FLOAT DesiredTopAnimBlend;
    FLOAT TopAnimBlendRate;
    FLOAT BottomAnimBlend;
    FLOAT DesiredBottomAnimBlend;
    FLOAT BottomAnimBlendRate;
    FLOAT SpecialAnimBlend;
    FLOAT DesiredSpecialAnimBlend;
    FLOAT SpecialAnimBlendRate;
    FLOAT FaceAnimBlend;
    FLOAT DesiredFaceAnimBlend;
    FLOAT FaceAnimBlendRate;
    BITFIELD bLasseizFaireBlending:1 GCC_PACK(4);
    BITFIELD bBlinked:1;
    FLOAT LastBlinkTime GCC_PACK(4);
    FLOAT BlinkTimer;
    FLOAT CurrentBlinkAlpha;
    FLOAT BlinkRateBase;
    FLOAT BlinkRateRandom;
    FLOAT BlinkDurationBase;
    FLOAT BlinkDurationRandom;
    FVector BlinkEyelidPosition;
    FLOAT BlinkChangeTime;
    FLOAT SoundSyncScale_Jaw;
    FLOAT SoundSyncScale_MouthCorner;
    FLOAT SoundSyncScale_Lip_U;
    FLOAT SoundSyncScale_Lip_L;
    class APawnTrackingInfo* EyeTracking;
    class APawnTrackingInfo* HeadTracking;
    FVector HeadTrackingLocation;
    class AActor* HeadTrackingActor;
    class APawnTrackingInfo* TorsoTracking;
    FRotator LastRotDirection;
    BITFIELD TorsoSlerping:1 GCC_PACK(4);
    INT MaxAbdomenViewPitchUp GCC_PACK(4);
    INT MaxAbdomenViewPitchDown;
    INT MaxAbdomenPitchUp;
    INT MaxAbdomenPitchDown;
    FLOAT AlertTimer;
    BYTE FacialExpression;
    FName ExpandedBones[6];
    FLOAT ExpandedScales[6];
    BITFIELD bExpandedCollision:1 GCC_PACK(4);
    BITFIELD bExpanding:1;
    FLOAT ExpandTimeRemaining GCC_PACK(4);
    FLOAT ExpandTimeEnd;
    FLOAT ExpandCounter;
    FLOAT ShrinkTime;
    FLOAT ShrinkCounter;
    BITFIELD bPuddleArea:1 GCC_PACK(4);
    class UClass* PuddleSplashStepEffect GCC_PACK(4);
    class UClass* SplashStepEffect;
    class UClass* FireStepEffect;
    BYTE bUse;
    BYTE bZoom;
    BYTE bRun;
    BYTE bLook;
    BYTE bDuck;
    BYTE bSnapLevel;
    BYTE bStrafe;
    BYTE bFire;
    BYTE bAltFire;
    BYTE bFreeLook;
    BYTE bExtra0;
    BYTE bExtra1;
    BYTE bExtra2;
    BYTE bExtra3;
    FLOAT GroundSpeed;
    FLOAT AirSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT MaxStepHeight;
    FLOAT AirControl;
    FLOAT MoveTimer;
    class AActor* MoveTarget;
    class AActor* FaceTarget;
    FVector Destination;
    FVector Focus;
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    class AActor* SpecialGoal;
    FLOAT SpecialPause;
    class ANavigationPoint* RouteCache[16];
    FPointRegion FootRegion;
    FPointRegion HeadRegion;
    BITFIELD bBackPedaling:1 GCC_PACK(4);
    BITFIELD bWasBackPedaling:1;
    class UClass* LastWalkMaterial GCC_PACK(4);
    BITFIELD bIsWalking:1 GCC_PACK(4);
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bHitSlopedWall:1;
    BITFIELD bJustLanded:1;
    BITFIELD bWarping:1;
    BITFIELD bIsMultiSkinned:1;
    BITFIELD bCountJumps:1;
    BITFIELD bUseZoneVelSwim:1;
    BITFIELD bOnWire:1;
    class AActor* OnWireBackwardsActor GCC_PACK(4);
    class AActor* OnWireForwardsActor;
    FLOAT OnWireAlpha;
    FLOAT WaterSpeed;
    BITFIELD bUpAndOut:1 GCC_PACK(4);
    BITFIELD bDrowning:1;
    FLOAT UnderWaterTime GCC_PACK(4);
    FVector Floor;
    FLOAT AvgPhysicsTime;
    FLOAT MinHitWall;
    BITFIELD bOnLadder:1 GCC_PACK(4);
    BITFIELD bOnRope:1;
    class APlayerReplicationInfo* PlayerReplicationInfo GCC_PACK(4);
    class UClass* PlayerReplicationInfoClass;
    FStringNoInit MenuName;
    FStringNoInit NameArticle;
    FLOAT OldMessageTime;
    FLOAT SoundDampening;
    FStringNoInit VoiceType;
    class USound* HitSound1;
    class USound* HitSound2;
    class USound* Land;
    class USound* Die;
    class USound* JumpSound;
    class USound* ExitSplash;
    class USound* BigSplash;
    class USound* LittleSplash[2];
    class USound* WaterAmbience;
    FLOAT WaterAmbientTime;
    FLOAT SplashTime;
    class USound* GibbySound[3];
    BITFIELD bBehindView:1 GCC_PACK(4);
    FRotator ViewRotation GCC_PACK(4);
    INT ViewRotationInt;
    FLOAT OrthoZoom;
    FLOAT FovAngle;
    FLOAT BaseEyeHeight;
    FLOAT EyeHeight;
    class ADecal* Shadow;
    BITFIELD bUpdatingDisplay:1 GCC_PACK(4);
    BITFIELD bViewTarget:1;
    FVector WalkBob GCC_PACK(4);
    DECLARE_FUNCTION(execClientHearSound);
    DECLARE_FUNCTION(execStopWaiting);
    DECLARE_FUNCTION(execPickAnyTarget);
    DECLARE_FUNCTION(execPickTarget);
    DECLARE_FUNCTION(execPickWallAdjust);
    DECLARE_FUNCTION(execWaitForLanding);
    DECLARE_FUNCTION(execFindStairRotation);
    DECLARE_FUNCTION(execFindBestInventoryPath);
    DECLARE_FUNCTION(execactorReachable);
    DECLARE_FUNCTION(execpointReachable);
    DECLARE_FUNCTION(execClearPaths);
    DECLARE_FUNCTION(execFindRandomDest);
    DECLARE_FUNCTION(execFindPathToward);
    DECLARE_FUNCTION(execFindPathTo);
    DECLARE_FUNCTION(execCanSee);
    DECLARE_FUNCTION(execLineOfSightTo);
    DECLARE_FUNCTION(execEAdjustJump);
    DECLARE_FUNCTION(execTurnToward);
    DECLARE_FUNCTION(execTurnTo);
    DECLARE_FUNCTION(execStrafeFacing);
    DECLARE_FUNCTION(execStrafeTo);
    DECLARE_FUNCTION(execMoveToward);
    DECLARE_FUNCTION(execMoveTo);
    DECLARE_FUNCTION(execRemovePawn);
    DECLARE_FUNCTION(execAddPawn);
    inline void __fastcall eventAnimTick(FLOAT DeltaTime)
    {
        APawn_eventAnimTick_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimTick),&Parms);
    }
    inline void __fastcall eventUpdateTactics(FLOAT DeltaTime)
    {
        APawn_eventUpdateTactics_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateTactics),&Parms);
    }
    inline void __fastcall eventAlterDestination()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AlterDestination),NULL);
    }
    inline void __fastcall eventBlockedByMover()
    {
        if(IsProbing(NAME_BlockedByMover)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BlockedByMover),NULL);
        }
    }
    inline void __fastcall eventSawEnemy()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SawEnemy),NULL);
    }
    inline void __fastcall eventEnemyIsVisible()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EnemyIsVisible),NULL);
    }
    inline void __fastcall eventEnemyNotVisible()
    {
        if(IsProbing(NAME_EnemyNotVisible)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EnemyNotVisible),NULL);
        }
    }
    inline void __fastcall eventSeeMonster(class AActor* Seen)
    {
        APawn_eventSeeMonster_Parms Parms;
        if(IsProbing(NAME_SeeMonster)) {
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeeMonster),&Parms);
        }
    }
    inline void __fastcall eventSeePlayer(class AActor* Seen)
    {
        APawn_eventSeePlayer_Parms Parms;
        if(IsProbing(NAME_SeePlayer)) {
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeePlayer),&Parms);
        }
    }
    inline void __fastcall eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
    {
        APawn_eventHearNoise_Parms Parms;
        if(IsProbing(NAME_HearNoise)) {
        Parms.Loudness=Loudness;
        Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
        }
    }
    inline void __fastcall eventClientHearSound(class AActor* Actor, INT Id, class USound* S, FVector SoundLocation, FVector Parameters)
    {
        APawn_eventClientHearSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.Id=Id;
        Parms.S=S;
        Parms.SoundLocation=SoundLocation;
        Parms.Parameters=Parameters;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
    }
    inline void __fastcall eventWalkTexture(class UTexture* Texture, FVector StepLocation, FVector StepNormal)
    {
        APawn_eventWalkTexture_Parms Parms;
        Parms.Texture=Texture;
        Parms.StepLocation=StepLocation;
        Parms.StepNormal=StepNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_WalkTexture),&Parms);
    }
    inline void __fastcall eventHeadZoneChange(class AZoneInfo* newHeadZone)
    {
        APawn_eventHeadZoneChange_Parms Parms;
        if(IsProbing(NAME_HeadZoneChange)) {
        Parms.newHeadZone=newHeadZone;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadZoneChange),&Parms);
        }
    }
    inline void __fastcall eventFootZoneChange(class AZoneInfo* newFootZone)
    {
        APawn_eventFootZoneChange_Parms Parms;
        if(IsProbing(NAME_FootZoneChange)) {
        Parms.newFootZone=newFootZone;
        ProcessEvent(FindFunctionChecked(ENGINE_FootZoneChange),&Parms);
        }
    }
    inline void __fastcall eventLongFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
    }
    inline void __fastcall eventMayFall()
    {
        if(IsProbing(NAME_MayFall)) {
        ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
        }
    }
    inline void __fastcall eventPlayerTimeout()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTimeout),NULL);
    }
    inline void __fastcall eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        APawn_eventUpdateEyeHeight_Parms Parms;
        if(IsProbing(NAME_UpdateEyeHeight)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
        }
    }
    inline void __fastcall eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, class UClass* OptionalClass)
    {
        APawn_eventReceiveLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        Parms.OptionalClass=OptionalClass;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
    }
    inline void __fastcall eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventTeamMessage_Parms Parms;
        Parms.PRI=PRI;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=bBeep;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
    }
    inline void __fastcall eventClientMessage(const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=bBeep;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    inline void __fastcall eventUpdateTimers(FLOAT DeltaSeconds)
    {
        APawn_eventUpdateTimers_Parms Parms;
        Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateTimers),&Parms);
    }
    inline void __fastcall eventSetRopeClimbState(BYTE NewState)
    {
        APawn_eventSetRopeClimbState_Parms Parms;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(ENGINE_SetRopeClimbState),&Parms);
    }
    inline void __fastcall eventSetLadderState(BYTE NewState)
    {
        APawn_eventSetLadderState_Parms Parms;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(ENGINE_SetLadderState),&Parms);
    }
    DECLARE_CLASS(APawn,ARenderActor,0|CLASS_Config|CLASS_NativeReplication)
    #include "APawn.h"
};

enum EShieldMode
{
    SM_Hold                 =0,
    SM_Toggle               =1,
    SM_MAX                  =2,
};
enum EPlayerCameraStyle
{
    PCS_Normal              =0,
    PCS_HeatVision          =1,
    PCS_NightVision         =2,
    PCS_ZoomMode            =3,
    PCS_MAX                 =4,
};
struct ENGINE_API FThreat
{
    FLOAT Distance;
    class AActor* Actor;
    FLOAT Alpha;
};

#define UCONST_mObjMax 64

struct APlayerPawn_eventJumpHeld_Parms
{
    BITFIELD ReturnValue;
};
struct APlayerPawn_eventDuckHeld_Parms
{
    BITFIELD ReturnValue;
};
struct APlayerPawn_eventJumpOffLadder_Parms
{
};
struct APlayerPawn_eventOffLadder_Parms
{
};
struct APlayerPawn_eventOnLadder_Parms
{
};
struct APlayerPawn_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerPawn_eventPlayerInput_Parms
{
    FLOAT DeltaTime;
};
struct APlayerPawn_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};
struct APlayerPawn_eventPreClientTravel_Parms
{
};
struct APlayerPawn_eventPlayerTick_Parms
{
    FLOAT DeltaTime;
};
struct APlayerPawn_eventServerTick_Parms
{
    FLOAT DeltaTime;
};
struct APlayerPawn_eventUnPossess_Parms
{
};
struct APlayerPawn_eventPossess_Parms
{
};
class ENGINE_API APlayerPawn : public APawn
{
public:
    class UPlayer* Player;
    BYTE CameraStyle;
    class AActor* ViewTarget;
    FVector FlashScale;
    FVector FlashFog;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FLOAT DesiredFlashScale;
    FLOAT ConstantGlowScale;
    FLOAT InstantFlash;
    FVector DesiredFlashFog;
    FVector ConstantGlowFog;
    FVector InstantFog;
    FLOAT WeapShakeOffset;
    FLOAT shaketimer;
    INT shakemag;
    FLOAT shakevert;
    BITFIELD bShakeDir:1 GCC_PACK(4);
    FLOAT maxshake GCC_PACK(4);
    FLOAT verttimer;
    BITFIELD bFixedCamera:1 GCC_PACK(4);
    BITFIELD bCenterView:1;
    BITFIELD bCameraLook:1;
    FLOAT EyeSmoothScale GCC_PACK(4);
    INT ZoomLevel;
    FLOAT ZoomChangeTime;
    class USound* ZoomInSound;
    class USound* ZoomOutSound;
    FColor SavedFogColor;
    FColor HeatFogColor;
    FColor NightFogColor;
    FRotator TargetViewRotation;
    FLOAT TargetEyeHeight;
    FVector TargetWeaponViewOffset;
    BITFIELD DontUpdateEyeHeight:1 GCC_PACK(4);
    FLOAT DesiredFOV GCC_PACK(4);
    FLOAT DefaultFOV;
    BITFIELD bLockFOV:1 GCC_PACK(4);
    FLOAT FOVLockTo GCC_PACK(4);
    FLOAT OriginalFOV;
    FLOAT FOVTimeScale;
    INT ShowFlags;
    INT RendMap;
    INT Misc1;
    INT Misc2;
    BITFIELD bMoveToRope:1 GCC_PACK(4);
    class ABoneRope* currentRope GCC_PACK(4);
    INT boneRopeHandle;
    FLOAT ropeOffset;
    FLOAT lastRopeTime;
    class ABoneRope* lastRope;
    FRotator BaseRotation;
    BITFIELD bCheckUseRopes:1 GCC_PACK(4);
    FLOAT onRopeSpeed GCC_PACK(4);
    class ACarcass* PendingDeathCarcass;
    class ACarcass* DeathCarcass;
    FLOAT BloodFlashTime;
    class ARenderActor* ViewMapper;
    class AActor* OverlayActor;
    class AHUD* MyHUD;
    class AScoreBoard* ScoreBoard;
    class UClass* HUDType;
    class UClass* ScoreboardType;
    BITFIELD bHelperMessages:1 GCC_PACK(4);
    BITFIELD bBadConnectionAlert:1;
    BITFIELD ShowLogo:1;
    BITFIELD bShowScores:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFirstDraw:1;
    FStringNoInit ProgressMessage[8] GCC_PACK(4);
    FColor ProgressColor[8];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    FStringNoInit FailedView;
    FStringNoInit JoinSpectatorText;
    FStringNoInit LeaveSpectatorText;
    BITFIELD bNoFlash:1 GCC_PACK(4);
    BITFIELD bNoVoices:1;
    BITFIELD bMessageBeep:1;
    BITFIELD bDelayedCommand:1;
    FStringNoInit DelayedCommand GCC_PACK(4);
    class UMusic* Song;
    BYTE SongSection;
    BYTE CdTrack;
    BYTE Transition;
    FLOAT LastPlaySound;
    class ADukeVoice* DukeVoice;
    class UClass* PlayerVoice;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    FLOAT aExtra4;
    FLOAT aExtra3;
    FLOAT aExtra2;
    FLOAT aExtra1;
    FLOAT aExtra0;
    FLOAT LastLookUp;
    FLOAT LastTurn;
    FLOAT MouseSensitivity;
    BITFIELD bMaxMouseSmoothing:1 GCC_PACK(4);
    BITFIELD bMouseZeroed:1;
    BITFIELD bLookUpStairs:1;
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bInvertMouse:1;
    FLOAT MouseSmoothThreshold GCC_PACK(4);
    FLOAT MouseZeroTime;
    BITFIELD bInputEnabled:1 GCC_PACK(4);
    INT useZone GCC_PACK(4);
    BITFIELD bUseItem:1 GCC_PACK(4);
    BITFIELD bBunnyHop:1;
    BYTE ShieldMode GCC_PACK(4);
    INT VehicleRoll;
    INT VehiclePitch;
    class UClass* CarcassType;
    FLOAT InventoryDipStartTime;
    FLOAT InventoryDipLength;
    FLOAT InventoryDipMagnitude;
    FLOAT InventoryDipScaler;
    FVector InventoryDipDirection;
    class ARenderActor* ExamineActor;
    FLOAT ExamineTime;
    FLOAT PreExamineFOV;
    BITFIELD bExamining:1 GCC_PACK(4);
    FLOAT MyAutoAim GCC_PACK(4);
    FLOAT Handedness;
    FName WeaponPriority[20];
    BITFIELD bNeverAutoSwitch:1 GCC_PACK(4);
    BITFIELD bJustFired:1;
    BITFIELD bJustAltFired:1;
    BITFIELD bInfiniteAmmo:1;
    BITFIELD bDukeHandUp:1;
    class USound* SOSPowerOffSound GCC_PACK(4);
    class USound* SOSPowerOnSound;
    FThreat leftThreats[6];
    FThreat rightThreats[6];
    class ADecoration* NotifyUnUsed;
    BITFIELD bFireUse:1 GCC_PACK(4);
    BITFIELD bHasToPiss:1;
    FLOAT CantPissTime GCC_PACK(4);
    BITFIELD bPissing:1 GCC_PACK(4);
    FLOAT HeadYawLimit GCC_PACK(4);
    FLOAT AbdomenYawLimit;
    INT HeadYaw;
    INT AbdomenYaw;
    class UClass* RecentPickups[6];
    INT RecentPickupsIndex;
    class Athirdpersondecoration* thirdpersondecoration;
    class ARenderActor* LookHitActor;
    BITFIELD bActiveJetpack:1 GCC_PACK(4);
    BITFIELD bJetpacking:1;
    FLOAT JetpackForce GCC_PACK(4);
    FLOAT JetpackAirControl;
    BITFIELD bWasForward:1 GCC_PACK(4);
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bWasTurnLeft:1;
    BITFIELD bWasTurnRight:1;
    BITFIELD bEdgeTurnLeft:1;
    BITFIELD bEdgeTurnRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bIsDucking:1;
    BITFIELD bAnimTransition:1;
    BITFIELD bIsTurning:1;
    BITFIELD bPressedJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bRising:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    class ASavedMove* SavedMoves GCC_PACK(4);
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    FLOAT LastMoveDirection;
    BITFIELD Autoduck:1 GCC_PACK(4);
    FLOAT DuckCollisionHeight GCC_PACK(4);
    FLOAT OriginalCollisionHeight;
    FLOAT DestinationCollisionHeight;
    FLOAT CollisionHeightTime;
    FLOAT CollisionHeightStartTime;
    BITFIELD ForceDuck:1 GCC_PACK(4);
    INT DuckCount GCC_PACK(4);
    BITFIELD PreLandedCalled:1 GCC_PACK(4);
    INT DemoViewPitch GCC_PACK(4);
    INT DemoViewYaw;
    FRotator SmoothRotation;
    FLOAT StartSmoothRotationTime;
    BITFIELD bOnGround:1 GCC_PACK(4);
    FLOAT ladderJumpTime GCC_PACK(4);
    FLOAT ladderSpeedFactor;
    FLOAT ShakeStrength;
    FLOAT ShakeDamping;
    FLOAT ShakeRotStrength;
    FVector ShakeVector;
    INT ShakeYaw;
    INT ShakePitch;
    INT ShakeRoll;
    FLOAT LastATurn;
    FLOAT LastAForward;
    BITFIELD bAdmin:1 GCC_PACK(4);
    class AGameReplicationInfo* GameReplicationInfo GCC_PACK(4);
    FStringNoInit Password;
    BITFIELD bSinglePlayer:1 GCC_PACK(4);
    BITFIELD bReadyToPlay:1;
    FName TurnLeftEvent GCC_PACK(4);
    FName TurnRightEvent;
    FName StrafeLeftEvent;
    FName StrafeRightEvent;
    FName MoveForwardEvent;
    FName MoveBackwardEvent;
    FName AltFireEvent;
    FName FireEvent;
    FName JumpEvent;
    FName DuckEvent;
    FName RelinquishControlEvent;
    BITFIELD bTurnLeftContinuous:1 GCC_PACK(4);
    BITFIELD bTurnRightContinuous:1;
    BITFIELD bStrafeLeftContinuous:1;
    BITFIELD bStrafeRightContinuous:1;
    BITFIELD bMoveForwardContinuous:1;
    BITFIELD bMoveBackwardContinuous:1;
    BITFIELD bAltFireContinuous:1;
    BITFIELD bFireContinuous:1;
    BITFIELD bJumpContinuous:1;
    BITFIELD bDuckContinuous:1;
    BYTE bAltFireDown GCC_PACK(4);
    BYTE bFireDown;
    FName TurnLeftEventEnd;
    FName TurnRightEventEnd;
    FName StrafeLeftEventEnd;
    FName StrafeRightEventEnd;
    FName MoveForwardEventEnd;
    FName MoveBackwardEventEnd;
    FName AltFireEventEnd;
    FName FireEventEnd;
    FName JumpEventEnd;
    FName DuckEventEnd;
    BITFIELD bControlPanelHideWeapon:1 GCC_PACK(4);
    BITFIELD bOneKeyAtATime:1;
    BITFIELD bUseRemappedEvents:1;
    BITFIELD bDontUnRemap:1;
    class AActor* InputHookActor GCC_PACK(4);
    class AActor* KeyEventHookActor;
    BITFIELD bLockRotation:1 GCC_PACK(4);
    FRotator RotationLockDirection GCC_PACK(4);
    INT DuckPressedCount;
    INT JumpPressedCount;
    BITFIELD bAllowRestart:1 GCC_PACK(4);
    class AActor* MyDebugView GCC_PACK(4);
    BITFIELD ShowStateInfo:1 GCC_PACK(4);
    BITFIELD bCheatsEnabled:1;
    class AActor* maObjList[64] GCC_PACK(4);
    FStringNoInit maPropList[64];
    INT mabShowState[64];
    INT mObjCnt;
    BITFIELD mbWatchEnabled:1 GCC_PACK(4);
    FColor mDrawColor GCC_PACK(4);
    BITFIELD bChaseCam:1 GCC_PACK(4);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execClientTravel);
    inline BITFIELD __fastcall eventJumpHeld()
    {
        APlayerPawn_eventJumpHeld_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_JumpHeld),&Parms);
        return Parms.ReturnValue;
    }
    inline BITFIELD __fastcall eventDuckHeld()
    {
        APlayerPawn_eventDuckHeld_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_DuckHeld),&Parms);
        return Parms.ReturnValue;
    }
    inline void __fastcall eventJumpOffLadder()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_JumpOffLadder),NULL);
    }
    inline void __fastcall eventOffLadder()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_OffLadder),NULL);
    }
    inline void __fastcall eventOnLadder()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_OnLadder),NULL);
    }
    inline void __fastcall eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerPawn_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    inline void __fastcall eventPlayerInput(FLOAT DeltaTime)
    {
        APlayerPawn_eventPlayerInput_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
    }
    inline void __fastcall eventPostRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    inline void __fastcall eventPreRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    inline void __fastcall eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerPawn_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    inline void __fastcall eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
    }
    inline void __fastcall eventPlayerTick(FLOAT DeltaTime)
    {
        APlayerPawn_eventPlayerTick_Parms Parms;
        if(IsProbing(NAME_PlayerTick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
        }
    }
    inline void __fastcall eventServerTick(FLOAT DeltaTime)
    {
        APlayerPawn_eventServerTick_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTick),&Parms);
    }
    inline void __fastcall eventUnPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnPossess),NULL);
    }
    inline void __fastcall eventPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Possess),NULL);
    }
    DECLARE_CLASS(APlayerPawn,APawn,0|CLASS_Config|CLASS_NativeReplication)
    #include "APlayerPawn.h"
};


class ENGINE_API ACamera : public APlayerPawn
{
public:
    DECLARE_CLASS(ACamera,APlayerPawn,0|CLASS_Config)
    #include "ACamera.h"
};


class ENGINE_API AScout : public APawn
{
public:
    DECLARE_CLASS(AScout,APawn,0|CLASS_Config)
    NO_DEFAULT_CONSTRUCTOR(AScout)
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};

class ENGINE_API ABrush : public ARenderActor
{
public:
    BYTE CsgOper;
    class UObject* UnusedLightMesh;
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1 GCC_PACK(4);
    DECLARE_CLASS(ABrush,ARenderActor,0)
    #include "ABrush.h"
};

enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_AnyBump              =2,
    BT_MAX                  =3,
};
enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

class ENGINE_API AMover : public ABrush
{
public:
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime;
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bSlave:1;
    BITFIELD bDamageTriggered:1;
    class UClass* TriggerDamageType GCC_PACK(4);
    BITFIELD bDynamicLightMover:1 GCC_PACK(4);
    BITFIELD bTranslucentMover:1;
    INT MoverThickness GCC_PACK(4);
    FName PlayerBumpEvent;
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    BITFIELD bDontDuckOnEncroach:1 GCC_PACK(4);
    class USound* OpeningSound GCC_PACK(4);
    class USound* OpenedSound;
    class USound* ClosingSound;
    class USound* ClosedSound;
    class USound* MoveAmbientSound;
    FVector KeyPos[8];
    FRotator KeyRot[8];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    FLOAT LastMoveTime;
    class ANavigationPoint* myMarker;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    class APawn* WaitingPawn;
    BITFIELD bOpening:1 GCC_PACK(4);
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bPlayerOnly:1;
    class ATrigger* RecommendedTrigger GCC_PACK(4);
    FVector SimOldPos;
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    DECLARE_FUNCTION(execGetMoverCollisionBox);
    DECLARE_CLASS(AMover,ABrush,0|CLASS_NativeReplication)
    #include "AMover.h"
};

enum EDoorSlideDirection
{
    DSD_Left                =0,
    DSD_Right               =1,
    DSD_MAX                 =2,
};
enum EDoorType
{
    DOOR_Custom             =0,
    DOOR_Wood               =1,
    DOOR_Metal              =2,
    DOOR_MAX                =3,
};
enum EDoorOpenDirection
{
    DOD_Dynamic             =0,
    DOD_Outward             =1,
    DOD_Inward              =2,
    DOD_MAX                 =3,
};
enum EPivotLocation
{
    PL_Right                =0,
    PL_Left                 =1,
    PL_MAX                  =2,
};

struct ADoorMover_eventStoppedMoving_Parms
{
};
struct ADoorMover_eventDoorframeImpact_Parms
{
};
struct ADoorMover_eventAlmostClosed_Parms
{
};
class ENGINE_API ADoorMover : public AMover
{
public:
    BYTE PivotLocation;
    FLOAT PivotInset;
    class UClass* FrontDoorHandleClass;
    FVector FrontDoorHandleOffset;
    class UClass* BackDoorHandleClass;
    FVector BackDoorHandleOffset;
    FLOAT DegreesOffset;
    BITFIELD bLocked:1 GCC_PACK(4);
    BITFIELD bKickable:1;
    FLOAT OpenForce GCC_PACK(4);
    FLOAT KickOpenForce;
    FLOAT BumpForce;
    FRotator BaseRadialFriction;
    BITFIELD bNoPlayerTrigger:1 GCC_PACK(4);
    BITFIELD bNeverClose:1;
    FLOAT KickImpactBounce GCC_PACK(4);
    FLOAT ImpactBounce;
    BYTE DoorOpenDirection;
    BYTE DoorType;
    class USound* LockedSound;
    class USound* KickOpenSound;
    class USound* DoorSqueekSounds[3];
    class USound* FrameImpact;
    class USound* FrameImpactKicked;
    class USound* AlmostClosedSound;
    class ADoorHandle* FrontHandle;
    class ADoorHandle* BackHandle;
    INT PivotBias;
    INT BaseYaw;
    INT DoorNumKeys;
    BITFIELD bKickedOpen:1 GCC_PACK(4);
    BITFIELD bPlayClosed:1;
    INT OpenDirection GCC_PACK(4);
    BITFIELD DontOpen:1 GCC_PACK(4);
    FRotator RadialForce GCC_PACK(4);
    FRotator RadialVelocity;
    FRotator AppliedRadialFriction;
    BITFIELD MoveByForce:1 GCC_PACK(4);
    BYTE DoorSlideDirection GCC_PACK(4);
    FLOAT SlideDistance;
    FLOAT SlideOpenForce;
    FLOAT SlideForce;
    FLOAT SlideVelocity;
    FLOAT BaseSlideFriction;
    FLOAT AppliedSlideFriction;
    BITFIELD MoveBySlide:1 GCC_PACK(4);
    BITFIELD CloseBySlide:1;
    BITFIELD SlidingForward:1;
    FVector InitialLocation GCC_PACK(4);
    BITFIELD Encroached:1 GCC_PACK(4);
    BITFIELD bClosed:1;
    class ADoorMover* FriendDoorMover GCC_PACK(4);
    FName FriendDoor;
    BITFIELD bDontOpenUntilFriendClosed:1 GCC_PACK(4);
    BITFIELD bOpenFriendOnTrigger:1;
    BITFIELD bTriggerByUse:1;
    inline void __fastcall eventStoppedMoving()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StoppedMoving),NULL);
    }
    inline void __fastcall eventDoorframeImpact()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DoorframeImpact),NULL);
    }
    inline void __fastcall eventAlmostClosed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AlmostClosed),NULL);
    }
    DECLARE_CLASS(ADoorMover,AMover,0)
    #include "ADoorMover.h"
};


class ENGINE_API AMeshDecal : public ARenderActor
{
public:
    class UTexture* Texture;
    class AActor* Actor;
    class UMesh* Mesh;
    TArray<FMeshDecalTri> Tris;
    INT GrowTriIndex;
    FVector GrowBaryCenter;
    FLOAT GrowRollRadians;
    FLOAT GrowDimU;
    FLOAT GrowDimV;
    FLOAT GrowDuration;
    FLOAT GrowScaleAmount;
    DECLARE_FUNCTION(execBuildDecal);
    DECLARE_CLASS(AMeshDecal,ARenderActor,0|CLASS_Transient)
    NO_DEFAULT_CONSTRUCTOR(AMeshDecal)
};


class ENGINE_API AItem : public ARenderActor
{
public:
    FVector PlayerViewOffset;
    FLOAT BobDamping;
    DECLARE_CLASS(AItem,ARenderActor,0)
    NO_DEFAULT_CONSTRUCTOR(AItem)
};

enum EThirdPersonHand
{
    OneHanded               =0,
    TwoHanded               =1,
};
struct ENGINE_API FSThirdPersonInfo
{
    BYTE hand;
    FVector MountOrigin;
    FRotator MountAngles;
};


class ENGINE_API ADecoration : public AItem
{
public:
    class UClass* EffectWhenDestroyed;
    BITFIELD bDestroyMatchingTags:1 GCC_PACK(4);
    BITFIELD bPushable:1;
    BITFIELD Grabbable:1;
    BITFIELD bOnlyTriggerable:1;
    BITFIELD bSplash:1;
    BITFIELD bBobbing:1;
    BITFIELD bWasCarried:1;
    class USound* PushSound GCC_PACK(4);
    INT numLandings;
    class USound* EndPushSound;
    BITFIELD bPushSoundPlaying:1 GCC_PACK(4);
    FLOAT ThrowForce GCC_PACK(4);
    BITFIELD bSetFragSkin:1 GCC_PACK(4);
    class UTexture* FragSkin GCC_PACK(4);
    FLOAT OrigCollisionRadius;
    FLOAT OrigCollisionHeight;
    class APawn* CarriedBy;
    BITFIELD bNotifyUnUsed:1 GCC_PACK(4);
    FLOAT ShrinkStartScale GCC_PACK(4);
    FLOAT ShrinkStartRadius;
    FLOAT ShrinkStartHeight;
    FLOAT ShrinkPitchWiggle;
    FLOAT ShrinkYawWiggle;
    class UClass* AdditionalHitEffectClass;
    class UClass* MeshFlameClass;
    FSThirdPersonInfo ThirdPersonInfo;
    DECLARE_CLASS(ADecoration,AItem,0)
    NO_DEFAULT_CONSTRUCTOR(ADecoration)
};

enum ChunkState
{
    CHS_Normal              =0,
    CHS_BlownToHell         =1,
    CHS_ChunkComplete       =2,
    CHS_MAX                 =3,
};

class ENGINE_API ACarcass : public ADecoration
{
public:
    BITFIELD bDecorative:1 GCC_PACK(4);
    BITFIELD bSlidingCarcass:1;
    INT CumulativeDamage GCC_PACK(4);
    class APlayerReplicationInfo* PlayerOwner;
    class AZoneInfo* DeathZone;
    INT TrashedBones[6];
    BITFIELD bLeftFootTrashed:1 GCC_PACK(4);
    BITFIELD bRightFootTrashed:1;
    BITFIELD bLeftHandTrashed:1;
    BITFIELD bRightHandTrashed:1;
    BITFIELD bHeadBlownOff:1;
    BITFIELD bArmless:1;
    BITFIELD bSuffering:1;
    BITFIELD bStopSuffering:1;
    BITFIELD bEyesShut:1;
    BITFIELD bNoPupils:1;
    BITFIELD bLostHead:1;
    BITFIELD bLyingStill:1;
    BITFIELD bBlastedToHell:1;
    FName DamageBone GCC_PACK(4);
    BITFIELD bDamageBoneShakeInit:1 GCC_PACK(4);
    FLOAT DamageBoneShakeFactor GCC_PACK(4);
    FRotator DamageBoneShakeBaseRotate;
    FRotator DamageBoneShakeAdjustRotate;
    BITFIELD bDamageProtect:1 GCC_PACK(4);
    BYTE ChunkCarcassState GCC_PACK(4);
    BYTE OldChunkCarcassState;
    class UClass* ChunkDamageType;
    BITFIELD bChunkUpFromBlast:1 GCC_PACK(4);
    FVector ChunkUpBlastLoc GCC_PACK(4);
    FLOAT BloodPoolTime;
    FStringNoInit BloodHitDecalName;
    class UClass* BloodHitDecal;
    FStringNoInit BloodPuffName;
    class UClass* BloodPuff;
    FStringNoInit BloodPoolName;
    class UClass* BloodPoolClass;
    class ADecal* BloodPool;
    BITFIELD bBloodPool:1 GCC_PACK(4);
    BITFIELD bCanHaveCash:1;
    BITFIELD bSearchable:1;
    BITFIELD bInventoryTaken:1;
    INT AmmoClassAmount GCC_PACK(4);
    INT NPCAmmoMode;
    class UClass* AmmoClass;
    class ADecoration* MountedDecorations[6];
    class USound* GibbySound[3];
    FVector BlastVelocity;
    FName ExpandedBones[6];
    FLOAT ExpandedScales[6];
    BITFIELD bExpandedCollision:1 GCC_PACK(4);
    BITFIELD bExpanding:1;
    FLOAT ExpandTimeRemaining GCC_PACK(4);
    FLOAT ExpandTimeEnd;
    DECLARE_CLASS(ACarcass,ADecoration,0|CLASS_NativeReplication)
    #include "ACarcass.h"
};


struct ABoneRope_eventPlaySwingSound_Parms
{
};
class ENGINE_API ABoneRope : public ADecoration
{
public:
    FLOAT m_maxAngularDisplacement;
    FLOAT m_ropeSpeed;
    FLOAT m_angularFriction;
    FLOAT m_angularFrictionNoRider;
    FLOAT m_maxAngularInputVelocity;
    FLOAT m_angularInputVelocityScale;
    FLOAT m_angularInputVelocityScaleOnRope;
    FLOAT m_maxAngularVelocity;
    FLOAT m_ropeRadius;
    FLOAT m_ropeScale;
    FLOAT m_climbUpSpeed;
    FLOAT m_climbDownSpeed;
    FLOAT m_riderRopeOffset;
    FLOAT m_riderHorizontalOffset;
    FLOAT m_riderVerticalOffset;
    FLOAT m_jumpOffSpeedHorizontal;
    FLOAT m_jumpOffSpeedVertical;
    FLOAT m_jumpOffSpeedAngular;
    FLOAT m_lookThreshold;
    BITFIELD bSwingable:1 GCC_PACK(4);
    BITFIELD bAdjustView:1;
    class APlayerPawn* m_Rider GCC_PACK(4);
    FLOAT m_ropeLength;
    FVector m_angularVelocity;
    FVector m_angularDisplacement;
    FVector m_oldAngularDisplacement;
    INT m_ropeCylinders;
    FLOAT m_CollisionRadiusSquared;
    FVector m_Location2;
    FLOAT m_lastHitTime;
    INT m_riderBoneHandle;
    class ABoneRope* m_nextRope;
    class USound* m_ropeCreakSounds[3];
    class USound* m_onOffRopeSound;
    class USound* m_climbSound;
    FLOAT m_lastRopeSoundTime;
    FLOAT m_lastSwingSize;
    BITFIELD m_swingStateAway:1 GCC_PACK(4);
    INT m_ropePrimitive GCC_PACK(4);
    INT m_baseBoneCoords[15];
    FLOAT m_netAngularDisplacementX;
    FLOAT m_netAngularDisplacementY;
    FLOAT m_netAngularVelocityX;
    FLOAT m_netAngularVelocityY;
    DECLARE_FUNCTION(execRemoveRope);
    DECLARE_FUNCTION(execAddRope);
    DECLARE_FUNCTION(execRecreatePrimitive);
    DECLARE_FUNCTION(execInitializeRope);
    DECLARE_FUNCTION(execOnRope);
    DECLARE_FUNCTION(execDamageRope);
    DECLARE_FUNCTION(execGetPlayerPositionFactor);
    DECLARE_FUNCTION(execCheckCollision);
    DECLARE_FUNCTION(execDoBoneRope);
    inline void __fastcall eventPlaySwingSound()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlaySwingSound),NULL);
    }
    DECLARE_CLASS(ABoneRope,ADecoration,0)
    #include "ABoneRope.h"
};


struct AParticleCollisionActor_eventUpdate_Parms
{
};
struct AParticleCollisionActor_eventUnlocked_Parms
{
};
struct AParticleCollisionActor_eventLocked_Parms
{
};
class ENGINE_API AParticleCollisionActor : public AItem
{
public:
    BITFIELD bInUse:1 GCC_PACK(4);
    INT ParticleIndex GCC_PACK(4);
    class ASoftParticleSystem* MyParticleSystem;
    FLOAT pLifetime;
    FLOAT pLifetimeRemaining;
    inline void __fastcall eventUpdate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Update),NULL);
    }
    inline void __fastcall eventUnlocked()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Unlocked),NULL);
    }
    inline void __fastcall eventLocked()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Locked),NULL);
    }
    DECLARE_CLASS(AParticleCollisionActor,AItem,0)
    NO_DEFAULT_CONSTRUCTOR(AParticleCollisionActor)
};

enum EBehavior
{
    DB_Normal               =0,
    DB_Permanant            =1,
    DB_DestroyAfterArgumentSeconds=2,
    DB_DestroyNotVisibleForArgumentSeconds=3,
    DB_MAX                  =4,
};

struct ADecal_eventUpdate_Parms
{
    class AActor* L;
};
struct ADecal_eventInitialize_Parms
{
};
class ENGINE_API ADecal : public ARenderActor
{
public:
    INT MultiDecalLevel;
    FLOAT LastRenderedTime;
    TArray<INT> SurfList;
    FLOAT BehaviorArgument;
    BYTE Behavior;
    BITFIELD FlipX:1 GCC_PACK(4);
    BITFIELD FlipY:1;
    BITFIELD RandomRotation:1;
    FRotator DecalRotation GCC_PACK(4);
    FLOAT MinSpawnDistance;
    FLOAT UScale;
    FLOAT VScale;
    BITFIELD bInitialized:1 GCC_PACK(4);
    DECLARE_FUNCTION(execDetachDecal);
    DECLARE_FUNCTION(execAttachDecal);
    inline void __fastcall eventUpdate(class AActor* L)
    {
        ADecal_eventUpdate_Parms Parms;
        Parms.L=L;
        ProcessEvent(FindFunctionChecked(ENGINE_Update),&Parms);
    }
    inline void __fastcall eventInitialize()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Initialize),NULL);
    }
    DECLARE_CLASS(ADecal,ARenderActor,0)
    NO_DEFAULT_CONSTRUCTOR(ADecal)
};

enum EPrice
{
    BUCKS_1                 =0,
    BUCKS_3                 =1,
    BUCKS_4                 =2,
    BUCKS_5                 =3,
    BUCKS_10                =4,
    BUCKS_15                =5,
    BUCKS_20                =6,
    BUCKS_25                =7,
    BUCKS_30                =8,
    BUCKS_50                =9,
    BUCKS_75                =10,
    BUCKS_100               =11,
    BUCKS_150               =12,
    BUCKS_200               =13,
    BUCKS_MAX               =14,
};

struct AInventory_eventUpdateTimers_Parms
{
    FLOAT DeltaSeconds;
};
struct AInventory_eventBotDesireability_Parms
{
    class APawn* Bot;
    FLOAT ReturnValue;
};
class ENGINE_API AInventory : public ARenderActor
{
public:
    BYTE AutoSwitchPriority;
    BYTE InventoryGroup;
    BITFIELD bActivatable:1 GCC_PACK(4);
    BITFIELD bDisplayableInv:1;
    BITFIELD bActive:1;
    BITFIELD bSleepTouch:1;
    BITFIELD bHeldItem:1;
    BITFIELD bTossedOut:1;
    BYTE dnInventoryCategory GCC_PACK(4);
    BYTE dnCategoryPriority;
    class UTexture* Icon;
    class UTexture* PickupIcon;
    INT SpecialKey;
    class UClass* ItemMessageClass;
    class USound* VendSound;
    BITFIELD bVendFalling:1 GCC_PACK(4);
    FVector FallLocation GCC_PACK(4);
    class UTexture* VendTitle[4];
    class USmackerTexture* VendIcon;
    class USound* ItemLandSound;
    BYTE VendPrice;
    class AActor* VendOwner;
    class APawn* PickupNotifyPawn;
    BITFIELD bInstantRespawn:1 GCC_PACK(4);
    FStringNoInit ItemArticle GCC_PACK(4);
    FLOAT RespawnTime;
    FName PlayerLastTouched;
    INT NumCopies;
    FStringNoInit ExpireMessage;
    BITFIELD bCanHaveMultipleCopies:1 GCC_PACK(4);
    BITFIELD bAutoActivate:1;
    BITFIELD bDontPickupOnTouch:1;
    FVector PlayerViewOffset GCC_PACK(4);
    class UMesh* PlayerViewMesh;
    FLOAT PlayerViewScale;
    FLOAT BobDamping;
    class UMesh* PickupViewMesh;
    FLOAT PickupViewScale;
    class UMesh* ThirdPersonMesh;
    FLOAT ThirdPersonScale;
    INT Charge;
    INT MaxCharge;
    FLOAT MaxDesireability;
    class AInventorySpot* myMarker;
    class USound* PickupSound;
    class USound* ActivateSound;
    class USound* DeActivateSound;
    class USound* RespawnSound;
    inline void __fastcall eventUpdateTimers(FLOAT DeltaSeconds)
    {
        AInventory_eventUpdateTimers_Parms Parms;
        Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateTimers),&Parms);
    }
    inline FLOAT __fastcall eventBotDesireability(class APawn* Bot)
    {
        AInventory_eventBotDesireability_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_BotDesireability)) {
        Parms.Bot=Bot;
        ProcessEvent(FindFunctionChecked(ENGINE_BotDesireability),&Parms);
        }
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AInventory,ARenderActor,0|CLASS_NativeReplication)
    #include "AInventory.h"
};

enum EWeaponState
{
    WS_NONE                 =0,
    WS_ACTIVATE             =1,
    WS_DEACTIVATED          =2,
    WS_IDLE                 =3,
    WS_IDLE_SMALL           =4,
    WS_IDLE_LARGE           =5,
    WS_FIRE                 =6,
    WS_FIRE_START           =7,
    WS_FIRE_STOP            =8,
    WS_ALT_FIRE             =9,
    WS_ALT_FIRE_START       =10,
    WS_ALT_FIRE_STOP        =11,
    WS_RELOAD               =12,
    WS_RELOAD_START         =13,
    WS_RELOAD_STOP          =14,
    WS_FIRE_JAM             =15,
    WS_ALT_FIRE_JAM         =16,
    WS_MAX                  =17,
};
enum EAnimSentry
{
    AS_None                 =0,
    AS_Start                =1,
    AS_Middle               =2,
    AS_Stop                 =3,
    AS_MAX                  =4,
};
enum E3rdPersonWeaponAnimationChannel
{
    WAC_All                 =0,
    WAC_Top                 =1,
    WAC_Bottom              =2,
    WAC_Special             =3,
    WAC_MAX                 =4,
};
struct ENGINE_API FWAMEntry
{
    FLOAT AnimChance;
    FName animSeq;
    FLOAT AnimRate;
    FLOAT AnimTween;
    BYTE AnimChan;
    BITFIELD animLoop:1 GCC_PACK(4);
    class USound* AnimSound GCC_PACK(4);
    class USound* AnimSound2;
    BITFIELD AlternateSound:1 GCC_PACK(4);
    FStringNoInit DebugString GCC_PACK(4);
    BITFIELD PlayNone:1 GCC_PACK(4);
};


struct AWeapon_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AWeapon : public AInventory
{
public:
    class UClass* AmmoName;
    BYTE ReloadCount;
    INT PickupAmmoCount;
    class AAmmo* AmmoType;
    BITFIELD bInstantHit:1 GCC_PACK(4);
    BITFIELD bAltInstantHit:1;
    class UClass* AltAmmoName GCC_PACK(4);
    BYTE AltReloadCount;
    INT AltPickupAmmoCount;
    class AAmmo* AltAmmoType;
    INT AmmoLoaded;
    INT AltAmmoLoaded;
    INT TempLoadCount;
    BYTE ReloadClipAmmo;
    BITFIELD bWeaponPenetrates:1 GCC_PACK(4);
    BITFIELD bWeaponUp:1;
    BITFIELD bChangeWeapon:1;
    BITFIELD bSplashDamage:1;
    BITFIELD bRecommendSplashDamage:1;
    BITFIELD bRecommendAltSplashDamage:1;
    BITFIELD bMeleeWeapon:1;
    FLOAT AIRating GCC_PACK(4);
    FLOAT aimerror;
    FRotator Weapon3rdRotation;
    BITFIELD bOwnerFire:1 GCC_PACK(4);
    BITFIELD bHideWeapon:1;
    FVector FireOffset GCC_PACK(4);
    FVector AltFireOffset;
    class UClass* ProjectileClass;
    class UClass* AltProjectileClass;
    FLOAT ProjectileSpeed;
    FLOAT AltProjectileSpeed;
    FRotator AdjustedAim;
    BITFIELD bCanThrow:1 GCC_PACK(4);
    BITFIELD bWeaponStay:1;
    FStringNoInit MessageNoAmmo GCC_PACK(4);
    FStringNoInit DeathMessage;
    BITFIELD bFastActivate:1 GCC_PACK(4);
    FVector Weapon3rdLocation GCC_PACK(4);
    class UClass* MuzzleFlashClass;
    FVector MuzzleFlashOrigin;
    BITFIELD AttachMuzzleFlashFirst:1 GCC_PACK(4);
    class UTexture* MuzzleFlashSprites[6] GCC_PACK(4);
    INT NumFlashSprites;
    class UTexture* MuzzleFlashSprite;
    FLOAT MuzzleFlashTime;
    FLOAT MuzzleFlashLength;
    FLOAT MuzzleFlashScale;
    FLOAT SpriteFlashX;
    FLOAT SpriteFlashY;
    FLOAT MuzzleSpriteAlpha;
    FLOAT MuzzleFlashRotation;
    BITFIELD UseSpriteFlash:1 GCC_PACK(4);
    BITFIELD bMultiFrameFlash:1;
    BITFIELD bMuzzleFlashRotates:1;
    class AActor* MuzzleFlash3rd GCC_PACK(4);
    class UTexture* AltMuzzleFlashSprites[6];
    INT AltNumFlashSprites;
    class UTexture* AltMuzzleFlashSprite;
    FLOAT AltMuzzleFlashTime;
    FLOAT AltMuzzleFlashLength;
    FLOAT AltMuzzleFlashScale;
    FLOAT AltSpriteFlashX;
    FLOAT AltSpriteFlashY;
    FLOAT AltMuzzleSpriteAlpha;
    FLOAT AltMuzzleFlashRotation;
    BITFIELD UseAltSpriteFlash:1 GCC_PACK(4);
    BITFIELD bAltMultiFrameFlash:1;
    BITFIELD bAltMuzzleFlashRotates:1;
    BITFIELD bUseAnytime:1;
    BITFIELD bMultiMode:1;
    BITFIELD bCanChangeMode:1;
    FLOAT ReloadTimer GCC_PACK(4);
    class USound* ModeChangeSound;
    BYTE LastSoundSlot;
    BITFIELD bNoAnimSound:1 GCC_PACK(4);
    BITFIELD bBoneDamage:1;
    BITFIELD bDecapitates:1;
    BITFIELD bDropShell:1;
    class USound* ShellBounceSound GCC_PACK(4);
    class UMesh* ShellMesh;
    FVector ShellOffset;
    FVector ShellVelocity;
    FVector ShellOffset3rd;
    FVector MuzzleLocation;
    BITFIELD ReloadLoops:1 GCC_PACK(4);
    BITFIELD bDontPlayOwnerAnimation:1;
    BITFIELD StayAlert:1;
    INT ActiveWAMIndex GCC_PACK(4);
    FLOAT LargeIdleTimer;
    FWAMEntry SAnimActivate[4];
    FWAMEntry SAnimDeactivate[4];
    FWAMEntry SAnimFireStart[4];
    FWAMEntry SAnimFire[4];
    FWAMEntry SAnimFireStop[4];
    FWAMEntry SAnimAltFireStart[4];
    FWAMEntry SAnimAltFire[4];
    FWAMEntry SAnimAltFireStop[4];
    FWAMEntry SAnimReloadStart[4];
    FWAMEntry SAnimReload[4];
    FWAMEntry SAnimReloadStop[4];
    FWAMEntry SAnimIdleSmall[4];
    FWAMEntry SAnimIdleLarge[4];
    FWAMEntry SAnimAux[4];
    class USound* NotifySounds[8];
    FWAMEntry IdleAnim;
    FWAMEntry RunAnim;
    FWAMEntry FireAnim;
    FWAMEntry AltFireAnim;
    FWAMEntry CrouchIdleAnim;
    FWAMEntry CrouchWalkAnim;
    FWAMEntry CrouchFireAnim;
    FWAMEntry ReloadStartAnim;
    FWAMEntry ReloadLoopAnim;
    FWAMEntry ReloadStopAnim;
    FWAMEntry ThrowAnim;
    FWAMEntry NoAnim;
    BYTE FireAnimSentry;
    BYTE ReloadAnimSentry;
    BITFIELD bForceFire:1 GCC_PACK(4);
    BITFIELD bForceAltFire:1;
    BITFIELD bCantSendFire:1;
    BITFIELD bReloadStart:1;
    BITFIELD bReloadStop:1;
    BITFIELD bFireStart:1;
    BITFIELD bFireStop:1;
    BITFIELD bAltFireStart:1;
    BITFIELD bAltFireStop:1;
    BITFIELD bAltFiring:1;
    BITFIELD bInterruptFire:1;
    BITFIELD bInterruptSingleReload:1;
    BYTE WeaponState GCC_PACK(4);
    BYTE LastWeaponState;
    INT WeaponFireImpulse;
    INT LastWeaponFireImpulse;
    BITFIELD bNoShake:1 GCC_PACK(4);
    BITFIELD bFireIgnites:1;
    BITFIELD bAltFireIgnites:1;
    inline void __fastcall eventPostRender(class UCanvas* Canvas)
    {
        AWeapon_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    DECLARE_CLASS(AWeapon,AInventory,0)
    NO_DEFAULT_CONSTRUCTOR(AWeapon)
};


class ENGINE_API AProjectile : public ARenderActor
{
public:
    FLOAT speed;
    FLOAT MaxSpeed;
    FLOAT Damage;
    INT MomentumTransfer;
    class USound* SpawnSound;
    class USound* ImpactSound;
    class USound* MiscSound;
    FLOAT ExploWallOut;
    BITFIELD bRollOnGround:1 GCC_PACK(4);
    class UClass* ExplosionDecal GCC_PACK(4);
    DECLARE_CLASS(AProjectile,ARenderActor,0)
    NO_DEFAULT_CONSTRUCTOR(AProjectile)
};

enum EZBufferMode
{
    ZBM_Occlude             =0,
    ZBM_ReadOnly            =1,
    ZBM_None                =2,
    ZBM_MAX                 =3,
};

class ENGINE_API AParticleSystem : public ARenderActor
{
public:
    BITFIELD BSPOcclude:1 GCC_PACK(4);
    BYTE ZBufferMode GCC_PACK(4);
    FLOAT ZBias;
    FLOAT SystemAlphaScale;
    FLOAT SystemAlphaScaleVelocity;
    FLOAT SystemAlphaScaleAcceleration;
    FLOAT AlphaVariance;
    FLOAT AlphaStart;
    FLOAT AlphaMid;
    FLOAT AlphaEnd;
    FLOAT AlphaRampMid;
    BITFIELD AlphaStartUseSystemAlpha:1 GCC_PACK(4);
    BITFIELD bUseAlphaRamp:1;
    DECLARE_CLASS(AParticleSystem,ARenderActor,0)
    NO_DEFAULT_CONSTRUCTOR(AParticleSystem)
};

enum EParticleTriggerReaction
{
    PTG_None                =0,
    PTG_Disable             =1,
    PTG_Enable              =2,
    PTG_Toggle              =3,
    PTG_Pulse               =4,
    PTG_MAX                 =5,
};
enum EParticleAffectorType
{
    PAT_None                =0,
    PAT_Magnet              =1,
    PAT_Noise               =2,
    PAT_Force               =3,
    PAT_Teleport            =4,
    PAT_Destroy             =5,
    PAT_Wake                =6,
    PAT_Vortex              =7,
    PAT_MAX                 =8,
};

class ENGINE_API ASoftParticleAffector : public AParticleSystem
{
public:
    INT AffectedGroupID;
    BITFIELD AlwaysAffectGroup:1 GCC_PACK(4);
    BYTE Type GCC_PACK(4);
    FLOAT OriginalMagnitude;
    FLOAT Magnitude;
    FLOAT PulseApexMagnitude;
    FLOAT PulseDuration;
    FLOAT PulseStartTime;
    BITFIELD Enabled:1 GCC_PACK(4);
    BITFIELD AffectX:1;
    BITFIELD AffectY:1;
    BITFIELD AffectZ:1;
    BYTE TriggerReaction GCC_PACK(4);
    DECLARE_CLASS(ASoftParticleAffector,AParticleSystem,0)
    NO_DEFAULT_CONSTRUCTOR(ASoftParticleAffector)
};

enum ESoftParticleSystemTriggerType
{
    SPT_None                =0,
    SPT_Enable              =1,
    SPT_Disable             =2,
    SPT_Toggle              =3,
    SPT_Pulse               =4,
    SPT_UpdateEnable        =5,
    SPT_UpdateDisable       =6,
    SPT_UpdateToggle        =7,
    SPT_UpdatePulse         =8,
    SPT_Prime               =9,
    SPT_TimeWarpEnable      =10,
    SPT_TimeWarpDisable     =11,
    SPT_TimeWarpToggle      =12,
    SPT_TimeWarpPulse       =13,
    SPT_TimeWarpPulseUp     =14,
    SPT_MAX                 =15,
};
struct ENGINE_API FParticle
{
    FLOAT ActivationDelay;
    INT SpawnNumber;
    FLOAT SpawnTime;
    FLOAT Lifetime;
    FLOAT RemainingLifetime;
    FVector Location;
    FVector PreviousLocation;
    FVector WorldLocation;
    FVector WorldPreviousLocation;
    FVector Velocity;
    FVector Acceleration;
    class UTexture* Texture;
    FLOAT NextFrameDelay;
    FLOAT DrawScale;
    FLOAT Alpha;
    FLOAT Rotation;
    FLOAT RotationVelocity;
    FLOAT RotationAcceleration;
    FRotator Rotation3d;
    FRotator RotationVelocity3d;
    FRotator RotationAcceleration3d;
    BITFIELD HaveCollisionActor:1 GCC_PACK(4);
};

struct ENGINE_API FSSpawnOnDestruction
{
    class UClass* SpawnClass;
};

struct ENGINE_API FAdditionalSpawnStruct
{
    class UClass* SpawnClass;
    BITFIELD TakeParentTag:1 GCC_PACK(4);
    BITFIELD Mount:1;
    FVector MountOrigin GCC_PACK(4);
    FRotator MountAngles;
    class AActor* SpawnActor;
    FName AppendToTag;
    FRotator SpawnRotation;
    FRotator SpawnRotationVariance;
    BITFIELD SpawnRotationNotRelative:1 GCC_PACK(4);
    FLOAT SpawnSpeed GCC_PACK(4);
    FLOAT SpawnSpeedVariance;
};


struct ASoftParticleSystem_eventScriptTriggerOnDismount_Parms
{
};
struct ASoftParticleSystem_eventParticleHurtRadius_Parms
{
};
class ENGINE_API ASoftParticleSystem : public AParticleSystem
{
public:
    class ASoftParticleSystem* NextSystem;
    class ASoftParticleSystem* PreviousSystem;
    FVector PreviousLocation;
    BITFIELD Enabled:1 GCC_PACK(4);
    BITFIELD UpdateEnabled:1;
    BITFIELD BillboardHorizontal:1;
    BITFIELD BillboardVertical:1;
    BITFIELD DestroyWhenEmpty:1;
    BITFIELD DestroyWhenEmptyAfterSpawn:1;
    FLOAT DieOutsideRadius GCC_PACK(4);
    INT GroupID;
    INT CurrentSpawnNumber;
    FName SpawnFriendOnDeath;
    FName SpawnFriendOnBounce;
    class ASoftParticleSystem* SpawnFriendOnDeathActor;
    class ASoftParticleSystem* SpawnFriendOnBounceActor;
    class UClass* AdditionalSpawns[8];
    FAdditionalSpawnStruct AdditionalSpawn[8];
    BITFIELD AdditionalSpawnTakesOwner:1 GCC_PACK(4);
    FSSpawnOnDestruction SpawnOnDestruction[8] GCC_PACK(4);
    class USound* CreationSound;
    class USound* CreationSounds[4];
    FLOAT CreationSoundRadius;
    FLOAT CreationSoundBasePitch;
    FLOAT CreationSoundRandFactor;
    class USound* DestructionSound;
    FLOAT DestructionSoundRadius;
    class USound* BounceSound;
    FLOAT BounceSoundRadius;
    class USound* DieSound;
    FLOAT DieSoundRadius;
    class USound* TurnedOffSound;
    FLOAT TurnedOffSoundRadius;
    class USound* TurnedOnSound;
    FLOAT TurnedOnSoundRadius;
    class USound* TriggeredSound;
    FLOAT TriggeredSoundRadius;
    INT SpawnNumber;
    FLOAT SpawnPeriod;
    INT PrimeCount;
    FLOAT PrimeTime;
    FLOAT PrimeTimeIncrement;
    INT MaximumParticles;
    FLOAT Lifetime;
    FLOAT LifetimeVariance;
    BITFIELD SpawnAtApex:1 GCC_PACK(4);
    BITFIELD SpawnCanDestroyOldest:1;
    BITFIELD RelativeSpawn:1;
    BITFIELD SpawnAtRadius:1;
    BITFIELD SpawnAtHeight:1;
    BITFIELD SpawnAtExistingParticle:1;
    FVector SpawnOffset GCC_PACK(4);
    BITFIELD SpawnInALine:1 GCC_PACK(4);
    FLOAT SpawnInALineLength GCC_PACK(4);
    BITFIELD RelativeLocation:1 GCC_PACK(4);
    BITFIELD RelativeRotation:1;
    FVector InitialVelocity GCC_PACK(4);
    FVector InitialAcceleration;
    FVector MaxVelocityVariance;
    FVector MaxAccelerationVariance;
    FVector RealtimeVelocityVariance;
    FVector RealtimeAccelerationVariance;
    FVector Apex;
    FLOAT ApexInitialVelocity;
    FName ApexActorTag;
    class AActor* ApexActor;
    class AActor* InheritVelocityActor;
    FLOAT LocalFriction;
    FLOAT BounceElasticity;
    FVector BounceVelocityVariance;
    BITFIELD Bounce:1 GCC_PACK(4);
    BITFIELD DieOnBounce:1;
    BITFIELD ParticlesCollideWithWorld:1;
    BITFIELD ParticlesCollideWithActors:1;
    BITFIELD UseZoneGravity:1;
    BITFIELD UseZoneVelocity:1;
    BITFIELD UseZoneGroundFriction:1;
    BITFIELD UseZoneFluidFriction:1;
    BITFIELD UseZoneTerminalVelocity:1;
    BITFIELD FlockMountToCenter:1;
    BITFIELD FlockMountToDirection:1;
    FLOAT FlockToCenterVelocity GCC_PACK(4);
    FLOAT FlockToCenterAcceleration;
    FLOAT FlockToDirectionScale;
    FLOAT FlockCenterWeight;
    FLOAT FlockDirectionWeight;
    FLOAT SineWaveFrequency;
    FVector VelocityAmplitude;
    FVector AccelerationAmplitude;
    BITFIELD UseLines:1 GCC_PACK(4);
    BITFIELD Connected:1;
    BITFIELD ConstantLength:1;
    FColor LineStartColor GCC_PACK(4);
    FColor LineEndColor;
    FLOAT LineStartWidth;
    FLOAT LineEndWidth;
    class UTexture* Textures[16];
    INT TextureCount;
    FLOAT TextureScaleX;
    FLOAT TextureScaleY;
    BITFIELD DieOnLastFrame:1 GCC_PACK(4);
    FLOAT DrawScaleVariance GCC_PACK(4);
    FLOAT StartDrawScale;
    FLOAT EndDrawScale;
    FLOAT RotationInitial;
    FLOAT RotationVariance;
    FLOAT RotationVelocity;
    FLOAT RotationVelocityMaxVariance;
    FLOAT RotationAcceleration;
    FLOAT RotationAccelerationMaxVariance;
    FRotator RotationInitial3d;
    FRotator RotationVariance3d;
    FRotator RotationVelocity3d;
    FRotator RotationVelocityMaxVariance3d;
    FRotator RotationAcceleration3d;
    FRotator RotationAccelerationMaxVariance3d;
    FRotator RotationVarianceOnBounce3d;
    FLOAT SpawnOnBounceChance;
    class UClass* SpawnOnBounce;
    FLOAT SpawnOnDeathChance;
    class UClass* SpawnOnDeath;
    BITFIELD UpdateWhenNotVisible:1 GCC_PACK(4);
    BITFIELD DrawWhenNotVisible:1;
    FLOAT ParticleSpawnCutoff GCC_PACK(4);
    FLOAT ParticleUpdateCutoff;
    FLOAT ParticleDrawCutoff;
    FLOAT ParticleDrawLOD;
    BITFIELD TriggerOnSpawn:1 GCC_PACK(4);
    BITFIELD TriggerOnDismount:1;
    FLOAT TriggerAfterSeconds GCC_PACK(4);
    BYTE TriggerType;
    FLOAT PulseSeconds;
    FLOAT PulseSecondsVariance;
    FLOAT PulseMagnitude;
    FLOAT PulseStartTime;
    FLOAT PulseEndTime;
    FName BounceEvent;
    FName DieEvent;
    FLOAT DamageAmount;
    FLOAT DamageRadius;
    class UClass* DamageName;
    FLOAT MomentumTransfer;
    FLOAT DamagePeriod;
    FLOAT DamagePeriodRemaining;
    BITFIELD UseParticleCollisionActors:1 GCC_PACK(4);
    INT ParticlesPerCollision GCC_PACK(4);
    INT NumCollisionActors;
    class UClass* CollisionActorClass;
    INT ParticlesSinceCollision;
    INT UsedCollisionActors;
    TArray<class AParticleCollisionActor*> CollisionActors;
    class APawn* CollisionInstigator;
    FLOAT ElapsedTime;
    INT HighestParticleNumber;
    INT AllocatedParticles;
    INT ParticleSystemHandle;
    BITFIELD ParticleRecursing:1 GCC_PACK(4);
    FVector BoundingBoxMin GCC_PACK(4);
    FVector BoundingBoxMax;
    BITFIELD bPriming:1 GCC_PACK(4);
    BITFIELD bInitialized:1;
    DECLARE_FUNCTION(execDestroyParticleCollisionActors);
    DECLARE_FUNCTION(execDrawParticles);
    DECLARE_FUNCTION(execGetParticleStats);
    DECLARE_FUNCTION(execAffectParticles);
    DECLARE_FUNCTION(execSpawnParticle);
    DECLARE_FUNCTION(execSetParticle);
    DECLARE_FUNCTION(execGetParticle);
    DECLARE_FUNCTION(execFreeParticle);
    DECLARE_FUNCTION(execAllocParticle);
    DECLARE_FUNCTION(execResetParticles);
    DECLARE_FUNCTION(execForceTick);
    inline void __fastcall eventScriptTriggerOnDismount()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ScriptTriggerOnDismount),NULL);
    }
    inline void __fastcall eventParticleHurtRadius()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ParticleHurtRadius),NULL);
    }
    DECLARE_CLASS(ASoftParticleSystem,AParticleSystem,0)
    #include "ASoftParticleSystem.h"
};

enum EBeamPlayerCameraStyleMode
{
    BPCS_None               =0,
    BPCS_Equal              =1,
    BPCS_NotEqual           =2,
    BPCS_MAX                =3,
};
enum EBeamBrokenAction
{
    BBA_None                =0,
    BBA_TriggerEvent        =1,
    BBA_TriggerBeamBrokenEvent=2,
    BBA_TriggerBreaker      =3,
    BBA_TriggerBeam         =4,
    BBA_TriggerOwner        =5,
    BBA_MAX                 =6,
};
enum EBeamBrokenWhen
{
    BBW_Never               =0,
    BBW_PlayerProximity     =1,
    BBW_ClassProximity      =2,
    BBW_Shot                =3,
    BBW_MAX                 =4,
};
enum EBeamSystemTriggerType
{
    BSTT_None               =0,
    BSTT_Enable             =1,
    BSTT_Disable            =2,
    BSTT_Toggle             =3,
    BSTT_Reset              =4,
    BSTT_MAX                =5,
};
enum EBeamType
{
    BST_Straight            =0,
    BST_RandomWalk          =1,
    BST_RecursiveSubdivide  =2,
    BST_SineWave            =3,
    BST_DoubleSineWave      =4,
    BST_Spline              =5,
    BST_Grid                =6,
    BST_MAX                 =7,
};

class ENGINE_API ABeamSystem : public AParticleSystem
{
public:
    BITFIELD Enabled:1 GCC_PACK(4);
    INT TesselationLevel GCC_PACK(4);
    FLOAT MaxAmplitude;
    FLOAT MaxFrequency;
    FLOAT Noise;
    FColor BeamColor;
    FColor BeamEndColor;
    FLOAT BeamStartWidth;
    FLOAT BeamEndWidth;
    FLOAT TimeScale;
    class UTexture* BeamTexture;
    INT SubTextureCount;
    FLOAT BeamTextureScaleX;
    FLOAT BeamTextureScaleY;
    FLOAT BeamTexturePanX;
    FLOAT BeamTexturePanY;
    FLOAT BeamTexturePanOffsetX;
    FLOAT BeamTexturePanOffsetY;
    BITFIELD BeamReversePanPass:1 GCC_PACK(4);
    BITFIELD FlipHorizontal:1;
    BITFIELD FlipVertical:1;
    BITFIELD ScaleToWorld:1;
    FVector ControlPoints[32] GCC_PACK(4);
    INT ControlPointCount;
    BYTE BeamType;
    BITFIELD DepthCued:1 GCC_PACK(4);
    BITFIELD BeamBrokenIgnoreWorld:1;
    BYTE TriggerType GCC_PACK(4);
    class UClass* SpawnClassOnBeamCollision;
    class AActor* DestinationActor[8];
    FVector DestinationOffset[8];
    INT NumberDestinations;
    BYTE BeamBrokenWhen;
    class UClass* BeamBrokenWhenClass;
    BYTE BeamBrokenAction;
    FName BeamBrokenEvent;
    BITFIELD BeamBrokenRetriggerable:1 GCC_PACK(4);
    FLOAT BeamBrokenOtherDamage GCC_PACK(4);
    BYTE BeamPlayerCameraStyleMode;
    BYTE BeamPlayerCameraStyle;
    FVector BoundingBoxMin;
    FVector BoundingBoxMax;
    DECLARE_CLASS(ABeamSystem,AParticleSystem,0)
    #include "ABeamSystem.h"
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0)
    #include "ULevelSummary.h"
};

#endif

AUTOGENERATE_FUNCTION(AUdpLink,-1,execReadBinary);
AUTOGENERATE_FUNCTION(AUdpLink,-1,execReadText);
AUTOGENERATE_FUNCTION(AUdpLink,-1,execSendBinary);
AUTOGENERATE_FUNCTION(AUdpLink,-1,execSendText);
AUTOGENERATE_FUNCTION(AUdpLink,-1,execBindPort);
AUTOGENERATE_FUNCTION(AInternetLink,-1,execGetLocalIP);
AUTOGENERATE_FUNCTION(AInternetLink,-1,execValidate);
AUTOGENERATE_FUNCTION(AInternetLink,-1,execStringToIpAddr);
AUTOGENERATE_FUNCTION(AInternetLink,-1,execIpAddrToString);
AUTOGENERATE_FUNCTION(AInternetLink,-1,execGetLastError);
AUTOGENERATE_FUNCTION(AInternetLink,-1,execResolve);
AUTOGENERATE_FUNCTION(AInternetLink,-1,execParseURL);
AUTOGENERATE_FUNCTION(AInternetLink,-1,execIsDataPending);
AUTOGENERATE_FUNCTION(AActor,-1,execSetToMount);
AUTOGENERATE_FUNCTION(AActor,-1,execGetMountLocation);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,-1,execScreenShotIsValid);
AUTOGENERATE_FUNCTION(AActor,-1,execScreenshot);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSavedGameLongInfo);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSavedGameInfo);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNumSavedGames);
AUTOGENERATE_FUNCTION(AActor,-1,execDeleteSavedGame);
AUTOGENERATE_FUNCTION(AActor,-1,execSaveGame);
AUTOGENERATE_FUNCTION(AActor,-1,execLoadGame);
AUTOGENERATE_FUNCTION(AActor,-1,execParentalLockIsOn);
AUTOGENERATE_FUNCTION(AActor,-1,execSetParentalLockStatus);
AUTOGENERATE_FUNCTION(AActor,-1,execValidateParentalLockPassword);
AUTOGENERATE_FUNCTION(AActor,-1,execSetParentalLockPassword);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextPlayerProfile);
AUTOGENERATE_FUNCTION(AActor,-1,execDestroyPlayerProfile);
AUTOGENERATE_FUNCTION(AActor,-1,execCreatePlayerProfile);
AUTOGENERATE_FUNCTION(AActor,-1,execSwitchToPlayerProfile);
AUTOGENERATE_FUNCTION(AActor,-1,execProfileSwitchNeedsReLaunch);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCurrentPlayerProfile);
AUTOGENERATE_FUNCTION(AActor,-1,execSendMailMessage);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextMDSMapList);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextMDSMap);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextClass);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextThing);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,265,execStopSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execSetTimerCounter);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,-1,execMeshGetTexture);
AUTOGENERATE_FUNCTION(AActor,-1,execRenameAllSurfaces);
AUTOGENERATE_FUNCTION(AActor,-1,execSetSurfaceName);
AUTOGENERATE_FUNCTION(AActor,-1,execSetSurfaceTexture);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSurfaceTexture);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSurfaceVPan);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSurfaceUPan);
AUTOGENERATE_FUNCTION(AActor,-1,execSetSurfacePan);
AUTOGENERATE_FUNCTION(AActor,-1,execFindNameForSurface);
AUTOGENERATE_FUNCTION(AActor,-1,execFindSurfaceByName);
AUTOGENERATE_FUNCTION(AActor,-1,execTraceWaterPoint);
AUTOGENERATE_FUNCTION(AActor,-1,execIsInWaterRegion);
AUTOGENERATE_FUNCTION(AActor,-1,execGetPointRegion);
AUTOGENERATE_FUNCTION(AActor,-1,execTraceTexture);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,-1,execNativeEvalSlack);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,257,execGetMeshInstance);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,293,execGetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,292,execSetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3972,execForcedGetFrame);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,-1,execDropToFloor);
AUTOGENERATE_FUNCTION(AActor,-1,execFindSpot);
AUTOGENERATE_FUNCTION(AActor,-1,execMoveActor);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execSpeakText);
AUTOGENERATE_FUNCTION(AActor,-1,execNameForString);
AUTOGENERATE_FUNCTION(AActor,-1,execMusicPlay);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(ATcpLink,-1,execReadBinary);
AUTOGENERATE_FUNCTION(ATcpLink,-1,execReadText);
AUTOGENERATE_FUNCTION(ATcpLink,-1,execSendBinary);
AUTOGENERATE_FUNCTION(ATcpLink,-1,execSendText);
AUTOGENERATE_FUNCTION(ATcpLink,-1,execIsConnected);
AUTOGENERATE_FUNCTION(ATcpLink,-1,execClose);
AUTOGENERATE_FUNCTION(ATcpLink,-1,execOpen);
AUTOGENERATE_FUNCTION(ATcpLink,-1,execListen);
AUTOGENERATE_FUNCTION(ATcpLink,-1,execBindPort);
AUTOGENERATE_FUNCTION(APlayerPawn,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerPawn,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APawn,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APawn,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(APawn,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(APawn,531,execPickTarget);
AUTOGENERATE_FUNCTION(APawn,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(APawn,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(APawn,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APawn,540,execFindBestInventoryPath);
AUTOGENERATE_FUNCTION(APawn,520,execactorReachable);
AUTOGENERATE_FUNCTION(APawn,521,execpointReachable);
AUTOGENERATE_FUNCTION(APawn,522,execClearPaths);
AUTOGENERATE_FUNCTION(APawn,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(APawn,517,execFindPathToward);
AUTOGENERATE_FUNCTION(APawn,518,execFindPathTo);
AUTOGENERATE_FUNCTION(APawn,533,execCanSee);
AUTOGENERATE_FUNCTION(APawn,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(APawn,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(APawn,510,execTurnToward);
AUTOGENERATE_FUNCTION(APawn,508,execTurnTo);
AUTOGENERATE_FUNCTION(APawn,506,execStrafeFacing);
AUTOGENERATE_FUNCTION(APawn,504,execStrafeTo);
AUTOGENERATE_FUNCTION(APawn,502,execMoveToward);
AUTOGENERATE_FUNCTION(APawn,500,execMoveTo);
AUTOGENERATE_FUNCTION(APawn,530,execRemovePawn);
AUTOGENERATE_FUNCTION(APawn,529,execAddPawn);
AUTOGENERATE_FUNCTION(AMover,-1,execGetMoverCollisionBox);
AUTOGENERATE_FUNCTION(AMeshDecal,-1,execBuildDecal);
AUTOGENERATE_FUNCTION(ADecal,-1,execDetachDecal);
AUTOGENERATE_FUNCTION(ADecal,-1,execAttachDecal);
AUTOGENERATE_FUNCTION(ANavigationPoint,519,execdescribeSpec);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ABoneRope,-1,execRemoveRope);
AUTOGENERATE_FUNCTION(ABoneRope,-1,execAddRope);
AUTOGENERATE_FUNCTION(ABoneRope,-1,execRecreatePrimitive);
AUTOGENERATE_FUNCTION(ABoneRope,-1,execInitializeRope);
AUTOGENERATE_FUNCTION(ABoneRope,-1,execOnRope);
AUTOGENERATE_FUNCTION(ABoneRope,-1,execDamageRope);
AUTOGENERATE_FUNCTION(ABoneRope,-1,execGetPlayerPositionFactor);
AUTOGENERATE_FUNCTION(ABoneRope,-1,execCheckCollision);
AUTOGENERATE_FUNCTION(ABoneRope,-1,execDoBoneRope);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execDestroyParticleCollisionActors);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execDrawParticles);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execGetParticleStats);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execAffectParticles);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execSpawnParticle);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execSetParticle);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execGetParticle);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execFreeParticle);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execAllocParticle);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execResetParticles);
AUTOGENERATE_FUNCTION(ASoftParticleSystem,-1,execForceTick);
AUTOGENERATE_FUNCTION(ADukeNet,-1,execURLDownloadBanner);
AUTOGENERATE_FUNCTION(ADukeNet,-1,execdncCommand);
AUTOGENERATE_FUNCTION(ADukeNet,-1,execdncUpdate);
AUTOGENERATE_FUNCTION(ADukeNet,-1,execdncShutdown);
AUTOGENERATE_FUNCTION(ADukeNet,-1,execdncInitialize);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif NAMES_ONLY

#if _MSC_VER
#pragma pack (pop)
#endif
