#ifndef __PRSMAIN_H__
#define __PRSMAIN_H__
//****************************************************************************
//**
//**    PRSMAIN.H
//**    Header - Parsing
//**
//****************************************************************************
//============================================================================
//    HEADERS
//============================================================================
#include "Kernel.h"
#include "LexMain.h"
//============================================================================
//    DEFINITIONS / ENUMERATIONS / SIMPLE TYPEDEFS
//============================================================================
#define PRS_FUNC(xname) void xname(IPrsNode* inLeftNode, IPrsNode** inRightNodes)

#define PRS_IN(xindex) ((inRightNodes[(xindex)-1]->GetAttr()))
#define PRS_IN_T(xtype, xindex) ((xtype*)(inRightNodes[(xindex)-1]->GetAttr()))
#define PRS_OUT ((inLeftNode->GetAttr()))
#define PRS_OUT_T(xtype) ((xtype*)(inLeftNode->GetAttr()))
#define PRS_OUT_SET inLeftNode->SetAttr

//============================================================================
//    CLASSES / STRUCTURES
//============================================================================

#undef GetFirstChild

/*
	IPrsAttr
	Empty base attribute class derived from by application
*/
class IPrsAttr
{
public:	
	virtual NBool Destroy()=0;
};

/*
	IPrsNode
	Node of a tree generated by the parser
*/
class IPrsNode
{
public:
	virtual NBool Destroy()=0;
	virtual IPrsAttr* GetAttr()=0;
	virtual NBool SetAttr(IPrsAttr* inAttr)=0;
	virtual SLexToken* GetToken()=0;
	virtual IPrsNode* GetParent()=0;
	virtual IPrsNode* GetFirstChild()=0;
	virtual IPrsNode* GetNext()=0;
};

typedef void (*FPrsTermFunc)(IPrsNode* inNode, SLexToken* inToken);
typedef void (*FPrsProdFunc)(IPrsNode* inLeftNode, IPrsNode** inRightNodes);

/*
	IPrsParser
*/
class IPrsParser
{
public:
	// Destroy - Destroy and free the interface	
	virtual NBool Destroy()=0;

	// GetLexer - returns an interface to the lexer used by the parser, for registering
	//            terminal tokens matching RegisterTerm tags given to the parser
	virtual ILexLexer* GetLexer()=0;

	// RegisterTerm - registers a terminal rule using a lexer tag configured in the lexer
	virtual NBool RegisterTerm(NChar* inRule, NDword inLexTag)=0;

	// RegisterProd - registers a nonterminal rule production based on a BNF-like grammar string
	//                The reserved pound (#) symbol denotes the firing of a production event,
	//                the values of which are provided to this function in order.
	virtual NBool RegisterProd(NChar* inRule, NChar* inProduction, /*FPrsProdFunc inEvents*/... )=0;

	// SetRuleAlias - sets an optional text alias to associate with a given production name when reporting errors.
	//                The rule must have had at least one production registered to it before calling this function.
	virtual NBool SetRuleAlias(NChar* inRule, NChar* inAlias)=0;

	// SetTermFunc - sets the callback function used for creation and evaluation of terminal semantic attributes
	virtual NBool SetTermFunc(FPrsTermFunc inTermFunc)=0;

	// Finalize - optional call to finalize the parser before first execution (slow).  If this is not called,
	//            the required finalization will occur automatically at the beginning of the first Execute call.
	virtual NBool Finalize()=0;

	// Execute - executes the parser on a given buffer of text, returning the root of the generated
	//           parse tree, or null if an error occured (likely a parse syntax error).  The tab spacing
	//           parameter configures the lexer with the corresponding tab spacing adjustment for line
	//           and column values.
	virtual IPrsNode* Execute(NChar* inText, NDword inTabSpacing)=0;

};

//============================================================================
//    GLOBAL DATA
//============================================================================
//============================================================================
//    GLOBAL FUNCTIONS
//============================================================================
// CreateParser - Create a parser interface
KRN_API IPrsParser* PRS_CreateParser(NDword inLookAhead);

// GetLastError - returns a descriptive error string when functions return failure
//                Currently only used with parse errors reported by Execute.
KRN_API NChar* PRS_GetLastError(NDword* outLine, NDword* outColumn);

//============================================================================
//    INLINE CLASS METHODS
//============================================================================
//============================================================================
//    TRAILING HEADERS
//============================================================================

//****************************************************************************
//**
//**    END HEADER PRSMAIN.H
//**
//****************************************************************************
#endif // __PRSMAIN_H__
