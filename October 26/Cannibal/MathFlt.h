#ifndef __MATHFLT_H__
#define __MATHFLT_H__
//****************************************************************************
//**
//**    MATHFLT.H
//**    Header - Floating Point Math
//**
//****************************************************************************
//============================================================================
//    HEADERS
//============================================================================
#include "Kernel.h"
//============================================================================
//    DEFINITIONS / ENUMERATIONS / SIMPLE TYPEDEFS
//============================================================================
#define M_PI 3.1415926535897932385f // use acos(-1) if double is needed
#define M_E 2.71828f // use exp(1) if double is needed
#define M_EPSILON 0.001f
#define M_EPSILON2 0.000001f

#define M_RADTODEG(xrad) (((xrad)*180.0f)/M_PI)
#define M_DEGTORAD(xdeg) (((xdeg)*M_PI)/180.0f)

#define M_MIN(a, b)			((a) < (b) ? (a) : (b))
#define M_MAX(a, b)			((a) > (b) ? (a) : (b))
#define M_MIN3(a, b, c)		M_MIN((a), M_MIN((b), (c)))
#define M_MAX3(a, b, c)		M_MAX((a), M_MAX((b), (c)))

//============================================================================
//    CLASSES / STRUCTURES
//============================================================================
//============================================================================
//    GLOBAL DATA
//============================================================================
//============================================================================
//    GLOBAL FUNCTIONS
//============================================================================
inline NFloat M_Fabs(NFloat f)
{
#ifdef KRN_INTEL
	NDword fi = *((NDword *)(&f)) & 0x7fffffff;
    return(*((NFloat*)&fi));
#else
	return(fabs(f));
#endif
}

inline NFloat M_Det2x2(NFloat a, NFloat b, NFloat c, NFloat d)
{
	return((NFloat)(a*d - b*c));
}

inline NFloat M_Det3x3(NFloat a1, NFloat b1, NFloat c1,
					   NFloat a2, NFloat b2, NFloat c2,
					   NFloat a3, NFloat b3, NFloat c3)
{
	float r = a1 * M_Det2x2(b2, b3, c2, c3)
		    - b1 * M_Det2x2(a2, a3, c2, c3)
			+ c1 * M_Det2x2(a2, a3, b2, b3);
	return(r);
}

//============================================================================
//    INLINE CLASS METHODS
//============================================================================
//============================================================================
//    TRAILING HEADERS
//============================================================================

//****************************************************************************
//**
//**    END HEADER MATHFLT.H
//**
//****************************************************************************
#endif // __MATHFLT_H__
