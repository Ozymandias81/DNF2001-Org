; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	C:\duke4\xcore\winalloc.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BF@MBIJ@Cannot?5init?5CPrintfT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
drectve	SEGMENT DWORD USE32 PUBLIC ''
drectve	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
;	COMDAT ??0?$XChain@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_head@?$XList@VXStatistic@@@@QAEPAVXStatistic@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XChain@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XChain@VXStatistic@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XList@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XList@VXStatistic@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_head@?$XList@VXStatistic@@@@QAEPAU_XPos@@PAVXStatistic@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_head@?$XList@VXStatistic@@@@QAEPAVXStatistic@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lose_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@PAX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcBase@VCStrObj@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcBase@VCStrObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XRcBase@VCStrObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$XRcBase@VCStrObj@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcPtr@VCPathObj@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcPtr@VCPathObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XRcPtr@VCPathObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$XRcPtr@VCPathObj@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XList@VXFindLevel@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@VXFindLevel@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSysObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXFindLevel@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?new_node@?$XList@VXStatistic@@@@IAEPAUXNode@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@VXStatistic@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@PAX@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@VXFindLevel@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@?$XRcBase@VCStrObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelRef@?$XRcBase@VCStrObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@?$XRcPtr@VCPathObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelRef@?$XRcPtr@VCPathObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStrObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPathObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XStreamWrDirect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XStreamWrDirect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1XBufferWriteInt@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XBufferWriteInt@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3XStreamWrDirect@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?flush@XStreamWrDirect@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek@XStreamWrDirect@@UAEKJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XStreamRdDirect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XStreamRdDirect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1XBufferReadInt@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XBufferReadInt@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3XStreamRdDirect@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek@XStreamRdDirect@@UAEKJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?base_init@XFile@@EAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4autochar@@QAEAAV0@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pos_wr@CBaseStream@@UAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pos_rd@CBaseStream@@UAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?put@CBaseStream@@UAEKD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ioctl_write@CBaseStream@@UAEKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ioctl_read@CBaseStream@@UAEKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek_int@CBaseStream@@MAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XMemRdBuffer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XMemRdBuffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1autochar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XMemRdBuffer@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CStrObj@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CStrObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XFindLevel@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSysObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CSysObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XListState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XStatistic@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XChainState@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XChainState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, drectve, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_mem_manage@@3VCMemManage@@A			; _mem_manage
_BSS	SEGMENT
?_mem_manage@@3VCMemManage@@A DB 048H DUP (?)		; _mem_manage
_BSS	ENDS
CRT$XCU	SEGMENT
_$S3	DD	FLAT:_$E2
CRT$XCU	ENDS
drectve	SEGMENT
$SG56785 DB	'-INCLUDE:___@@_PchSym_@00@UwfpvEUcxlivUlyqUhgwxlivOlyq@', 00H
; Function compile flags: /Ogty
drectve	ENDS
_TEXT	SEGMENT
_$E2	PROC NEAR
	jmp	_$E1
_$E2	ENDP
_TEXT	ENDS
PUBLIC	??0CMemManage@@QAE@XZ				; CMemManage::CMemManage
; Function compile flags: /Ogty
; File C:\duke4\xcore\winalloc.cpp
_TEXT	SEGMENT
_$E1	PROC NEAR

; 4    : CMemManage _mem_manage;

	mov	ecx, OFFSET FLAT:?_mem_manage@@3VCMemManage@@A
	jmp	??0CMemManage@@QAE@XZ			; CMemManage::CMemManage
_$E1	ENDP
_TEXT	ENDS
PUBLIC	??2CVirtualBase@@SAPAXIKK@Z			; CVirtualBase::operator new
EXTRN	@xxx_fatal@4:NEAR
EXTRN	@xxx_bitch@4:NEAR
EXTRN	__imp__VirtualAlloc@16:NEAR
_DATA	SEGMENT
$SG56988 DB	'CVirtualBase: Unable to reserve base page of memory', 00H
$SG56990 DB	'CVirtualBase: Unable to commit memory', 00H
; Function compile flags: /Ogty
_DATA	ENDS
_TEXT	SEGMENT
_reserve_size$ = 12
_commit_size$ = 16
??2CVirtualBase@@SAPAXIKK@Z PROC NEAR			; CVirtualBase::operator new

; 11   : {

	push	ebx

; 12   : 	void *base,*commit;
; 13   : 
; 14   : 	base=VirtualAlloc(null,reserve_size,MEM_RESERVE,PAGE_READWRITE);

	mov	ebx, DWORD PTR _reserve_size$[esp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __imp__VirtualAlloc@16
	push	4
	push	8192					; 00002000H
	push	ebx
	push	0
	call	edi

; 15   : 	if (!base)

	test	eax, eax
	jne	SHORT $L56987

; 16   : 	{
; 17   : 		xxx_bitch("CVirtualBase: Unable to reserve base page of memory");

	mov	ecx, OFFSET FLAT:$SG56988
	call	@xxx_bitch@4
	pop	edi
	pop	esi

; 18   : 		return null;

	xor	eax, eax
	pop	ebx

; 32   : 	return commit;
; 33   : }

	ret	0
$L56987:

; 19   : 	}
; 20   : 	commit=VirtualAlloc(base,commit_size,MEM_COMMIT,PAGE_READWRITE);

	mov	esi, DWORD PTR _commit_size$[esp+8]
	push	4
	push	4096					; 00001000H
	push	esi
	push	eax
	call	edi

; 21   : 	if (!commit)

	test	eax, eax
	jne	SHORT $L56989

; 22   : 	{
; 23   : 		xxx_fatal("CVirtualBase: Unable to commit memory");

	mov	ecx, OFFSET FLAT:$SG56990
	call	@xxx_fatal@4
	pop	edi
	pop	esi

; 24   : 		return null;

	xor	eax, eax
	pop	ebx

; 32   : 	return commit;
; 33   : }

	ret	0
$L56989:

; 25   : 	}
; 26   : 	CVirtualBase *obj=(CVirtualBase *)commit;
; 27   : 	obj->base_address=(U32)commit;
; 28   : 	obj->first_mem=ALIGN_POW2((obj+1),32);

	lea	ecx, DWORD PTR [eax+51]

; 29   : 	obj->end_commited=obj->base_address+commit_size;

	lea	edx, DWORD PTR [eax+esi]
	and	ecx, -32				; ffffffe0H

; 30   : 	obj->reserve_size=reserve_size;
; 31   : 	obj->commit_size=commit_size;

	mov	DWORD PTR [eax+8], esi
	pop	edi
	mov	DWORD PTR [eax+4], ebx
	pop	esi
	mov	DWORD PTR [eax], eax
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+12], edx
	pop	ebx

; 32   : 	return commit;
; 33   : }

	ret	0
??2CVirtualBase@@SAPAXIKK@Z ENDP			; CVirtualBase::operator new
_TEXT	ENDS
PUBLIC	??3CVirtualBase@@CAXPAX@Z			; CVirtualBase::operator delete
; Function compile flags: /Ogty
_TEXT	SEGMENT
??3CVirtualBase@@CAXPAX@Z PROC NEAR			; CVirtualBase::operator delete

; 38   : 	_asm int 3

	int	3

; 39   : }

	ret	0
??3CVirtualBase@@CAXPAX@Z ENDP				; CVirtualBase::operator delete
_TEXT	ENDS
PUBLIC	??3CVirtualBase@@SAXPAXKK@Z			; CVirtualBase::operator delete
; Function compile flags: /Ogty
_TEXT	SEGMENT
??3CVirtualBase@@SAXPAXKK@Z PROC NEAR			; CVirtualBase::operator delete

; 43   : 	_asm int 3

	int	3

; 44   : }

	ret	0
??3CVirtualBase@@SAXPAXKK@Z ENDP			; CVirtualBase::operator delete
_TEXT	ENDS
PUBLIC	??0CVirtualBlock@@QAE@XZ			; CVirtualBlock::CVirtualBlock
; Function compile flags: /Ogty
_TEXT	SEGMENT
??0CVirtualBlock@@QAE@XZ PROC NEAR			; CVirtualBlock::CVirtualBlock
; _this$ = ecx

; 47   : {

	mov	eax, ecx
	mov	DWORD PTR [eax+8], 0

; 48   : }

	ret	0
??0CVirtualBlock@@QAE@XZ ENDP				; CVirtualBlock::CVirtualBlock
_TEXT	ENDS
PUBLIC	?private_alloc@CMemManage@@QAEPAXK@Z		; CMemManage::private_alloc
PUBLIC	??2CVirtualBlock@@SAPAXIK@Z			; CVirtualBlock::operator new
_DATA	SEGMENT
	ORG $+2
$SG57026 DB	'CVirtualBase: Unable to reserve base page of memory', 00H
; Function compile flags: /Ogty
_DATA	ENDS
_TEXT	SEGMENT
_size$ = 8
_reserve_size$ = 12
??2CVirtualBlock@@SAPAXIK@Z PROC NEAR			; CVirtualBlock::operator new

; 52   : 	/* align reservation of private memory data to 4M */
; 53   : 	reserve_size=ALIGN_POW2(reserve_size,4*1024*1024);

	mov	eax, DWORD PTR _reserve_size$[esp-4]
	push	esi
	push	edi

; 54   : 
; 55   : 	void *base=VirtualAlloc(null,reserve_size,MEM_RESERVE,PAGE_READWRITE);

	push	4
	lea	esi, DWORD PTR [eax+4194303]
	push	8192					; 00002000H
	and	esi, -4194304				; ffc00000H
	push	esi
	push	0
	call	DWORD PTR __imp__VirtualAlloc@16
	mov	edi, eax

; 56   : 	if (!base)

	test	edi, edi
	jne	SHORT $L57025

; 57   : 	{
; 58   : 		xxx_bitch("CVirtualBase: Unable to reserve base page of memory");

	mov	ecx, OFFSET FLAT:$SG57026
	call	@xxx_bitch@4
	pop	edi

; 59   : 		return null;

	xor	eax, eax
	pop	esi

; 65   : 
; 66   : 	return obj;
; 67   : }

	ret	0
$L57025:

; 60   : 	}
; 61   : 	D_ASSERT(_gmalloc);
; 62   : 	CVirtualBlock *obj=(CVirtualBlock *)_mem_manage.private_alloc(size);

	mov	ecx, DWORD PTR _size$[esp+4]
	push	ecx
	mov	ecx, OFFSET FLAT:?_mem_manage@@3VCMemManage@@A
	call	?private_alloc@CMemManage@@QAEPAXK@Z	; CMemManage::private_alloc

; 63   : 	obj->address=base;

	mov	DWORD PTR [eax], edi

; 64   : 	obj->size=reserve_size;

	mov	DWORD PTR [eax+4], esi
	pop	edi
	pop	esi

; 65   : 
; 66   : 	return obj;
; 67   : }

	ret	0
??2CVirtualBlock@@SAPAXIK@Z ENDP			; CVirtualBlock::operator new
_TEXT	ENDS
PUBLIC	??0CVirtualBase@@QAE@XZ				; CVirtualBase::CVirtualBase
; Function compile flags: /Ogty
_TEXT	SEGMENT
??0CVirtualBase@@QAE@XZ PROC NEAR			; CVirtualBase::CVirtualBase
; _this$ = ecx

; 70   : {

	mov	eax, ecx

; 71   : }

	ret	0
??0CVirtualBase@@QAE@XZ ENDP				; CVirtualBase::CVirtualBase
; Function compile flags: /Ogty
??0CMemManage@@QAE@XZ PROC NEAR			; CMemManage::CMemManage
; _this$ = ecx

; 74   : {

	mov	eax, ecx

; 75   : }

	ret	0
??0CMemManage@@QAE@XZ ENDP				; CMemManage::CMemManage
_TEXT	ENDS
PUBLIC	?init@CMemManage@@QAEKXZ			; CMemManage::init
; Function compile flags: /Ogty
_TEXT	SEGMENT
?init@CMemManage@@QAEKXZ PROC NEAR			; CMemManage::init
; _this$ = ecx

; 79   : #if 0
; 80   : 	_gmalloc=this;
; 81   : 
; 82   : 	/* allocate private memory block */
; 83   : 	base=new(16*1024*1024,8*1024) CVirtualBase();
; 84   : 	if (!base)
; 85   : 		xxx_fatal("CMemManage::init: Unable to allocate required memory");
; 86   : 
; 87   : 	cur=base->first_mem;
; 88   : 	end=base->end_commited;
; 89   : 
; 90   : 	end-=sizeof(CommitBlock);
; 91   : 
; 92   : 	CVirtualBlock *block;
; 93   : 
; 94   : 	/* primary block */
; 95   : 	block=new(64*1024*1024) CVirtualBlock();
; 96   : 	if (!block)
; 97   : 		xxx_fatal("CMemManage::init: Unable to allocate required memory");
; 98   : 	primary=block;
; 99   : 
; 100  : 	/* large block */
; 101  : 	block=new(32*1024*1024) CVirtualBlock();
; 102  : 	if (!block)
; 103  : 		xxx_fatal("CMemManage::init: Unable to allocate required memory");
; 104  : 	large=block;
; 105  : 
; 106  : 	small_allocs[0]=alloc_8;
; 107  : 	small_allocs[1]=alloc_16;
; 108  : 	small_allocs[2]=alloc_32;
; 109  : 	small_allocs[3]=alloc_64;
; 110  : 	small_allocs[4]=alloc_96;
; 111  : 	small_allocs[5]=alloc_128;
; 112  : 	small_allocs[6]=alloc_192;
; 113  : 	small_allocs[7]=alloc_256;
; 114  : #endif
; 115  : 	return TRUE;

	mov	eax, 1

; 116  : }

	ret	0
?init@CMemManage@@QAEKXZ ENDP				; CMemManage::init
_TEXT	ENDS
PUBLIC	?close@CMemManage@@QAEKXZ			; CMemManage::close
; Function compile flags: /Ogty
_TEXT	SEGMENT
?close@CMemManage@@QAEKXZ PROC NEAR			; CMemManage::close
; _this$ = ecx

; 120  : #if 0
; 121  : 	/* free primary memory blocks */
; 122  : 	while(primary)
; 123  : 	{
; 124  : 		CVirtualBlock *tmp;
; 125  : 		
; 126  : 		tmp=primary->next;
; 127  : 		delete primary;
; 128  : 		primary=tmp;
; 129  : 	}
; 130  : 	/* free large memory blocks */
; 131  : 	while(large)
; 132  : 	{
; 133  : 		CVirtualBlock *tmp;
; 134  : 		
; 135  : 		tmp=large->next;
; 136  : 		delete primary;
; 137  : 		large=tmp;
; 138  : 	}
; 139  : 	/* free private memory */
; 140  : 	delete base;
; 141  : 	base=null;
; 142  : 
; 143  : 	_gmalloc=null;
; 144  : #endif
; 145  : 	return TRUE;

	mov	eax, 1

; 146  : }

	ret	0
?close@CMemManage@@QAEKXZ ENDP				; CMemManage::close
_TEXT	ENDS
PUBLIC	?commit_more@CMemManage@@AAEXK@Z		; CMemManage::commit_more
; Function compile flags: /Ogty
_TEXT	SEGMENT
_size$ = 8
?private_alloc@CMemManage@@QAEPAXK@Z PROC NEAR		; CMemManage::private_alloc
; _this$ = ecx

; 149  : {

	push	ebx
	push	esi

; 150  : 	cur=ALIGN_POW2(cur,32);
; 151  : 	void *ret=(void *)cur;
; 152  : 
; 153  : 	if ((cur+size) > end)

	mov	ebx, DWORD PTR _size$[esp+4]
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR [esi+64]
	mov	ecx, DWORD PTR [esi+68]
	add	edi, 31					; 0000001fH
	and	edi, -32				; ffffffe0H
	mov	DWORD PTR [esi+64], edi
	lea	eax, DWORD PTR [edi+ebx]
	cmp	eax, ecx
	jbe	SHORT $L57486

; 154  : 		commit_more(size);

	push	ebx
	mov	ecx, esi
	call	?commit_more@CMemManage@@AAEXK@Z	; CMemManage::commit_more
$L57486:

; 155  : 
; 156  : 	cur+=size;

	mov	eax, DWORD PTR [esi+64]
	add	eax, ebx
	mov	DWORD PTR [esi+64], eax

; 157  : 	return ret;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 158  : }

	ret	4
?private_alloc@CMemManage@@QAEPAXK@Z ENDP		; CMemManage::private_alloc
_TEXT	ENDS
PUBLIC	?commit_block@CMemManage@@AAEXPAVCommitBlock@@K@Z ; CMemManage::commit_block
; Function compile flags: /Ogty
_TEXT	SEGMENT
_block$ = 8
_size$ = 12
?commit_block@CMemManage@@AAEXPAVCommitBlock@@K@Z PROC NEAR ; CMemManage::commit_block
; _this$ = ecx

; 161  : {

	push	esi
	push	edi
	mov	edi, ecx

; 162  : 	size=ALIGN_POW2(size,page_size);

	mov	ecx, DWORD PTR _size$[esp+4]

; 163  : 
; 164  : 	void *page=VirtualAlloc((void *)end,size,MEM_COMMIT,PAGE_READWRITE);

	push	4
	push	4096					; 00001000H
	mov	eax, DWORD PTR [edi+40]
	mov	edx, DWORD PTR [edi+68]
	lea	esi, DWORD PTR [eax+ecx-1]
	dec	eax
	not	eax
	and	esi, eax
	push	esi
	push	edx
	call	DWORD PTR __imp__VirtualAlloc@16

; 165  : 	
; 166  : 	block->address=(U32)page;

	mov	ecx, DWORD PTR _block$[esp+4]
	mov	DWORD PTR [ecx], eax

; 167  : 	block->size=size;

	mov	DWORD PTR [ecx+4], esi

; 168  : 	block->next=committed;

	mov	eax, DWORD PTR [edi+56]
	pop	edi
	mov	DWORD PTR [ecx+8], eax
	pop	esi

; 169  : }

	ret	8
?commit_block@CMemManage@@AAEXPAVCommitBlock@@K@Z ENDP	; CMemManage::commit_block
; Function compile flags: /Ogty
_size$ = 8
?commit_more@CMemManage@@AAEXK@Z PROC NEAR		; CMemManage::commit_more
; _this$ = ecx

; 172  : {

	push	esi
	mov	esi, ecx

; 173  : 	if (free_commit)

	mov	eax, DWORD PTR [esi+60]
	test	eax, eax
	je	SHORT $L57078

; 174  : 	{
; 175  : 		commit_block(free_commit,size);

	mov	ecx, DWORD PTR _size$[esp]
	push	ecx
	push	eax
	mov	ecx, esi
	call	?commit_block@CMemManage@@AAEXPAVCommitBlock@@K@Z ; CMemManage::commit_block

; 176  : 		free_commit=free_commit->next;

	mov	edx, DWORD PTR [esi+60]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+60], eax
$L57078:
	pop	esi

; 177  : 		return;
; 178  : 	}
; 179  : }

	ret	4
?commit_more@CMemManage@@AAEXK@Z ENDP			; CMemManage::commit_more
_TEXT	ENDS
PUBLIC	?alloc_8@CMemManage@@CIPAXPAV1@@Z		; CMemManage::alloc_8
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_8@CMemManage@@CIPAXPAV1@@Z PROC NEAR		; CMemManage::alloc_8
; _This$ = ecx

; 193  : #if 0
; 194  : 	if (!hole)
; 195  : 		expand_small();
; 196  : 
; 197  : 	obj=small_hole;
; 198  : 	if (small_hole->next)
; 199  : 	{
; 200  : 		small_hole->next->down=small_hole->down;
; 201  : 		small_hole=small_hole->next;
; 202  : 	}
; 203  : 	else
; 204  : 		small_hole=small_hole->down;
; 205  : 	/* make hole available */
; 206  : 	obj->next=hole_avail;
; 207  : 	hole_avail=hole;
; 208  : 	
; 209  : 	return obj->address;
; 210  : #endif
; 211  : 	return null;

	xor	eax, eax

; 212  : }

	ret	0
?alloc_8@CMemManage@@CIPAXPAV1@@Z ENDP			; CMemManage::alloc_8
_TEXT	ENDS
PUBLIC	?alloc_16@CMemManage@@CIPAXPAV1@@Z		; CMemManage::alloc_16
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_16@CMemManage@@CIPAXPAV1@@Z PROC NEAR		; CMemManage::alloc_16
; _This$ = ecx

; 216  : 	return null;

	xor	eax, eax

; 217  : }

	ret	0
?alloc_16@CMemManage@@CIPAXPAV1@@Z ENDP			; CMemManage::alloc_16
_TEXT	ENDS
PUBLIC	?alloc_32@CMemManage@@CIPAXPAV1@@Z		; CMemManage::alloc_32
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_32@CMemManage@@CIPAXPAV1@@Z PROC NEAR		; CMemManage::alloc_32
; _This$ = ecx

; 221  : 	return null;

	xor	eax, eax

; 222  : }

	ret	0
?alloc_32@CMemManage@@CIPAXPAV1@@Z ENDP			; CMemManage::alloc_32
_TEXT	ENDS
PUBLIC	?alloc_64@CMemManage@@CIPAXPAV1@@Z		; CMemManage::alloc_64
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_64@CMemManage@@CIPAXPAV1@@Z PROC NEAR		; CMemManage::alloc_64
; _This$ = ecx

; 226  : 	return null;

	xor	eax, eax

; 227  : }

	ret	0
?alloc_64@CMemManage@@CIPAXPAV1@@Z ENDP			; CMemManage::alloc_64
_TEXT	ENDS
PUBLIC	?alloc_96@CMemManage@@CIPAXPAV1@@Z		; CMemManage::alloc_96
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_96@CMemManage@@CIPAXPAV1@@Z PROC NEAR		; CMemManage::alloc_96
; _This$ = ecx

; 231  : 	return null;

	xor	eax, eax

; 232  : }

	ret	0
?alloc_96@CMemManage@@CIPAXPAV1@@Z ENDP			; CMemManage::alloc_96
_TEXT	ENDS
PUBLIC	?alloc_128@CMemManage@@CIPAXPAV1@@Z		; CMemManage::alloc_128
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_128@CMemManage@@CIPAXPAV1@@Z PROC NEAR		; CMemManage::alloc_128
; _This$ = ecx

; 236  : 	return null;

	xor	eax, eax

; 237  : }

	ret	0
?alloc_128@CMemManage@@CIPAXPAV1@@Z ENDP		; CMemManage::alloc_128
_TEXT	ENDS
PUBLIC	?alloc_192@CMemManage@@CIPAXPAV1@@Z		; CMemManage::alloc_192
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_192@CMemManage@@CIPAXPAV1@@Z PROC NEAR		; CMemManage::alloc_192
; _This$ = ecx

; 241  : 	return null;

	xor	eax, eax

; 242  : }

	ret	0
?alloc_192@CMemManage@@CIPAXPAV1@@Z ENDP		; CMemManage::alloc_192
_TEXT	ENDS
PUBLIC	?alloc_256@CMemManage@@CIPAXPAV1@@Z		; CMemManage::alloc_256
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_256@CMemManage@@CIPAXPAV1@@Z PROC NEAR		; CMemManage::alloc_256
; _This$ = ecx

; 246  : 	return null;

	xor	eax, eax

; 247  : }

	ret	0
?alloc_256@CMemManage@@CIPAXPAV1@@Z ENDP		; CMemManage::alloc_256
_TEXT	ENDS
PUBLIC	?alloc_large@CMemManage@@QAEPAXK@Z		; CMemManage::alloc_large
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_large@CMemManage@@QAEPAXK@Z PROC NEAR		; CMemManage::alloc_large
; _this$ = ecx

; 251  : 	return null;

	xor	eax, eax

; 252  : }

	ret	4
?alloc_large@CMemManage@@QAEPAXK@Z ENDP			; CMemManage::alloc_large
_TEXT	ENDS
PUBLIC	?alloc_huge@CMemManage@@QAEPAXK@Z		; CMemManage::alloc_huge
; Function compile flags: /Ogty
_TEXT	SEGMENT
?alloc_huge@CMemManage@@QAEPAXK@Z PROC NEAR		; CMemManage::alloc_huge
; _this$ = ecx

; 256  : 	return null;

	xor	eax, eax

; 257  : }

	ret	4
?alloc_huge@CMemManage@@QAEPAXK@Z ENDP			; CMemManage::alloc_huge
_TEXT	ENDS
PUBLIC	?free@CMemManage@@AAEXPAX@Z			; CMemManage::free
; Function compile flags: /Ogty
_TEXT	SEGMENT
?free@CMemManage@@AAEXPAX@Z PROC NEAR			; CMemManage::free
; _this$ = ecx

; 261  : }

	ret	4
?free@CMemManage@@AAEXPAX@Z ENDP			; CMemManage::free
_TEXT	ENDS
PUBLIC	?_mem_init@@YAXXZ				; _mem_init
EXTRN	?_mem_debug_init@@YAXXZ:NEAR			; _mem_debug_init
; Function compile flags: /Ogty
_TEXT	SEGMENT
?_mem_init@@YAXXZ PROC NEAR				; _mem_init

; 268  : 	_mem_manage.init();
; 269  : 	_mem_debug_init();

	jmp	?_mem_debug_init@@YAXXZ			; _mem_debug_init
?_mem_init@@YAXXZ ENDP					; _mem_init
_TEXT	ENDS
PUBLIC	?_mem_close@@YAXXZ				; _mem_close
EXTRN	?_mem_debug_close@@YAXXZ:NEAR			; _mem_debug_close
; Function compile flags: /Ogty
_TEXT	SEGMENT
?_mem_close@@YAXXZ PROC NEAR				; _mem_close

; 274  : 	_mem_debug_close();

	jmp	?_mem_debug_close@@YAXXZ		; _mem_debug_close
?_mem_close@@YAXXZ ENDP					; _mem_close
_TEXT	ENDS
PUBLIC	??0?$XChain@VCSysObj@@@@QAE@XZ			; XChain<CSysObj>::XChain<CSysObj>
; Function compile flags: /Ogty
; File C:\duke4\xcore\xclass.h
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT
??0?$XChain@VCSysObj@@@@QAE@XZ PROC NEAR		; XChain<CSysObj>::XChain<CSysObj>, COMDAT
; _this$ = ecx

; 830  : 	XChain(void) : head(null),tail(null) {}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$XChain@VCSysObj@@@@QAE@XZ ENDP			; XChain<CSysObj>::XChain<CSysObj>
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
EXTRN	@xfree@4:NEAR
; Function compile flags: /Ogty
; File C:\duke4\xcore\xcore.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 130  : __inline void operator delete(void *ptr){xfree(ptr);}

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??0?$XChain@VCSysObj@@@@QAE@K@Z			; XChain<CSysObj>::XChain<CSysObj>
; Function compile flags: /Ogty
; File C:\duke4\xcore\xclass.h
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@K@Z
_TEXT	SEGMENT
_owned$ = 8
??0?$XChain@VCSysObj@@@@QAE@K@Z PROC NEAR		; XChain<CSysObj>::XChain<CSysObj>, COMDAT
; _this$ = ecx

; 831  : 	XChain(U32 owned) : head(null),tail(null),xchain_state(owned) {}

	mov	eax, ecx
	mov	ecx, DWORD PTR _owned$[esp-4]
	shl	ecx, 31					; 0000001fH
	and	ecx, -2147483648			; 80000000H
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], ecx
	ret	4
??0?$XChain@VCSysObj@@@@QAE@K@Z ENDP			; XChain<CSysObj>::XChain<CSysObj>
_TEXT	ENDS
PUBLIC	?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::get_next
; Function compile flags: /Ogty
;	COMDAT ?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::get_next, COMDAT
; _this$ = ecx

; 840  : 	TYPE *get_next(TYPE *ptr){return ptr->next;}

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	eax, DWORD PTR [eax+4]
	ret	4
?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::get_next
_TEXT	ENDS
PUBLIC	?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::get_prev
; Function compile flags: /Ogty
;	COMDAT ?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::get_prev, COMDAT
; _this$ = ecx

; 841  : 	TYPE *get_prev(TYPE *ptr){return ptr->prev;}

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	eax, DWORD PTR [eax+8]
	ret	4
?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::get_prev
_TEXT	ENDS
PUBLIC	?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::get_head
; Function compile flags: /Ogty
;	COMDAT ?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::get_head, COMDAT
; _this$ = ecx

; 847  : 	inline TYPE *get_head(void){return head;}

	mov	eax, DWORD PTR [ecx]
	ret	0
?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP	; XChain<CSysObj>::get_head
_TEXT	ENDS
PUBLIC	?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::get_tail
; Function compile flags: /Ogty
;	COMDAT ?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::get_tail, COMDAT
; _this$ = ecx

; 848  : 	inline TYPE *get_tail(void){return tail;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP	; XChain<CSysObj>::get_tail
_TEXT	ENDS
PUBLIC	??1?$XChain@VCSysObj@@@@QAE@XZ			; XChain<CSysObj>::~XChain<CSysObj>
PUBLIC	??_7CSysObj@@6B@				; CSysObj::`vftable'
EXTRN	__purecall:NEAR
EXTRN	?_global@@3PAVXGlobal@@A:DWORD			; _global
EXTRN	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z:NEAR ; XGlobal::unreg_global_object
;	COMDAT ??_7CSysObj@@6B@
; File C:\duke4\xcore\xcore.h
CONST	SEGMENT
??_7CSysObj@@6B@ DD FLAT:__purecall			; CSysObj::`vftable'
; Function compile flags: /Ogty
; File C:\duke4\xcore\xclass.h
CONST	ENDS
;	COMDAT ??1?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT
??1?$XChain@VCSysObj@@@@QAE@XZ PROC NEAR		; XChain<CSysObj>::~XChain<CSysObj>, COMDAT
; _this$ = ecx

; 853  : {

	push	esi
	mov	esi, ecx

; 854  : 	if (xchain_state.owned)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jns	SHORT $L57546

; 855  : 	{
; 856  : 		while(head)

	cmp	DWORD PTR [esi], 0
	je	SHORT $L57546
	push	ebx
	push	edi
$L57210:

; 857  : 		{
; 858  : 			TYPE *tmp=(TYPE *)head->next;

	mov	eax, DWORD PTR [esi]

; 859  : 			delete head;

	mov	edi, eax
	mov	ebx, DWORD PTR [eax+4]
	test	edi, edi
	je	SHORT $L57527
	mov	DWORD PTR [edi], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	mov	ecx, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	push	edi
	call	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z ; XGlobal::unreg_global_object
	mov	ecx, edi
	call	@xfree@4
$L57527:
	test	ebx, ebx

; 860  : 			head=tmp;

	mov	DWORD PTR [esi], ebx
	jne	SHORT $L57210
	pop	edi
	pop	ebx
$L57546:

; 861  : 		}
; 862  : 	}
; 863  : 	head=null;

	mov	DWORD PTR [esi], 0

; 864  : 	tail=null;

	mov	DWORD PTR [esi+4], 0
	pop	esi

; 865  : }

	ret	0
??1?$XChain@VCSysObj@@@@QAE@XZ ENDP			; XChain<CSysObj>::~XChain<CSysObj>
_TEXT	ENDS
PUBLIC	?lose_list@?$XChain@VCSysObj@@@@QAEXXZ		; XChain<CSysObj>::lose_list
; Function compile flags: /Ogty
;	COMDAT ?lose_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT
?lose_list@?$XChain@VCSysObj@@@@QAEXXZ PROC NEAR	; XChain<CSysObj>::lose_list, COMDAT
; _this$ = ecx

; 870  : 	head=null;tail=null;xchain_state.count=0;

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx], 0
	and	eax, -2147483648			; 80000000H
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], eax

; 871  : }

	ret	0
?lose_list@?$XChain@VCSysObj@@@@QAEXXZ ENDP		; XChain<CSysObj>::lose_list
_TEXT	ENDS
PUBLIC	?free_list@?$XChain@VCSysObj@@@@QAEXXZ		; XChain<CSysObj>::free_list
; Function compile flags: /Ogty
;	COMDAT ?free_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT
?free_list@?$XChain@VCSysObj@@@@QAEXXZ PROC NEAR	; XChain<CSysObj>::free_list, COMDAT
; _this$ = ecx

; 875  : {

	push	esi
	mov	esi, ecx

; 876  : 	if (xchain_state.owned)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jns	SHORT $L57572

; 877  : 	{
; 878  : 		while(head)

	cmp	DWORD PTR [esi], 0
	je	SHORT $L57572
	push	ebx
	push	edi
$L57226:

; 879  : 		{
; 880  : 			TYPE *tmp=(TYPE *)head->next;

	mov	eax, DWORD PTR [esi]

; 881  : 			delete head;

	mov	edi, eax
	mov	ebx, DWORD PTR [eax+4]
	test	edi, edi
	je	SHORT $L57553
	mov	DWORD PTR [edi], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	mov	ecx, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	push	edi
	call	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z ; XGlobal::unreg_global_object
	mov	ecx, edi
	call	@xfree@4
$L57553:
	test	ebx, ebx

; 882  : 			head=tmp;

	mov	DWORD PTR [esi], ebx
	jne	SHORT $L57226
	pop	edi
	pop	ebx
$L57572:

; 883  : 		}
; 884  : 	}
; 885  : 	head=null;tail=null;

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi

; 886  : }

	ret	0
?free_list@?$XChain@VCSysObj@@@@QAEXXZ ENDP		; XChain<CSysObj>::free_list
_TEXT	ENDS
PUBLIC	?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::add_head
; Function compile flags: /Ogty
;	COMDAT ?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::add_head, COMDAT
; _this$ = ecx

; 891  : 	ptr->next=head;

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 892  : 	ptr->prev=null;

	mov	DWORD PTR [eax+8], 0

; 893  : 	if (head)

	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $L57236

; 894  : 		head->prev=ptr;

	mov	DWORD PTR [edx+8], eax

; 897  : 	
; 898  : 	head=ptr;

	mov	DWORD PTR [ecx], eax

; 899  : 
; 900  : 	return head;
; 901  : }

	ret	4
$L57236:

; 895  : 	else
; 896  : 		tail=ptr;

	mov	DWORD PTR [ecx+4], eax

; 897  : 	
; 898  : 	head=ptr;

	mov	DWORD PTR [ecx], eax

; 899  : 
; 900  : 	return head;
; 901  : }

	ret	4
?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::add_head
_TEXT	ENDS
PUBLIC	?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::add_tail
; Function compile flags: /Ogty
;	COMDAT ?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::add_tail, COMDAT
; _this$ = ecx

; 906  : 	ptr->prev=tail;

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 907  : 	ptr->next=null;

	mov	DWORD PTR [eax+4], 0

; 908  : 	if (tail)

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	je	SHORT $L57242

; 909  : 		tail->next=ptr;

	mov	DWORD PTR [edx+4], eax

; 912  : 	
; 913  : 	tail=ptr;

	mov	DWORD PTR [ecx+4], eax

; 914  : 
; 915  : 	return tail;
; 916  : }

	ret	4
$L57242:

; 910  : 	else
; 911  : 		head=ptr;

	mov	DWORD PTR [ecx], eax

; 912  : 	
; 913  : 	tail=ptr;

	mov	DWORD PTR [ecx+4], eax

; 914  : 
; 915  : 	return tail;
; 916  : }

	ret	4
?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::add_tail
_TEXT	ENDS
PUBLIC	?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::remove_head
; Function compile flags: /Ogty
;	COMDAT ?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::remove_head, COMDAT
; _this$ = ecx

; 937  : 	if (!head)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $L57248

; 947  : 
; 948  : 	return ret;
; 949  : }

	ret	0
$L57248:

; 938  : 		return null;
; 939  : 
; 940  : 	TYPE *ret=head;
; 941  : 
; 942  : 	head=head->next;

	mov	edx, DWORD PTR [eax+4]

; 943  : 	if (!head)

	test	edx, edx
	mov	DWORD PTR [ecx], edx
	jne	SHORT $L57250

; 944  : 		tail=null;

	mov	DWORD PTR [ecx+4], edx

; 947  : 
; 948  : 	return ret;
; 949  : }

	ret	0
$L57250:

; 945  : 	else
; 946  : 		head->prev=null;

	mov	DWORD PTR [edx+8], 0

; 947  : 
; 948  : 	return ret;
; 949  : }

	ret	0
?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP ; XChain<CSysObj>::remove_head
_TEXT	ENDS
PUBLIC	?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::remove_tail
; Function compile flags: /Ogty
;	COMDAT ?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::remove_tail, COMDAT
; _this$ = ecx

; 954  : 	if (!tail)

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	jne	SHORT $L57256

; 964  : 
; 965  : 	return ret;
; 966  : }

	ret	0
$L57256:

; 955  : 		return null;
; 956  : 
; 957  : 	TYPE *ret=tail;
; 958  : 
; 959  : 	tail=tail->prev;

	mov	edx, DWORD PTR [eax+8]

; 960  : 	if (!tail)

	test	edx, edx
	mov	DWORD PTR [ecx+4], edx
	jne	SHORT $L57258

; 961  : 		head=null;

	mov	DWORD PTR [ecx], edx

; 964  : 
; 965  : 	return ret;
; 966  : }

	ret	0
$L57258:

; 962  : 	else
; 963  : 		tail->next=null;

	mov	DWORD PTR [edx+4], 0

; 964  : 
; 965  : 	return ret;
; 966  : }

	ret	0
?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP ; XChain<CSysObj>::remove_tail
_TEXT	ENDS
PUBLIC	?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::remove
; Function compile flags: /Ogty
;	COMDAT ?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::remove, COMDAT
; _this$ = ecx

; 921  : 	if (ptr->prev)

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [eax+8]
	test	edx, edx
	je	SHORT $L57264
	push	esi

; 922  : 		ptr->prev->next=ptr->next;

	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], esi
	pop	esi

; 923  : 	else

	jmp	SHORT $L57265
$L57264:

; 924  : 		head=ptr->next;

	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], edx
$L57265:

; 925  : 
; 926  : 	if (ptr->next)

	mov	edx, DWORD PTR [eax+4]
	test	edx, edx
	je	SHORT $L57266

; 927  : 		ptr->next->prev=ptr->prev;

	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx

; 930  : 
; 931  : 	return ptr;
; 932  : }

	ret	4
$L57266:

; 928  : 	else
; 929  : 		tail=ptr->prev;

	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+4], edx

; 930  : 
; 931  : 	return ptr;
; 932  : }

	ret	4
?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::remove
_TEXT	ENDS
PUBLIC	??_7XBufferReadInt@@6B@				; XBufferReadInt::`vftable'
PUBLIC	??_GXBufferReadInt@@UAEPAXI@Z			; XBufferReadInt::`scalar deleting destructor'
PUBLIC	??_EXBufferReadInt@@UAEPAXI@Z			; XBufferReadInt::`vector deleting destructor'
EXTRN	?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z:NEAR	; XBufferReadInt::read_direct
;	COMDAT ??_7XBufferReadInt@@6B@
; File C:\duke4\xcore\xcore.h
CONST	SEGMENT
??_7XBufferReadInt@@6B@ DD FLAT:?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z ; XBufferReadInt::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:??_EXBufferReadInt@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??_GXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXBufferReadInt@@UAEPAXI@Z PROC NEAR			; XBufferReadInt::`scalar deleting destructor', COMDAT
; _this$ = ecx
	mov	al, BYTE PTR ___flags$[esp-4]
	push	esi
	mov	esi, ecx
	test	al, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	je	SHORT $L57593
	call	@xfree@4
$L57593:
	mov	eax, esi
	pop	esi
	ret	4
??_GXBufferReadInt@@UAEPAXI@Z ENDP			; XBufferReadInt::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1XBufferReadInt@@UAE@XZ			; XBufferReadInt::~XBufferReadInt
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
; Function compile flags: /Ogty
;	COMDAT ??_EXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXBufferReadInt@@UAEPAXI@Z PROC NEAR			; XBufferReadInt::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56059
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XBufferReadInt@@UAE@XZ	; XBufferReadInt::~XBufferReadInt
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L57598
	mov	ecx, edi
	call	@xfree@4
$L57598:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56059:
	test	bl, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	je	SHORT $L57604
	mov	ecx, esi
	call	@xfree@4
$L57604:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXBufferReadInt@@UAEPAXI@Z ENDP			; XBufferReadInt::`vector deleting destructor'
; Function compile flags: /Ogty
; File C:\duke4\xcore\xstream.h
_TEXT	ENDS
;	COMDAT ??1XBufferReadInt@@UAE@XZ
_TEXT	SEGMENT
??1XBufferReadInt@@UAE@XZ PROC NEAR			; XBufferReadInt::~XBufferReadInt, COMDAT
; _this$ = ecx

; 37   : 	virtual ~XBufferReadInt(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	ret	0
??1XBufferReadInt@@UAE@XZ ENDP				; XBufferReadInt::~XBufferReadInt
_TEXT	ENDS
PUBLIC	??_7XBufferWriteInt@@6B@			; XBufferWriteInt::`vftable'
PUBLIC	??_GXBufferWriteInt@@UAEPAXI@Z			; XBufferWriteInt::`scalar deleting destructor'
PUBLIC	??_EXBufferWriteInt@@UAEPAXI@Z			; XBufferWriteInt::`vector deleting destructor'
EXTRN	?write_direct@XBufferWriteInt@@MAEKPBXKAAK@Z:NEAR ; XBufferWriteInt::write_direct
;	COMDAT ??_7XBufferWriteInt@@6B@
; File C:\duke4\xcore\xcore.h
CONST	SEGMENT
??_7XBufferWriteInt@@6B@ DD FLAT:?write_direct@XBufferWriteInt@@MAEKPBXKAAK@Z ; XBufferWriteInt::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:??_EXBufferWriteInt@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??_GXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXBufferWriteInt@@UAEPAXI@Z PROC NEAR		; XBufferWriteInt::`scalar deleting destructor', COMDAT
; _this$ = ecx
	mov	al, BYTE PTR ___flags$[esp-4]
	push	esi
	mov	esi, ecx
	test	al, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	je	SHORT $L57615
	call	@xfree@4
$L57615:
	mov	eax, esi
	pop	esi
	ret	4
??_GXBufferWriteInt@@UAEPAXI@Z ENDP			; XBufferWriteInt::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1XBufferWriteInt@@UAE@XZ			; XBufferWriteInt::~XBufferWriteInt
; Function compile flags: /Ogty
;	COMDAT ??_EXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXBufferWriteInt@@UAEPAXI@Z PROC NEAR		; XBufferWriteInt::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56111
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XBufferWriteInt@@UAE@XZ	; XBufferWriteInt::~XBufferWriteInt
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L57620
	mov	ecx, edi
	call	@xfree@4
$L57620:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56111:
	test	bl, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	je	SHORT $L57626
	mov	ecx, esi
	call	@xfree@4
$L57626:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXBufferWriteInt@@UAEPAXI@Z ENDP			; XBufferWriteInt::`vector deleting destructor'
; Function compile flags: /Ogty
; File C:\duke4\xcore\xstream.h
_TEXT	ENDS
;	COMDAT ??1XBufferWriteInt@@UAE@XZ
_TEXT	SEGMENT
??1XBufferWriteInt@@UAE@XZ PROC NEAR			; XBufferWriteInt::~XBufferWriteInt, COMDAT
; _this$ = ecx

; 56   : 	virtual ~XBufferWriteInt(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	ret	0
??1XBufferWriteInt@@UAE@XZ ENDP				; XBufferWriteInt::~XBufferWriteInt
_TEXT	ENDS
PUBLIC	??1XStreamRdDirect@@UAE@XZ			; XStreamRdDirect::~XStreamRdDirect
PUBLIC	??_GXStreamRdDirect@@UAEPAXI@Z			; XStreamRdDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXStreamRdDirect@@UAEPAXI@Z PROC NEAR		; XStreamRdDirect::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1XStreamRdDirect@@UAE@XZ		; XStreamRdDirect::~XStreamRdDirect
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L57634
	mov	ecx, esi
	call	@xfree@4
$L57634:
	mov	eax, esi
	pop	esi
	ret	4
??_GXStreamRdDirect@@UAEPAXI@Z ENDP			; XStreamRdDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1XStreamRdDirect@@UAE@XZ
_TEXT	SEGMENT
??1XStreamRdDirect@@UAE@XZ PROC NEAR			; XStreamRdDirect::~XStreamRdDirect, COMDAT
; _this$ = ecx

; 71   : 	~XStreamRdDirect(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	ret	0
??1XStreamRdDirect@@UAE@XZ ENDP				; XStreamRdDirect::~XStreamRdDirect
_TEXT	ENDS
PUBLIC	??_EXStreamRdDirect@@UAEPAXI@Z			; XStreamRdDirect::`vector deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_EXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXStreamRdDirect@@UAEPAXI@Z PROC NEAR		; XStreamRdDirect::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56163
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XStreamRdDirect@@UAE@XZ	; XStreamRdDirect::~XStreamRdDirect
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L57645
	mov	ecx, edi
	call	@xfree@4
$L57645:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56163:
	mov	ecx, esi
	call	??1XStreamRdDirect@@UAE@XZ		; XStreamRdDirect::~XStreamRdDirect
	test	bl, 1
	je	SHORT $L57647
	mov	ecx, esi
	call	@xfree@4
$L57647:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXStreamRdDirect@@UAEPAXI@Z ENDP			; XStreamRdDirect::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1XStreamWrDirect@@UAE@XZ			; XStreamWrDirect::~XStreamWrDirect
PUBLIC	??_GXStreamWrDirect@@UAEPAXI@Z			; XStreamWrDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXStreamWrDirect@@UAEPAXI@Z PROC NEAR		; XStreamWrDirect::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1XStreamWrDirect@@UAE@XZ		; XStreamWrDirect::~XStreamWrDirect
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L57654
	mov	ecx, esi
	call	@xfree@4
$L57654:
	mov	eax, esi
	pop	esi
	ret	4
??_GXStreamWrDirect@@UAEPAXI@Z ENDP			; XStreamWrDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1XStreamWrDirect@@UAE@XZ
_TEXT	SEGMENT
??1XStreamWrDirect@@UAE@XZ PROC NEAR			; XStreamWrDirect::~XStreamWrDirect, COMDAT
; _this$ = ecx

; 88   : 	~XStreamWrDirect(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	ret	0
??1XStreamWrDirect@@UAE@XZ ENDP				; XStreamWrDirect::~XStreamWrDirect
_TEXT	ENDS
PUBLIC	??_EXStreamWrDirect@@UAEPAXI@Z			; XStreamWrDirect::`vector deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_EXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXStreamWrDirect@@UAEPAXI@Z PROC NEAR		; XStreamWrDirect::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56219
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XStreamWrDirect@@UAE@XZ	; XStreamWrDirect::~XStreamWrDirect
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L57665
	mov	ecx, edi
	call	@xfree@4
$L57665:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56219:
	mov	ecx, esi
	call	??1XStreamWrDirect@@UAE@XZ		; XStreamWrDirect::~XStreamWrDirect
	test	bl, 1
	je	SHORT $L57667
	mov	ecx, esi
	call	@xfree@4
$L57667:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXStreamWrDirect@@UAEPAXI@Z ENDP			; XStreamWrDirect::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1XMemRdBuffer@@UAE@XZ				; XMemRdBuffer::~XMemRdBuffer
PUBLIC	??_GXMemRdBuffer@@UAEPAXI@Z			; XMemRdBuffer::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXMemRdBuffer@@UAEPAXI@Z PROC NEAR			; XMemRdBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1XMemRdBuffer@@UAE@XZ			; XMemRdBuffer::~XMemRdBuffer
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L57674
	mov	ecx, esi
	call	@xfree@4
$L57674:
	mov	eax, esi
	pop	esi
	ret	4
??_GXMemRdBuffer@@UAEPAXI@Z ENDP			; XMemRdBuffer::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7XMemRdBuffer@@6B@				; XMemRdBuffer::`vftable'
PUBLIC	??_EXMemRdBuffer@@UAEPAXI@Z			; XMemRdBuffer::`vector deleting destructor'
EXTRN	?read@XMemRdBuffer@@UAEKPAXKAAK1@Z:NEAR		; XMemRdBuffer::read
EXTRN	?seek@XMemRdBuffer@@UAEKJ@Z:NEAR		; XMemRdBuffer::seek
;	COMDAT ??_7XMemRdBuffer@@6B@
CONST	SEGMENT
??_7XMemRdBuffer@@6B@ DD FLAT:?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z ; XMemRdBuffer::`vftable'
	DD	FLAT:?read@XMemRdBuffer@@UAEKPAXKAAK1@Z
	DD	FLAT:?seek@XMemRdBuffer@@UAEKJ@Z
	DD	FLAT:??_EXMemRdBuffer@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??1XMemRdBuffer@@UAE@XZ
_TEXT	SEGMENT
??1XMemRdBuffer@@UAE@XZ PROC NEAR			; XMemRdBuffer::~XMemRdBuffer, COMDAT
; _this$ = ecx

; 109  : 	~XMemRdBuffer(void){}

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XMemRdBuffer@@6B@ ; XMemRdBuffer::`vftable'
	mov	ecx, DWORD PTR [esi+8]
	call	@xfree@4
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	pop	esi
	ret	0
??1XMemRdBuffer@@UAE@XZ ENDP				; XMemRdBuffer::~XMemRdBuffer
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_EXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXMemRdBuffer@@UAEPAXI@Z PROC NEAR			; XMemRdBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56272
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XMemRdBuffer@@UAE@XZ	; XMemRdBuffer::~XMemRdBuffer
	push	eax
	push	24					; 00000018H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L57690
	mov	ecx, edi
	call	@xfree@4
$L57690:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56272:
	mov	ecx, esi
	call	??1XMemRdBuffer@@UAE@XZ			; XMemRdBuffer::~XMemRdBuffer
	test	bl, 1
	je	SHORT $L57692
	mov	ecx, esi
	call	@xfree@4
$L57692:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXMemRdBuffer@@UAEPAXI@Z ENDP			; XMemRdBuffer::`vector deleting destructor'
_TEXT	ENDS
END
