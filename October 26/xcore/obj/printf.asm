; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	C:\duke4\xcore\printf.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT PARA USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BF@MBIJ@Cannot?5init?5CPrintfT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
drectve	SEGMENT DWORD USE32 PUBLIC ''
drectve	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
;	COMDAT ?get_large@PrintfManage@@IAEPAVCPrintfT@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_normal@PrintfManage@@IAEPAVCPrintfT@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1PrintfManage@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get@PrintfManage@@QAEPAVCPrintfT@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?release@PrintfManage@@QAEXPAVCPrintfT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMallocBlock@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_head@?$XList@VXStatistic@@@@QAEPAVXStatistic@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VCPrintfT@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_head@?$XChain@VCPrintfT@@@@QAEPAVCPrintfT@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XChain@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XChain@VXStatistic@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XList@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XList@VXStatistic@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_head@?$XList@VXStatistic@@@@QAEPAU_XPos@@PAVXStatistic@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_head@?$XList@VXStatistic@@@@QAEPAVXStatistic@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lose_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@PAX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcBase@VCStrObj@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcBase@VCStrObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XRcBase@VCStrObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$XRcBase@VCStrObj@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcPtr@VCPathObj@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcPtr@VCPathObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XRcPtr@VCPathObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$XRcPtr@VCPathObj@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XList@VXFindLevel@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@VXFindLevel@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XList@VCPrintfT@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@VCPrintfT@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XList@VCPrintfT@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_head@?$XList@VCPrintfT@@@@QAEPAU_XPos@@PAVCPrintfT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XChain@VCPrintfT@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lose_list@?$XChain@VCPrintfT@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_head@?$XChain@VCPrintfT@@@@QAEPAVCPrintfT@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove@?$XChain@VCPrintfT@@@@QAEPAVCPrintfT@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSysObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXFindLevel@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?new_node@?$XList@VXStatistic@@@@IAEPAUXNode@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@VXStatistic@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@PAX@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@VXFindLevel@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?new_node@?$XList@VCPrintfT@@@@IAEPAUXNode@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@VCPrintfT@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@?$XRcBase@VCStrObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelRef@?$XRcBase@VCStrObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@?$XRcPtr@VCPathObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelRef@?$XRcPtr@VCPathObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStrObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPathObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XStreamWrDirect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XStreamWrDirect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1XBufferWriteInt@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XBufferWriteInt@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3XStreamWrDirect@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?flush@XStreamWrDirect@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek@XStreamWrDirect@@UAEKJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XStreamRdDirect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XStreamRdDirect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1XBufferReadInt@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XBufferReadInt@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3XStreamRdDirect@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek@XStreamRdDirect@@UAEKJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?base_init@XFile@@EAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4autochar@@QAEAAV0@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pos_wr@CBaseStream@@UAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pos_rd@CBaseStream@@UAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?put@CBaseStream@@UAEKD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ioctl_write@CBaseStream@@UAEKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ioctl_read@CBaseStream@@UAEKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek_int@CBaseStream@@MAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XMemRdBuffer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XMemRdBuffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1autochar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XMemRdBuffer@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CStrObj@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CStrObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XFindLevel@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSysObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CSysObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3CPrintfT@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XListState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XStatistic@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XChainState@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XChainState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CPrintfT@@SAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CPrintfT@@SAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMallocBlock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CMallocBlock@@SAXPAXKPBKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CMallocBlock@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?init@CPrintf@@QAEXPADK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPrintf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?reset@CPrintf@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CPrintf@@QAEAAV0@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CPrintf@@QAEAAV0@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
FLAT	GROUP _DATA, CONST, _BSS, drectve, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_printf_manage@@3VPrintfManage@@A		; _printf_manage
_BSS	SEGMENT
?_printf_manage@@3VPrintfManage@@A DB 054H DUP (?)	; _printf_manage
_BSS	ENDS
CRT$XCU	SEGMENT
_$S5	DD	FLAT:_$E4
CRT$XCU	ENDS
drectve	SEGMENT
$SG56785 DB	'-INCLUDE:___@@_PchSym_@00@UwfpvEUcxlivUlyqUhgwxlivOlyq@', 00H
drectve	ENDS
PUBLIC	?fstrcpy_lim@CPrintf@@IAEKPBD@Z			; CPrintf::fstrcpy_lim
EXTRN	@fstrlen@4:NEAR
; Function compile flags: /Ogty
; File C:\duke4\xcore\printf.cpp
_TEXT	SEGMENT
_src$ = 8
?fstrcpy_lim@CPrintf@@IAEKPBD@Z PROC NEAR		; CPrintf::fstrcpy_lim
; _this$ = ecx

; 4    : {

	push	esi
	mov	esi, ecx
	push	edi

; 5    : 	U32 i,src_size;
; 6    : 
; 7    : 	if (size==0)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L56793

; 8    : 	{
; 9    : 		src_size=fstrlen(src);

	mov	edi, DWORD PTR _src$[esp+4]
	mov	ecx, edi
	call	@fstrlen@4

; 10   : 		if (src[0])

	cmp	BYTE PTR [edi], 0
	je	SHORT $L56794

; 11   : 			flags=(flags|PRINT_FULL) + src_size;

	mov	ecx, DWORD PTR [esi+16]
	or	ecx, -2147483648			; 80000000H
	add	ecx, eax
	mov	DWORD PTR [esi+16], ecx
$L56794:
	pop	edi

; 12   : 		return 0;

	xor	eax, eax
	pop	esi

; 30   : }

	ret	4
$L56793:

; 13   : 	}
; 14   : 
; 15   : 	for(i=0;i<size+1;i++)

	xor	edi, edi
	inc	eax
	test	eax, eax
	mov	eax, DWORD PTR _src$[esp+4]
	jbe	SHORT $L56797
$L56795:

; 16   : 	{
; 17   : 		*cur++=*src++;

	mov	edx, DWORD PTR [esi+4]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	ecx, DWORD PTR [esi+4]
	inc	ecx
	inc	eax
	mov	DWORD PTR [esi+4], ecx

; 18   : 		if (src[-1]==0)

	mov	dl, BYTE PTR [eax-1]
	test	dl, dl
	je	SHORT $L57545
	mov	edx, DWORD PTR [esi+8]
	inc	edi
	inc	edx
	cmp	edi, edx
	jb	SHORT $L56795
$L56797:

; 22   : 		}
; 23   : 	}
; 24   : 	cur--;src--;

	mov	edx, DWORD PTR [esi+4]
	lea	ecx, DWORD PTR [eax-1]
	dec	edx
	mov	DWORD PTR [esi+4], edx

; 25   : 	src_size=fstrlen(src);

	call	@fstrlen@4

; 26   : 	size=0;
; 27   : 	cur[0]=0;

	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [esi+8], 0
	mov	BYTE PTR [ecx], 0

; 28   : 	flags=(flags|PRINT_FULL) + src_size;

	mov	edx, DWORD PTR [esi+16]
	or	edx, -2147483648			; 80000000H
	add	edx, eax

; 29   : 	return i - 1;

	lea	eax, DWORD PTR [edi-1]
	mov	DWORD PTR [esi+16], edx
	pop	edi
	pop	esi

; 30   : }

	ret	4
$L57545:

; 19   : 		{
; 20   : 			size-=i;cur--;

	mov	eax, DWORD PTR [esi+8]
	sub	eax, edi
	dec	ecx
	mov	DWORD PTR [esi+8], eax

; 21   : 			return i;

	mov	eax, edi
	mov	DWORD PTR [esi+4], ecx
	pop	edi
	pop	esi

; 30   : }

	ret	4
?fstrcpy_lim@CPrintf@@IAEKPBD@Z ENDP			; CPrintf::fstrcpy_lim
_TEXT	ENDS
PUBLIC	?fstrncpy_lim@CPrintf@@IAEKPBDK@Z		; CPrintf::fstrncpy_lim
; Function compile flags: /Ogty
_TEXT	SEGMENT
_src$ = 8
_src_size$ = 12
?fstrncpy_lim@CPrintf@@IAEKPBDK@Z PROC NEAR		; CPrintf::fstrncpy_lim
; _this$ = ecx

; 34   : 	U32 i,tmp_size;
; 35   : 
; 36   : 	if (size==0)

	mov	eax, DWORD PTR [ecx+8]
	push	ebx
	push	ebp
	push	esi
	test	eax, eax
	push	edi
	jne	SHORT $L56806

; 37   : 	{
; 38   : 		if (src[0])

	mov	eax, DWORD PTR _src$[esp+12]
	cmp	BYTE PTR [eax], 0
	je	SHORT $L56807

; 39   : 			flags=(flags|PRINT_FULL) + src_size;

	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _src_size$[esp+12]
	or	edx, -2147483648			; 80000000H
	add	edx, eax
	mov	DWORD PTR [ecx+16], edx
$L56807:
	pop	edi
	pop	esi
	pop	ebp

; 40   : 		return 0;

	xor	eax, eax
	pop	ebx

; 63   : }

	ret	8
$L56806:

; 41   : 	}
; 42   : 
; 43   : 	tmp_size=src_size;

	mov	ebx, DWORD PTR _src_size$[esp+12]

; 44   : 	if (src_size>(size+1))

	inc	eax
	cmp	ebx, eax
	mov	esi, ebx
	jbe	SHORT $L56808

; 45   : 		tmp_size=size+1;

	mov	esi, eax
$L56808:

; 46   : 
; 47   : 	for(i=0;i<tmp_size;i++)

	xor	ebp, ebp
	test	esi, esi
	jbe	SHORT $L56811
	mov	edx, DWORD PTR _src$[esp+12]
$L56809:

; 48   : 	{
; 49   : 		*cur++=*src++;

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR 12+[esp+12], ebx
	mov	bl, BYTE PTR [edx]
	mov	BYTE PTR [eax], bl
	mov	eax, DWORD PTR [ecx+4]

; 50   : 		if (src[-1]==0)

	mov	ebx, DWORD PTR 12+[esp+12]
	inc	eax
	inc	edx
	mov	DWORD PTR [ecx+4], eax
	mov	edi, eax
	mov	al, BYTE PTR [edx-1]
	test	al, al
	je	SHORT $L57550
	inc	ebp
	cmp	ebp, esi
	jb	SHORT $L56809
$L56811:

; 53   : 			return i;
; 54   : 		}
; 55   : 	}
; 56   : 	size-=tmp_size-1;

	mov	edi, DWORD PTR [ecx+8]
	mov	edx, 1
	sub	edx, esi
	add	edi, edx

; 57   : 	cur--;src--;

	mov	edx, DWORD PTR [ecx+4]
	dec	edx
	mov	DWORD PTR [ecx+8], edi
	mov	eax, edx
	mov	DWORD PTR [ecx+4], edx

; 58   : 	cur[0]=0;

	mov	BYTE PTR [eax], 0

; 59   : 	if (!size)

	mov	eax, DWORD PTR [ecx+8]
	test	eax, eax
	jne	SHORT $L56813

; 60   : 		flags=(flags|PRINT_FULL) + (src_size - tmp_size);

	mov	eax, DWORD PTR [ecx+16]
	or	eax, -2147483648			; 80000000H
	sub	eax, esi
	add	eax, ebx
	mov	DWORD PTR [ecx+16], eax
$L56813:
	pop	edi

; 61   : 
; 62   : 	return i;

	mov	eax, ebp
	pop	esi
	pop	ebp
	pop	ebx

; 63   : }

	ret	8
$L57550:

; 51   : 		{
; 52   : 			size-=i;cur--;

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, ebp
	dec	edi
	mov	DWORD PTR [ecx+4], edi
	mov	DWORD PTR [ecx+8], eax
	pop	edi

; 61   : 
; 62   : 	return i;

	mov	eax, ebp
	pop	esi
	pop	ebp
	pop	ebx

; 63   : }

	ret	8
?fstrncpy_lim@CPrintf@@IAEKPBDK@Z ENDP			; CPrintf::fstrncpy_lim
_TEXT	ENDS
PUBLIC	?num@CPrintf@@QAEKK@Z				; CPrintf::num
EXTRN	@fitoa@8:NEAR
; Function compile flags: /Ogty
_TEXT	SEGMENT
_val$ = 8
_num_str$ = -16
?num@CPrintf@@QAEKK@Z PROC NEAR				; CPrintf::num
; _this$ = ecx

; 66   : {

	sub	esp, 16					; 00000010H

; 67   : 	char num_str[13];
; 68   : 
; 69   : 	fitoa(val,num_str);

	lea	edx, DWORD PTR _num_str$[esp+16]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _val$[esp+16]
	call	@fitoa@8

; 70   : 	return fstrcpy_lim(num_str);

	lea	eax, DWORD PTR _num_str$[esp+20]
	mov	ecx, esi
	push	eax
	call	?fstrcpy_lim@CPrintf@@IAEKPBD@Z		; CPrintf::fstrcpy_lim
	pop	esi

; 71   : }

	add	esp, 16					; 00000010H
	ret	4
?num@CPrintf@@QAEKK@Z ENDP				; CPrintf::num
_TEXT	ENDS
PUBLIC	?num@CPrintf@@QAEKJ@Z				; CPrintf::num
; Function compile flags: /Ogty
_TEXT	SEGMENT
_val$ = 8
_num_str$ = -16
?num@CPrintf@@QAEKJ@Z PROC NEAR				; CPrintf::num
; _this$ = ecx

; 74   : {

	sub	esp, 16					; 00000010H

; 75   : 	char num_str[13];
; 76   : 
; 77   : 	fitoa(val,num_str);

	lea	edx, DWORD PTR _num_str$[esp+16]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _val$[esp+16]
	call	@fitoa@8

; 78   : 	return fstrcpy_lim(num_str);

	lea	eax, DWORD PTR _num_str$[esp+20]
	mov	ecx, esi
	push	eax
	call	?fstrcpy_lim@CPrintf@@IAEKPBD@Z		; CPrintf::fstrcpy_lim
	pop	esi

; 79   : }

	add	esp, 16					; 00000010H
	ret	4
?num@CPrintf@@QAEKJ@Z ENDP				; CPrintf::num
_TEXT	ENDS
PUBLIC	?chr@CPrintf@@QAEKD@Z				; CPrintf::chr
; Function compile flags: /Ogty
_TEXT	SEGMENT
_val$ = 8
?chr@CPrintf@@QAEKD@Z PROC NEAR				; CPrintf::chr
; _this$ = ecx

; 83   : 	if (size<1)

	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 1
	cmp	edx, eax
	jae	SHORT $L56828

; 84   : 	{
; 85   : 		if (val)

	mov	al, BYTE PTR _val$[esp-4]
	test	al, al
	je	SHORT $L56829

; 86   : 		{
; 87   : 			flags|=PRINT_FULL;

	mov	eax, DWORD PTR [ecx+16]
	or	eax, -2147483648			; 80000000H

; 88   : 			flags+=1;

	inc	eax
	mov	DWORD PTR [ecx+16], eax
$L56829:

; 89   : 		}
; 90   : 		cur[0]=0;

	mov	ecx, DWORD PTR [ecx+4]

; 91   : 		return 0;

	xor	eax, eax
	mov	BYTE PTR [ecx], 0

; 98   : 	return 1;
; 99   : }

	ret	4
$L56828:

; 92   : 	}
; 93   : 
; 94   : 	cur[0]=val;

	mov	edx, DWORD PTR [ecx+4]
	push	ebx
	mov	bl, BYTE PTR _val$[esp]
	mov	BYTE PTR [edx], bl

; 95   : 	cur[1]=0;

	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+1], 0

; 96   : 	cur++;

	mov	ebx, DWORD PTR [ecx+4]

; 97   : 	size--;

	mov	edx, DWORD PTR [ecx+8]
	inc	ebx
	dec	edx
	mov	DWORD PTR [ecx+4], ebx
	mov	DWORD PTR [ecx+8], edx
	pop	ebx

; 98   : 	return 1;
; 99   : }

	ret	4
?chr@CPrintf@@QAEKD@Z ENDP				; CPrintf::chr
_TEXT	ENDS
PUBLIC	?hex@CPrintf@@QAEKK@Z				; CPrintf::hex
EXTRN	@hex32@8:NEAR
; Function compile flags: /Ogty
_TEXT	SEGMENT
_num$ = 8
_num_str$ = -12
?hex@CPrintf@@QAEKK@Z PROC NEAR				; CPrintf::hex
; _this$ = ecx

; 102  : {

	sub	esp, 12					; 0000000cH

; 103  : 	char num_str[12];
; 104  : 	U32 len;
; 105  : 
; 106  : 	len=hex32(num,num_str);

	lea	edx, DWORD PTR _num_str$[esp+12]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _num$[esp+12]
	push	edi
	call	@hex32@8
	mov	edi, eax

; 107  : 
; 108  : 	fstrcpy_lim(num_str);

	lea	eax, DWORD PTR _num_str$[esp+20]
	push	eax
	mov	ecx, esi
	call	?fstrcpy_lim@CPrintf@@IAEKPBD@Z		; CPrintf::fstrcpy_lim

; 109  : 
; 110  : 	return len;

	mov	eax, edi
	pop	edi
	pop	esi

; 111  : }

	add	esp, 12					; 0000000cH
	ret	4
?hex@CPrintf@@QAEKK@Z ENDP				; CPrintf::hex
_TEXT	ENDS
PUBLIC	?hex64@CPrintf@@QAEK_K@Z			; CPrintf::hex64
EXTRN	_hex64:NEAR
; Function compile flags: /Ogty
_TEXT	SEGMENT
_num$ = 8
_num_str$ = -20
?hex64@CPrintf@@QAEK_K@Z PROC NEAR			; CPrintf::hex64
; _this$ = ecx

; 115  : 	char num_str[20];
; 116  : 	U32 len;
; 117  : 
; 118  : 	len=::hex64(num,num_str);

	mov	edx, DWORD PTR _num$[esp-4]
	sub	esp, 20					; 00000014H
	lea	eax, DWORD PTR _num_str$[esp+20]
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _num$[esp+24]
	push	edi
	push	eax
	push	ecx
	push	edx
	call	_hex64
	add	esp, 12					; 0000000cH
	mov	edi, eax

; 119  : 
; 120  : 	fstrcpy_lim(num_str);

	lea	eax, DWORD PTR _num_str$[esp+28]
	mov	ecx, esi
	push	eax
	call	?fstrcpy_lim@CPrintf@@IAEKPBD@Z		; CPrintf::fstrcpy_lim

; 121  : 
; 122  : 	return len;

	mov	eax, edi
	pop	edi
	pop	esi

; 123  : }

	add	esp, 20					; 00000014H
	ret	8
?hex64@CPrintf@@QAEK_K@Z ENDP				; CPrintf::hex64
_TEXT	ENDS
PUBLIC	?add_path@CPrintf@@QAEKPBD@Z			; CPrintf::add_path
; Function compile flags: /Ogty
_TEXT	SEGMENT
_str$ = 8
?add_path@CPrintf@@QAEKPBD@Z PROC NEAR			; CPrintf::add_path
; _this$ = ecx

; 126  : {

	push	esi
	mov	esi, ecx

; 127  : 	if (cur==dst)

	mov	eax, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	cmp	eax, ecx
	je	SHORT $skip$56847

; 128  : 		goto skip;
; 129  : 	if (cur[-1]!=OS_SLASH)

	cmp	BYTE PTR [eax-1], 92			; 0000005cH
	je	SHORT $skip$56847

; 130  : 		*this << OS_SLASH;

	push	92					; 0000005cH
	mov	ecx, esi
	call	?chr@CPrintf@@QAEKD@Z			; CPrintf::chr
$skip$56847:

; 131  : skip:
; 132  : 	*this << str;

	mov	eax, DWORD PTR _str$[esp]
	mov	ecx, esi
	push	eax
	call	?fstrcpy_lim@CPrintf@@IAEKPBD@Z		; CPrintf::fstrcpy_lim

; 133  : 	return TRUE;

	mov	eax, 1
	pop	esi

; 134  : }

	ret	4
?add_path@CPrintf@@QAEKPBD@Z ENDP			; CPrintf::add_path
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
EXTRN	@xfree@4:NEAR
; Function compile flags: /Ogty
; File C:\duke4\xcore\xcore.h
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 130  : __inline void operator delete(void *ptr){xfree(ptr);}

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3@YAXPAX@Z ENDP					; operator delete
; Function compile flags: /Ogty
_TEXT	ENDS
_TEXT	SEGMENT
_$E4	PROC NEAR
	call	_$E1
	jmp	_$E3
_$E4	ENDP
_TEXT	ENDS
PUBLIC	??0PrintfManage@@QAE@XZ				; PrintfManage::PrintfManage
; Function compile flags: /Ogty
; File C:\duke4\xcore\printf.cpp
_TEXT	SEGMENT
_$E1	PROC NEAR

; 216  : PrintfManage _printf_manage;

	mov	ecx, OFFSET FLAT:?_printf_manage@@3VPrintfManage@@A
	jmp	??0PrintfManage@@QAE@XZ			; PrintfManage::PrintfManage
_$E1	ENDP
_TEXT	ENDS
EXTRN	_atexit:NEAR
; Function compile flags: /Ogty
_TEXT	SEGMENT
_$E3	PROC NEAR
	push	OFFSET FLAT:_$E2
	call	_atexit
	pop	ecx
	ret	0
_$E3	ENDP
_TEXT	ENDS
PUBLIC	??1PrintfManage@@QAE@XZ				; PrintfManage::~PrintfManage
; Function compile flags: /Ogty
_TEXT	SEGMENT
_$E2	PROC NEAR
	mov	ecx, OFFSET FLAT:?_printf_manage@@3VPrintfManage@@A
	jmp	??1PrintfManage@@QAE@XZ			; PrintfManage::~PrintfManage
_$E2	ENDP
_TEXT	ENDS
PUBLIC	??1?$XChain@VCPrintfT@@@@QAE@XZ			; XChain<CPrintfT>::~XChain<CPrintfT>
PUBLIC	?flush_all@PrintfManage@@QAEXXZ			; PrintfManage::flush_all
PUBLIC	?free_mem@CPrintfT@@SAXPAX@Z			; CPrintfT::free_mem
PUBLIC	??1?$XList@VCPrintfT@@@@QAE@XZ			; XList<CPrintfT>::~XList<CPrintfT>
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
EXTRN	@xlist_free_nodes@4:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File C:\duke4\xcore\xclass.h
xdata$x	SEGMENT
$T57599	DD	0ffffffffH
	DD	FLAT:$L57571
	DD	00H
	DD	FLAT:$L57572
$T57594	DD	019930520H
	DD	02H
	DD	FLAT:$T57599
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File C:\duke4\xcore\printf.cpp
xdata$x	ENDS
;	COMDAT ??1PrintfManage@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1PrintfManage@@QAE@XZ PROC NEAR			; PrintfManage::~PrintfManage, COMDAT
; _this$ = ecx

; 180  : 	~PrintfManage(void){flush_all();}

	push	-1
	push	$L57597
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[esp+20], esi
	mov	DWORD PTR __$EHRec$[esp+28], 1
	call	?flush_all@PrintfManage@@QAEXXZ		; PrintfManage::flush_all
	push	OFFSET FLAT:??1?$XChain@VCPrintfT@@@@QAE@XZ ; XChain<CPrintfT>::~XChain<CPrintfT>
	push	5
	lea	eax, DWORD PTR [esi+24]
	push	12					; 0000000cH
	push	eax
	mov	BYTE PTR __$EHRec$[esp+44], 0
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	mov	al, BYTE PTR [esi+19]
	mov	DWORD PTR __$EHRec$[esp+28], -1
	test	al, 1
	je	SHORT $L57584
	cmp	DWORD PTR [esi], 0
	je	SHORT $L57584
$L57583:
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?free_mem@CPrintfT@@SAXPAX@Z		; CPrintfT::free_mem
	mov	eax, DWORD PTR [esi]
	add	esp, 4
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	mov	DWORD PTR [esi], eax
	jne	SHORT $L57583
$L57584:
	mov	ecx, esi
	call	@xlist_free_nodes@4
	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	pop	esi
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L57571:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$XList@VCPrintfT@@@@QAE@XZ		; XList<CPrintfT>::~XList<CPrintfT>
$L57572:
	push	OFFSET FLAT:??1?$XChain@VCPrintfT@@@@QAE@XZ ; XChain<CPrintfT>::~XChain<CPrintfT>
	push	5
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	ret	0
$L57597:
	mov	eax, OFFSET FLAT:$T57594
	jmp	___CxxFrameHandler
text$x	ENDS
??1PrintfManage@@QAE@XZ ENDP				; PrintfManage::~PrintfManage
PUBLIC	??0CPrintfT@@QAE@PAVCMallocBlock@@K@Z		; CPrintfT::CPrintfT
EXTRN	?get_next@CMallocBlock@@QAEPAXXZ:NEAR		; CMallocBlock::get_next
; Function compile flags: /Ogty
_TEXT	SEGMENT
__block$ = 8
__size$ = 12
??0CPrintfT@@QAE@PAVCMallocBlock@@K@Z PROC NEAR		; CPrintfT::CPrintfT
; _this$ = ecx

; 220  : {

	push	ebx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR __block$[esp+4]
	xor	ebx, ebx
	mov	DWORD PTR [esi], ebx
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	mov	DWORD PTR [esi+20], ebx
	mov	DWORD PTR [esi+24], ebx
	mov	DWORD PTR [esi+28], ebx
	mov	DWORD PTR [esi+32], ecx

; 221  : 	CPrintf::init((char *)block->get_next(),_size);

	call	?get_next@CMallocBlock@@QAEPAXXZ	; CMallocBlock::get_next
	mov	DWORD PTR [esi], eax
	mov	BYTE PTR [eax], bl
	mov	DWORD PTR [esi+4], eax
	mov	eax, DWORD PTR __size$[esp+4]
	mov	DWORD PTR [esi+12], eax
	dec	eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+16], ebx

; 222  : }

	mov	eax, esi
	pop	esi
	pop	ebx
	ret	8
??0CPrintfT@@QAE@PAVCMallocBlock@@K@Z ENDP		; CPrintfT::CPrintfT
_TEXT	ENDS
EXTRN	??1CMallocBlock@@QAE@XZ:NEAR			; CMallocBlock::~CMallocBlock
; Function compile flags: /Ogty
_TEXT	SEGMENT
_ptr$ = 8
?free_mem@CPrintfT@@SAXPAX@Z PROC NEAR			; CPrintfT::free_mem

; 226  : 	CMallocBlock *block=((CPrintfT *)ptr)->block;
; 227  : 
; 228  : 	delete block;

	mov	eax, DWORD PTR _ptr$[esp-4]
	push	esi
	mov	esi, DWORD PTR [eax+32]
	test	esi, esi
	je	SHORT $L57615
	mov	ecx, esi
	call	??1CMallocBlock@@QAE@XZ			; CMallocBlock::~CMallocBlock
	mov	ecx, esi
	pop	esi
	jmp	@xfree@4
$L57615:
	pop	esi

; 229  : }

	ret	0
?free_mem@CPrintfT@@SAXPAX@Z ENDP			; CPrintfT::free_mem
_TEXT	ENDS
PUBLIC	??0?$XChain@VCPrintfT@@@@QAE@XZ			; XChain<CPrintfT>::XChain<CPrintfT>
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:NEAR			; `eh vector constructor iterator'
xdata$x	SEGMENT
$T57642	DD	0ffffffffH
	DD	FLAT:$L57628
$T57640	DD	019930520H
	DD	01H
	DD	FLAT:$T57642
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??0PrintfManage@@QAE@XZ PROC NEAR			; PrintfManage::PrintfManage
; _this$ = ecx

; 232  : {

	push	-1
	push	$L57641
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	esi
	mov	esi, ecx
	xor	eax, eax
	mov	DWORD PTR _this$[esp+20], esi
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], eax
	mov	DWORD PTR [esi+12], eax
	mov	ecx, DWORD PTR [esi+16]
	and	ecx, -16777211				; ff000005H
	or	ecx, 16777221				; 01000005H
	mov	DWORD PTR [esi+16], ecx
	mov	DWORD PTR [esi+20], eax
	push	OFFSET FLAT:??1?$XChain@VCPrintfT@@@@QAE@XZ ; XChain<CPrintfT>::~XChain<CPrintfT>
	push	OFFSET FLAT:??0?$XChain@VCPrintfT@@@@QAE@XZ ; XChain<CPrintfT>::XChain<CPrintfT>
	push	5
	lea	edx, DWORD PTR [esi+24]
	push	12					; 0000000cH
	push	edx
	mov	DWORD PTR __$EHRec$[esp+48], eax
	call	??_L@YGXPAXIHP6EX0@Z1@Z			; `eh vector constructor iterator'

; 233  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+20]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
text$x	SEGMENT
$L57628:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$XList@VCPrintfT@@@@QAE@XZ		; XList<CPrintfT>::~XList<CPrintfT>
$L57641:
	mov	eax, OFFSET FLAT:$T57640
	jmp	___CxxFrameHandler
text$x	ENDS
??0PrintfManage@@QAE@XZ ENDP				; PrintfManage::PrintfManage
; Function compile flags: /Ogty
_TEXT	SEGMENT
?flush_all@PrintfManage@@QAEXXZ PROC NEAR		; PrintfManage::flush_all
; _this$ = ecx

; 236  : {

	push	esi
	mov	esi, ecx
	push	edi

; 237  : 	full_list.free_list();

	xor	edi, edi
	test	BYTE PTR [esi+19], 1
	je	SHORT $L57655
	cmp	DWORD PTR [esi], edi
	je	SHORT $L57655
$L57654:
	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?free_mem@CPrintfT@@SAXPAX@Z		; CPrintfT::free_mem
	mov	edx, DWORD PTR [esi]
	add	esp, 4
	mov	eax, DWORD PTR [edx]
	cmp	eax, edi
	mov	DWORD PTR [esi], eax
	jne	SHORT $L57654
$L57655:
	mov	ecx, esi
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], edi
	call	@xlist_free_nodes@4
	lea	eax, DWORD PTR [esi+32]
	mov	ecx, 5
$L57062:

; 238  : 	for (U32 i=0;i<5;i++)
; 239  : 		hash[i].lose_list();

	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [eax-8], edi
	and	edx, -2147483648			; 80000000H
	mov	DWORD PTR [eax-4], edi
	mov	DWORD PTR [eax], edx
	add	eax, 12					; 0000000cH
	dec	ecx
	jne	SHORT $L57062
	pop	edi
	pop	esi

; 240  : }

	ret	0
?flush_all@PrintfManage@@QAEXXZ ENDP			; PrintfManage::flush_all
_TEXT	ENDS
PUBLIC	?alloc@PrintfManage@@IAEPAVCPrintfT@@KK@Z	; PrintfManage::alloc
PUBLIC	??3CPrintfT@@SAXPAX0@Z				; CPrintfT::operator delete
EXTRN	@xlist_new_node@8:NEAR
EXTRN	??2CMallocBlock@@SAPAXIKPBKK@Z:NEAR		; CMallocBlock::operator new
xdata$x	SEGMENT
$T57703	DD	0ffffffffH
	DD	FLAT:$L57680
$T57700	DD	019930520H
	DD	01H
	DD	FLAT:$T57703
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
_TEXT	SEGMENT
_size$ = 12
_list$ = -20
_obj$ = 12
$T57676 = -24
__$EHRec$ = -12
?alloc@PrintfManage@@IAEPAVCPrintfT@@KK@Z PROC NEAR	; PrintfManage::alloc
; _this$ = ecx

; 244  : {

	push	-1
	push	$L57701
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 12					; 0000000cH
	push	ebp

; 245  : 	U32 list[2]={sizeof(CPrintfT),size};

	mov	ebp, DWORD PTR _size$[esp+24]
	push	esi
	push	edi

; 246  : 	CMallocBlock *block;
; 247  : 	CPrintfT     *obj;
; 248  : 
; 249  : 	D_ASSERT(index<5);
; 250  : 
; 251  : 	block=new(2,list,4) CMallocBlock;

	lea	eax, DWORD PTR _list$[esp+36]
	push	4
	push	eax
	push	2
	push	4
	mov	esi, ecx
	mov	DWORD PTR _list$[esp+52], 36		; 00000024H
	mov	DWORD PTR _list$[esp+56], ebp
	call	??2CMallocBlock@@SAPAXIKPBKK@Z		; CMallocBlock::operator new
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $L57673
	mov	BYTE PTR [eax+1], 0
	mov	edi, eax
	jmp	SHORT $L57674
$L57673:
	xor	edi, edi
$L57674:

; 252  : 	obj=(CPrintfT *)block->get_next();

	mov	ecx, edi
	call	?get_next@CMallocBlock@@QAEPAXXZ	; CMallocBlock::get_next
	mov	DWORD PTR _obj$[esp+32], eax

; 253  : 	obj=new(obj) CPrintfT(block,size);

	mov	DWORD PTR $T57676[esp+36], eax
	test	eax, eax
	mov	DWORD PTR __$EHRec$[esp+44], 0
	je	SHORT $L57677
	push	ebp
	push	edi
	mov	ecx, eax
	call	??0CPrintfT@@QAE@PAVCMallocBlock@@K@Z	; CPrintfT::CPrintfT
	mov	edi, eax
	jmp	SHORT $L57678
$L57677:
	xor	edi, edi
$L57678:

; 254  : 
; 255  : 	/* add to list, so we can free it */
; 256  : 	full_list.add_head(obj);

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	SHORT $L57692
	mov	edx, 12					; 0000000cH
	mov	ecx, esi
	call	@xlist_new_node@8
	mov	DWORD PTR [esi+8], eax
$L57692:
	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [eax+8], edi
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	jne	SHORT $L57694
	mov	DWORD PTR [esi+4], eax
	jmp	SHORT $L57702
$L57694:
	mov	DWORD PTR [ecx+4], eax
$L57702:

; 257  : 
; 258  : 	return obj;
; 259  : }

	mov	ecx, DWORD PTR __$EHRec$[esp+36]
	mov	DWORD PTR [esi], eax
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 24					; 00000018H
	ret	8
_TEXT	ENDS
text$x	SEGMENT
$L57680:
	mov	eax, DWORD PTR _obj$[ebp-4]
	push	eax
	mov	ecx, DWORD PTR $T57676[ebp]
	push	ecx
	call	??3CPrintfT@@SAXPAX0@Z			; CPrintfT::operator delete
	add	esp, 8
	ret	0
$L57701:
	mov	eax, OFFSET FLAT:$T57700
	jmp	___CxxFrameHandler
text$x	ENDS
?alloc@PrintfManage@@IAEPAVCPrintfT@@KK@Z ENDP		; PrintfManage::alloc
PUBLIC	?get_printf@@YAPAVCPrintfT@@K@Z			; get_printf
; Function compile flags: /Ogty
_TEXT	SEGMENT
_size$ = 8
?get_printf@@YAPAVCPrintfT@@K@Z PROC NEAR		; get_printf

; 263  : 	return _printf_manage.get(size);

	mov	edx, DWORD PTR _size$[esp-4]
	cmp	edx, 2048				; 00000800H
	jb	SHORT $L57768
	mov	eax, DWORD PTR ?_printf_manage@@3VPrintfManage@@A+72
	test	eax, eax
	je	SHORT $L57777
	mov	ecx, DWORD PTR [eax+12]
$L57776:
	cmp	ecx, edx
	jb	SHORT $L57776
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	SHORT $L57783
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+24], edx
	jmp	SHORT $L57784
$L57783:
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR ?_printf_manage@@3VPrintfManage@@A+72, ecx
$L57784:
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	SHORT $L57785
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], edx

; 264  : }

	ret	0

; 263  : 	return _printf_manage.get(size);

$L57785:
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR ?_printf_manage@@3VPrintfManage@@A+76, ecx

; 264  : }

	ret	0

; 263  : 	return _printf_manage.get(size);

$L57777:
	push	edx
	push	4
	mov	ecx, OFFSET FLAT:?_printf_manage@@3VPrintfManage@@A
	call	?alloc@PrintfManage@@IAEPAVCPrintfT@@KK@Z ; PrintfManage::alloc

; 264  : }

	ret	0

; 263  : 	return _printf_manage.get(size);

$L57768:
	mov	eax, 128				; 00000080H
	xor	ecx, ecx
	cmp	edx, eax
	jbe	SHORT $L57772
$L57771:
	add	eax, eax
	inc	ecx
	cmp	edx, eax
	ja	SHORT $L57771
$L57772:
	lea	eax, DWORD PTR [ecx+ecx*2+6]
	push	esi
	mov	edx, ecx
	lea	esi, DWORD PTR ?_printf_manage@@3VPrintfManage@@A[eax*4]
	mov	eax, DWORD PTR ?_printf_manage@@3VPrintfManage@@A[eax*4]
	test	eax, eax
	jne	SHORT $L57792
$L57791:
	inc	edx
	add	esi, 12					; 0000000cH
	cmp	edx, 4
	je	SHORT $L57811
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $L57791
$L57792:
	mov	esi, edx
	sub	esi, ecx
	cmp	esi, 1
	jbe	SHORT $L57794
	mov	eax, 128				; 00000080H
	shl	eax, cl
	push	eax
	push	ecx
	mov	ecx, OFFSET FLAT:?_printf_manage@@3VPrintfManage@@A
	call	?alloc@PrintfManage@@IAEPAVCPrintfT@@KK@Z ; PrintfManage::alloc
	pop	esi

; 264  : }

	ret	0
$L57811:

; 263  : 	return _printf_manage.get(size);

	mov	edx, 128				; 00000080H
	shl	edx, cl
	push	edx
	push	ecx
	mov	ecx, OFFSET FLAT:?_printf_manage@@3VPrintfManage@@A
	call	?alloc@PrintfManage@@IAEPAVCPrintfT@@KK@Z ; PrintfManage::alloc
	pop	esi

; 264  : }

	ret	0

; 263  : 	return _printf_manage.get(size);

$L57794:
	lea	ecx, DWORD PTR [edx+edx*2+6]
	lea	edx, DWORD PTR ?_printf_manage@@3VPrintfManage@@A[ecx*4]
	mov	ecx, DWORD PTR [eax+20]
	test	ecx, ecx
	je	SHORT $L57801
	mov	esi, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+24], esi
	jmp	SHORT $L57802
$L57801:
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx], ecx
$L57802:
	mov	ecx, DWORD PTR [eax+24]
	test	ecx, ecx
	je	SHORT $L57803
	mov	edx, DWORD PTR [eax+20]
	pop	esi
	mov	DWORD PTR [ecx+20], edx

; 264  : }

	ret	0

; 263  : 	return _printf_manage.get(size);

$L57803:
	mov	ecx, DWORD PTR [eax+20]
	pop	esi
	mov	DWORD PTR [edx+4], ecx

; 264  : }

	ret	0
?get_printf@@YAPAVCPrintfT@@K@Z ENDP			; get_printf
_TEXT	ENDS
PUBLIC	?release_printf@@YAXPAVCPrintfT@@@Z		; release_printf
EXTRN	@_bsf@4:NEAR
; Function compile flags: /Ogty
_TEXT	SEGMENT
_obj$ = 8
?release_printf@@YAXPAVCPrintfT@@@Z PROC NEAR		; release_printf

; 267  : {

	push	esi

; 268  : 	_printf_manage.release(obj);

	mov	esi, DWORD PTR _obj$[esp]
	mov	ecx, DWORD PTR [esi+12]
	cmp	ecx, 2048				; 00000800H
	jbe	SHORT $L57833
	mov	eax, DWORD PTR ?_printf_manage@@3VPrintfManage@@A+72
	xor	edx, edx
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR [esi+20], edx
	mov	eax, DWORD PTR ?_printf_manage@@3VPrintfManage@@A+72
	cmp	eax, edx
	je	SHORT $L57837
	mov	DWORD PTR [eax+20], esi
	mov	DWORD PTR ?_printf_manage@@3VPrintfManage@@A+72, esi
	pop	esi

; 269  : }

	ret	0

; 268  : 	_printf_manage.release(obj);

$L57837:
	mov	DWORD PTR ?_printf_manage@@3VPrintfManage@@A+76, esi
	mov	DWORD PTR ?_printf_manage@@3VPrintfManage@@A+72, esi
	pop	esi

; 269  : }

	ret	0

; 268  : 	_printf_manage.release(obj);

$L57833:
	call	@_bsf@4
	sub	eax, 5
	lea	ecx, DWORD PTR [eax+eax*2]
	mov	edx, DWORD PTR ?_printf_manage@@3VPrintfManage@@A[ecx*4]
	lea	eax, DWORD PTR ?_printf_manage@@3VPrintfManage@@A[ecx*4]
	mov	DWORD PTR [esi+24], edx
	xor	edx, edx
	mov	DWORD PTR [esi+20], edx
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, edx
	je	SHORT $L57841
	mov	DWORD PTR [ecx+20], esi
	mov	DWORD PTR [eax], esi
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi]
	dec	ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+16], edx
	pop	esi

; 269  : }

	ret	0

; 268  : 	_printf_manage.release(obj);

$L57841:
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax], esi
	mov	ecx, DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi]
	dec	ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+16], edx
	pop	esi

; 269  : }

	ret	0
?release_printf@@YAXPAVCPrintfT@@@Z ENDP		; release_printf
_TEXT	ENDS
PUBLIC	?_flush_printf_mem@@YAXXZ			; _flush_printf_mem
; Function compile flags: /Ogty
_TEXT	SEGMENT
?_flush_printf_mem@@YAXXZ PROC NEAR			; _flush_printf_mem

; 273  : 	_printf_manage.flush_all();

	mov	ecx, OFFSET FLAT:?_printf_manage@@3VPrintfManage@@A
	jmp	?flush_all@PrintfManage@@QAEXXZ		; PrintfManage::flush_all
?_flush_printf_mem@@YAXXZ ENDP				; _flush_printf_mem
_TEXT	ENDS
PUBLIC	??0?$XChain@VCSysObj@@@@QAE@XZ			; XChain<CSysObj>::XChain<CSysObj>
; Function compile flags: /Ogty
; File C:\duke4\xcore\xclass.h
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT
??0?$XChain@VCSysObj@@@@QAE@XZ PROC NEAR		; XChain<CSysObj>::XChain<CSysObj>, COMDAT
; _this$ = ecx

; 830  : 	XChain(void) : head(null),tail(null) {}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$XChain@VCSysObj@@@@QAE@XZ ENDP			; XChain<CSysObj>::XChain<CSysObj>
_TEXT	ENDS
PUBLIC	??0?$XChain@VCSysObj@@@@QAE@K@Z			; XChain<CSysObj>::XChain<CSysObj>
; Function compile flags: /Ogty
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@K@Z
_TEXT	SEGMENT
_owned$ = 8
??0?$XChain@VCSysObj@@@@QAE@K@Z PROC NEAR		; XChain<CSysObj>::XChain<CSysObj>, COMDAT
; _this$ = ecx

; 831  : 	XChain(U32 owned) : head(null),tail(null),xchain_state(owned) {}

	mov	eax, ecx
	mov	ecx, DWORD PTR _owned$[esp-4]
	shl	ecx, 31					; 0000001fH
	and	ecx, -2147483648			; 80000000H
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], ecx
	ret	4
??0?$XChain@VCSysObj@@@@QAE@K@Z ENDP			; XChain<CSysObj>::XChain<CSysObj>
_TEXT	ENDS
PUBLIC	?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::get_next
; Function compile flags: /Ogty
;	COMDAT ?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::get_next, COMDAT
; _this$ = ecx

; 840  : 	TYPE *get_next(TYPE *ptr){return ptr->next;}

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	eax, DWORD PTR [eax+4]
	ret	4
?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::get_next
_TEXT	ENDS
PUBLIC	?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::get_prev
; Function compile flags: /Ogty
;	COMDAT ?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::get_prev, COMDAT
; _this$ = ecx

; 841  : 	TYPE *get_prev(TYPE *ptr){return ptr->prev;}

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	eax, DWORD PTR [eax+8]
	ret	4
?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::get_prev
_TEXT	ENDS
PUBLIC	?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::get_head
; Function compile flags: /Ogty
;	COMDAT ?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::get_head, COMDAT
; _this$ = ecx

; 847  : 	inline TYPE *get_head(void){return head;}

	mov	eax, DWORD PTR [ecx]
	ret	0
?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP	; XChain<CSysObj>::get_head
_TEXT	ENDS
PUBLIC	?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::get_tail
; Function compile flags: /Ogty
;	COMDAT ?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::get_tail, COMDAT
; _this$ = ecx

; 848  : 	inline TYPE *get_tail(void){return tail;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP	; XChain<CSysObj>::get_tail
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??0?$XChain@VCPrintfT@@@@QAE@XZ
_TEXT	SEGMENT
??0?$XChain@VCPrintfT@@@@QAE@XZ PROC NEAR		; XChain<CPrintfT>::XChain<CPrintfT>, COMDAT
; _this$ = ecx

; 830  : 	XChain(void) : head(null),tail(null) {}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$XChain@VCPrintfT@@@@QAE@XZ ENDP			; XChain<CPrintfT>::XChain<CPrintfT>
_TEXT	ENDS
PUBLIC	??1?$XChain@VCSysObj@@@@QAE@XZ			; XChain<CSysObj>::~XChain<CSysObj>
PUBLIC	??_7CSysObj@@6B@				; CSysObj::`vftable'
EXTRN	__purecall:NEAR
EXTRN	?_global@@3PAVXGlobal@@A:DWORD			; _global
EXTRN	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z:NEAR ; XGlobal::unreg_global_object
;	COMDAT ??_7CSysObj@@6B@
; File C:\duke4\xcore\xcore.h
CONST	SEGMENT
??_7CSysObj@@6B@ DD FLAT:__purecall			; CSysObj::`vftable'
; Function compile flags: /Ogty
; File C:\duke4\xcore\xclass.h
CONST	ENDS
;	COMDAT ??1?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT
??1?$XChain@VCSysObj@@@@QAE@XZ PROC NEAR		; XChain<CSysObj>::~XChain<CSysObj>, COMDAT
; _this$ = ecx

; 853  : {

	push	esi
	mov	esi, ecx

; 854  : 	if (xchain_state.owned)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jns	SHORT $L57895

; 855  : 	{
; 856  : 		while(head)

	cmp	DWORD PTR [esi], 0
	je	SHORT $L57895
	push	ebx
	push	edi
$L57185:

; 857  : 		{
; 858  : 			TYPE *tmp=(TYPE *)head->next;

	mov	eax, DWORD PTR [esi]

; 859  : 			delete head;

	mov	edi, eax
	mov	ebx, DWORD PTR [eax+4]
	test	edi, edi
	je	SHORT $L57876
	mov	DWORD PTR [edi], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	mov	ecx, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	push	edi
	call	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z ; XGlobal::unreg_global_object
	mov	ecx, edi
	call	@xfree@4
$L57876:
	test	ebx, ebx

; 860  : 			head=tmp;

	mov	DWORD PTR [esi], ebx
	jne	SHORT $L57185
	pop	edi
	pop	ebx
$L57895:

; 861  : 		}
; 862  : 	}
; 863  : 	head=null;

	mov	DWORD PTR [esi], 0

; 864  : 	tail=null;

	mov	DWORD PTR [esi+4], 0
	pop	esi

; 865  : }

	ret	0
??1?$XChain@VCSysObj@@@@QAE@XZ ENDP			; XChain<CSysObj>::~XChain<CSysObj>
_TEXT	ENDS
PUBLIC	?lose_list@?$XChain@VCSysObj@@@@QAEXXZ		; XChain<CSysObj>::lose_list
; Function compile flags: /Ogty
;	COMDAT ?lose_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT
?lose_list@?$XChain@VCSysObj@@@@QAEXXZ PROC NEAR	; XChain<CSysObj>::lose_list, COMDAT
; _this$ = ecx

; 870  : 	head=null;tail=null;xchain_state.count=0;

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx], 0
	and	eax, -2147483648			; 80000000H
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], eax

; 871  : }

	ret	0
?lose_list@?$XChain@VCSysObj@@@@QAEXXZ ENDP		; XChain<CSysObj>::lose_list
_TEXT	ENDS
PUBLIC	?free_list@?$XChain@VCSysObj@@@@QAEXXZ		; XChain<CSysObj>::free_list
; Function compile flags: /Ogty
;	COMDAT ?free_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT
?free_list@?$XChain@VCSysObj@@@@QAEXXZ PROC NEAR	; XChain<CSysObj>::free_list, COMDAT
; _this$ = ecx

; 875  : {

	push	esi
	mov	esi, ecx

; 876  : 	if (xchain_state.owned)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jns	SHORT $L57921

; 877  : 	{
; 878  : 		while(head)

	cmp	DWORD PTR [esi], 0
	je	SHORT $L57921
	push	ebx
	push	edi
$L57201:

; 879  : 		{
; 880  : 			TYPE *tmp=(TYPE *)head->next;

	mov	eax, DWORD PTR [esi]

; 881  : 			delete head;

	mov	edi, eax
	mov	ebx, DWORD PTR [eax+4]
	test	edi, edi
	je	SHORT $L57902
	mov	DWORD PTR [edi], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	mov	ecx, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	push	edi
	call	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z ; XGlobal::unreg_global_object
	mov	ecx, edi
	call	@xfree@4
$L57902:
	test	ebx, ebx

; 882  : 			head=tmp;

	mov	DWORD PTR [esi], ebx
	jne	SHORT $L57201
	pop	edi
	pop	ebx
$L57921:

; 883  : 		}
; 884  : 	}
; 885  : 	head=null;tail=null;

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi

; 886  : }

	ret	0
?free_list@?$XChain@VCSysObj@@@@QAEXXZ ENDP		; XChain<CSysObj>::free_list
_TEXT	ENDS
PUBLIC	?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::add_head
; Function compile flags: /Ogty
;	COMDAT ?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::add_head, COMDAT
; _this$ = ecx

; 891  : 	ptr->next=head;

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 892  : 	ptr->prev=null;

	mov	DWORD PTR [eax+8], 0

; 893  : 	if (head)

	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $L57211

; 894  : 		head->prev=ptr;

	mov	DWORD PTR [edx+8], eax

; 897  : 	
; 898  : 	head=ptr;

	mov	DWORD PTR [ecx], eax

; 899  : 
; 900  : 	return head;
; 901  : }

	ret	4
$L57211:

; 895  : 	else
; 896  : 		tail=ptr;

	mov	DWORD PTR [ecx+4], eax

; 897  : 	
; 898  : 	head=ptr;

	mov	DWORD PTR [ecx], eax

; 899  : 
; 900  : 	return head;
; 901  : }

	ret	4
?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::add_head
_TEXT	ENDS
PUBLIC	?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::add_tail
; Function compile flags: /Ogty
;	COMDAT ?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::add_tail, COMDAT
; _this$ = ecx

; 906  : 	ptr->prev=tail;

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 907  : 	ptr->next=null;

	mov	DWORD PTR [eax+4], 0

; 908  : 	if (tail)

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	je	SHORT $L57217

; 909  : 		tail->next=ptr;

	mov	DWORD PTR [edx+4], eax

; 912  : 	
; 913  : 	tail=ptr;

	mov	DWORD PTR [ecx+4], eax

; 914  : 
; 915  : 	return tail;
; 916  : }

	ret	4
$L57217:

; 910  : 	else
; 911  : 		head=ptr;

	mov	DWORD PTR [ecx], eax

; 912  : 	
; 913  : 	tail=ptr;

	mov	DWORD PTR [ecx+4], eax

; 914  : 
; 915  : 	return tail;
; 916  : }

	ret	4
?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::add_tail
_TEXT	ENDS
PUBLIC	?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::remove_head
; Function compile flags: /Ogty
;	COMDAT ?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::remove_head, COMDAT
; _this$ = ecx

; 937  : 	if (!head)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $L57223

; 947  : 
; 948  : 	return ret;
; 949  : }

	ret	0
$L57223:

; 938  : 		return null;
; 939  : 
; 940  : 	TYPE *ret=head;
; 941  : 
; 942  : 	head=head->next;

	mov	edx, DWORD PTR [eax+4]

; 943  : 	if (!head)

	test	edx, edx
	mov	DWORD PTR [ecx], edx
	jne	SHORT $L57225

; 944  : 		tail=null;

	mov	DWORD PTR [ecx+4], edx

; 947  : 
; 948  : 	return ret;
; 949  : }

	ret	0
$L57225:

; 945  : 	else
; 946  : 		head->prev=null;

	mov	DWORD PTR [edx+8], 0

; 947  : 
; 948  : 	return ret;
; 949  : }

	ret	0
?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP ; XChain<CSysObj>::remove_head
_TEXT	ENDS
PUBLIC	?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::remove_tail
; Function compile flags: /Ogty
;	COMDAT ?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::remove_tail, COMDAT
; _this$ = ecx

; 954  : 	if (!tail)

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	jne	SHORT $L57231

; 964  : 
; 965  : 	return ret;
; 966  : }

	ret	0
$L57231:

; 955  : 		return null;
; 956  : 
; 957  : 	TYPE *ret=tail;
; 958  : 
; 959  : 	tail=tail->prev;

	mov	edx, DWORD PTR [eax+8]

; 960  : 	if (!tail)

	test	edx, edx
	mov	DWORD PTR [ecx+4], edx
	jne	SHORT $L57233

; 961  : 		head=null;

	mov	DWORD PTR [ecx], edx

; 964  : 
; 965  : 	return ret;
; 966  : }

	ret	0
$L57233:

; 962  : 	else
; 963  : 		tail->next=null;

	mov	DWORD PTR [edx+4], 0

; 964  : 
; 965  : 	return ret;
; 966  : }

	ret	0
?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP ; XChain<CSysObj>::remove_tail
_TEXT	ENDS
PUBLIC	?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::remove
; Function compile flags: /Ogty
;	COMDAT ?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::remove, COMDAT
; _this$ = ecx

; 921  : 	if (ptr->prev)

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [eax+8]
	test	edx, edx
	je	SHORT $L57239
	push	esi

; 922  : 		ptr->prev->next=ptr->next;

	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], esi
	pop	esi

; 923  : 	else

	jmp	SHORT $L57240
$L57239:

; 924  : 		head=ptr->next;

	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], edx
$L57240:

; 925  : 
; 926  : 	if (ptr->next)

	mov	edx, DWORD PTR [eax+4]
	test	edx, edx
	je	SHORT $L57241

; 927  : 		ptr->next->prev=ptr->prev;

	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx

; 930  : 
; 931  : 	return ptr;
; 932  : }

	ret	4
$L57241:

; 928  : 	else
; 929  : 		tail=ptr->prev;

	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+4], edx

; 930  : 
; 931  : 	return ptr;
; 932  : }

	ret	4
?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::remove
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1?$XList@VCPrintfT@@@@QAE@XZ
_TEXT	SEGMENT
??1?$XList@VCPrintfT@@@@QAE@XZ PROC NEAR		; XList<CPrintfT>::~XList<CPrintfT>, COMDAT
; _this$ = ecx

; 413  : {

	push	esi
	mov	esi, ecx

; 414  : 	if (xlist_state.owned)

	test	BYTE PTR [esi+19], 1
	je	SHORT $L57311

; 415  : 	{
; 416  : 		while(head)

	cmp	DWORD PTR [esi], 0
	je	SHORT $L57311
$L57310:

; 417  : 		{
; 418  : 			delete head->data;

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?free_mem@CPrintfT@@SAXPAX@Z		; CPrintfT::free_mem

; 419  : 			head=head->next;

	mov	edx, DWORD PTR [esi]
	add	esp, 4
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	mov	DWORD PTR [esi], eax
	jne	SHORT $L57310
$L57311:

; 420  : 		}
; 421  : 	}
; 422  : 	free_nodes();

	mov	ecx, esi
	pop	esi
	jmp	@xlist_free_nodes@4
??1?$XList@VCPrintfT@@@@QAE@XZ ENDP			; XList<CPrintfT>::~XList<CPrintfT>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1?$XChain@VCPrintfT@@@@QAE@XZ
_TEXT	SEGMENT
??1?$XChain@VCPrintfT@@@@QAE@XZ PROC NEAR		; XChain<CPrintfT>::~XChain<CPrintfT>, COMDAT
; _this$ = ecx

; 853  : {

	push	esi
	mov	esi, ecx

; 854  : 	if (xchain_state.owned)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jns	SHORT $L57955

; 855  : 	{
; 856  : 		while(head)

	cmp	DWORD PTR [esi], 0
	je	SHORT $L57955
	push	edi
$L57337:

; 857  : 		{
; 858  : 			TYPE *tmp=(TYPE *)head->next;

	mov	eax, DWORD PTR [esi]

; 859  : 			delete head;

	mov	ecx, eax
	mov	edi, DWORD PTR [eax+24]
	push	ecx
	call	?free_mem@CPrintfT@@SAXPAX@Z		; CPrintfT::free_mem
	add	esp, 4

; 860  : 			head=tmp;

	mov	DWORD PTR [esi], edi
	test	edi, edi
	jne	SHORT $L57337
	pop	edi
$L57955:

; 861  : 		}
; 862  : 	}
; 863  : 	head=null;

	mov	DWORD PTR [esi], 0

; 864  : 	tail=null;

	mov	DWORD PTR [esi+4], 0
	pop	esi

; 865  : }

	ret	0
??1?$XChain@VCPrintfT@@@@QAE@XZ ENDP			; XChain<CPrintfT>::~XChain<CPrintfT>
; Function compile flags: /Ogty
; File C:\duke4\xcore\xstring.h
_TEXT	ENDS
;	COMDAT ??3CPrintfT@@SAXPAX0@Z
_TEXT	SEGMENT
_ptr$ = 8
??3CPrintfT@@SAXPAX0@Z PROC NEAR			; CPrintfT::operator delete, COMDAT

; 270  : 	void operator delete(void *ptr,void *ptr2){free_mem(ptr);}

	mov	eax, DWORD PTR _ptr$[esp-4]
	push	eax
	call	?free_mem@CPrintfT@@SAXPAX@Z		; CPrintfT::free_mem
	pop	ecx
	ret	0
??3CPrintfT@@SAXPAX0@Z ENDP				; CPrintfT::operator delete
_TEXT	ENDS
PUBLIC	??_7XBufferReadInt@@6B@				; XBufferReadInt::`vftable'
PUBLIC	??_GXBufferReadInt@@UAEPAXI@Z			; XBufferReadInt::`scalar deleting destructor'
PUBLIC	??_EXBufferReadInt@@UAEPAXI@Z			; XBufferReadInt::`vector deleting destructor'
EXTRN	?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z:NEAR	; XBufferReadInt::read_direct
;	COMDAT ??_7XBufferReadInt@@6B@
; File C:\duke4\xcore\xcore.h
CONST	SEGMENT
??_7XBufferReadInt@@6B@ DD FLAT:?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z ; XBufferReadInt::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:??_EXBufferReadInt@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??_GXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXBufferReadInt@@UAEPAXI@Z PROC NEAR			; XBufferReadInt::`scalar deleting destructor', COMDAT
; _this$ = ecx
	mov	al, BYTE PTR ___flags$[esp-4]
	push	esi
	mov	esi, ecx
	test	al, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	je	SHORT $L57966
	call	@xfree@4
$L57966:
	mov	eax, esi
	pop	esi
	ret	4
??_GXBufferReadInt@@UAEPAXI@Z ENDP			; XBufferReadInt::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1XBufferReadInt@@UAE@XZ			; XBufferReadInt::~XBufferReadInt
; Function compile flags: /Ogty
;	COMDAT ??_EXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXBufferReadInt@@UAEPAXI@Z PROC NEAR			; XBufferReadInt::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56059
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XBufferReadInt@@UAE@XZ	; XBufferReadInt::~XBufferReadInt
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L57971
	mov	ecx, edi
	call	@xfree@4
$L57971:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56059:
	test	bl, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	je	SHORT $L57977
	mov	ecx, esi
	call	@xfree@4
$L57977:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXBufferReadInt@@UAEPAXI@Z ENDP			; XBufferReadInt::`vector deleting destructor'
; Function compile flags: /Ogty
; File C:\duke4\xcore\xstream.h
_TEXT	ENDS
;	COMDAT ??1XBufferReadInt@@UAE@XZ
_TEXT	SEGMENT
??1XBufferReadInt@@UAE@XZ PROC NEAR			; XBufferReadInt::~XBufferReadInt, COMDAT
; _this$ = ecx

; 37   : 	virtual ~XBufferReadInt(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	ret	0
??1XBufferReadInt@@UAE@XZ ENDP				; XBufferReadInt::~XBufferReadInt
_TEXT	ENDS
PUBLIC	??_7XBufferWriteInt@@6B@			; XBufferWriteInt::`vftable'
PUBLIC	??_GXBufferWriteInt@@UAEPAXI@Z			; XBufferWriteInt::`scalar deleting destructor'
PUBLIC	??_EXBufferWriteInt@@UAEPAXI@Z			; XBufferWriteInt::`vector deleting destructor'
EXTRN	?write_direct@XBufferWriteInt@@MAEKPBXKAAK@Z:NEAR ; XBufferWriteInt::write_direct
;	COMDAT ??_7XBufferWriteInt@@6B@
; File C:\duke4\xcore\xcore.h
CONST	SEGMENT
??_7XBufferWriteInt@@6B@ DD FLAT:?write_direct@XBufferWriteInt@@MAEKPBXKAAK@Z ; XBufferWriteInt::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:??_EXBufferWriteInt@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??_GXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXBufferWriteInt@@UAEPAXI@Z PROC NEAR		; XBufferWriteInt::`scalar deleting destructor', COMDAT
; _this$ = ecx
	mov	al, BYTE PTR ___flags$[esp-4]
	push	esi
	mov	esi, ecx
	test	al, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	je	SHORT $L57988
	call	@xfree@4
$L57988:
	mov	eax, esi
	pop	esi
	ret	4
??_GXBufferWriteInt@@UAEPAXI@Z ENDP			; XBufferWriteInt::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1XBufferWriteInt@@UAE@XZ			; XBufferWriteInt::~XBufferWriteInt
; Function compile flags: /Ogty
;	COMDAT ??_EXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXBufferWriteInt@@UAEPAXI@Z PROC NEAR		; XBufferWriteInt::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56111
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XBufferWriteInt@@UAE@XZ	; XBufferWriteInt::~XBufferWriteInt
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L57993
	mov	ecx, edi
	call	@xfree@4
$L57993:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56111:
	test	bl, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	je	SHORT $L57999
	mov	ecx, esi
	call	@xfree@4
$L57999:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXBufferWriteInt@@UAEPAXI@Z ENDP			; XBufferWriteInt::`vector deleting destructor'
; Function compile flags: /Ogty
; File C:\duke4\xcore\xstream.h
_TEXT	ENDS
;	COMDAT ??1XBufferWriteInt@@UAE@XZ
_TEXT	SEGMENT
??1XBufferWriteInt@@UAE@XZ PROC NEAR			; XBufferWriteInt::~XBufferWriteInt, COMDAT
; _this$ = ecx

; 56   : 	virtual ~XBufferWriteInt(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	ret	0
??1XBufferWriteInt@@UAE@XZ ENDP				; XBufferWriteInt::~XBufferWriteInt
_TEXT	ENDS
PUBLIC	??1XStreamRdDirect@@UAE@XZ			; XStreamRdDirect::~XStreamRdDirect
PUBLIC	??_GXStreamRdDirect@@UAEPAXI@Z			; XStreamRdDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXStreamRdDirect@@UAEPAXI@Z PROC NEAR		; XStreamRdDirect::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1XStreamRdDirect@@UAE@XZ		; XStreamRdDirect::~XStreamRdDirect
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L58007
	mov	ecx, esi
	call	@xfree@4
$L58007:
	mov	eax, esi
	pop	esi
	ret	4
??_GXStreamRdDirect@@UAEPAXI@Z ENDP			; XStreamRdDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1XStreamRdDirect@@UAE@XZ
_TEXT	SEGMENT
??1XStreamRdDirect@@UAE@XZ PROC NEAR			; XStreamRdDirect::~XStreamRdDirect, COMDAT
; _this$ = ecx

; 71   : 	~XStreamRdDirect(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	ret	0
??1XStreamRdDirect@@UAE@XZ ENDP				; XStreamRdDirect::~XStreamRdDirect
_TEXT	ENDS
PUBLIC	??_EXStreamRdDirect@@UAEPAXI@Z			; XStreamRdDirect::`vector deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_EXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXStreamRdDirect@@UAEPAXI@Z PROC NEAR		; XStreamRdDirect::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56163
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XStreamRdDirect@@UAE@XZ	; XStreamRdDirect::~XStreamRdDirect
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L58018
	mov	ecx, edi
	call	@xfree@4
$L58018:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56163:
	mov	ecx, esi
	call	??1XStreamRdDirect@@UAE@XZ		; XStreamRdDirect::~XStreamRdDirect
	test	bl, 1
	je	SHORT $L58021
	mov	ecx, esi
	call	@xfree@4
$L58021:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXStreamRdDirect@@UAEPAXI@Z ENDP			; XStreamRdDirect::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1XStreamWrDirect@@UAE@XZ			; XStreamWrDirect::~XStreamWrDirect
PUBLIC	??_GXStreamWrDirect@@UAEPAXI@Z			; XStreamWrDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXStreamWrDirect@@UAEPAXI@Z PROC NEAR		; XStreamWrDirect::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1XStreamWrDirect@@UAE@XZ		; XStreamWrDirect::~XStreamWrDirect
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L58027
	mov	ecx, esi
	call	@xfree@4
$L58027:
	mov	eax, esi
	pop	esi
	ret	4
??_GXStreamWrDirect@@UAEPAXI@Z ENDP			; XStreamWrDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1XStreamWrDirect@@UAE@XZ
_TEXT	SEGMENT
??1XStreamWrDirect@@UAE@XZ PROC NEAR			; XStreamWrDirect::~XStreamWrDirect, COMDAT
; _this$ = ecx

; 88   : 	~XStreamWrDirect(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	ret	0
??1XStreamWrDirect@@UAE@XZ ENDP				; XStreamWrDirect::~XStreamWrDirect
_TEXT	ENDS
PUBLIC	??_EXStreamWrDirect@@UAEPAXI@Z			; XStreamWrDirect::`vector deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_EXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXStreamWrDirect@@UAEPAXI@Z PROC NEAR		; XStreamWrDirect::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56219
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XStreamWrDirect@@UAE@XZ	; XStreamWrDirect::~XStreamWrDirect
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L58038
	mov	ecx, edi
	call	@xfree@4
$L58038:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56219:
	mov	ecx, esi
	call	??1XStreamWrDirect@@UAE@XZ		; XStreamWrDirect::~XStreamWrDirect
	test	bl, 1
	je	SHORT $L58041
	mov	ecx, esi
	call	@xfree@4
$L58041:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXStreamWrDirect@@UAEPAXI@Z ENDP			; XStreamWrDirect::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1XMemRdBuffer@@UAE@XZ				; XMemRdBuffer::~XMemRdBuffer
PUBLIC	??_GXMemRdBuffer@@UAEPAXI@Z			; XMemRdBuffer::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXMemRdBuffer@@UAEPAXI@Z PROC NEAR			; XMemRdBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1XMemRdBuffer@@UAE@XZ			; XMemRdBuffer::~XMemRdBuffer
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L58047
	mov	ecx, esi
	call	@xfree@4
$L58047:
	mov	eax, esi
	pop	esi
	ret	4
??_GXMemRdBuffer@@UAEPAXI@Z ENDP			; XMemRdBuffer::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7XMemRdBuffer@@6B@				; XMemRdBuffer::`vftable'
PUBLIC	??_EXMemRdBuffer@@UAEPAXI@Z			; XMemRdBuffer::`vector deleting destructor'
EXTRN	?read@XMemRdBuffer@@UAEKPAXKAAK1@Z:NEAR		; XMemRdBuffer::read
EXTRN	?seek@XMemRdBuffer@@UAEKJ@Z:NEAR		; XMemRdBuffer::seek
;	COMDAT ??_7XMemRdBuffer@@6B@
CONST	SEGMENT
??_7XMemRdBuffer@@6B@ DD FLAT:?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z ; XMemRdBuffer::`vftable'
	DD	FLAT:?read@XMemRdBuffer@@UAEKPAXKAAK1@Z
	DD	FLAT:?seek@XMemRdBuffer@@UAEKJ@Z
	DD	FLAT:??_EXMemRdBuffer@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??1XMemRdBuffer@@UAE@XZ
_TEXT	SEGMENT
??1XMemRdBuffer@@UAE@XZ PROC NEAR			; XMemRdBuffer::~XMemRdBuffer, COMDAT
; _this$ = ecx

; 109  : 	~XMemRdBuffer(void){}

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XMemRdBuffer@@6B@ ; XMemRdBuffer::`vftable'
	mov	ecx, DWORD PTR [esi+8]
	call	@xfree@4
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	pop	esi
	ret	0
??1XMemRdBuffer@@UAE@XZ ENDP				; XMemRdBuffer::~XMemRdBuffer
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_EXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXMemRdBuffer@@UAEPAXI@Z PROC NEAR			; XMemRdBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56272
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XMemRdBuffer@@UAE@XZ	; XMemRdBuffer::~XMemRdBuffer
	push	eax
	push	24					; 00000018H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L58063
	mov	ecx, edi
	call	@xfree@4
$L58063:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56272:
	mov	ecx, esi
	call	??1XMemRdBuffer@@UAE@XZ			; XMemRdBuffer::~XMemRdBuffer
	test	bl, 1
	je	SHORT $L58066
	mov	ecx, esi
	call	@xfree@4
$L58066:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXMemRdBuffer@@UAEPAXI@Z ENDP			; XMemRdBuffer::`vector deleting destructor'
_TEXT	ENDS
END
