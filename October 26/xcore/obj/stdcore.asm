; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	C:\duke4\xcore\stdcore.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BF@MBIJ@Cannot?5init?5CPrintfT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0autochar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0autochar@@QAE@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1autochar@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4autochar@@QAEAAV0@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bautochar@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Bautochar@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Cautochar@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Cautochar@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?release@autochar@@QAEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_ptr@autochar@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4autochar@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XRef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XListState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XChainState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XChainState@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?list_base@CMallocBlock@@AAEPAKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CMallocBlock@@SAXPAXKPBKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CMallocBlock@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMallocBlock@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CMallocBlock@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2RingBuffer@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3RingBuffer@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4RingBuffer@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemGrow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemGrow@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1MemGrow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?init@MemGrow@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?close@MemGrow@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2MemGrow@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3MemGrow@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4MemGrow@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSysObj@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CSysObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemStats@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XStatistic@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_count@XStatistic@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_tick@XStatistic@@QAEX_K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_alloc@XStatistic@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_alloc2@XStatistic@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_alloc3@XStatistic@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2XStatistic@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XStatistic@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XStatistic@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XStatManager@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_id@XStatManager@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push@XStatManager@@QAEXPAVXStatistic@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop@XStatManager@@QAEXPAVXStatistic@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_alloc@XStatManager@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_alloc2@XStatManager@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_alloc3@XStatManager@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?close@XStatManager@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2XStatManager@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XStatManager@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XStatManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XStatManager@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2XStat@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XStat@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XStat@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?bitch@CError@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?fatal@CError@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?throw_msg@CError@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CError@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CError@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CError@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WinMsgDef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0WinMsgDef@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4WinMsgDef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$XChain@VCSysObj@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?is_locked@XMutex@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4ErrMem@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?bitch@XGlobal@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?throw_msg@XGlobal@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assert@XGlobal@@QAEXPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XGlobal@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XGlobal@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XDll@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XDll@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XDll@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XApp@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XApp@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XApp@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XStat@@QAE@PAVXStatistic@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XStat@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSysObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSysObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCStr@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCStr@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CStr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCStrLow@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCStrLow@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CStrLow@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCStrCat@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCStrCat@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CStrCat@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CStrObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CStrObj@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CStrObj@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CStrObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CStrRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCStrRef@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCStrRef@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CCStrRef@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CCStrRef@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CStrRef@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CStrRef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CStrRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPathObj@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_path@CPathObj@@QAEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CPathObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPathRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CCPathRef@@QAEPAVCPathObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CCPathRef@@QBEPBVCPathObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPathRef@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CPathRef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPathRef@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPrintf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPrintf@@QAE@PADK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPrintf@@QAE@PADKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?init@CPrintf@@QAEXPADK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?reset@CPrintf@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CPrintf@@QAEAAV0@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CPrintf@@QAEAAV0@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CPrintf@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CPrintf@@QAEAAV0@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?str@CPrintf@@QAEKPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?strn@CPrintf@@QAEKPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?overflow@CPrintf@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_len@CPrintf@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_str@CPrintf@@QAEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_cur@CPrintf@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_last@CPrintf@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_cur@CPrintf@@QAEPADPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_cur@CPrintf@@QAEPADK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CPrintf@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?realloc@StrGrow@@IAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?reset@StrGrow@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0StrGrow@@QAE@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4StrGrow@@QAEAAV0@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BStrGrow@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BStrGrow@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CStrGrow@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??CStrGrow@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6StrGrow@@QAEAAV0@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6StrGrow@@QAEAAV0@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6StrGrow@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6StrGrow@@QAEAAV0@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4StrGrow@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1StrGrow@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_FStrGrow@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XBufferReadInt@@QAE@PAVCBaseStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XBufferReadInt@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XBufferReadInt@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XBufferReadInt@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XBufferWriteInt@@QAE@PAVCBaseStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XBufferWriteInt@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XBufferWriteInt@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XBufferWriteInt@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XStreamRdDirect@@QAE@PAVCBaseStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek@XStreamRdDirect@@UAEKJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XStreamRdDirect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2XStreamRdDirect@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XStreamRdDirect@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XStreamRdDirect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XStreamRdDirect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XStreamWrDirect@@QAE@PAVCBaseStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek@XStreamWrDirect@@UAEKJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?flush@XStreamWrDirect@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XStreamWrDirect@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2XStreamWrDirect@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XStreamWrDirect@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XStreamWrDirect@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XStreamWrDirect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XMemRdBuffer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2XMemRdBuffer@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XMemRdBuffer@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XMemRdBuffer@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XMemRdBuffer@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_EXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XStreamState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XStreamState@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?is_open@CBaseStream@@IAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?set_open@CBaseStream@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek_int@CBaseStream@@MAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBaseStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ioctl_read@CBaseStream@@UAEKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ioctl_write@CBaseStream@@UAEKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?put@CBaseStream@@UAEKD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pos_rd@CBaseStream@@UAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pos_wr@CBaseStream@@UAEXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pos@CBaseStream@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_pos_at@CBaseStream@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_handle@CBaseStream@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBaseStream@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBaseStream@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CBaseStream@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2CStdOut@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3CStdOut@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CStdOut@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CStdOut@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CStdOut@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?base_init@XFile@@EAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?seek_int@XFile@@AAEKJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XFile@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2XFile@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3XFile@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XFile@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XFile@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?has_handle@XFindLevel@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_path@XFindLevel@@QAEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XFindLevel@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1XFindLevel@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FindState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XFindFile@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4XFindFile@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_head@?$XList@VXStatistic@@@@QAEPAVXStatistic@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XChain@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XChain@VXStatistic@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XList@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XList@VXStatistic@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_head@?$XList@VXStatistic@@@@QAEPAU_XPos@@PAVXStatistic@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_head@?$XList@VXStatistic@@@@QAEPAVXStatistic@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lose_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@PAX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcBase@VCStrObj@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcBase@VCStrObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XRcBase@VCStrObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$XRcBase@VCStrObj@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcPtr@VCPathObj@@@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcPtr@VCPathObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XRcPtr@VCPathObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$XRcPtr@VCPathObj@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XList@VXFindLevel@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@VXFindLevel@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSysObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXFindLevel@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?new_node@?$XList@VXStatistic@@@@IAEPAUXNode@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@VXStatistic@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@PAX@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@VXFindLevel@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@?$XRcBase@VCStrObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelRef@?$XRcBase@VCStrObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@?$XRcPtr@VCPathObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelRef@?$XRcPtr@VCPathObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStrObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPathObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XBufferWriteInt@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XStreamRdDirect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CError@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XFile@@6BCBaseStream@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XBufferReadInt@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XDll@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CBaseStream@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSysObj@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CStdOut@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XGlobal@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMemMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7WinMsgDef@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XMemRdBuffer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XFile@@6BCSysObj@@@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XStreamWrDirect@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XMutex@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	___@@_PchSym_@00@UwfpvEUcxlivUlyqUhgwxlivOlyq@:DWORD
_DATA	ENDS
PUBLIC	??0?$XChain@VCSysObj@@@@QAE@XZ			; XChain<CSysObj>::XChain<CSysObj>
; Function compile flags: /Ogty
; File C:\duke4\xcore\xclass.h
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT
??0?$XChain@VCSysObj@@@@QAE@XZ PROC NEAR		; XChain<CSysObj>::XChain<CSysObj>, COMDAT
; _this$ = ecx

; 830  : 	XChain(void) : head(null),tail(null) {}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0?$XChain@VCSysObj@@@@QAE@XZ ENDP			; XChain<CSysObj>::XChain<CSysObj>
_TEXT	ENDS
PUBLIC	??0?$XChain@VCSysObj@@@@QAE@K@Z			; XChain<CSysObj>::XChain<CSysObj>
; Function compile flags: /Ogty
;	COMDAT ??0?$XChain@VCSysObj@@@@QAE@K@Z
_TEXT	SEGMENT
_owned$ = 8
??0?$XChain@VCSysObj@@@@QAE@K@Z PROC NEAR		; XChain<CSysObj>::XChain<CSysObj>, COMDAT
; _this$ = ecx

; 831  : 	XChain(U32 owned) : head(null),tail(null),xchain_state(owned) {}

	mov	eax, ecx
	mov	ecx, DWORD PTR _owned$[esp-4]
	shl	ecx, 31					; 0000001fH
	and	ecx, -2147483648			; 80000000H
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax+8], ecx
	ret	4
??0?$XChain@VCSysObj@@@@QAE@K@Z ENDP			; XChain<CSysObj>::XChain<CSysObj>
_TEXT	ENDS
PUBLIC	?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::get_next
; Function compile flags: /Ogty
;	COMDAT ?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::get_next, COMDAT
; _this$ = ecx

; 840  : 	TYPE *get_next(TYPE *ptr){return ptr->next;}

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	eax, DWORD PTR [eax+4]
	ret	4
?get_next@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::get_next
_TEXT	ENDS
PUBLIC	?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::get_prev
; Function compile flags: /Ogty
;	COMDAT ?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::get_prev, COMDAT
; _this$ = ecx

; 841  : 	TYPE *get_prev(TYPE *ptr){return ptr->prev;}

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	eax, DWORD PTR [eax+8]
	ret	4
?get_prev@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::get_prev
_TEXT	ENDS
PUBLIC	?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::get_head
; Function compile flags: /Ogty
;	COMDAT ?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::get_head, COMDAT
; _this$ = ecx

; 847  : 	inline TYPE *get_head(void){return head;}

	mov	eax, DWORD PTR [ecx]
	ret	0
?get_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP	; XChain<CSysObj>::get_head
_TEXT	ENDS
PUBLIC	?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::get_tail
; Function compile flags: /Ogty
;	COMDAT ?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::get_tail, COMDAT
; _this$ = ecx

; 848  : 	inline TYPE *get_tail(void){return tail;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?get_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP	; XChain<CSysObj>::get_tail
_TEXT	ENDS
PUBLIC	??1?$XChain@VCSysObj@@@@QAE@XZ			; XChain<CSysObj>::~XChain<CSysObj>
PUBLIC	??_7CSysObj@@6B@				; CSysObj::`vftable'
EXTRN	__purecall:NEAR
EXTRN	?_global@@3PAVXGlobal@@A:DWORD			; _global
EXTRN	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z:NEAR ; XGlobal::unreg_global_object
EXTRN	@xfree@4:NEAR
;	COMDAT ??_7CSysObj@@6B@
; File C:\duke4\xcore\xcore.h
CONST	SEGMENT
??_7CSysObj@@6B@ DD FLAT:__purecall			; CSysObj::`vftable'
; Function compile flags: /Ogty
; File C:\duke4\xcore\xclass.h
CONST	ENDS
;	COMDAT ??1?$XChain@VCSysObj@@@@QAE@XZ
_TEXT	SEGMENT
??1?$XChain@VCSysObj@@@@QAE@XZ PROC NEAR		; XChain<CSysObj>::~XChain<CSysObj>, COMDAT
; _this$ = ecx

; 853  : {

	push	esi
	mov	esi, ecx

; 854  : 	if (xchain_state.owned)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jns	SHORT $L57373

; 855  : 	{
; 856  : 		while(head)

	cmp	DWORD PTR [esi], 0
	je	SHORT $L57373
	push	ebx
	push	edi
$L56870:

; 857  : 		{
; 858  : 			TYPE *tmp=(TYPE *)head->next;

	mov	eax, DWORD PTR [esi]

; 859  : 			delete head;

	mov	edi, eax
	mov	ebx, DWORD PTR [eax+4]
	test	edi, edi
	je	SHORT $L57354
	mov	DWORD PTR [edi], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	mov	ecx, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	push	edi
	call	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z ; XGlobal::unreg_global_object
	mov	ecx, edi
	call	@xfree@4
$L57354:
	test	ebx, ebx

; 860  : 			head=tmp;

	mov	DWORD PTR [esi], ebx
	jne	SHORT $L56870
	pop	edi
	pop	ebx
$L57373:

; 861  : 		}
; 862  : 	}
; 863  : 	head=null;

	mov	DWORD PTR [esi], 0

; 864  : 	tail=null;

	mov	DWORD PTR [esi+4], 0
	pop	esi

; 865  : }

	ret	0
??1?$XChain@VCSysObj@@@@QAE@XZ ENDP			; XChain<CSysObj>::~XChain<CSysObj>
_TEXT	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	@xmalloc@4:NEAR
; Function compile flags: /Ogty
; File C:\duke4\xcore\xcore.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 129  : __inline void *operator new(size_t size){return xmalloc(size);}

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 130  : __inline void operator delete(void *ptr){xfree(ptr);}

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?lose_list@?$XChain@VCSysObj@@@@QAEXXZ		; XChain<CSysObj>::lose_list
; Function compile flags: /Ogty
; File C:\duke4\xcore\xclass.h
;	COMDAT ?lose_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT
?lose_list@?$XChain@VCSysObj@@@@QAEXXZ PROC NEAR	; XChain<CSysObj>::lose_list, COMDAT
; _this$ = ecx

; 870  : 	head=null;tail=null;xchain_state.count=0;

	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx], 0
	and	eax, -2147483648			; 80000000H
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], eax

; 871  : }

	ret	0
?lose_list@?$XChain@VCSysObj@@@@QAEXXZ ENDP		; XChain<CSysObj>::lose_list
_TEXT	ENDS
PUBLIC	??0autochar@@QAE@XZ				; autochar::autochar
; Function compile flags: /Ogty
;	COMDAT ??0autochar@@QAE@XZ
_TEXT	SEGMENT
??0autochar@@QAE@XZ PROC NEAR				; autochar::autochar, COMDAT
; _this$ = ecx

; 67   : 	inline autochar(void) : ptr(null) {}

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0autochar@@QAE@XZ ENDP				; autochar::autochar
_TEXT	ENDS
PUBLIC	??0autochar@@QAE@PAD@Z				; autochar::autochar
; Function compile flags: /Ogty
;	COMDAT ??0autochar@@QAE@PAD@Z
_TEXT	SEGMENT
_p$ = 8
??0autochar@@QAE@PAD@Z PROC NEAR			; autochar::autochar, COMDAT
; _this$ = ecx

; 68   : 	inline autochar(char *p) : ptr(p) {}

	mov	eax, ecx
	mov	ecx, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx
	ret	4
??0autochar@@QAE@PAD@Z ENDP				; autochar::autochar
_TEXT	ENDS
PUBLIC	?free_list@?$XChain@VCSysObj@@@@QAEXXZ		; XChain<CSysObj>::free_list
; Function compile flags: /Ogty
;	COMDAT ?free_list@?$XChain@VCSysObj@@@@QAEXXZ
_TEXT	SEGMENT
?free_list@?$XChain@VCSysObj@@@@QAEXXZ PROC NEAR	; XChain<CSysObj>::free_list, COMDAT
; _this$ = ecx

; 875  : {

	push	esi
	mov	esi, ecx

; 876  : 	if (xchain_state.owned)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jns	SHORT $L57408

; 877  : 	{
; 878  : 		while(head)

	cmp	DWORD PTR [esi], 0
	je	SHORT $L57408
	push	ebx
	push	edi
$L56886:

; 879  : 		{
; 880  : 			TYPE *tmp=(TYPE *)head->next;

	mov	eax, DWORD PTR [esi]

; 881  : 			delete head;

	mov	edi, eax
	mov	ebx, DWORD PTR [eax+4]
	test	edi, edi
	je	SHORT $L57389
	mov	DWORD PTR [edi], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	mov	ecx, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	push	edi
	call	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z ; XGlobal::unreg_global_object
	mov	ecx, edi
	call	@xfree@4
$L57389:
	test	ebx, ebx

; 882  : 			head=tmp;

	mov	DWORD PTR [esi], ebx
	jne	SHORT $L56886
	pop	edi
	pop	ebx
$L57408:

; 883  : 		}
; 884  : 	}
; 885  : 	head=null;tail=null;

	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi

; 886  : }

	ret	0
?free_list@?$XChain@VCSysObj@@@@QAEXXZ ENDP		; XChain<CSysObj>::free_list
_TEXT	ENDS
PUBLIC	??1autochar@@QAE@XZ				; autochar::~autochar
; Function compile flags: /Ogty
;	COMDAT ??1autochar@@QAE@XZ
_TEXT	SEGMENT
??1autochar@@QAE@XZ PROC NEAR				; autochar::~autochar, COMDAT
; _this$ = ecx

; 69   : 	inline ~autochar(void){xfree(ptr);ptr=null;}

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	call	@xfree@4
	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1autochar@@QAE@XZ ENDP				; autochar::~autochar
_TEXT	ENDS
PUBLIC	??4autochar@@QAEAAV0@PAD@Z			; autochar::operator=
; Function compile flags: /Ogty
;	COMDAT ??4autochar@@QAEAAV0@PAD@Z
_TEXT	SEGMENT
_p$ = 8
??4autochar@@QAEAAV0@PAD@Z PROC NEAR			; autochar::operator=, COMDAT
; _this$ = ecx

; 71   : 	{

	mov	eax, ecx

; 72   : 		ptr=p;

	mov	ecx, DWORD PTR _p$[esp-4]
	mov	DWORD PTR [eax], ecx

; 73   : 		return *this;
; 74   : 	}

	ret	4
??4autochar@@QAEAAV0@PAD@Z ENDP				; autochar::operator=
_TEXT	ENDS
PUBLIC	??Bautochar@@QAEPADXZ				; autochar::operator char *
; Function compile flags: /Ogty
;	COMDAT ??Bautochar@@QAEPADXZ
_TEXT	SEGMENT
??Bautochar@@QAEPADXZ PROC NEAR				; autochar::operator char *, COMDAT
; _this$ = ecx

; 75   : 	inline operator char * () {return ptr;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??Bautochar@@QAEPADXZ ENDP				; autochar::operator char *
_TEXT	ENDS
PUBLIC	??Bautochar@@QBEPBDXZ				; autochar::operator char const *
; Function compile flags: /Ogty
;	COMDAT ??Bautochar@@QBEPBDXZ
_TEXT	SEGMENT
??Bautochar@@QBEPBDXZ PROC NEAR				; autochar::operator char const *, COMDAT
; _this$ = ecx

; 76   : 	inline operator CC8 * () const {return ptr;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??Bautochar@@QBEPBDXZ ENDP				; autochar::operator char const *
_TEXT	ENDS
PUBLIC	?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::add_head
; Function compile flags: /Ogty
;	COMDAT ?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::add_head, COMDAT
; _this$ = ecx

; 891  : 	ptr->next=head;

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 892  : 	ptr->prev=null;

	mov	DWORD PTR [eax+8], 0

; 893  : 	if (head)

	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	je	SHORT $L56896

; 894  : 		head->prev=ptr;

	mov	DWORD PTR [edx+8], eax

; 897  : 	
; 898  : 	head=ptr;

	mov	DWORD PTR [ecx], eax

; 899  : 
; 900  : 	return head;
; 901  : }

	ret	4
$L56896:

; 895  : 	else
; 896  : 		tail=ptr;

	mov	DWORD PTR [ecx+4], eax

; 897  : 	
; 898  : 	head=ptr;

	mov	DWORD PTR [ecx], eax

; 899  : 
; 900  : 	return head;
; 901  : }

	ret	4
?add_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::add_head
_TEXT	ENDS
PUBLIC	??Cautochar@@QAEPADXZ				; autochar::operator->
; Function compile flags: /Ogty
;	COMDAT ??Cautochar@@QAEPADXZ
_TEXT	SEGMENT
??Cautochar@@QAEPADXZ PROC NEAR				; autochar::operator->, COMDAT
; _this$ = ecx

; 78   : 	inline char *operator -> () {return ptr;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??Cautochar@@QAEPADXZ ENDP				; autochar::operator->
_TEXT	ENDS
PUBLIC	??Cautochar@@QBEPBDXZ				; autochar::operator->
; Function compile flags: /Ogty
;	COMDAT ??Cautochar@@QBEPBDXZ
_TEXT	SEGMENT
??Cautochar@@QBEPBDXZ PROC NEAR				; autochar::operator->, COMDAT
; _this$ = ecx

; 79   : 	inline CC8 * operator -> () const {return ptr;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??Cautochar@@QBEPBDXZ ENDP				; autochar::operator->
_TEXT	ENDS
PUBLIC	?release@autochar@@QAEPBDXZ			; autochar::release
; Function compile flags: /Ogty
;	COMDAT ?release@autochar@@QAEPBDXZ
_TEXT	SEGMENT
?release@autochar@@QAEPBDXZ PROC NEAR			; autochar::release, COMDAT
; _this$ = ecx

; 82   : 		CC8 *ret=ptr;

	mov	eax, DWORD PTR [ecx]

; 83   : 		ptr=null;

	mov	DWORD PTR [ecx], 0

; 84   : 		return ret;
; 85   : 	}

	ret	0
?release@autochar@@QAEPBDXZ ENDP			; autochar::release
_TEXT	ENDS
PUBLIC	?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::add_tail
; Function compile flags: /Ogty
;	COMDAT ?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::add_tail, COMDAT
; _this$ = ecx

; 906  : 	ptr->prev=tail;

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 907  : 	ptr->next=null;

	mov	DWORD PTR [eax+4], 0

; 908  : 	if (tail)

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	je	SHORT $L56902

; 909  : 		tail->next=ptr;

	mov	DWORD PTR [edx+4], eax

; 912  : 	
; 913  : 	tail=ptr;

	mov	DWORD PTR [ecx+4], eax

; 914  : 
; 915  : 	return tail;
; 916  : }

	ret	4
$L56902:

; 910  : 	else
; 911  : 		head=ptr;

	mov	DWORD PTR [ecx], eax

; 912  : 	
; 913  : 	tail=ptr;

	mov	DWORD PTR [ecx+4], eax

; 914  : 
; 915  : 	return tail;
; 916  : }

	ret	4
?add_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::add_tail
_TEXT	ENDS
PUBLIC	?get_ptr@autochar@@QAEPAXXZ			; autochar::get_ptr
; Function compile flags: /Ogty
;	COMDAT ?get_ptr@autochar@@QAEPAXXZ
_TEXT	SEGMENT
?get_ptr@autochar@@QAEPAXXZ PROC NEAR			; autochar::get_ptr, COMDAT
; _this$ = ecx

; 86   : 	inline void *get_ptr(void){return ptr;}

	mov	eax, DWORD PTR [ecx]
	ret	0
?get_ptr@autochar@@QAEPAXXZ ENDP			; autochar::get_ptr
_TEXT	ENDS
PUBLIC	??4autochar@@QAEAAV0@ABV0@@Z			; autochar::operator=
; Function compile flags: /Ogty
;	COMDAT ??4autochar@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4autochar@@QAEAAV0@ABV0@@Z PROC NEAR			; autochar::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	4
??4autochar@@QAEAAV0@ABV0@@Z ENDP			; autochar::operator=
_TEXT	ENDS
PUBLIC	??0XRef@@QAE@XZ					; XRef::XRef
; Function compile flags: /Ogty
;	COMDAT ??0XRef@@QAE@XZ
_TEXT	SEGMENT
??0XRef@@QAE@XZ PROC NEAR				; XRef::XRef, COMDAT
; _this$ = ecx

; 113  : 	XRef(void) : rcount(0) {}

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0XRef@@QAE@XZ ENDP					; XRef::XRef
_TEXT	ENDS
PUBLIC	?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::remove_head
; Function compile flags: /Ogty
;	COMDAT ?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::remove_head, COMDAT
; _this$ = ecx

; 937  : 	if (!head)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $L56908

; 947  : 
; 948  : 	return ret;
; 949  : }

	ret	0
$L56908:

; 938  : 		return null;
; 939  : 
; 940  : 	TYPE *ret=head;
; 941  : 
; 942  : 	head=head->next;

	mov	edx, DWORD PTR [eax+4]

; 943  : 	if (!head)

	test	edx, edx
	mov	DWORD PTR [ecx], edx
	jne	SHORT $L56910

; 944  : 		tail=null;

	mov	DWORD PTR [ecx+4], edx

; 947  : 
; 948  : 	return ret;
; 949  : }

	ret	0
$L56910:

; 945  : 	else
; 946  : 		head->prev=null;

	mov	DWORD PTR [edx+8], 0

; 947  : 
; 948  : 	return ret;
; 949  : }

	ret	0
?remove_head@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP ; XChain<CSysObj>::remove_head
_TEXT	ENDS
PUBLIC	??4XRef@@QAEAAV0@ABV0@@Z			; XRef::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XRef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XRef@@QAEAAV0@ABV0@@Z PROC NEAR			; XRef::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	4
??4XRef@@QAEAAV0@ABV0@@Z ENDP				; XRef::operator=
_TEXT	ENDS
PUBLIC	?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ; XChain<CSysObj>::remove_tail
; Function compile flags: /Ogty
;	COMDAT ?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ
_TEXT	SEGMENT
?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ PROC NEAR ; XChain<CSysObj>::remove_tail, COMDAT
; _this$ = ecx

; 954  : 	if (!tail)

	mov	eax, DWORD PTR [ecx+4]
	test	eax, eax
	jne	SHORT $L56916

; 964  : 
; 965  : 	return ret;
; 966  : }

	ret	0
$L56916:

; 955  : 		return null;
; 956  : 
; 957  : 	TYPE *ret=tail;
; 958  : 
; 959  : 	tail=tail->prev;

	mov	edx, DWORD PTR [eax+8]

; 960  : 	if (!tail)

	test	edx, edx
	mov	DWORD PTR [ecx+4], edx
	jne	SHORT $L56918

; 961  : 		head=null;

	mov	DWORD PTR [ecx], edx

; 964  : 
; 965  : 	return ret;
; 966  : }

	ret	0
$L56918:

; 962  : 	else
; 963  : 		tail->next=null;

	mov	DWORD PTR [edx+4], 0

; 964  : 
; 965  : 	return ret;
; 966  : }

	ret	0
?remove_tail@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@XZ ENDP ; XChain<CSysObj>::remove_tail
_TEXT	ENDS
PUBLIC	?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ; XChain<CSysObj>::remove
; Function compile flags: /Ogty
;	COMDAT ?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z
_TEXT	SEGMENT
_ptr$ = 8
?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z PROC NEAR ; XChain<CSysObj>::remove, COMDAT
; _this$ = ecx

; 921  : 	if (ptr->prev)

	mov	eax, DWORD PTR _ptr$[esp-4]
	mov	edx, DWORD PTR [eax+8]
	test	edx, edx
	je	SHORT $L56924
	push	esi

; 922  : 		ptr->prev->next=ptr->next;

	mov	esi, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], esi
	pop	esi

; 923  : 	else

	jmp	SHORT $L56925
$L56924:

; 924  : 		head=ptr->next;

	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx], edx
$L56925:

; 925  : 
; 926  : 	if (ptr->next)

	mov	edx, DWORD PTR [eax+4]
	test	edx, edx
	je	SHORT $L56926

; 927  : 		ptr->next->prev=ptr->prev;

	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx

; 930  : 
; 931  : 	return ptr;
; 932  : }

	ret	4
$L56926:

; 928  : 	else
; 929  : 		tail=ptr->prev;

	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+4], edx

; 930  : 
; 931  : 	return ptr;
; 932  : }

	ret	4
?remove@?$XChain@VCSysObj@@@@QAEPAVCSysObj@@PAV2@@Z ENDP ; XChain<CSysObj>::remove
_TEXT	ENDS
PUBLIC	?list_base@CMallocBlock@@AAEPAKXZ		; CMallocBlock::list_base
; Function compile flags: /Ogty
;	COMDAT ?list_base@CMallocBlock@@AAEPAKXZ
_TEXT	SEGMENT
?list_base@CMallocBlock@@AAEPAKXZ PROC NEAR		; CMallocBlock::list_base, COMDAT
; _this$ = ecx

; 1092 :    U32 *list_base(void){return ((U32 *)(this+1));}

	lea	eax, DWORD PTR [ecx+4]
	ret	0
?list_base@CMallocBlock@@AAEPAKXZ ENDP			; CMallocBlock::list_base
_TEXT	ENDS
PUBLIC	??3CMallocBlock@@SAXPAXKPBKK@Z			; CMallocBlock::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3CMallocBlock@@SAXPAXKPBKK@Z
_TEXT	SEGMENT
_ptr$ = 8
??3CMallocBlock@@SAXPAXKPBKK@Z PROC NEAR		; CMallocBlock::operator delete, COMDAT

; 1096 :    void operator delete(void *ptr,U32 num,CU32 *list,U32 align){xfree(ptr);}

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3CMallocBlock@@SAXPAXKPBKK@Z ENDP			; CMallocBlock::operator delete
_TEXT	ENDS
PUBLIC	??3CMallocBlock@@SAXPAX@Z			; CMallocBlock::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3CMallocBlock@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3CMallocBlock@@SAXPAX@Z PROC NEAR			; CMallocBlock::operator delete, COMDAT

; 1097 :    void operator delete(void *ptr){xfree(ptr);}

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3CMallocBlock@@SAXPAX@Z ENDP				; CMallocBlock::operator delete
_TEXT	ENDS
PUBLIC	??0CMallocBlock@@QAE@XZ				; CMallocBlock::CMallocBlock
; Function compile flags: /Ogty
;	COMDAT ??0CMallocBlock@@QAE@XZ
_TEXT	SEGMENT
??0CMallocBlock@@QAE@XZ PROC NEAR			; CMallocBlock::CMallocBlock, COMDAT
; _this$ = ecx

; 1098 :    CMallocBlock(void){cur=0;}

	mov	eax, ecx
	mov	BYTE PTR [eax+1], 0
	ret	0
??0CMallocBlock@@QAE@XZ ENDP				; CMallocBlock::CMallocBlock
_TEXT	ENDS
PUBLIC	??4CMallocBlock@@QAEAAV0@ABV0@@Z		; CMallocBlock::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CMallocBlock@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CMallocBlock@@QAEAAV0@ABV0@@Z PROC NEAR		; CMallocBlock::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	ret	4
??4CMallocBlock@@QAEAAV0@ABV0@@Z ENDP			; CMallocBlock::operator=
_TEXT	ENDS
PUBLIC	??2RingBuffer@@SAPAXI@Z				; RingBuffer::operator new
; Function compile flags: /Ogty
;	COMDAT ??2RingBuffer@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2RingBuffer@@SAPAXI@Z PROC NEAR			; RingBuffer::operator new, COMDAT

; 1122 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2RingBuffer@@SAPAXI@Z ENDP				; RingBuffer::operator new
_TEXT	ENDS
PUBLIC	??3RingBuffer@@SAXPAX@Z				; RingBuffer::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3RingBuffer@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3RingBuffer@@SAXPAX@Z PROC NEAR			; RingBuffer::operator delete, COMDAT

; 1122 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3RingBuffer@@SAXPAX@Z ENDP				; RingBuffer::operator delete
_TEXT	ENDS
PUBLIC	??4RingBuffer@@QAEAAV0@ABV0@@Z			; RingBuffer::operator=
; Function compile flags: /Ogty
;	COMDAT ??4RingBuffer@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4RingBuffer@@QAEAAV0@ABV0@@Z PROC NEAR		; RingBuffer::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, ecx
	push	edi
	mov	ecx, 6
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4RingBuffer@@QAEAAV0@ABV0@@Z ENDP			; RingBuffer::operator=
_TEXT	ENDS
PUBLIC	??0MemGrow@@QAE@XZ				; MemGrow::MemGrow
; Function compile flags: /Ogty
;	COMDAT ??0MemGrow@@QAE@XZ
_TEXT	SEGMENT
??0MemGrow@@QAE@XZ PROC NEAR				; MemGrow::MemGrow, COMDAT
; _this$ = ecx

; 1131 : 	MemGrow(void) : size(0),base(null) {}

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
	ret	0
??0MemGrow@@QAE@XZ ENDP					; MemGrow::MemGrow
_TEXT	ENDS
PUBLIC	??0MemGrow@@QAE@K@Z				; MemGrow::MemGrow
; Function compile flags: /Ogty
;	COMDAT ??0MemGrow@@QAE@K@Z
_TEXT	SEGMENT
_start$ = 8
??0MemGrow@@QAE@K@Z PROC NEAR				; MemGrow::MemGrow, COMDAT
; _this$ = ecx

; 1132 : 	MemGrow(U32 start) : size(start) {base=(char *)xmalloc(size);}

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _start$[esp]
	mov	DWORD PTR [esi+4], ecx
	call	@xmalloc@4
	mov	DWORD PTR [esi], eax
	mov	eax, esi
	pop	esi
	ret	4
??0MemGrow@@QAE@K@Z ENDP				; MemGrow::MemGrow
_TEXT	ENDS
PUBLIC	??1MemGrow@@QAE@XZ				; MemGrow::~MemGrow
; Function compile flags: /Ogty
;	COMDAT ??1MemGrow@@QAE@XZ
_TEXT	SEGMENT
??1MemGrow@@QAE@XZ PROC NEAR				; MemGrow::~MemGrow, COMDAT
; _this$ = ecx

; 1133 : 	~MemGrow(void){xfree(base);}

	mov	ecx, DWORD PTR [ecx]
	jmp	@xfree@4
??1MemGrow@@QAE@XZ ENDP					; MemGrow::~MemGrow
_TEXT	ENDS
PUBLIC	?init@MemGrow@@QAEXK@Z				; MemGrow::init
; Function compile flags: /Ogty
;	COMDAT ?init@MemGrow@@QAEXK@Z
_TEXT	SEGMENT
_start$ = 8
?init@MemGrow@@QAEXK@Z PROC NEAR			; MemGrow::init, COMDAT
; _this$ = ecx

; 1135 : 	void init(U32 start){size=start;base=(char *)xmalloc(size);}

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR _start$[esp]
	mov	DWORD PTR [esi+4], ecx
	call	@xmalloc@4
	mov	DWORD PTR [esi], eax
	pop	esi
	ret	4
?init@MemGrow@@QAEXK@Z ENDP				; MemGrow::init
_TEXT	ENDS
PUBLIC	?close@MemGrow@@QAEXXZ				; MemGrow::close
; Function compile flags: /Ogty
;	COMDAT ?close@MemGrow@@QAEXXZ
_TEXT	SEGMENT
?close@MemGrow@@QAEXXZ PROC NEAR			; MemGrow::close, COMDAT
; _this$ = ecx

; 1136 : 	void close(void){xfree(base);base=null;}

	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi]
	call	@xfree@4
	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
?close@MemGrow@@QAEXXZ ENDP				; MemGrow::close
_TEXT	ENDS
PUBLIC	??2MemGrow@@SAPAXI@Z				; MemGrow::operator new
; Function compile flags: /Ogty
;	COMDAT ??2MemGrow@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2MemGrow@@SAPAXI@Z PROC NEAR				; MemGrow::operator new, COMDAT

; 1138 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2MemGrow@@SAPAXI@Z ENDP				; MemGrow::operator new
_TEXT	ENDS
PUBLIC	??3MemGrow@@SAXPAX@Z				; MemGrow::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3MemGrow@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3MemGrow@@SAXPAX@Z PROC NEAR				; MemGrow::operator delete, COMDAT

; 1138 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3MemGrow@@SAXPAX@Z ENDP				; MemGrow::operator delete
_TEXT	ENDS
PUBLIC	??4MemGrow@@QAEAAV0@ABV0@@Z			; MemGrow::operator=
; Function compile flags: /Ogty
;	COMDAT ??4MemGrow@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4MemGrow@@QAEAAV0@ABV0@@Z PROC NEAR			; MemGrow::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	ret	4
??4MemGrow@@QAEAAV0@ABV0@@Z ENDP			; MemGrow::operator=
_TEXT	ENDS
PUBLIC	??0CSysObj@@QAE@ABV0@@Z				; CSysObj::CSysObj
; Function compile flags: /Ogty
;	COMDAT ??0CSysObj@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0CSysObj@@QAE@ABV0@@Z PROC NEAR			; CSysObj::CSysObj, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	ret	4
??0CSysObj@@QAE@ABV0@@Z ENDP				; CSysObj::CSysObj
_TEXT	ENDS
PUBLIC	??4CSysObj@@QAEAAV0@ABV0@@Z			; CSysObj::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CSysObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CSysObj@@QAEAAV0@ABV0@@Z PROC NEAR			; CSysObj::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], ecx
	ret	4
??4CSysObj@@QAEAAV0@ABV0@@Z ENDP			; CSysObj::operator=
_TEXT	ENDS
PUBLIC	??0XStatistic@@QAE@XZ				; XStatistic::XStatistic
; Function compile flags: /Ogty
;	COMDAT ??0XStatistic@@QAE@XZ
_TEXT	SEGMENT
??0XStatistic@@QAE@XZ PROC NEAR				; XStatistic::XStatistic, COMDAT
; _this$ = ecx

; 1173 : 	XStatistic(void) : count(0),tick_total(0) {}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx
	ret	0
??0XStatistic@@QAE@XZ ENDP				; XStatistic::XStatistic
_TEXT	ENDS
PUBLIC	?add_count@XStatistic@@QAEXXZ			; XStatistic::add_count
; Function compile flags: /Ogty
;	COMDAT ?add_count@XStatistic@@QAEXXZ
_TEXT	SEGMENT
?add_count@XStatistic@@QAEXXZ PROC NEAR			; XStatistic::add_count, COMDAT
; _this$ = ecx

; 1174 : 	void add_count(void){count++;}

	inc	DWORD PTR [ecx]
	ret	0
?add_count@XStatistic@@QAEXXZ ENDP			; XStatistic::add_count
_TEXT	ENDS
PUBLIC	?add_tick@XStatistic@@QAEX_K@Z			; XStatistic::add_tick
; Function compile flags: /Ogty
;	COMDAT ?add_tick@XStatistic@@QAEX_K@Z
_TEXT	SEGMENT
_tick$ = 8
?add_tick@XStatistic@@QAEX_K@Z PROC NEAR		; XStatistic::add_tick, COMDAT
; _this$ = ecx

; 1175 : 	void add_tick(U64 tick){tick_total+=tick;}

	mov	eax, DWORD PTR _tick$[esp-4]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR _tick$[esp]
	adc	eax, edx
	mov	DWORD PTR [ecx+12], eax
	ret	8
?add_tick@XStatistic@@QAEX_K@Z ENDP			; XStatistic::add_tick
_TEXT	ENDS
PUBLIC	?add_alloc@XStatistic@@QAEXXZ			; XStatistic::add_alloc
; Function compile flags: /Ogty
;	COMDAT ?add_alloc@XStatistic@@QAEXXZ
_TEXT	SEGMENT
?add_alloc@XStatistic@@QAEXXZ PROC NEAR			; XStatistic::add_alloc, COMDAT
; _this$ = ecx

; 1176 : 	void add_alloc(void){mem_stats0.alloc_count++;}

	inc	DWORD PTR [ecx+16]
	ret	0
?add_alloc@XStatistic@@QAEXXZ ENDP			; XStatistic::add_alloc
_TEXT	ENDS
PUBLIC	?add_alloc2@XStatistic@@QAEXXZ			; XStatistic::add_alloc2
; Function compile flags: /Ogty
;	COMDAT ?add_alloc2@XStatistic@@QAEXXZ
_TEXT	SEGMENT
?add_alloc2@XStatistic@@QAEXXZ PROC NEAR		; XStatistic::add_alloc2, COMDAT
; _this$ = ecx

; 1177 : 	void add_alloc2(void){mem_stats1.alloc_count++;}

	inc	DWORD PTR [ecx+24]
	ret	0
?add_alloc2@XStatistic@@QAEXXZ ENDP			; XStatistic::add_alloc2
_TEXT	ENDS
PUBLIC	?add_alloc3@XStatistic@@QAEXXZ			; XStatistic::add_alloc3
; Function compile flags: /Ogty
;	COMDAT ?add_alloc3@XStatistic@@QAEXXZ
_TEXT	SEGMENT
?add_alloc3@XStatistic@@QAEXXZ PROC NEAR		; XStatistic::add_alloc3, COMDAT
; _this$ = ecx

; 1178 : 	void add_alloc3(void){mem_stats2.alloc_count++;}

	inc	DWORD PTR [ecx+32]
	ret	0
?add_alloc3@XStatistic@@QAEXXZ ENDP			; XStatistic::add_alloc3
_TEXT	ENDS
PUBLIC	??2XStatistic@@SAPAXI@Z				; XStatistic::operator new
; Function compile flags: /Ogty
;	COMDAT ??2XStatistic@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2XStatistic@@SAPAXI@Z PROC NEAR			; XStatistic::operator new, COMDAT

; 1179 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2XStatistic@@SAPAXI@Z ENDP				; XStatistic::operator new
_TEXT	ENDS
PUBLIC	??3XStatistic@@SAXPAX@Z				; XStatistic::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3XStatistic@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3XStatistic@@SAXPAX@Z PROC NEAR			; XStatistic::operator delete, COMDAT

; 1179 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3XStatistic@@SAXPAX@Z ENDP				; XStatistic::operator delete
_TEXT	ENDS
PUBLIC	??4XStatistic@@QAEAAV0@ABV0@@Z			; XStatistic::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XStatistic@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XStatistic@@QAEAAV0@ABV0@@Z PROC NEAR		; XStatistic::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, ecx
	push	edi
	mov	ecx, 12					; 0000000cH
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4XStatistic@@QAEAAV0@ABV0@@Z ENDP			; XStatistic::operator=
_TEXT	ENDS
PUBLIC	??0XStatManager@@QAE@XZ				; XStatManager::XStatManager
; Function compile flags: /Ogty
;	COMDAT ??0XStatManager@@QAE@XZ
_TEXT	SEGMENT
??0XStatManager@@QAE@XZ PROC NEAR			; XStatManager::XStatManager, COMDAT
; _this$ = ecx

; 1189 : 	XStatManager(void) : cur_id(0) {}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR [eax+32]
	and	edx, -16777211				; ff000005H
	or	edx, 16777221				; 01000005H
	mov	DWORD PTR [eax+32], edx
	mov	DWORD PTR [eax+36], ecx
	ret	0
??0XStatManager@@QAE@XZ ENDP				; XStatManager::XStatManager
_TEXT	ENDS
PUBLIC	?get_id@XStatManager@@QAEKXZ			; XStatManager::get_id
; Function compile flags: /Ogty
;	COMDAT ?get_id@XStatManager@@QAEKXZ
_TEXT	SEGMENT
?get_id@XStatManager@@QAEKXZ PROC NEAR			; XStatManager::get_id, COMDAT
; _this$ = ecx

; 1190 : 	U32 get_id(void){return cur_id++;}

	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR [eax+1]
	mov	DWORD PTR [ecx], edx
	ret	0
?get_id@XStatManager@@QAEKXZ ENDP			; XStatManager::get_id
_TEXT	ENDS
PUBLIC	?push@XStatManager@@QAEXPAVXStatistic@@@Z	; XStatManager::push
EXTRN	@xlist_new_node@8:NEAR
; Function compile flags: /Ogty
;	COMDAT ?push@XStatManager@@QAEXPAVXStatistic@@@Z
_TEXT	SEGMENT
_stat$ = 8
?push@XStatManager@@QAEXPAVXStatistic@@@Z PROC NEAR	; XStatManager::push, COMDAT
; _this$ = ecx

; 1192 : 	void push(XStatistic *stat){stack.add_head(stat);}

	mov	eax, DWORD PTR [ecx+24]
	push	esi
	lea	esi, DWORD PTR [ecx+16]
	test	eax, eax
	jne	SHORT $L57548
	mov	edx, 12					; 0000000cH
	mov	ecx, esi
	call	@xlist_new_node@8
	mov	DWORD PTR [esi+8], eax
$L57548:
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR _stat$[esp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	jne	SHORT $L57550
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi], eax
	pop	esi
	ret	4
$L57550:
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [esi], eax
	pop	esi
	ret	4
?push@XStatManager@@QAEXPAVXStatistic@@@Z ENDP		; XStatManager::push
_TEXT	ENDS
PUBLIC	?pop@XStatManager@@QAEXPAVXStatistic@@@Z	; XStatManager::pop
; Function compile flags: /Ogty
;	COMDAT ?pop@XStatManager@@QAEXPAVXStatistic@@@Z
_TEXT	SEGMENT
?pop@XStatManager@@QAEXPAVXStatistic@@@Z PROC NEAR	; XStatManager::pop, COMDAT
; _this$ = ecx

; 1193 : 	void pop(XStatistic *stat){stack.remove_head();}

	mov	edx, DWORD PTR [ecx+16]
	test	edx, edx
	je	SHORT $L57558
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	mov	DWORD PTR [ecx+16], eax
	je	SHORT $L57562
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [ecx+24], edx
	ret	4
$L57562:
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [ecx+24], edx
$L57558:
	ret	4
?pop@XStatManager@@QAEXPAVXStatistic@@@Z ENDP		; XStatManager::pop
_TEXT	ENDS
PUBLIC	?add_alloc@XStatManager@@QAEXXZ			; XStatManager::add_alloc
; Function compile flags: /Ogty
;	COMDAT ?add_alloc@XStatManager@@QAEXXZ
_TEXT	SEGMENT
?add_alloc@XStatManager@@QAEXXZ PROC NEAR		; XStatManager::add_alloc, COMDAT
; _this$ = ecx

; 1196 : 		XStatistic *head=stack.get_head();

	mov	eax, DWORD PTR [ecx+16]
	test	eax, eax
	je	SHORT $L57574
	mov	eax, DWORD PTR [eax+8]

; 1197 : 		if (head)

	test	eax, eax
	je	SHORT $L57574

; 1198 : 			head->add_alloc();

	inc	DWORD PTR [eax+16]
$L57574:

; 1199 : 	}

	ret	0
?add_alloc@XStatManager@@QAEXXZ ENDP			; XStatManager::add_alloc
_TEXT	ENDS
PUBLIC	?add_alloc2@XStatManager@@QAEXXZ		; XStatManager::add_alloc2
; Function compile flags: /Ogty
;	COMDAT ?add_alloc2@XStatManager@@QAEXXZ
_TEXT	SEGMENT
?add_alloc2@XStatManager@@QAEXXZ PROC NEAR		; XStatManager::add_alloc2, COMDAT
; _this$ = ecx

; 1202 : 		XStatistic *head=stack.get_head();

	mov	eax, DWORD PTR [ecx+16]
	test	eax, eax
	je	SHORT $L57584
	mov	eax, DWORD PTR [eax+8]

; 1203 : 		if (head)

	test	eax, eax
	je	SHORT $L57584

; 1204 : 			head->add_alloc2();

	inc	DWORD PTR [eax+24]
$L57584:

; 1205 : 	}

	ret	0
?add_alloc2@XStatManager@@QAEXXZ ENDP			; XStatManager::add_alloc2
_TEXT	ENDS
PUBLIC	?add_alloc3@XStatManager@@QAEXXZ		; XStatManager::add_alloc3
; Function compile flags: /Ogty
;	COMDAT ?add_alloc3@XStatManager@@QAEXXZ
_TEXT	SEGMENT
?add_alloc3@XStatManager@@QAEXXZ PROC NEAR		; XStatManager::add_alloc3, COMDAT
; _this$ = ecx

; 1208 : 		XStatistic *head=stack.get_head();

	mov	eax, DWORD PTR [ecx+16]
	test	eax, eax
	je	SHORT $L57594
	mov	eax, DWORD PTR [eax+8]

; 1209 : 		if (head)

	test	eax, eax
	je	SHORT $L57594

; 1210 : 			head->add_alloc3();

	inc	DWORD PTR [eax+32]
$L57594:

; 1211 : 	}

	ret	0
?add_alloc3@XStatManager@@QAEXXZ ENDP			; XStatManager::add_alloc3
_TEXT	ENDS
PUBLIC	?close@XStatManager@@QAEXXZ			; XStatManager::close
EXTRN	@xlist_free_nodes@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?close@XStatManager@@QAEXXZ
_TEXT	SEGMENT
?close@XStatManager@@QAEXXZ PROC NEAR			; XStatManager::close, COMDAT
; _this$ = ecx

; 1213 : 	{

	push	esi
	mov	esi, ecx

; 1214 : 		stats.free_list();

	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	jns	SHORT $L57609
	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $L57609
	push	edi
$L57608:
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, eax
	mov	edi, DWORD PTR [eax+40]
	call	@xfree@4
	test	edi, edi
	mov	DWORD PTR [esi+4], edi
	jne	SHORT $L57608
	pop	edi
$L57609:
	mov	DWORD PTR [esi+4], 0
	mov	DWORD PTR [esi+8], 0

; 1215 : 		stack.free_list();

	mov	al, BYTE PTR [esi+35]
	add	esi, 16					; 00000010H
	test	al, 1
	je	SHORT $L57629
	cmp	DWORD PTR [esi], 0
	je	SHORT $L57629
$L57628:
	mov	ecx, DWORD PTR [esi]
	mov	ecx, DWORD PTR [ecx+8]
	call	@xfree@4
	mov	edx, DWORD PTR [esi]
	mov	eax, DWORD PTR [edx]
	test	eax, eax
	mov	DWORD PTR [esi], eax
	jne	SHORT $L57628
$L57629:
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+4], 0
	mov	ecx, esi
	pop	esi
	jmp	@xlist_free_nodes@4
?close@XStatManager@@QAEXXZ ENDP			; XStatManager::close
_TEXT	ENDS
PUBLIC	??2XStatManager@@SAPAXI@Z			; XStatManager::operator new
; Function compile flags: /Ogty
;	COMDAT ??2XStatManager@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2XStatManager@@SAPAXI@Z PROC NEAR			; XStatManager::operator new, COMDAT

; 1217 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2XStatManager@@SAPAXI@Z ENDP				; XStatManager::operator new
_TEXT	ENDS
PUBLIC	??3XStatManager@@SAXPAX@Z			; XStatManager::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3XStatManager@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3XStatManager@@SAXPAX@Z PROC NEAR			; XStatManager::operator delete, COMDAT

; 1217 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3XStatManager@@SAXPAX@Z ENDP				; XStatManager::operator delete
_TEXT	ENDS
PUBLIC	??4XStatManager@@QAEAAV0@ABV0@@Z		; XStatManager::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XStatManager@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XStatManager@@QAEAAV0@ABV0@@Z PROC NEAR		; XStatManager::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, ecx
	push	edi
	mov	ecx, 10					; 0000000aH
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4XStatManager@@QAEAAV0@ABV0@@Z ENDP			; XStatManager::operator=
_TEXT	ENDS
PUBLIC	??1XStatManager@@QAE@XZ				; XStatManager::~XStatManager
; Function compile flags: /Ogty
;	COMDAT ??1XStatManager@@QAE@XZ
_TEXT	SEGMENT
??1XStatManager@@QAE@XZ PROC NEAR			; XStatManager::~XStatManager, COMDAT
; _this$ = ecx
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	xor	ebx, ebx
	mov	al, BYTE PTR [esi+35]
	lea	edi, DWORD PTR [esi+16]
	test	al, 1
	je	SHORT $L57664
	cmp	DWORD PTR [edi], ebx
	je	SHORT $L57664
$L57663:
	mov	eax, DWORD PTR [edi]
	mov	ecx, DWORD PTR [eax+8]
	call	@xfree@4
	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, ebx
	mov	DWORD PTR [edi], eax
	jne	SHORT $L57663
$L57664:
	mov	ecx, edi
	call	@xlist_free_nodes@4
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	jns	SHORT $L57686
	cmp	DWORD PTR [esi+4], ebx
	je	SHORT $L57686
$L57677:
	mov	edx, DWORD PTR [esi+4]
	mov	ecx, edx
	mov	edi, DWORD PTR [edx+40]
	call	@xfree@4
	cmp	edi, ebx
	mov	DWORD PTR [esi+4], edi
	jne	SHORT $L57677
$L57686:
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ebx
	pop	edi
	pop	esi
	pop	ebx
	ret	0
??1XStatManager@@QAE@XZ ENDP				; XStatManager::~XStatManager
_TEXT	ENDS
PUBLIC	??2XStat@@SAPAXI@Z				; XStat::operator new
; Function compile flags: /Ogty
;	COMDAT ??2XStat@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2XStat@@SAPAXI@Z PROC NEAR				; XStat::operator new, COMDAT

; 1229 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2XStat@@SAPAXI@Z ENDP					; XStat::operator new
_TEXT	ENDS
PUBLIC	??3XStat@@SAXPAX@Z				; XStat::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3XStat@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3XStat@@SAXPAX@Z PROC NEAR				; XStat::operator delete, COMDAT

; 1229 : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3XStat@@SAXPAX@Z ENDP					; XStat::operator delete
_TEXT	ENDS
PUBLIC	??4XStat@@QAEAAV0@ABV0@@Z			; XStat::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XStat@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XStat@@QAEAAV0@ABV0@@Z PROC NEAR			; XStat::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, ecx
	push	edi
	mov	ecx, 6
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4XStat@@QAEAAV0@ABV0@@Z ENDP				; XStat::operator=
_TEXT	ENDS
PUBLIC	?bitch@CError@@QAEXPBD@Z			; CError::bitch
; Function compile flags: /Ogty
;	COMDAT ?bitch@CError@@QAEXPBD@Z
_TEXT	SEGMENT
_str$ = 8
?bitch@CError@@QAEXPBD@Z PROC NEAR			; CError::bitch, COMDAT
; _this$ = ecx

; 1238 : 	inline void bitch(CC8 *str){message(ERROR_BITCH,str);}

	mov	edx, DWORD PTR _str$[esp-4]
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	4
	call	DWORD PTR [eax]
	ret	4
?bitch@CError@@QAEXPBD@Z ENDP				; CError::bitch
_TEXT	ENDS
PUBLIC	?fatal@CError@@QAEXPBD@Z			; CError::fatal
; Function compile flags: /Ogty
;	COMDAT ?fatal@CError@@QAEXPBD@Z
_TEXT	SEGMENT
_str$ = 8
?fatal@CError@@QAEXPBD@Z PROC NEAR			; CError::fatal, COMDAT
; _this$ = ecx

; 1239 : 	inline void fatal(CC8 *str){message(ERROR_FATAL,str);}

	mov	edx, DWORD PTR _str$[esp-4]
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	0
	call	DWORD PTR [eax]
	ret	4
?fatal@CError@@QAEXPBD@Z ENDP				; CError::fatal
_TEXT	ENDS
PUBLIC	?throw_msg@CError@@QAEXPBD@Z			; CError::throw_msg
; Function compile flags: /Ogty
;	COMDAT ?throw_msg@CError@@QAEXPBD@Z
_TEXT	SEGMENT
_str$ = 8
?throw_msg@CError@@QAEXPBD@Z PROC NEAR			; CError::throw_msg, COMDAT
; _this$ = ecx

; 1240 : 	inline void throw_msg(CC8 *str){throw_msg(ERROR_NORMAL,str);}

	mov	edx, DWORD PTR _str$[esp-4]
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	3
	call	DWORD PTR [eax+4]
	ret	4
?throw_msg@CError@@QAEXPBD@Z ENDP			; CError::throw_msg
_TEXT	ENDS
PUBLIC	??0CError@@QAE@XZ				; CError::CError
PUBLIC	??_7CError@@6B@					; CError::`vftable'
EXTRN	?message@CError@@UAEXKPBD@Z:NEAR		; CError::message
EXTRN	?throw_msg@CError@@UAEXKPBD@Z:NEAR		; CError::throw_msg
EXTRN	?assert@CError@@UAEXPBDK@Z:NEAR			; CError::assert
;	COMDAT ??_7CError@@6B@
CONST	SEGMENT
??_7CError@@6B@ DD FLAT:?message@CError@@UAEXKPBD@Z	; CError::`vftable'
	DD	FLAT:?throw_msg@CError@@UAEXKPBD@Z
	DD	FLAT:?assert@CError@@UAEXPBDK@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CError@@QAE@XZ
_TEXT	SEGMENT
??0CError@@QAE@XZ PROC NEAR				; CError::CError, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CError@@6B@ ; CError::`vftable'
	ret	0
??0CError@@QAE@XZ ENDP					; CError::CError
_TEXT	ENDS
PUBLIC	??0CError@@QAE@ABV0@@Z				; CError::CError
; Function compile flags: /Ogty
;	COMDAT ??0CError@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0CError@@QAE@ABV0@@Z PROC NEAR			; CError::CError, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CError@@6B@ ; CError::`vftable'
	ret	4
??0CError@@QAE@ABV0@@Z ENDP				; CError::CError
_TEXT	ENDS
PUBLIC	??4CError@@QAEAAV0@ABV0@@Z			; CError::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CError@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4CError@@QAEAAV0@ABV0@@Z PROC NEAR			; CError::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	ret	4
??4CError@@QAEAAV0@ABV0@@Z ENDP				; CError::operator=
_TEXT	ENDS
PUBLIC	??_7WinMsgDef@@6B@				; WinMsgDef::`vftable'
PUBLIC	??0WinMsgDef@@QAE@XZ				; WinMsgDef::WinMsgDef
EXTRN	?message@WinMsgDef@@UAEXKPBD@Z:NEAR		; WinMsgDef::message
EXTRN	?throw_msg@WinMsgDef@@UAEXKPBD@Z:NEAR		; WinMsgDef::throw_msg
EXTRN	?assert@WinMsgDef@@UAEXPBDK@Z:NEAR		; WinMsgDef::assert
EXTRN	?set_window@WinMsgDef@@UAEXPAUHWND__@@@Z:NEAR	; WinMsgDef::set_window
EXTRN	?no_window@WinMsgDef@@UAEXXZ:NEAR		; WinMsgDef::no_window
;	COMDAT ??_7WinMsgDef@@6B@
CONST	SEGMENT
??_7WinMsgDef@@6B@ DD FLAT:?message@WinMsgDef@@UAEXKPBD@Z ; WinMsgDef::`vftable'
	DD	FLAT:?throw_msg@WinMsgDef@@UAEXKPBD@Z
	DD	FLAT:?assert@WinMsgDef@@UAEXPBDK@Z
	DD	FLAT:?set_window@WinMsgDef@@UAEXPAUHWND__@@@Z
	DD	FLAT:?no_window@WinMsgDef@@UAEXXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0WinMsgDef@@QAE@XZ
_TEXT	SEGMENT
??0WinMsgDef@@QAE@XZ PROC NEAR				; WinMsgDef::WinMsgDef, COMDAT
; _this$ = ecx

; 1248 : 	WinMsgDef(void) : hwnd(null) {}

	mov	eax, ecx
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], OFFSET FLAT:??_7WinMsgDef@@6B@ ; WinMsgDef::`vftable'
	ret	0
??0WinMsgDef@@QAE@XZ ENDP				; WinMsgDef::WinMsgDef
_TEXT	ENDS
PUBLIC	??0WinMsgDef@@QAE@ABV0@@Z			; WinMsgDef::WinMsgDef
; Function compile flags: /Ogty
;	COMDAT ??0WinMsgDef@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0WinMsgDef@@QAE@ABV0@@Z PROC NEAR			; WinMsgDef::WinMsgDef, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CError@@6B@ ; CError::`vftable'
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7WinMsgDef@@6B@ ; WinMsgDef::`vftable'
	ret	4
??0WinMsgDef@@QAE@ABV0@@Z ENDP				; WinMsgDef::WinMsgDef
_TEXT	ENDS
PUBLIC	??4WinMsgDef@@QAEAAV0@ABV0@@Z			; WinMsgDef::operator=
; Function compile flags: /Ogty
;	COMDAT ??4WinMsgDef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4WinMsgDef@@QAEAAV0@ABV0@@Z PROC NEAR			; WinMsgDef::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	ret	4
??4WinMsgDef@@QAEAAV0@ABV0@@Z ENDP			; WinMsgDef::operator=
_TEXT	ENDS
PUBLIC	??4?$XChain@VCSysObj@@@@QAEAAV0@ABV0@@Z		; XChain<CSysObj>::operator=
; Function compile flags: /Ogty
;	COMDAT ??4?$XChain@VCSysObj@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4?$XChain@VCSysObj@@@@QAEAAV0@ABV0@@Z PROC NEAR	; XChain<CSysObj>::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	mov	edx, eax
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [edx], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], esi
	pop	esi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	ret	4
??4?$XChain@VCSysObj@@@@QAEAAV0@ABV0@@Z ENDP		; XChain<CSysObj>::operator=
_TEXT	ENDS
PUBLIC	??4ErrMem@@QAEAAV0@ABV0@@Z			; ErrMem::operator=
; Function compile flags: /Ogty
;	COMDAT ??4ErrMem@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4ErrMem@@QAEAAV0@ABV0@@Z PROC NEAR			; ErrMem::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, ecx
	push	edi
	mov	ecx, 2050				; 00000802H
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4ErrMem@@QAEAAV0@ABV0@@Z ENDP				; ErrMem::operator=
_TEXT	ENDS
PUBLIC	?bitch@XGlobal@@QAEXPBD@Z			; XGlobal::bitch
; Function compile flags: /Ogty
;	COMDAT ?bitch@XGlobal@@QAEXPBD@Z
_TEXT	SEGMENT
_str$ = 8
?bitch@XGlobal@@QAEXPBD@Z PROC NEAR			; XGlobal::bitch, COMDAT
; _this$ = ecx

; 1412 : 	inline void bitch(CC8 *str){error->message(ERROR_BITCH,str);}

	mov	ecx, DWORD PTR [ecx+8204]
	mov	edx, DWORD PTR _str$[esp-4]
	push	edx
	push	4
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax]
	ret	4
?bitch@XGlobal@@QAEXPBD@Z ENDP				; XGlobal::bitch
_TEXT	ENDS
PUBLIC	?throw_msg@XGlobal@@QAEXPBD@Z			; XGlobal::throw_msg
; Function compile flags: /Ogty
;	COMDAT ?throw_msg@XGlobal@@QAEXPBD@Z
_TEXT	SEGMENT
_str$ = 8
?throw_msg@XGlobal@@QAEXPBD@Z PROC NEAR			; XGlobal::throw_msg, COMDAT
; _this$ = ecx

; 1413 : 	inline void throw_msg(CC8 *str){error->throw_msg(ERROR_NORMAL,str);}

	mov	ecx, DWORD PTR [ecx+8204]
	mov	edx, DWORD PTR _str$[esp-4]
	push	edx
	push	3
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+4]
	ret	4
?throw_msg@XGlobal@@QAEXPBD@Z ENDP			; XGlobal::throw_msg
_TEXT	ENDS
PUBLIC	?assert@XGlobal@@QAEXPBDK@Z			; XGlobal::assert
; Function compile flags: /Ogty
;	COMDAT ?assert@XGlobal@@QAEXPBDK@Z
_TEXT	SEGMENT
_file$ = 8
_line$ = 12
?assert@XGlobal@@QAEXPBDK@Z PROC NEAR			; XGlobal::assert, COMDAT
; _this$ = ecx

; 1414 : 	inline void assert(CC8 *file,U32 line){error->assert(file,line);}

	mov	ecx, DWORD PTR [ecx+8204]
	mov	eax, DWORD PTR [ecx]
	jmp	DWORD PTR [eax+8]
?assert@XGlobal@@QAEXPBDK@Z ENDP			; XGlobal::assert
_TEXT	ENDS
PUBLIC	??0XGlobal@@QAE@ABV0@@Z				; XGlobal::XGlobal
PUBLIC	??_7XGlobal@@6B@				; XGlobal::`vftable'
EXTRN	?close@XGlobal@@UAEXXZ:NEAR			; XGlobal::close
;	COMDAT ??_7XGlobal@@6B@
CONST	SEGMENT
??_7XGlobal@@6B@ DD FLAT:?close@XGlobal@@UAEXXZ		; XGlobal::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0XGlobal@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0XGlobal@@QAE@ABV0@@Z PROC NEAR			; XGlobal::XGlobal, COMDAT
; _this$ = ecx
	mov	edx, DWORD PTR ___that$[esp-4]
	mov	eax, ecx
	push	esi
	push	edi
	mov	ecx, 2050				; 00000802H
	lea	esi, DWORD PTR [edx+4]
	lea	edi, DWORD PTR [eax+4]
	rep movsd
	mov	ecx, DWORD PTR [edx+8204]
	lea	esi, DWORD PTR [eax+8212]
	mov	DWORD PTR [eax+8204], ecx
	mov	ecx, DWORD PTR [edx+8208]
	mov	DWORD PTR [eax+8208], ecx
	lea	ecx, DWORD PTR [edx+8212]
	mov	edi, DWORD PTR [edx+8212]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	lea	ecx, DWORD PTR [edx+8224]
	lea	esi, DWORD PTR [eax+8224]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	lea	edi, DWORD PTR [eax+8236]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	lea	esi, DWORD PTR [edx+8236]
	mov	ecx, 6
	rep movsd
	mov	ecx, DWORD PTR [edx+8260]
	lea	esi, DWORD PTR [edx+8264]
	mov	DWORD PTR [eax+8260], ecx
	lea	edi, DWORD PTR [eax+8264]
	mov	ecx, 10					; 0000000aH
	rep movsd
	pop	edi
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XGlobal@@6B@ ; XGlobal::`vftable'
	pop	esi
	ret	4
??0XGlobal@@QAE@ABV0@@Z ENDP				; XGlobal::XGlobal
_TEXT	ENDS
PUBLIC	??4XGlobal@@QAEAAV0@ABV0@@Z			; XGlobal::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XGlobal@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XGlobal@@QAEAAV0@ABV0@@Z PROC NEAR			; XGlobal::operator=, COMDAT
; _this$ = ecx
	mov	edx, DWORD PTR ___that$[esp-4]
	mov	eax, ecx
	push	esi
	push	edi
	mov	ecx, 2050				; 00000802H
	lea	esi, DWORD PTR [edx+4]
	lea	edi, DWORD PTR [eax+4]
	rep movsd
	mov	ecx, DWORD PTR [edx+8204]
	lea	esi, DWORD PTR [eax+8212]
	mov	DWORD PTR [eax+8204], ecx
	mov	ecx, DWORD PTR [edx+8208]
	mov	DWORD PTR [eax+8208], ecx
	lea	ecx, DWORD PTR [edx+8212]
	mov	edi, DWORD PTR [edx+8212]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	lea	ecx, DWORD PTR [edx+8224]
	lea	esi, DWORD PTR [eax+8224]
	mov	edi, DWORD PTR [ecx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [ecx+4]
	mov	DWORD PTR [esi+4], edi
	lea	edi, DWORD PTR [eax+8236]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [esi+8], ecx
	lea	esi, DWORD PTR [edx+8236]
	mov	ecx, 6
	rep movsd
	mov	ecx, DWORD PTR [edx+8260]
	lea	esi, DWORD PTR [edx+8264]
	mov	DWORD PTR [eax+8260], ecx
	lea	edi, DWORD PTR [eax+8264]
	mov	ecx, 10					; 0000000aH
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4XGlobal@@QAEAAV0@ABV0@@Z ENDP			; XGlobal::operator=
_TEXT	ENDS
PUBLIC	??0XDll@@QAE@XZ					; XDll::XDll
PUBLIC	??_7XDll@@6B@					; XDll::`vftable'
EXTRN	?attach_process@XDll@@UAEKPAX@Z:NEAR		; XDll::attach_process
EXTRN	?detach_process@XDll@@UAEKPAX@Z:NEAR		; XDll::detach_process
;	COMDAT ??_7XDll@@6B@
CONST	SEGMENT
??_7XDll@@6B@ DD FLAT:?attach_process@XDll@@UAEKPAX@Z	; XDll::`vftable'
	DD	FLAT:?detach_process@XDll@@UAEKPAX@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0XDll@@QAE@XZ
_TEXT	SEGMENT
??0XDll@@QAE@XZ PROC NEAR				; XDll::XDll, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XDll@@6B@ ; XDll::`vftable'
	ret	0
??0XDll@@QAE@XZ ENDP					; XDll::XDll
_TEXT	ENDS
PUBLIC	??0XDll@@QAE@ABV0@@Z				; XDll::XDll
; Function compile flags: /Ogty
;	COMDAT ??0XDll@@QAE@ABV0@@Z
_TEXT	SEGMENT
??0XDll@@QAE@ABV0@@Z PROC NEAR				; XDll::XDll, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XDll@@6B@ ; XDll::`vftable'
	ret	4
??0XDll@@QAE@ABV0@@Z ENDP				; XDll::XDll
_TEXT	ENDS
PUBLIC	??4XDll@@QAEAAV0@ABV0@@Z			; XDll::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XDll@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
??4XDll@@QAEAAV0@ABV0@@Z PROC NEAR			; XDll::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	ret	4
??4XDll@@QAEAAV0@ABV0@@Z ENDP				; XDll::operator=
_TEXT	ENDS
PUBLIC	??0XApp@@QAE@XZ					; XApp::XApp
EXTRN	?_xapp@@3PAVXApp@@A:DWORD			; _xapp
; Function compile flags: /Ogty
;	COMDAT ??0XApp@@QAE@XZ
_TEXT	SEGMENT
??0XApp@@QAE@XZ PROC NEAR				; XApp::XApp, COMDAT
; _this$ = ecx

; 1444 : 	XApp(void){_xapp=this;}

	mov	eax, ecx
	mov	DWORD PTR ?_xapp@@3PAVXApp@@A, eax	; _xapp
	ret	0
??0XApp@@QAE@XZ ENDP					; XApp::XApp
_TEXT	ENDS
PUBLIC	??1XApp@@QAE@XZ					; XApp::~XApp
; Function compile flags: /Ogty
;	COMDAT ??1XApp@@QAE@XZ
_TEXT	SEGMENT
??1XApp@@QAE@XZ PROC NEAR				; XApp::~XApp, COMDAT
; _this$ = ecx

; 1445 : 	~XApp(void){_xapp=null;}

	mov	DWORD PTR ?_xapp@@3PAVXApp@@A, 0	; _xapp
	ret	0
??1XApp@@QAE@XZ ENDP					; XApp::~XApp
_TEXT	ENDS
PUBLIC	??4XApp@@QAEAAV0@ABV0@@Z			; XApp::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XApp@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XApp@@QAEAAV0@ABV0@@Z PROC NEAR			; XApp::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	ret	4
??4XApp@@QAEAAV0@ABV0@@Z ENDP				; XApp::operator=
_TEXT	ENDS
PUBLIC	??0XStat@@QAE@PAVXStatistic@@@Z			; XStat::XStat
EXTRN	_begin_tick:NEAR
; Function compile flags: /Ogty
;	COMDAT ??0XStat@@QAE@PAVXStatistic@@@Z
_TEXT	SEGMENT
_Stat$ = 8
??0XStat@@QAE@PAVXStatistic@@@Z PROC NEAR		; XStat::XStat, COMDAT
; _this$ = ecx

; 1449 : {

	push	ebx
	mov	ebx, DWORD PTR _Stat$[esp]
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR [edi], ebx

; 1450 : 	_global->stats.push(stat);

	mov	eax, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	lea	esi, DWORD PTR [eax+8280]
	mov	eax, DWORD PTR [eax+8288]
	test	eax, eax
	jne	SHORT $L57773
	mov	edx, 12					; 0000000cH
	mov	ecx, esi
	call	@xlist_new_node@8
	mov	DWORD PTR [esi+8], eax
$L57773:
	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [eax+8], ebx
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax+4], 0
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	jne	SHORT $L57775
	mov	DWORD PTR [esi+4], eax
	jmp	SHORT $L57776
$L57775:
	mov	DWORD PTR [ecx+4], eax
$L57776:
	mov	DWORD PTR [esi], eax

; 1451 : 	begin_tick(&tick_start);

	lea	eax, DWORD PTR [edi+8]
	push	eax
	call	_begin_tick
	add	esp, 4

; 1452 : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
??0XStat@@QAE@PAVXStatistic@@@Z ENDP			; XStat::XStat
_TEXT	ENDS
PUBLIC	??1XStat@@QAE@XZ				; XStat::~XStat
EXTRN	_end_tick:NEAR
; Function compile flags: /Ogty
;	COMDAT ??1XStat@@QAE@XZ
_TEXT	SEGMENT
??1XStat@@QAE@XZ PROC NEAR				; XStat::~XStat, COMDAT
; _this$ = ecx

; 1455 : {

	push	esi
	mov	esi, ecx
	push	edi

; 1456 : 	end_tick(&tick_end);

	lea	edi, DWORD PTR [esi+16]
	push	edi
	call	_end_tick

; 1457 : 	stat->add_count();

	mov	eax, DWORD PTR [esi]
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	inc	ecx
	mov	DWORD PTR [eax], ecx

; 1458 : 	stat->add_tick(tick_end - tick_start);

	mov	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi]
	sub	ecx, edx
	mov	edx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [esi+12]
	mov	esi, DWORD PTR [eax+12]
	sbb	edx, edi
	mov	edi, DWORD PTR [eax+8]
	add	edi, ecx
	adc	esi, edx
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], esi

; 1459 : 	_global->stats.pop(stat);

	mov	eax, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	add	eax, 8280				; 00002058H
	xor	esi, esi
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, esi
	je	SHORT $L57803
	mov	edx, DWORD PTR [ecx]
	cmp	edx, esi
	mov	DWORD PTR [eax], edx
	je	SHORT $L57807
	mov	DWORD PTR [edx+4], esi
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx], edx
	pop	edi
	mov	DWORD PTR [eax+8], ecx
	pop	esi

; 1460 : }

	ret	0

; 1459 : 	_global->stats.pop(stat);

$L57807:
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [eax+8], ecx
$L57803:
	pop	edi
	pop	esi

; 1460 : }

	ret	0
??1XStat@@QAE@XZ ENDP					; XStat::~XStat
_TEXT	ENDS
PUBLIC	??0CSysObj@@QAE@XZ				; CSysObj::CSysObj
EXTRN	?reg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z:NEAR ; XGlobal::reg_global_object
; Function compile flags: /Ogty
;	COMDAT ??0CSysObj@@QAE@XZ
_TEXT	SEGMENT
??0CSysObj@@QAE@XZ PROC NEAR				; CSysObj::CSysObj, COMDAT
; _this$ = ecx

; 1469 : inline CSysObj::CSysObj(void){_global->reg_global_object(this);}

	push	esi
	mov	esi, ecx
	push	esi
	mov	DWORD PTR [esi], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	mov	ecx, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	call	?reg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z ; XGlobal::reg_global_object
	mov	eax, esi
	pop	esi
	ret	0
??0CSysObj@@QAE@XZ ENDP					; CSysObj::CSysObj
_TEXT	ENDS
PUBLIC	??1CSysObj@@QAE@XZ				; CSysObj::~CSysObj
; Function compile flags: /Ogty
;	COMDAT ??1CSysObj@@QAE@XZ
_TEXT	SEGMENT
??1CSysObj@@QAE@XZ PROC NEAR				; CSysObj::~CSysObj, COMDAT
; _this$ = ecx

; 1470 : inline CSysObj::~CSysObj(void){_global->unreg_global_object(this);}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	push	ecx
	mov	ecx, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	call	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z ; XGlobal::unreg_global_object
	ret	0
??1CSysObj@@QAE@XZ ENDP					; CSysObj::~CSysObj
_TEXT	ENDS
PUBLIC	??BCStr@@QBEPBDXZ				; CStr::operator char const *
; Function compile flags: /Ogty
; File C:\duke4\xcore\xstring.h
;	COMDAT ??BCStr@@QBEPBDXZ
_TEXT	SEGMENT
??BCStr@@QBEPBDXZ PROC NEAR				; CStr::operator char const *, COMDAT
; _this$ = ecx

; 16   : 	operator CC8 *() const{return str;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
??BCStr@@QBEPBDXZ ENDP					; CStr::operator char const *
_TEXT	ENDS
PUBLIC	??BCStr@@QBEPADXZ				; CStr::operator char *
; Function compile flags: /Ogty
;	COMDAT ??BCStr@@QBEPADXZ
_TEXT	SEGMENT
??BCStr@@QBEPADXZ PROC NEAR				; CStr::operator char *, COMDAT
; _this$ = ecx

; 17   : 	operator char *() const{return str;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
??BCStr@@QBEPADXZ ENDP					; CStr::operator char *
_TEXT	ENDS
PUBLIC	??4CStr@@QAEAAV0@ABV0@@Z			; CStr::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CStr@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CStr@@QAEAAV0@ABV0@@Z PROC NEAR			; CStr::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	ret	4
??4CStr@@QAEAAV0@ABV0@@Z ENDP				; CStr::operator=
_TEXT	ENDS
PUBLIC	??BCStrLow@@QBEPBDXZ				; CStrLow::operator char const *
; Function compile flags: /Ogty
;	COMDAT ??BCStrLow@@QBEPBDXZ
_TEXT	SEGMENT
??BCStrLow@@QBEPBDXZ PROC NEAR				; CStrLow::operator char const *, COMDAT
; _this$ = ecx

; 32   : 	operator CC8 *() const{return str;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
??BCStrLow@@QBEPBDXZ ENDP				; CStrLow::operator char const *
_TEXT	ENDS
PUBLIC	??BCStrLow@@QBEPADXZ				; CStrLow::operator char *
; Function compile flags: /Ogty
;	COMDAT ??BCStrLow@@QBEPADXZ
_TEXT	SEGMENT
??BCStrLow@@QBEPADXZ PROC NEAR				; CStrLow::operator char *, COMDAT
; _this$ = ecx

; 33   : 	operator char *() const{return str;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
??BCStrLow@@QBEPADXZ ENDP				; CStrLow::operator char *
_TEXT	ENDS
PUBLIC	??4CStrLow@@QAEAAV0@ABV0@@Z			; CStrLow::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CStrLow@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CStrLow@@QAEAAV0@ABV0@@Z PROC NEAR			; CStrLow::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	ret	4
??4CStrLow@@QAEAAV0@ABV0@@Z ENDP			; CStrLow::operator=
_TEXT	ENDS
PUBLIC	??BCStrCat@@QBEPBDXZ				; CStrCat::operator char const *
; Function compile flags: /Ogty
;	COMDAT ??BCStrCat@@QBEPBDXZ
_TEXT	SEGMENT
??BCStrCat@@QBEPBDXZ PROC NEAR				; CStrCat::operator char const *, COMDAT
; _this$ = ecx

; 50   : 	operator CC8 *() const{return str;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
??BCStrCat@@QBEPBDXZ ENDP				; CStrCat::operator char const *
_TEXT	ENDS
PUBLIC	??BCStrCat@@QBEPADXZ				; CStrCat::operator char *
; Function compile flags: /Ogty
;	COMDAT ??BCStrCat@@QBEPADXZ
_TEXT	SEGMENT
??BCStrCat@@QBEPADXZ PROC NEAR				; CStrCat::operator char *, COMDAT
; _this$ = ecx

; 51   : 	operator char *() const{return str;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
??BCStrCat@@QBEPADXZ ENDP				; CStrCat::operator char *
_TEXT	ENDS
PUBLIC	??4CStrCat@@QAEAAV0@ABV0@@Z			; CStrCat::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CStrCat@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CStrCat@@QAEAAV0@ABV0@@Z PROC NEAR			; CStrCat::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx
	ret	4
??4CStrCat@@QAEAAV0@ABV0@@Z ENDP			; CStrCat::operator=
_TEXT	ENDS
PUBLIC	??1CStrObj@@QAE@XZ				; CStrObj::~CStrObj
; Function compile flags: /Ogty
;	COMDAT ??1CStrObj@@QAE@XZ
_TEXT	SEGMENT
??1CStrObj@@QAE@XZ PROC NEAR				; CStrObj::~CStrObj, COMDAT
; _this$ = ecx

; 67   : 	{

	push	esi
	mov	esi, ecx

; 68   : 		xfree(str);

	mov	ecx, DWORD PTR [esi+4]
	call	@xfree@4

; 69   : 		str=null;

	mov	DWORD PTR [esi+4], 0
	pop	esi

; 70   : 	}

	ret	0
??1CStrObj@@QAE@XZ ENDP					; CStrObj::~CStrObj
_TEXT	ENDS
PUBLIC	??2CStrObj@@SAPAXI@Z				; CStrObj::operator new
; Function compile flags: /Ogty
;	COMDAT ??2CStrObj@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2CStrObj@@SAPAXI@Z PROC NEAR				; CStrObj::operator new, COMDAT

; 71   : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2CStrObj@@SAPAXI@Z ENDP				; CStrObj::operator new
_TEXT	ENDS
PUBLIC	??3CStrObj@@SAXPAX@Z				; CStrObj::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3CStrObj@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3CStrObj@@SAXPAX@Z PROC NEAR				; CStrObj::operator delete, COMDAT

; 71   : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3CStrObj@@SAXPAX@Z ENDP				; CStrObj::operator delete
_TEXT	ENDS
PUBLIC	??4CStrObj@@QAEAAV0@ABV0@@Z			; CStrObj::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CStrObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CStrObj@@QAEAAV0@ABV0@@Z PROC NEAR			; CStrObj::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	mov	edx, eax
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [edx], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], esi
	pop	esi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	ret	4
??4CStrObj@@QAEAAV0@ABV0@@Z ENDP			; CStrObj::operator=
_TEXT	ENDS
PUBLIC	??0CStrRef@@QAE@XZ				; CStrRef::CStrRef
; Function compile flags: /Ogty
;	COMDAT ??0CStrRef@@QAE@XZ
_TEXT	SEGMENT
??0CStrRef@@QAE@XZ PROC NEAR				; CStrRef::CStrRef, COMDAT
; _this$ = ecx

; 82   : 	CStrRef(void){}

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0CStrRef@@QAE@XZ ENDP					; CStrRef::CStrRef
_TEXT	ENDS
PUBLIC	??BCStrRef@@QAEPADXZ				; CStrRef::operator char *
; Function compile flags: /Ogty
;	COMDAT ??BCStrRef@@QAEPADXZ
_TEXT	SEGMENT
??BCStrRef@@QAEPADXZ PROC NEAR				; CStrRef::operator char *, COMDAT
; _this$ = ecx

; 88   : 		if (!node)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $L55512

; 91   : 	}

	ret	0
$L55512:

; 89   : 			return null;
; 90   : 		return node->str;

	mov	eax, DWORD PTR [eax+4]

; 91   : 	}

	ret	0
??BCStrRef@@QAEPADXZ ENDP				; CStrRef::operator char *
_TEXT	ENDS
PUBLIC	??BCStrRef@@QBEPBDXZ				; CStrRef::operator char const *
; Function compile flags: /Ogty
;	COMDAT ??BCStrRef@@QBEPBDXZ
_TEXT	SEGMENT
??BCStrRef@@QBEPBDXZ PROC NEAR				; CStrRef::operator char const *, COMDAT
; _this$ = ecx

; 94   : 		if (!node)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $L55515

; 97   : 	}

	ret	0
$L55515:

; 95   : 			return null;
; 96   : 		return node->str;

	mov	eax, DWORD PTR [eax+4]

; 97   : 	}

	ret	0
??BCStrRef@@QBEPBDXZ ENDP				; CStrRef::operator char const *
_TEXT	ENDS
PUBLIC	??CCStrRef@@QAEPADXZ				; CStrRef::operator->
; Function compile flags: /Ogty
;	COMDAT ??CCStrRef@@QAEPADXZ
_TEXT	SEGMENT
??CCStrRef@@QAEPADXZ PROC NEAR				; CStrRef::operator->, COMDAT
; _this$ = ecx

; 100  : 		if (!node)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $L55518

; 103  : 	}

	ret	0
$L55518:

; 101  : 			return null;
; 102  : 		return node->str;

	mov	eax, DWORD PTR [eax+4]

; 103  : 	}

	ret	0
??CCStrRef@@QAEPADXZ ENDP				; CStrRef::operator->
_TEXT	ENDS
PUBLIC	??CCStrRef@@QBEPBDXZ				; CStrRef::operator->
; Function compile flags: /Ogty
;	COMDAT ??CCStrRef@@QBEPBDXZ
_TEXT	SEGMENT
??CCStrRef@@QBEPBDXZ PROC NEAR				; CStrRef::operator->, COMDAT
; _this$ = ecx

; 106  : 		if (!node)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $L55521

; 109  : 	}

	ret	0
$L55521:

; 107  : 			return null;
; 108  : 		return node->str;

	mov	eax, DWORD PTR [eax+4]

; 109  : 	}

	ret	0
??CCStrRef@@QBEPBDXZ ENDP				; CStrRef::operator->
_TEXT	ENDS
PUBLIC	??0CStrRef@@QAE@ABV0@@Z				; CStrRef::CStrRef
; Function compile flags: /Ogty
;	COMDAT ??0CStrRef@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0CStrRef@@QAE@ABV0@@Z PROC NEAR			; CStrRef::CStrRef, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	mov	DWORD PTR [eax], edx
	je	SHORT $L57867
	inc	DWORD PTR [edx]
$L57867:
	ret	4
??0CStrRef@@QAE@ABV0@@Z ENDP				; CStrRef::CStrRef
_TEXT	ENDS
PUBLIC	??4CStrRef@@QAEAAV0@ABV0@@Z			; CStrRef::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CStrRef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CStrRef@@QAEAAV0@ABV0@@Z PROC NEAR			; CStrRef::operator=, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	push	esi
	mov	esi, ecx
	cmp	esi, ebx
	je	SHORT $L57934
	mov	eax, DWORD PTR [esi]
	push	edi
	test	eax, eax
	je	SHORT $L57921
	mov	ecx, DWORD PTR [eax]
	dec	ecx
	mov	DWORD PTR [eax], ecx
	mov	edi, DWORD PTR [esi]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L57921
	test	edi, edi
	je	SHORT $L57921
	mov	ecx, DWORD PTR [edi+4]
	call	@xfree@4
	mov	ecx, edi
	mov	DWORD PTR [edi+4], 0
	call	@xfree@4
$L57921:
	mov	eax, DWORD PTR [ebx]
	pop	edi
	test	eax, eax
	mov	DWORD PTR [esi], eax
	je	SHORT $L57934
	inc	DWORD PTR [eax]
$L57934:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??4CStrRef@@QAEAAV0@ABV0@@Z ENDP			; CStrRef::operator=
_TEXT	ENDS
PUBLIC	??1CStrRef@@QAE@XZ				; CStrRef::~CStrRef
; Function compile flags: /Ogty
;	COMDAT ??1CStrRef@@QAE@XZ
_TEXT	SEGMENT
??1CStrRef@@QAE@XZ PROC NEAR				; CStrRef::~CStrRef, COMDAT
; _this$ = ecx
	push	esi
	push	edi
	mov	edi, ecx
	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $L57992
	mov	ecx, DWORD PTR [eax]
	dec	ecx
	mov	DWORD PTR [eax], ecx
	mov	esi, DWORD PTR [edi]
	cmp	DWORD PTR [esi], 0
	jne	SHORT $L57992
	test	esi, esi
	je	SHORT $L57992
	mov	ecx, DWORD PTR [esi+4]
	call	@xfree@4
	mov	ecx, esi
	mov	DWORD PTR [esi+4], 0
	call	@xfree@4
$L57992:
	mov	DWORD PTR [edi], 0
	pop	edi
	pop	esi
	ret	0
??1CStrRef@@QAE@XZ ENDP					; CStrRef::~CStrRef
_TEXT	ENDS
PUBLIC	??0CPathObj@@QAE@XZ				; CPathObj::CPathObj
; Function compile flags: /Ogty
;	COMDAT ??0CPathObj@@QAE@XZ
_TEXT	SEGMENT
??0CPathObj@@QAE@XZ PROC NEAR				; CPathObj::CPathObj, COMDAT
; _this$ = ecx

; 152  : 	CPathObj(void) : file_path(null),abs_path(null),just_path(null) {}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+32], ecx
	ret	0
??0CPathObj@@QAE@XZ ENDP				; CPathObj::CPathObj
_TEXT	ENDS
PUBLIC	?get_path@CPathObj@@QAEPBDXZ			; CPathObj::get_path
; Function compile flags: /Ogty
;	COMDAT ?get_path@CPathObj@@QAEPBDXZ
_TEXT	SEGMENT
?get_path@CPathObj@@QAEPBDXZ PROC NEAR			; CPathObj::get_path, COMDAT
; _this$ = ecx

; 160  : 	CC8 *get_path(void){return file_path;}

	mov	eax, DWORD PTR [ecx+8]
	ret	0
?get_path@CPathObj@@QAEPBDXZ ENDP			; CPathObj::get_path
_TEXT	ENDS
PUBLIC	??4CPathObj@@QAEAAV0@ABV0@@Z			; CPathObj::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CPathObj@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CPathObj@@QAEAAV0@ABV0@@Z PROC NEAR			; CPathObj::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, ecx
	push	edi
	mov	ecx, 10					; 0000000aH
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4CPathObj@@QAEAAV0@ABV0@@Z ENDP			; CPathObj::operator=
_TEXT	ENDS
PUBLIC	??0CPathRef@@QAE@XZ				; CPathRef::CPathRef
; Function compile flags: /Ogty
;	COMDAT ??0CPathRef@@QAE@XZ
_TEXT	SEGMENT
??0CPathRef@@QAE@XZ PROC NEAR				; CPathRef::CPathRef, COMDAT
; _this$ = ecx

; 173  : 	CPathRef(void){}

	mov	eax, ecx
	mov	DWORD PTR [eax], 0
	ret	0
??0CPathRef@@QAE@XZ ENDP				; CPathRef::CPathRef
_TEXT	ENDS
PUBLIC	??CCPathRef@@QAEPAVCPathObj@@XZ			; CPathRef::operator->
; Function compile flags: /Ogty
;	COMDAT ??CCPathRef@@QAEPAVCPathObj@@XZ
_TEXT	SEGMENT
??CCPathRef@@QAEPAVCPathObj@@XZ PROC NEAR		; CPathRef::operator->, COMDAT
; _this$ = ecx

; 181  : 	inline CPathObj * operator -> () {return node;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??CCPathRef@@QAEPAVCPathObj@@XZ ENDP			; CPathRef::operator->
_TEXT	ENDS
PUBLIC	??CCPathRef@@QBEPBVCPathObj@@XZ			; CPathRef::operator->
; Function compile flags: /Ogty
;	COMDAT ??CCPathRef@@QBEPBVCPathObj@@XZ
_TEXT	SEGMENT
??CCPathRef@@QBEPBVCPathObj@@XZ PROC NEAR		; CPathRef::operator->, COMDAT
; _this$ = ecx

; 182  : 	inline const CPathObj * operator -> () const {return node;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??CCPathRef@@QBEPBVCPathObj@@XZ ENDP			; CPathRef::operator->
_TEXT	ENDS
PUBLIC	??0CPathRef@@QAE@ABV0@@Z			; CPathRef::CPathRef
; Function compile flags: /Ogty
;	COMDAT ??0CPathRef@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0CPathRef@@QAE@ABV0@@Z PROC NEAR			; CPathRef::CPathRef, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx]
	test	edx, edx
	mov	DWORD PTR [eax], edx
	je	SHORT $L58023
	inc	DWORD PTR [edx]
$L58023:
	ret	4
??0CPathRef@@QAE@ABV0@@Z ENDP				; CPathRef::CPathRef
_TEXT	ENDS
PUBLIC	??4CPathRef@@QAEAAV0@ABV0@@Z			; CPathRef::operator=
EXTRN	??1CPathObj@@QAE@XZ:NEAR			; CPathObj::~CPathObj
; Function compile flags: /Ogty
;	COMDAT ??4CPathRef@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CPathRef@@QAEAAV0@ABV0@@Z PROC NEAR			; CPathRef::operator=, COMDAT
; _this$ = ecx
	push	ebx
	mov	ebx, DWORD PTR ___that$[esp]
	push	esi
	mov	esi, ecx
	cmp	esi, ebx
	je	SHORT $L58080
	mov	eax, DWORD PTR [esi]
	push	edi
	test	eax, eax
	je	SHORT $L58066
	mov	ecx, DWORD PTR [eax]
	dec	ecx
	mov	DWORD PTR [eax], ecx
	mov	edi, DWORD PTR [esi]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L58066
	test	edi, edi
	je	SHORT $L58066
	mov	ecx, edi
	call	??1CPathObj@@QAE@XZ			; CPathObj::~CPathObj
	mov	ecx, edi
	call	@xfree@4
$L58066:
	mov	eax, DWORD PTR [ebx]
	pop	edi
	test	eax, eax
	mov	DWORD PTR [esi], eax
	je	SHORT $L58080
	inc	DWORD PTR [eax]
$L58080:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??4CPathRef@@QAEAAV0@ABV0@@Z ENDP			; CPathRef::operator=
_TEXT	ENDS
PUBLIC	??1CPathRef@@QAE@XZ				; CPathRef::~CPathRef
; Function compile flags: /Ogty
;	COMDAT ??1CPathRef@@QAE@XZ
_TEXT	SEGMENT
??1CPathRef@@QAE@XZ PROC NEAR				; CPathRef::~CPathRef, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	push	edi
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $L58129
	mov	ecx, DWORD PTR [eax]
	dec	ecx
	mov	DWORD PTR [eax], ecx
	mov	edi, DWORD PTR [esi]
	cmp	DWORD PTR [edi], 0
	jne	SHORT $L58129
	test	edi, edi
	je	SHORT $L58129
	mov	ecx, edi
	call	??1CPathObj@@QAE@XZ			; CPathObj::~CPathObj
	mov	ecx, edi
	call	@xfree@4
$L58129:
	mov	DWORD PTR [esi], 0
	pop	edi
	pop	esi
	ret	0
??1CPathRef@@QAE@XZ ENDP				; CPathRef::~CPathRef
_TEXT	ENDS
PUBLIC	??0CPrintf@@QAE@XZ				; CPrintf::CPrintf
; Function compile flags: /Ogty
;	COMDAT ??0CPrintf@@QAE@XZ
_TEXT	SEGMENT
??0CPrintf@@QAE@XZ PROC NEAR				; CPrintf::CPrintf, COMDAT
; _this$ = ecx

; 204  : 	CPrintf(void) : dst(null),cur(null),size(0) {}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0CPrintf@@QAE@XZ ENDP					; CPrintf::CPrintf
_TEXT	ENDS
PUBLIC	??0CPrintf@@QAE@PADK@Z				; CPrintf::CPrintf
; Function compile flags: /Ogty
;	COMDAT ??0CPrintf@@QAE@PADK@Z
_TEXT	SEGMENT
__dst$ = 8
__size$ = 12
??0CPrintf@@QAE@PADK@Z PROC NEAR			; CPrintf::CPrintf, COMDAT
; _this$ = ecx

; 206  : 	{

	mov	edx, DWORD PTR __size$[esp-4]
	push	esi
	mov	eax, ecx
	mov	ecx, DWORD PTR __dst$[esp]
	lea	esi, DWORD PTR [edx-1]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], 0

; 207  : 		D_ASSERT(_size>0);
; 208  : 		dst[0]=0;

	mov	BYTE PTR [ecx], 0
	pop	esi

; 209  : 	}

	ret	8
??0CPrintf@@QAE@PADK@Z ENDP				; CPrintf::CPrintf
_TEXT	ENDS
PUBLIC	??0CPrintf@@QAE@PADKK@Z				; CPrintf::CPrintf
; Function compile flags: /Ogty
;	COMDAT ??0CPrintf@@QAE@PADKK@Z
_TEXT	SEGMENT
__dst$ = 8
__size$ = 12
__start$ = 16
??0CPrintf@@QAE@PADKK@Z PROC NEAR			; CPrintf::CPrintf, COMDAT
; _this$ = ecx

; 211  : 	{

	mov	edx, DWORD PTR __start$[esp-4]
	mov	eax, ecx
	mov	ecx, DWORD PTR __dst$[esp-4]
	mov	DWORD PTR [eax], ecx
	add	ecx, edx
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR __size$[esp-4]
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], 0

; 212  : 		D_ASSERT(_size>0);
; 213  : 	}

	ret	12					; 0000000cH
??0CPrintf@@QAE@PADKK@Z ENDP				; CPrintf::CPrintf
_TEXT	ENDS
PUBLIC	?init@CPrintf@@QAEXPADK@Z			; CPrintf::init
; Function compile flags: /Ogty
;	COMDAT ?init@CPrintf@@QAEXPADK@Z
_TEXT	SEGMENT
__dst$ = 8
__size$ = 12
?init@CPrintf@@QAEXPADK@Z PROC NEAR			; CPrintf::init, COMDAT
; _this$ = ecx

; 216  : 		D_ASSERT(_size>0);
; 217  : 		dst=_dst;dst[0]=0;cur=_dst;start_size=_size;size=_size - 1;flags=0;

	mov	eax, DWORD PTR __dst$[esp-4]
	mov	DWORD PTR [ecx], eax
	mov	BYTE PTR [eax], 0
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR __size$[esp-4]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+12], eax
	dec	eax
	mov	DWORD PTR [ecx+8], eax

; 218  : 	}

	ret	8
?init@CPrintf@@QAEXPADK@Z ENDP				; CPrintf::init
_TEXT	ENDS
PUBLIC	?reset@CPrintf@@QAEXXZ				; CPrintf::reset
; Function compile flags: /Ogty
;	COMDAT ?reset@CPrintf@@QAEXXZ
_TEXT	SEGMENT
?reset@CPrintf@@QAEXXZ PROC NEAR			; CPrintf::reset, COMDAT
; _this$ = ecx

; 219  : 	__inline void reset(void){cur=dst;size=start_size-1;flags=0;}

	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx]
	dec	edx
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+16], 0
	ret	0
?reset@CPrintf@@QAEXXZ ENDP				; CPrintf::reset
_TEXT	ENDS
PUBLIC	??6CPrintf@@QAEAAV0@PBD@Z			; CPrintf::operator<<
EXTRN	?fstrcpy_lim@CPrintf@@IAEKPBD@Z:NEAR		; CPrintf::fstrcpy_lim
; Function compile flags: /Ogty
;	COMDAT ??6CPrintf@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_src$ = 8
??6CPrintf@@QAEAAV0@PBD@Z PROC NEAR			; CPrintf::operator<<, COMDAT
; _this$ = ecx

; 221  : 	__inline CPrintf & operator << (CC8 *src){fstrcpy_lim(src);return *this;}

	mov	eax, DWORD PTR _src$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?fstrcpy_lim@CPrintf@@IAEKPBD@Z		; CPrintf::fstrcpy_lim
	mov	eax, esi
	pop	esi
	ret	4
??6CPrintf@@QAEAAV0@PBD@Z ENDP				; CPrintf::operator<<
_TEXT	ENDS
PUBLIC	??6CPrintf@@QAEAAV0@K@Z				; CPrintf::operator<<
EXTRN	?num@CPrintf@@QAEKK@Z:NEAR			; CPrintf::num
; Function compile flags: /Ogty
;	COMDAT ??6CPrintf@@QAEAAV0@K@Z
_TEXT	SEGMENT
_val$ = 8
??6CPrintf@@QAEAAV0@K@Z PROC NEAR			; CPrintf::operator<<, COMDAT
; _this$ = ecx

; 222  : 	__inline CPrintf & operator << (U32 val){num(val);return *this;}

	mov	eax, DWORD PTR _val$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?num@CPrintf@@QAEKK@Z			; CPrintf::num
	mov	eax, esi
	pop	esi
	ret	4
??6CPrintf@@QAEAAV0@K@Z ENDP				; CPrintf::operator<<
_TEXT	ENDS
PUBLIC	??6CPrintf@@QAEAAV0@J@Z				; CPrintf::operator<<
EXTRN	?num@CPrintf@@QAEKJ@Z:NEAR			; CPrintf::num
; Function compile flags: /Ogty
;	COMDAT ??6CPrintf@@QAEAAV0@J@Z
_TEXT	SEGMENT
_val$ = 8
??6CPrintf@@QAEAAV0@J@Z PROC NEAR			; CPrintf::operator<<, COMDAT
; _this$ = ecx

; 223  : 	__inline CPrintf & operator << (I32 val){num(val);return *this;}

	mov	eax, DWORD PTR _val$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?num@CPrintf@@QAEKJ@Z			; CPrintf::num
	mov	eax, esi
	pop	esi
	ret	4
??6CPrintf@@QAEAAV0@J@Z ENDP				; CPrintf::operator<<
_TEXT	ENDS
PUBLIC	??6CPrintf@@QAEAAV0@D@Z				; CPrintf::operator<<
EXTRN	?chr@CPrintf@@QAEKD@Z:NEAR			; CPrintf::chr
; Function compile flags: /Ogty
;	COMDAT ??6CPrintf@@QAEAAV0@D@Z
_TEXT	SEGMENT
_val$ = 8
??6CPrintf@@QAEAAV0@D@Z PROC NEAR			; CPrintf::operator<<, COMDAT
; _this$ = ecx

; 224  : 	__inline CPrintf & operator << (char val){chr(val);return *this;}

	mov	eax, DWORD PTR _val$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?chr@CPrintf@@QAEKD@Z			; CPrintf::chr
	mov	eax, esi
	pop	esi
	ret	4
??6CPrintf@@QAEAAV0@D@Z ENDP				; CPrintf::operator<<
_TEXT	ENDS
PUBLIC	?str@CPrintf@@QAEKPBD@Z				; CPrintf::str
; Function compile flags: /Ogty
;	COMDAT ?str@CPrintf@@QAEKPBD@Z
_TEXT	SEGMENT
_src$ = 8
?str@CPrintf@@QAEKPBD@Z PROC NEAR			; CPrintf::str, COMDAT
; _this$ = ecx

; 231  : 	__inline U32 str(CC8 *src) {return fstrcpy_lim(src);}

	jmp	?fstrcpy_lim@CPrintf@@IAEKPBD@Z		; CPrintf::fstrcpy_lim
?str@CPrintf@@QAEKPBD@Z ENDP				; CPrintf::str
_TEXT	ENDS
PUBLIC	?strn@CPrintf@@QAEKPBDK@Z			; CPrintf::strn
EXTRN	?fstrncpy_lim@CPrintf@@IAEKPBDK@Z:NEAR		; CPrintf::fstrncpy_lim
; Function compile flags: /Ogty
;	COMDAT ?strn@CPrintf@@QAEKPBDK@Z
_TEXT	SEGMENT
_src$ = 8
_src_size$ = 12
?strn@CPrintf@@QAEKPBDK@Z PROC NEAR			; CPrintf::strn, COMDAT
; _this$ = ecx

; 232  : 	__inline U32 strn(CC8 *src,U32 src_size) {return fstrncpy_lim(src,src_size);}

	jmp	?fstrncpy_lim@CPrintf@@IAEKPBDK@Z	; CPrintf::fstrncpy_lim
?strn@CPrintf@@QAEKPBDK@Z ENDP				; CPrintf::strn
_TEXT	ENDS
PUBLIC	?overflow@CPrintf@@QAEKXZ			; CPrintf::overflow
; Function compile flags: /Ogty
;	COMDAT ?overflow@CPrintf@@QAEKXZ
_TEXT	SEGMENT
?overflow@CPrintf@@QAEKXZ PROC NEAR			; CPrintf::overflow, COMDAT
; _this$ = ecx

; 233  : 	__inline U32 overflow(void) {return (flags & (~PRINT_FULL));}

	mov	eax, DWORD PTR [ecx+16]
	and	eax, 2147483647				; 7fffffffH
	ret	0
?overflow@CPrintf@@QAEKXZ ENDP				; CPrintf::overflow
_TEXT	ENDS
PUBLIC	?get_len@CPrintf@@QAEKXZ			; CPrintf::get_len
; Function compile flags: /Ogty
;	COMDAT ?get_len@CPrintf@@QAEKXZ
_TEXT	SEGMENT
?get_len@CPrintf@@QAEKXZ PROC NEAR			; CPrintf::get_len, COMDAT
; _this$ = ecx

; 234  : 	__inline U32 get_len(void) {return (cur - dst);}

	mov	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [ecx]
	sub	eax, edx
	ret	0
?get_len@CPrintf@@QAEKXZ ENDP				; CPrintf::get_len
_TEXT	ENDS
PUBLIC	?get_str@CPrintf@@QAEPBDXZ			; CPrintf::get_str
; Function compile flags: /Ogty
;	COMDAT ?get_str@CPrintf@@QAEPBDXZ
_TEXT	SEGMENT
?get_str@CPrintf@@QAEPBDXZ PROC NEAR			; CPrintf::get_str, COMDAT
; _this$ = ecx

; 235  : 	__inline CC8 *get_str(void){return dst;}

	mov	eax, DWORD PTR [ecx]
	ret	0
?get_str@CPrintf@@QAEPBDXZ ENDP				; CPrintf::get_str
_TEXT	ENDS
PUBLIC	?get_cur@CPrintf@@QAEPADXZ			; CPrintf::get_cur
; Function compile flags: /Ogty
;	COMDAT ?get_cur@CPrintf@@QAEPADXZ
_TEXT	SEGMENT
?get_cur@CPrintf@@QAEPADXZ PROC NEAR			; CPrintf::get_cur, COMDAT
; _this$ = ecx

; 236  : 	__inline char *get_cur(void) {return cur;}

	mov	eax, DWORD PTR [ecx+4]
	ret	0
?get_cur@CPrintf@@QAEPADXZ ENDP				; CPrintf::get_cur
_TEXT	ENDS
PUBLIC	?get_last@CPrintf@@QAEPADXZ			; CPrintf::get_last
; Function compile flags: /Ogty
;	COMDAT ?get_last@CPrintf@@QAEPADXZ
_TEXT	SEGMENT
?get_last@CPrintf@@QAEPADXZ PROC NEAR			; CPrintf::get_last, COMDAT
; _this$ = ecx

; 237  : 	__inline char *get_last(void){return cur - 1;}

	mov	eax, DWORD PTR [ecx+4]
	dec	eax
	ret	0
?get_last@CPrintf@@QAEPADXZ ENDP			; CPrintf::get_last
_TEXT	ENDS
PUBLIC	?set_cur@CPrintf@@QAEPADPBD@Z			; CPrintf::set_cur
; Function compile flags: /Ogty
;	COMDAT ?set_cur@CPrintf@@QAEPADPBD@Z
_TEXT	SEGMENT
_Cur$ = 8
?set_cur@CPrintf@@QAEPADPBD@Z PROC NEAR			; CPrintf::set_cur, COMDAT
; _this$ = ecx

; 240  : 		size=start_size - (Cur - dst) - 1;

	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _Cur$[esp-4]
	push	esi
	mov	esi, DWORD PTR [ecx]
	sub	edx, eax

; 241  : 		return (cur=(char *)Cur);

	mov	DWORD PTR [ecx+4], eax
	lea	edx, DWORD PTR [edx+esi-1]
	pop	esi
	mov	DWORD PTR [ecx+8], edx

; 242  : 	}

	ret	4
?set_cur@CPrintf@@QAEPADPBD@Z ENDP			; CPrintf::set_cur
_TEXT	ENDS
PUBLIC	?set_cur@CPrintf@@QAEPADK@Z			; CPrintf::set_cur
; Function compile flags: /Ogty
;	COMDAT ?set_cur@CPrintf@@QAEPADK@Z
_TEXT	SEGMENT
_offset$ = 8
?set_cur@CPrintf@@QAEPADK@Z PROC NEAR			; CPrintf::set_cur, COMDAT
; _this$ = ecx

; 245  : 		size=start_size - offset - 1;

	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _offset$[esp-4]
	sub	edx, eax
	dec	edx
	mov	DWORD PTR [ecx+8], edx

; 246  : 		return (cur=dst+offset);

	mov	edx, DWORD PTR [ecx]
	add	eax, edx
	mov	DWORD PTR [ecx+4], eax

; 247  : 	}

	ret	4
?set_cur@CPrintf@@QAEPADK@Z ENDP			; CPrintf::set_cur
_TEXT	ENDS
PUBLIC	??4CPrintf@@QAEAAV0@ABV0@@Z			; CPrintf::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CPrintf@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CPrintf@@QAEAAV0@ABV0@@Z PROC NEAR			; CPrintf::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, ecx
	push	edi
	mov	ecx, 5
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4CPrintf@@QAEAAV0@ABV0@@Z ENDP			; CPrintf::operator=
_TEXT	ENDS
PUBLIC	?realloc@StrGrow@@IAEXKK@Z			; StrGrow::realloc
EXTRN	?realloc@MemGrow@@QAEXK@Z:NEAR			; MemGrow::realloc
; Function compile flags: /Ogty
;	COMDAT ?realloc@StrGrow@@IAEXKK@Z
_TEXT	SEGMENT
_inc$ = 8
_need$ = 12
?realloc@StrGrow@@IAEXKK@Z PROC NEAR			; StrGrow::realloc, COMDAT
; _this$ = ecx

; 315  : 	{

	push	esi
	mov	esi, ecx

; 316  : 		U32 diff=cur - base;
; 317  : 		if (need > inc)

	mov	ecx, DWORD PTR _need$[esp]
	push	edi
	mov	edi, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi]
	sub	edi, eax
	mov	eax, DWORD PTR _inc$[esp+4]
	cmp	ecx, eax
	jbe	SHORT $L55965

; 318  : 			inc=need;

	mov	eax, ecx
$L55965:

; 319  : 		MemGrow::realloc(inc);

	push	eax
	mov	ecx, esi
	call	?realloc@MemGrow@@QAEXK@Z		; MemGrow::realloc

; 320  : 		cur=base+diff;

	mov	eax, DWORD PTR [esi]

; 321  : 		end=base+size;

	mov	edx, DWORD PTR [esi+4]
	add	edx, eax
	lea	ecx, DWORD PTR [eax+edi]
	mov	DWORD PTR [esi+12], edx
	mov	DWORD PTR [esi+8], ecx
	pop	edi
	pop	esi

; 322  : 	}

	ret	8
?realloc@StrGrow@@IAEXKK@Z ENDP				; StrGrow::realloc
_TEXT	ENDS
PUBLIC	?reset@StrGrow@@QAEXXZ				; StrGrow::reset
; Function compile flags: /Ogty
;	COMDAT ?reset@StrGrow@@QAEXXZ
_TEXT	SEGMENT
?reset@StrGrow@@QAEXXZ PROC NEAR			; StrGrow::reset, COMDAT
; _this$ = ecx

; 326  : 		cur=base;

	mov	eax, DWORD PTR [ecx]

; 327  : 		if (base)

	test	eax, eax
	mov	DWORD PTR [ecx+8], eax
	je	SHORT $L55968

; 328  : 			end=cur+size;

	mov	edx, DWORD PTR [ecx+4]
	add	edx, eax
	mov	DWORD PTR [ecx+12], edx
$L55968:

; 329  : 	}

	ret	0
?reset@StrGrow@@QAEXXZ ENDP				; StrGrow::reset
_TEXT	ENDS
PUBLIC	??0StrGrow@@QAE@KK@Z				; StrGrow::StrGrow
; Function compile flags: /Ogty
;	COMDAT ??0StrGrow@@QAE@KK@Z
_TEXT	SEGMENT
_size$ = 8
_IncSize$ = 12
??0StrGrow@@QAE@KK@Z PROC NEAR				; StrGrow::StrGrow, COMDAT
; _this$ = ecx

; 331  : 	{

	mov	eax, DWORD PTR _size$[esp-4]
	push	esi
	mov	esi, ecx
	lea	ecx, DWORD PTR [eax+63]
	and	ecx, -64				; ffffffc0H
	mov	DWORD PTR [esi+4], ecx
	call	@xmalloc@4
	mov	ecx, DWORD PTR _IncSize$[esp]
	mov	DWORD PTR [esi], eax

; 332  : 		reset();

	test	eax, eax
	mov	DWORD PTR [esi+16], ecx
	mov	DWORD PTR [esi+8], eax
	je	SHORT $L58184
	mov	edx, DWORD PTR [esi+4]
	add	edx, eax
	mov	DWORD PTR [esi+12], edx
$L58184:

; 333  : 	}

	mov	eax, esi
	pop	esi
	ret	8
??0StrGrow@@QAE@KK@Z ENDP				; StrGrow::StrGrow
_TEXT	ENDS
PUBLIC	??4StrGrow@@QAEAAV0@PBD@Z			; StrGrow::operator=
EXTRN	?copy@StrGrow@@QAEXPBD@Z:NEAR			; StrGrow::copy
; Function compile flags: /Ogty
;	COMDAT ??4StrGrow@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_ptr$ = 8
??4StrGrow@@QAEAAV0@PBD@Z PROC NEAR			; StrGrow::operator=, COMDAT
; _this$ = ecx

; 335  : 	{

	push	esi
	mov	esi, ecx

; 336  : 		reset();

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	mov	DWORD PTR [esi+8], eax
	je	SHORT $L58189
	mov	ecx, DWORD PTR [esi+4]
	add	ecx, eax
	mov	DWORD PTR [esi+12], ecx
$L58189:

; 337  : 		copy(ptr);

	mov	edx, DWORD PTR _ptr$[esp]
	mov	ecx, esi
	push	edx
	call	?copy@StrGrow@@QAEXPBD@Z		; StrGrow::copy

; 338  : 		return *this;

	mov	eax, esi
	pop	esi

; 339  : 	}

	ret	4
??4StrGrow@@QAEAAV0@PBD@Z ENDP				; StrGrow::operator=
_TEXT	ENDS
PUBLIC	??BStrGrow@@QAEPADXZ				; StrGrow::operator char *
; Function compile flags: /Ogty
;	COMDAT ??BStrGrow@@QAEPADXZ
_TEXT	SEGMENT
??BStrGrow@@QAEPADXZ PROC NEAR				; StrGrow::operator char *, COMDAT
; _this$ = ecx

; 353  : 	inline operator char * () {return base;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??BStrGrow@@QAEPADXZ ENDP				; StrGrow::operator char *
_TEXT	ENDS
PUBLIC	??BStrGrow@@QBEPBDXZ				; StrGrow::operator char const *
; Function compile flags: /Ogty
;	COMDAT ??BStrGrow@@QBEPBDXZ
_TEXT	SEGMENT
??BStrGrow@@QBEPBDXZ PROC NEAR				; StrGrow::operator char const *, COMDAT
; _this$ = ecx

; 354  : 	inline operator CC8 * () const {return base;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??BStrGrow@@QBEPBDXZ ENDP				; StrGrow::operator char const *
_TEXT	ENDS
PUBLIC	??CStrGrow@@QAEPADXZ				; StrGrow::operator->
; Function compile flags: /Ogty
;	COMDAT ??CStrGrow@@QAEPADXZ
_TEXT	SEGMENT
??CStrGrow@@QAEPADXZ PROC NEAR				; StrGrow::operator->, COMDAT
; _this$ = ecx

; 356  : 	inline char *operator -> () {return base;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??CStrGrow@@QAEPADXZ ENDP				; StrGrow::operator->
_TEXT	ENDS
PUBLIC	??CStrGrow@@QBEPBDXZ				; StrGrow::operator->
; Function compile flags: /Ogty
;	COMDAT ??CStrGrow@@QBEPBDXZ
_TEXT	SEGMENT
??CStrGrow@@QBEPBDXZ PROC NEAR				; StrGrow::operator->, COMDAT
; _this$ = ecx

; 357  : 	inline CC8 * operator -> () const {return base;}

	mov	eax, DWORD PTR [ecx]
	ret	0
??CStrGrow@@QBEPBDXZ ENDP				; StrGrow::operator->
_TEXT	ENDS
PUBLIC	??6StrGrow@@QAEAAV0@PBD@Z			; StrGrow::operator<<
; Function compile flags: /Ogty
;	COMDAT ??6StrGrow@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_src$ = 8
??6StrGrow@@QAEAAV0@PBD@Z PROC NEAR			; StrGrow::operator<<, COMDAT
; _this$ = ecx

; 359  : 	inline StrGrow & operator << (CC8 *src){copy(src);return *this;}

	mov	eax, DWORD PTR _src$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?copy@StrGrow@@QAEXPBD@Z		; StrGrow::copy
	mov	eax, esi
	pop	esi
	ret	4
??6StrGrow@@QAEAAV0@PBD@Z ENDP				; StrGrow::operator<<
_TEXT	ENDS
PUBLIC	??6StrGrow@@QAEAAV0@K@Z				; StrGrow::operator<<
EXTRN	?num@StrGrow@@QAEKK@Z:NEAR			; StrGrow::num
; Function compile flags: /Ogty
;	COMDAT ??6StrGrow@@QAEAAV0@K@Z
_TEXT	SEGMENT
_val$ = 8
??6StrGrow@@QAEAAV0@K@Z PROC NEAR			; StrGrow::operator<<, COMDAT
; _this$ = ecx

; 360  : 	inline StrGrow & operator << (U32 val){num(val);return *this;}

	mov	eax, DWORD PTR _val$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?num@StrGrow@@QAEKK@Z			; StrGrow::num
	mov	eax, esi
	pop	esi
	ret	4
??6StrGrow@@QAEAAV0@K@Z ENDP				; StrGrow::operator<<
_TEXT	ENDS
PUBLIC	??6StrGrow@@QAEAAV0@J@Z				; StrGrow::operator<<
EXTRN	?num@StrGrow@@QAEKJ@Z:NEAR			; StrGrow::num
; Function compile flags: /Ogty
;	COMDAT ??6StrGrow@@QAEAAV0@J@Z
_TEXT	SEGMENT
_val$ = 8
??6StrGrow@@QAEAAV0@J@Z PROC NEAR			; StrGrow::operator<<, COMDAT
; _this$ = ecx

; 361  : 	inline StrGrow & operator << (I32 val){num(val);return *this;}

	mov	eax, DWORD PTR _val$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?num@StrGrow@@QAEKJ@Z			; StrGrow::num
	mov	eax, esi
	pop	esi
	ret	4
??6StrGrow@@QAEAAV0@J@Z ENDP				; StrGrow::operator<<
_TEXT	ENDS
PUBLIC	??6StrGrow@@QAEAAV0@D@Z				; StrGrow::operator<<
EXTRN	?chr@StrGrow@@QAEKD@Z:NEAR			; StrGrow::chr
; Function compile flags: /Ogty
;	COMDAT ??6StrGrow@@QAEAAV0@D@Z
_TEXT	SEGMENT
_val$ = 8
??6StrGrow@@QAEAAV0@D@Z PROC NEAR			; StrGrow::operator<<, COMDAT
; _this$ = ecx

; 362  : 	inline StrGrow & operator << (char val){chr(val);return *this;}

	mov	eax, DWORD PTR _val$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?chr@StrGrow@@QAEKD@Z			; StrGrow::chr
	mov	eax, esi
	pop	esi
	ret	4
??6StrGrow@@QAEAAV0@D@Z ENDP				; StrGrow::operator<<
_TEXT	ENDS
PUBLIC	??4StrGrow@@QAEAAV0@ABV0@@Z			; StrGrow::operator=
; Function compile flags: /Ogty
;	COMDAT ??4StrGrow@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4StrGrow@@QAEAAV0@ABV0@@Z PROC NEAR			; StrGrow::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, ecx
	push	edi
	mov	ecx, 5
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4StrGrow@@QAEAAV0@ABV0@@Z ENDP			; StrGrow::operator=
_TEXT	ENDS
PUBLIC	??1StrGrow@@QAE@XZ				; StrGrow::~StrGrow
; Function compile flags: /Ogty
;	COMDAT ??1StrGrow@@QAE@XZ
_TEXT	SEGMENT
??1StrGrow@@QAE@XZ PROC NEAR				; StrGrow::~StrGrow, COMDAT
; _this$ = ecx
	mov	ecx, DWORD PTR [ecx]
	jmp	@xfree@4
??1StrGrow@@QAE@XZ ENDP					; StrGrow::~StrGrow
_TEXT	ENDS
PUBLIC	??_FStrGrow@@QAEXXZ				; StrGrow::`default constructor closure'
; Function compile flags: /Ogty
;	COMDAT ??_FStrGrow@@QAEXXZ
_TEXT	SEGMENT
??_FStrGrow@@QAEXXZ PROC NEAR				; StrGrow::`default constructor closure', COMDAT
; _this$ = ecx
	push	64					; 00000040H
	push	64					; 00000040H
	call	??0StrGrow@@QAE@KK@Z			; StrGrow::StrGrow
	ret	0
??_FStrGrow@@QAEXXZ ENDP				; StrGrow::`default constructor closure'
_TEXT	ENDS
PUBLIC	??0XBufferReadInt@@QAE@PAVCBaseStream@@@Z	; XBufferReadInt::XBufferReadInt
PUBLIC	??_7XBufferReadInt@@6B@				; XBufferReadInt::`vftable'
PUBLIC	??_EXBufferReadInt@@UAEPAXI@Z			; XBufferReadInt::`vector deleting destructor'
EXTRN	?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z:NEAR	; XBufferReadInt::read_direct
;	COMDAT ??_7XBufferReadInt@@6B@
; File C:\duke4\xcore\xstream.h
CONST	SEGMENT
??_7XBufferReadInt@@6B@ DD FLAT:?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z ; XBufferReadInt::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:??_EXBufferReadInt@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0XBufferReadInt@@QAE@PAVCBaseStream@@@Z
_TEXT	SEGMENT
_Stream$ = 8
??0XBufferReadInt@@QAE@PAVCBaseStream@@@Z PROC NEAR	; XBufferReadInt::XBufferReadInt, COMDAT
; _this$ = ecx

; 34   : 	XBufferReadInt(CBaseStream *Stream) : stream(Stream) {}

	mov	eax, ecx
	mov	ecx, DWORD PTR _Stream$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	ret	4
??0XBufferReadInt@@QAE@PAVCBaseStream@@@Z ENDP		; XBufferReadInt::XBufferReadInt
_TEXT	ENDS
PUBLIC	??1XBufferReadInt@@UAE@XZ			; XBufferReadInt::~XBufferReadInt
; Function compile flags: /Ogty
;	COMDAT ??1XBufferReadInt@@UAE@XZ
_TEXT	SEGMENT
??1XBufferReadInt@@UAE@XZ PROC NEAR			; XBufferReadInt::~XBufferReadInt, COMDAT
; _this$ = ecx

; 37   : 	virtual ~XBufferReadInt(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	ret	0
??1XBufferReadInt@@UAE@XZ ENDP				; XBufferReadInt::~XBufferReadInt
_TEXT	ENDS
PUBLIC	??0XBufferReadInt@@QAE@ABV0@@Z			; XBufferReadInt::XBufferReadInt
; Function compile flags: /Ogty
;	COMDAT ??0XBufferReadInt@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0XBufferReadInt@@QAE@ABV0@@Z PROC NEAR		; XBufferReadInt::XBufferReadInt, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	mov	DWORD PTR [eax+4], edx
	ret	4
??0XBufferReadInt@@QAE@ABV0@@Z ENDP			; XBufferReadInt::XBufferReadInt
_TEXT	ENDS
PUBLIC	??4XBufferReadInt@@QAEAAV0@ABV0@@Z		; XBufferReadInt::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XBufferReadInt@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XBufferReadInt@@QAEAAV0@ABV0@@Z PROC NEAR		; XBufferReadInt::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	ret	4
??4XBufferReadInt@@QAEAAV0@ABV0@@Z ENDP			; XBufferReadInt::operator=
_TEXT	ENDS
PUBLIC	??_GXBufferReadInt@@UAEPAXI@Z			; XBufferReadInt::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXBufferReadInt@@UAEPAXI@Z PROC NEAR			; XBufferReadInt::`scalar deleting destructor', COMDAT
; _this$ = ecx
	mov	al, BYTE PTR ___flags$[esp-4]
	push	esi
	mov	esi, ecx
	test	al, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	je	SHORT $L58233
	call	@xfree@4
$L58233:
	mov	eax, esi
	pop	esi
	ret	4
??_GXBufferReadInt@@UAEPAXI@Z ENDP			; XBufferReadInt::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
; Function compile flags: /Ogty
;	COMDAT ??_EXBufferReadInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXBufferReadInt@@UAEPAXI@Z PROC NEAR			; XBufferReadInt::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56059
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XBufferReadInt@@UAE@XZ	; XBufferReadInt::~XBufferReadInt
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L58238
	mov	ecx, edi
	call	@xfree@4
$L58238:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56059:
	test	bl, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	je	SHORT $L58244
	mov	ecx, esi
	call	@xfree@4
$L58244:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXBufferReadInt@@UAEPAXI@Z ENDP			; XBufferReadInt::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0XBufferWriteInt@@QAE@PAVCBaseStream@@@Z	; XBufferWriteInt::XBufferWriteInt
PUBLIC	??_7XBufferWriteInt@@6B@			; XBufferWriteInt::`vftable'
PUBLIC	??_EXBufferWriteInt@@UAEPAXI@Z			; XBufferWriteInt::`vector deleting destructor'
EXTRN	?write_direct@XBufferWriteInt@@MAEKPBXKAAK@Z:NEAR ; XBufferWriteInt::write_direct
;	COMDAT ??_7XBufferWriteInt@@6B@
CONST	SEGMENT
??_7XBufferWriteInt@@6B@ DD FLAT:?write_direct@XBufferWriteInt@@MAEKPBXKAAK@Z ; XBufferWriteInt::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:??_EXBufferWriteInt@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0XBufferWriteInt@@QAE@PAVCBaseStream@@@Z
_TEXT	SEGMENT
_Stream$ = 8
??0XBufferWriteInt@@QAE@PAVCBaseStream@@@Z PROC NEAR	; XBufferWriteInt::XBufferWriteInt, COMDAT
; _this$ = ecx

; 52   : 	XBufferWriteInt(CBaseStream *Stream) : stream(Stream) {}

	mov	eax, ecx
	mov	ecx, DWORD PTR _Stream$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	ret	4
??0XBufferWriteInt@@QAE@PAVCBaseStream@@@Z ENDP		; XBufferWriteInt::XBufferWriteInt
_TEXT	ENDS
PUBLIC	??1XBufferWriteInt@@UAE@XZ			; XBufferWriteInt::~XBufferWriteInt
; Function compile flags: /Ogty
;	COMDAT ??1XBufferWriteInt@@UAE@XZ
_TEXT	SEGMENT
??1XBufferWriteInt@@UAE@XZ PROC NEAR			; XBufferWriteInt::~XBufferWriteInt, COMDAT
; _this$ = ecx

; 56   : 	virtual ~XBufferWriteInt(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	ret	0
??1XBufferWriteInt@@UAE@XZ ENDP				; XBufferWriteInt::~XBufferWriteInt
_TEXT	ENDS
PUBLIC	??0XBufferWriteInt@@QAE@ABV0@@Z			; XBufferWriteInt::XBufferWriteInt
; Function compile flags: /Ogty
;	COMDAT ??0XBufferWriteInt@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0XBufferWriteInt@@QAE@ABV0@@Z PROC NEAR		; XBufferWriteInt::XBufferWriteInt, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	mov	DWORD PTR [eax+4], edx
	ret	4
??0XBufferWriteInt@@QAE@ABV0@@Z ENDP			; XBufferWriteInt::XBufferWriteInt
_TEXT	ENDS
PUBLIC	??4XBufferWriteInt@@QAEAAV0@ABV0@@Z		; XBufferWriteInt::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XBufferWriteInt@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XBufferWriteInt@@QAEAAV0@ABV0@@Z PROC NEAR		; XBufferWriteInt::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	ret	4
??4XBufferWriteInt@@QAEAAV0@ABV0@@Z ENDP		; XBufferWriteInt::operator=
_TEXT	ENDS
PUBLIC	??_GXBufferWriteInt@@UAEPAXI@Z			; XBufferWriteInt::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXBufferWriteInt@@UAEPAXI@Z PROC NEAR		; XBufferWriteInt::`scalar deleting destructor', COMDAT
; _this$ = ecx
	mov	al, BYTE PTR ___flags$[esp-4]
	push	esi
	mov	esi, ecx
	test	al, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	je	SHORT $L58261
	call	@xfree@4
$L58261:
	mov	eax, esi
	pop	esi
	ret	4
??_GXBufferWriteInt@@UAEPAXI@Z ENDP			; XBufferWriteInt::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_EXBufferWriteInt@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXBufferWriteInt@@UAEPAXI@Z PROC NEAR		; XBufferWriteInt::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56111
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XBufferWriteInt@@UAE@XZ	; XBufferWriteInt::~XBufferWriteInt
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L58266
	mov	ecx, edi
	call	@xfree@4
$L58266:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56111:
	test	bl, 1
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	je	SHORT $L58272
	mov	ecx, esi
	call	@xfree@4
$L58272:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXBufferWriteInt@@UAEPAXI@Z ENDP			; XBufferWriteInt::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0XStreamRdDirect@@QAE@PAVCBaseStream@@@Z	; XStreamRdDirect::XStreamRdDirect
PUBLIC	?seek@XStreamRdDirect@@UAEKJ@Z			; XStreamRdDirect::seek
PUBLIC	??_7XStreamRdDirect@@6B@			; XStreamRdDirect::`vftable'
PUBLIC	??_EXStreamRdDirect@@UAEPAXI@Z			; XStreamRdDirect::`vector deleting destructor'
EXTRN	?read@XStreamRdDirect@@UAEKPAXKAAK1@Z:NEAR	; XStreamRdDirect::read
;	COMDAT ??_7XStreamRdDirect@@6B@
CONST	SEGMENT
??_7XStreamRdDirect@@6B@ DD FLAT:?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z ; XStreamRdDirect::`vftable'
	DD	FLAT:?read@XStreamRdDirect@@UAEKPAXKAAK1@Z
	DD	FLAT:?seek@XStreamRdDirect@@UAEKJ@Z
	DD	FLAT:??_EXStreamRdDirect@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0XStreamRdDirect@@QAE@PAVCBaseStream@@@Z
_TEXT	SEGMENT
_Stream$ = 8
??0XStreamRdDirect@@QAE@PAVCBaseStream@@@Z PROC NEAR	; XStreamRdDirect::XStreamRdDirect, COMDAT
; _this$ = ecx

; 67   : 	XStreamRdDirect(CBaseStream *Stream) : XBufferReadInt(Stream){}

	mov	eax, ecx
	mov	ecx, DWORD PTR _Stream$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XStreamRdDirect@@6B@ ; XStreamRdDirect::`vftable'
	ret	4
??0XStreamRdDirect@@QAE@PAVCBaseStream@@@Z ENDP		; XStreamRdDirect::XStreamRdDirect
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?seek@XStreamRdDirect@@UAEKJ@Z
_TEXT	SEGMENT
?seek@XStreamRdDirect@@UAEKJ@Z PROC NEAR		; XStreamRdDirect::seek, COMDAT
; _this$ = ecx

; 70   : 	U32 seek(I32 delta_pos){return TRUE;}

	mov	eax, 1
	ret	4
?seek@XStreamRdDirect@@UAEKJ@Z ENDP			; XStreamRdDirect::seek
_TEXT	ENDS
PUBLIC	??1XStreamRdDirect@@UAE@XZ			; XStreamRdDirect::~XStreamRdDirect
; Function compile flags: /Ogty
;	COMDAT ??1XStreamRdDirect@@UAE@XZ
_TEXT	SEGMENT
??1XStreamRdDirect@@UAE@XZ PROC NEAR			; XStreamRdDirect::~XStreamRdDirect, COMDAT
; _this$ = ecx

; 71   : 	~XStreamRdDirect(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	ret	0
??1XStreamRdDirect@@UAE@XZ ENDP				; XStreamRdDirect::~XStreamRdDirect
_TEXT	ENDS
PUBLIC	??2XStreamRdDirect@@SAPAXI@Z			; XStreamRdDirect::operator new
; Function compile flags: /Ogty
;	COMDAT ??2XStreamRdDirect@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2XStreamRdDirect@@SAPAXI@Z PROC NEAR			; XStreamRdDirect::operator new, COMDAT

; 72   : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2XStreamRdDirect@@SAPAXI@Z ENDP			; XStreamRdDirect::operator new
_TEXT	ENDS
PUBLIC	??3XStreamRdDirect@@SAXPAX@Z			; XStreamRdDirect::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3XStreamRdDirect@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3XStreamRdDirect@@SAXPAX@Z PROC NEAR			; XStreamRdDirect::operator delete, COMDAT

; 72   : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3XStreamRdDirect@@SAXPAX@Z ENDP			; XStreamRdDirect::operator delete
_TEXT	ENDS
PUBLIC	??0XStreamRdDirect@@QAE@ABV0@@Z			; XStreamRdDirect::XStreamRdDirect
; Function compile flags: /Ogty
;	COMDAT ??0XStreamRdDirect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0XStreamRdDirect@@QAE@ABV0@@Z PROC NEAR		; XStreamRdDirect::XStreamRdDirect, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XStreamRdDirect@@6B@ ; XStreamRdDirect::`vftable'
	mov	DWORD PTR [eax+4], edx
	ret	4
??0XStreamRdDirect@@QAE@ABV0@@Z ENDP			; XStreamRdDirect::XStreamRdDirect
_TEXT	ENDS
PUBLIC	??4XStreamRdDirect@@QAEAAV0@ABV0@@Z		; XStreamRdDirect::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XStreamRdDirect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XStreamRdDirect@@QAEAAV0@ABV0@@Z PROC NEAR		; XStreamRdDirect::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	ret	4
??4XStreamRdDirect@@QAEAAV0@ABV0@@Z ENDP		; XStreamRdDirect::operator=
_TEXT	ENDS
PUBLIC	??_GXStreamRdDirect@@UAEPAXI@Z			; XStreamRdDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXStreamRdDirect@@UAEPAXI@Z PROC NEAR		; XStreamRdDirect::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1XStreamRdDirect@@UAE@XZ		; XStreamRdDirect::~XStreamRdDirect
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L58308
	mov	ecx, esi
	call	@xfree@4
$L58308:
	mov	eax, esi
	pop	esi
	ret	4
??_GXStreamRdDirect@@UAEPAXI@Z ENDP			; XStreamRdDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_EXStreamRdDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXStreamRdDirect@@UAEPAXI@Z PROC NEAR		; XStreamRdDirect::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56163
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XStreamRdDirect@@UAE@XZ	; XStreamRdDirect::~XStreamRdDirect
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L58313
	mov	ecx, edi
	call	@xfree@4
$L58313:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56163:
	mov	ecx, esi
	call	??1XStreamRdDirect@@UAE@XZ		; XStreamRdDirect::~XStreamRdDirect
	test	bl, 1
	je	SHORT $L58315
	mov	ecx, esi
	call	@xfree@4
$L58315:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXStreamRdDirect@@UAEPAXI@Z ENDP			; XStreamRdDirect::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0XStreamWrDirect@@QAE@PAVCBaseStream@@@Z	; XStreamWrDirect::XStreamWrDirect
PUBLIC	?seek@XStreamWrDirect@@UAEKJ@Z			; XStreamWrDirect::seek
PUBLIC	?flush@XStreamWrDirect@@UAEKXZ			; XStreamWrDirect::flush
PUBLIC	??_7XStreamWrDirect@@6B@			; XStreamWrDirect::`vftable'
PUBLIC	??_EXStreamWrDirect@@UAEPAXI@Z			; XStreamWrDirect::`vector deleting destructor'
EXTRN	?write@XStreamWrDirect@@UAEKPBXKAAK1@Z:NEAR	; XStreamWrDirect::write
;	COMDAT ??_7XStreamWrDirect@@6B@
CONST	SEGMENT
??_7XStreamWrDirect@@6B@ DD FLAT:?write_direct@XBufferWriteInt@@MAEKPBXKAAK@Z ; XStreamWrDirect::`vftable'
	DD	FLAT:?write@XStreamWrDirect@@UAEKPBXKAAK1@Z
	DD	FLAT:?seek@XStreamWrDirect@@UAEKJ@Z
	DD	FLAT:?flush@XStreamWrDirect@@UAEKXZ
	DD	FLAT:??_EXStreamWrDirect@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0XStreamWrDirect@@QAE@PAVCBaseStream@@@Z
_TEXT	SEGMENT
_Stream$ = 8
??0XStreamWrDirect@@QAE@PAVCBaseStream@@@Z PROC NEAR	; XStreamWrDirect::XStreamWrDirect, COMDAT
; _this$ = ecx

; 83   : 	XStreamWrDirect(CBaseStream *Stream) : XBufferWriteInt(Stream){}

	mov	eax, ecx
	mov	ecx, DWORD PTR _Stream$[esp-4]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XStreamWrDirect@@6B@ ; XStreamWrDirect::`vftable'
	ret	4
??0XStreamWrDirect@@QAE@PAVCBaseStream@@@Z ENDP		; XStreamWrDirect::XStreamWrDirect
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?seek@XStreamWrDirect@@UAEKJ@Z
_TEXT	SEGMENT
?seek@XStreamWrDirect@@UAEKJ@Z PROC NEAR		; XStreamWrDirect::seek, COMDAT
; _this$ = ecx

; 86   : 	U32 seek(I32 delta_pos){return TRUE;}

	mov	eax, 1
	ret	4
?seek@XStreamWrDirect@@UAEKJ@Z ENDP			; XStreamWrDirect::seek
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?flush@XStreamWrDirect@@UAEKXZ
_TEXT	SEGMENT
?flush@XStreamWrDirect@@UAEKXZ PROC NEAR		; XStreamWrDirect::flush, COMDAT
; _this$ = ecx

; 87   : 	U32 flush(void){return TRUE;}

	mov	eax, 1
	ret	0
?flush@XStreamWrDirect@@UAEKXZ ENDP			; XStreamWrDirect::flush
_TEXT	ENDS
PUBLIC	??1XStreamWrDirect@@UAE@XZ			; XStreamWrDirect::~XStreamWrDirect
; Function compile flags: /Ogty
;	COMDAT ??1XStreamWrDirect@@UAE@XZ
_TEXT	SEGMENT
??1XStreamWrDirect@@UAE@XZ PROC NEAR			; XStreamWrDirect::~XStreamWrDirect, COMDAT
; _this$ = ecx

; 88   : 	~XStreamWrDirect(void){}

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XBufferWriteInt@@6B@ ; XBufferWriteInt::`vftable'
	ret	0
??1XStreamWrDirect@@UAE@XZ ENDP				; XStreamWrDirect::~XStreamWrDirect
_TEXT	ENDS
PUBLIC	??2XStreamWrDirect@@SAPAXI@Z			; XStreamWrDirect::operator new
; Function compile flags: /Ogty
;	COMDAT ??2XStreamWrDirect@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2XStreamWrDirect@@SAPAXI@Z PROC NEAR			; XStreamWrDirect::operator new, COMDAT

; 89   : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2XStreamWrDirect@@SAPAXI@Z ENDP			; XStreamWrDirect::operator new
_TEXT	ENDS
PUBLIC	??3XStreamWrDirect@@SAXPAX@Z			; XStreamWrDirect::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3XStreamWrDirect@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3XStreamWrDirect@@SAXPAX@Z PROC NEAR			; XStreamWrDirect::operator delete, COMDAT

; 89   : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3XStreamWrDirect@@SAXPAX@Z ENDP			; XStreamWrDirect::operator delete
_TEXT	ENDS
PUBLIC	??0XStreamWrDirect@@QAE@ABV0@@Z			; XStreamWrDirect::XStreamWrDirect
; Function compile flags: /Ogty
;	COMDAT ??0XStreamWrDirect@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0XStreamWrDirect@@QAE@ABV0@@Z PROC NEAR		; XStreamWrDirect::XStreamWrDirect, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XStreamWrDirect@@6B@ ; XStreamWrDirect::`vftable'
	mov	DWORD PTR [eax+4], edx
	ret	4
??0XStreamWrDirect@@QAE@ABV0@@Z ENDP			; XStreamWrDirect::XStreamWrDirect
_TEXT	ENDS
PUBLIC	??4XStreamWrDirect@@QAEAAV0@ABV0@@Z		; XStreamWrDirect::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XStreamWrDirect@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XStreamWrDirect@@QAEAAV0@ABV0@@Z PROC NEAR		; XStreamWrDirect::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	ret	4
??4XStreamWrDirect@@QAEAAV0@ABV0@@Z ENDP		; XStreamWrDirect::operator=
_TEXT	ENDS
PUBLIC	??_GXStreamWrDirect@@UAEPAXI@Z			; XStreamWrDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXStreamWrDirect@@UAEPAXI@Z PROC NEAR		; XStreamWrDirect::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1XStreamWrDirect@@UAE@XZ		; XStreamWrDirect::~XStreamWrDirect
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L58354
	mov	ecx, esi
	call	@xfree@4
$L58354:
	mov	eax, esi
	pop	esi
	ret	4
??_GXStreamWrDirect@@UAEPAXI@Z ENDP			; XStreamWrDirect::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_EXStreamWrDirect@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXStreamWrDirect@@UAEPAXI@Z PROC NEAR		; XStreamWrDirect::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56219
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XStreamWrDirect@@UAE@XZ	; XStreamWrDirect::~XStreamWrDirect
	push	eax
	push	8
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L58359
	mov	ecx, edi
	call	@xfree@4
$L58359:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56219:
	mov	ecx, esi
	call	??1XStreamWrDirect@@UAE@XZ		; XStreamWrDirect::~XStreamWrDirect
	test	bl, 1
	je	SHORT $L58361
	mov	ecx, esi
	call	@xfree@4
$L58361:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXStreamWrDirect@@UAEPAXI@Z ENDP			; XStreamWrDirect::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1XMemRdBuffer@@UAE@XZ				; XMemRdBuffer::~XMemRdBuffer
PUBLIC	??_7XMemRdBuffer@@6B@				; XMemRdBuffer::`vftable'
PUBLIC	??_EXMemRdBuffer@@UAEPAXI@Z			; XMemRdBuffer::`vector deleting destructor'
EXTRN	?read@XMemRdBuffer@@UAEKPAXKAAK1@Z:NEAR		; XMemRdBuffer::read
EXTRN	?seek@XMemRdBuffer@@UAEKJ@Z:NEAR		; XMemRdBuffer::seek
;	COMDAT ??_7XMemRdBuffer@@6B@
CONST	SEGMENT
??_7XMemRdBuffer@@6B@ DD FLAT:?read_direct@XBufferReadInt@@MAEKPAXKAAK@Z ; XMemRdBuffer::`vftable'
	DD	FLAT:?read@XMemRdBuffer@@UAEKPAXKAAK1@Z
	DD	FLAT:?seek@XMemRdBuffer@@UAEKJ@Z
	DD	FLAT:??_EXMemRdBuffer@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??1XMemRdBuffer@@UAE@XZ
_TEXT	SEGMENT
??1XMemRdBuffer@@UAE@XZ PROC NEAR			; XMemRdBuffer::~XMemRdBuffer, COMDAT
; _this$ = ecx

; 109  : 	~XMemRdBuffer(void){}

	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XMemRdBuffer@@6B@ ; XMemRdBuffer::`vftable'
	mov	ecx, DWORD PTR [esi+8]
	call	@xfree@4
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	pop	esi
	ret	0
??1XMemRdBuffer@@UAE@XZ ENDP				; XMemRdBuffer::~XMemRdBuffer
_TEXT	ENDS
PUBLIC	??2XMemRdBuffer@@SAPAXI@Z			; XMemRdBuffer::operator new
; Function compile flags: /Ogty
;	COMDAT ??2XMemRdBuffer@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2XMemRdBuffer@@SAPAXI@Z PROC NEAR			; XMemRdBuffer::operator new, COMDAT

; 110  : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2XMemRdBuffer@@SAPAXI@Z ENDP				; XMemRdBuffer::operator new
_TEXT	ENDS
PUBLIC	??3XMemRdBuffer@@SAXPAX@Z			; XMemRdBuffer::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3XMemRdBuffer@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3XMemRdBuffer@@SAXPAX@Z PROC NEAR			; XMemRdBuffer::operator delete, COMDAT

; 110  : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3XMemRdBuffer@@SAXPAX@Z ENDP				; XMemRdBuffer::operator delete
_TEXT	ENDS
PUBLIC	??0XMemRdBuffer@@QAE@ABV0@@Z			; XMemRdBuffer::XMemRdBuffer
; Function compile flags: /Ogty
;	COMDAT ??0XMemRdBuffer@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0XMemRdBuffer@@QAE@ABV0@@Z PROC NEAR			; XMemRdBuffer::XMemRdBuffer, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XBufferReadInt@@6B@ ; XBufferReadInt::`vftable'
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XMemRdBuffer@@6B@ ; XMemRdBuffer::`vftable'
	ret	4
??0XMemRdBuffer@@QAE@ABV0@@Z ENDP			; XMemRdBuffer::XMemRdBuffer
_TEXT	ENDS
PUBLIC	??4XMemRdBuffer@@QAEAAV0@ABV0@@Z		; XMemRdBuffer::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XMemRdBuffer@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XMemRdBuffer@@QAEAAV0@ABV0@@Z PROC NEAR		; XMemRdBuffer::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	ret	4
??4XMemRdBuffer@@QAEAAV0@ABV0@@Z ENDP			; XMemRdBuffer::operator=
_TEXT	ENDS
PUBLIC	??_GXMemRdBuffer@@UAEPAXI@Z			; XMemRdBuffer::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_GXMemRdBuffer@@UAEPAXI@Z PROC NEAR			; XMemRdBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1XMemRdBuffer@@UAE@XZ			; XMemRdBuffer::~XMemRdBuffer
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $L58396
	mov	ecx, esi
	call	@xfree@4
$L58396:
	mov	eax, esi
	pop	esi
	ret	4
??_GXMemRdBuffer@@UAEPAXI@Z ENDP			; XMemRdBuffer::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_EXMemRdBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
??_EXMemRdBuffer@@UAEPAXI@Z PROC NEAR			; XMemRdBuffer::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebx
	mov	bl, BYTE PTR ___flags$[esp]
	push	esi
	mov	esi, ecx
	test	bl, 2
	je	SHORT $L56272
	mov	eax, DWORD PTR [esi-4]
	push	edi
	lea	edi, DWORD PTR [esi-4]
	push	OFFSET FLAT:??1XMemRdBuffer@@UAE@XZ	; XMemRdBuffer::~XMemRdBuffer
	push	eax
	push	24					; 00000018H
	push	esi
	call	??_M@YGXPAXIHP6EX0@Z@Z			; `eh vector destructor iterator'
	test	bl, 1
	je	SHORT $L58401
	mov	ecx, edi
	call	@xfree@4
$L58401:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	ret	4
$L56272:
	mov	ecx, esi
	call	??1XMemRdBuffer@@UAE@XZ			; XMemRdBuffer::~XMemRdBuffer
	test	bl, 1
	je	SHORT $L58403
	mov	ecx, esi
	call	@xfree@4
$L58403:
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_EXMemRdBuffer@@UAEPAXI@Z ENDP			; XMemRdBuffer::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??0XStreamState@@QAE@XZ				; XStreamState::XStreamState
; Function compile flags: /Ogty
;	COMDAT ??0XStreamState@@QAE@XZ
_TEXT	SEGMENT
??0XStreamState@@QAE@XZ PROC NEAR			; XStreamState::XStreamState, COMDAT
; _this$ = ecx

; 131  : 	XStreamState(void) : loaded(0),read(0),write(0),append(0),binary(1),text(0),create(0),truncate(0),is_open(0),error(0),pos_at(0),pos_should(0) {}

	mov	eax, ecx
	mov	ecx, DWORD PTR [eax]
	and	ecx, -4080				; fffff010H
	or	ecx, 16					; 00000010H
	mov	DWORD PTR [eax], ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	ret	0
??0XStreamState@@QAE@XZ ENDP				; XStreamState::XStreamState
_TEXT	ENDS
PUBLIC	??4XStreamState@@QAEAAV0@ABV0@@Z		; XStreamState::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XStreamState@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XStreamState@@QAEAAV0@ABV0@@Z PROC NEAR		; XStreamState::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	mov	edx, eax
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [edx], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], esi
	pop	esi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	ret	4
??4XStreamState@@QAEAAV0@ABV0@@Z ENDP			; XStreamState::operator=
_TEXT	ENDS
PUBLIC	?is_open@CBaseStream@@IAEKXZ			; CBaseStream::is_open
; Function compile flags: /Ogty
;	COMDAT ?is_open@CBaseStream@@IAEKXZ
_TEXT	SEGMENT
?is_open@CBaseStream@@IAEKXZ PROC NEAR			; CBaseStream::is_open, COMDAT
; _this$ = ecx

; 155  : 	inline U32 is_open(void){return (state.is_open);}

	mov	eax, DWORD PTR [ecx+4]
	shr	eax, 8
	and	eax, 1
	ret	0
?is_open@CBaseStream@@IAEKXZ ENDP			; CBaseStream::is_open
_TEXT	ENDS
PUBLIC	?set_open@CBaseStream@@IAEXXZ			; CBaseStream::set_open
; Function compile flags: /Ogty
;	COMDAT ?set_open@CBaseStream@@IAEXXZ
_TEXT	SEGMENT
?set_open@CBaseStream@@IAEXXZ PROC NEAR			; CBaseStream::set_open, COMDAT
; _this$ = ecx

; 156  : 	inline void set_open(void){state.is_open=TRUE;}

	mov	eax, DWORD PTR [ecx+4]
	or	ah, 1
	mov	DWORD PTR [ecx+4], eax
	ret	0
?set_open@CBaseStream@@IAEXXZ ENDP			; CBaseStream::set_open
_TEXT	ENDS
PUBLIC	?seek_int@CBaseStream@@MAEJXZ			; CBaseStream::seek_int
; Function compile flags: /Ogty
;	COMDAT ?seek_int@CBaseStream@@MAEJXZ
_TEXT	SEGMENT
?seek_int@CBaseStream@@MAEJXZ PROC NEAR			; CBaseStream::seek_int, COMDAT
; _this$ = ecx

; 163  : 	virtual I32 seek_int(void){return TRUE;}

	mov	eax, 1
	ret	0
?seek_int@CBaseStream@@MAEJXZ ENDP			; CBaseStream::seek_int
_TEXT	ENDS
PUBLIC	??1CBaseStream@@QAE@XZ				; CBaseStream::~CBaseStream
PUBLIC	?ioctl_read@CBaseStream@@UAEKKK@Z		; CBaseStream::ioctl_read
PUBLIC	?ioctl_write@CBaseStream@@UAEKKK@Z		; CBaseStream::ioctl_write
PUBLIC	?put@CBaseStream@@UAEKD@Z			; CBaseStream::put
PUBLIC	?pos_rd@CBaseStream@@UAEXKK@Z			; CBaseStream::pos_rd
PUBLIC	?pos_wr@CBaseStream@@UAEXKK@Z			; CBaseStream::pos_wr
PUBLIC	??_7CBaseStream@@6B@				; CBaseStream::`vftable'
EXTRN	?base_init@CBaseStream@@MAEXXZ:NEAR		; CBaseStream::base_init
EXTRN	?write@CBaseStream@@UAEKPBXKAAK@Z:NEAR		; CBaseStream::write
EXTRN	?write@CBaseStream@@UAEKPBXK@Z:NEAR		; CBaseStream::write
EXTRN	?read@CBaseStream@@UAEKPAXKAAK@Z:NEAR		; CBaseStream::read
EXTRN	?read@CBaseStream@@UAEKPAXK@Z:NEAR		; CBaseStream::read
EXTRN	?flush@CBaseStream@@UAEKXZ:NEAR			; CBaseStream::flush
EXTRN	??6CBaseStream@@UAEAAV0@PBD@Z:NEAR		; CBaseStream::operator<<
EXTRN	??6CBaseStream@@UAEAAV0@K@Z:NEAR		; CBaseStream::operator<<
EXTRN	??6CBaseStream@@UAEAAV0@D@Z:NEAR		; CBaseStream::operator<<
;	COMDAT ??_7CBaseStream@@6B@
CONST	SEGMENT
??_7CBaseStream@@6B@ DD FLAT:?base_init@CBaseStream@@MAEXXZ ; CBaseStream::`vftable'
	DD	FLAT:?seek_int@CBaseStream@@MAEJXZ
	DD	FLAT:__purecall
	DD	FLAT:?ioctl_read@CBaseStream@@UAEKKK@Z
	DD	FLAT:?ioctl_write@CBaseStream@@UAEKKK@Z
	DD	FLAT:?write@CBaseStream@@UAEKPBXK@Z
	DD	FLAT:?write@CBaseStream@@UAEKPBXKAAK@Z
	DD	FLAT:?read@CBaseStream@@UAEKPAXK@Z
	DD	FLAT:?read@CBaseStream@@UAEKPAXKAAK@Z
	DD	FLAT:?flush@CBaseStream@@UAEKXZ
	DD	FLAT:?put@CBaseStream@@UAEKD@Z
	DD	FLAT:??6CBaseStream@@UAEAAV0@D@Z
	DD	FLAT:??6CBaseStream@@UAEAAV0@K@Z
	DD	FLAT:??6CBaseStream@@UAEAAV0@PBD@Z
	DD	FLAT:?pos_rd@CBaseStream@@UAEXKK@Z
	DD	FLAT:?pos_wr@CBaseStream@@UAEXKK@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??1CBaseStream@@QAE@XZ
_TEXT	SEGMENT
??1CBaseStream@@QAE@XZ PROC NEAR			; CBaseStream::~CBaseStream, COMDAT
; _this$ = ecx

; 167  : 	{

	push	esi
	mov	esi, ecx

; 168  : 		delete rd_int;

	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR [esi], OFFSET FLAT:??_7CBaseStream@@6B@ ; CBaseStream::`vftable'
	test	ecx, ecx
	je	SHORT $L58419
	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax+12]
$L58419:

; 169  : 		delete wr_int;

	mov	ecx, DWORD PTR [esi+24]
	pop	esi
	test	ecx, ecx
	je	SHORT $L58423
	mov	edx, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [edx+16]
$L58423:

; 170  : 	}

	ret	0
??1CBaseStream@@QAE@XZ ENDP				; CBaseStream::~CBaseStream
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?ioctl_read@CBaseStream@@UAEKKK@Z
_TEXT	SEGMENT
?ioctl_read@CBaseStream@@UAEKKK@Z PROC NEAR		; CBaseStream::ioctl_read, COMDAT
; _this$ = ecx

; 173  : 	virtual U32 ioctl_read(U32 type,U32 size){return TRUE;}

	mov	eax, 1
	ret	8
?ioctl_read@CBaseStream@@UAEKKK@Z ENDP			; CBaseStream::ioctl_read
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?ioctl_write@CBaseStream@@UAEKKK@Z
_TEXT	SEGMENT
?ioctl_write@CBaseStream@@UAEKKK@Z PROC NEAR		; CBaseStream::ioctl_write, COMDAT
; _this$ = ecx

; 174  : 	virtual U32 ioctl_write(U32 type,U32 size){return TRUE;}

	mov	eax, 1
	ret	8
?ioctl_write@CBaseStream@@UAEKKK@Z ENDP			; CBaseStream::ioctl_write
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?put@CBaseStream@@UAEKD@Z
_TEXT	SEGMENT
_val$ = 8
?put@CBaseStream@@UAEKD@Z PROC NEAR			; CBaseStream::put, COMDAT
; _this$ = ecx

; 181  : 	virtual U32 put(char val){return write(&val,1);}

	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _val$[esp-4]
	push	1
	push	edx
	call	DWORD PTR [eax+20]
	ret	4
?put@CBaseStream@@UAEKD@Z ENDP				; CBaseStream::put
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?pos_rd@CBaseStream@@UAEXKK@Z
_TEXT	SEGMENT
?pos_rd@CBaseStream@@UAEXKK@Z PROC NEAR			; CBaseStream::pos_rd, COMDAT
; _this$ = ecx

; 187  : 	virtual void pos_rd(U32 adj,U32 at_adj){}

	ret	8
?pos_rd@CBaseStream@@UAEXKK@Z ENDP			; CBaseStream::pos_rd
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?pos_wr@CBaseStream@@UAEXKK@Z
_TEXT	SEGMENT
?pos_wr@CBaseStream@@UAEXKK@Z PROC NEAR			; CBaseStream::pos_wr, COMDAT
; _this$ = ecx

; 188  : 	virtual void pos_wr(U32 adj,U32 at_adj){}

	ret	8
?pos_wr@CBaseStream@@UAEXKK@Z ENDP			; CBaseStream::pos_wr
_TEXT	ENDS
PUBLIC	?get_pos@CBaseStream@@QAEKXZ			; CBaseStream::get_pos
; Function compile flags: /Ogty
;	COMDAT ?get_pos@CBaseStream@@QAEKXZ
_TEXT	SEGMENT
?get_pos@CBaseStream@@QAEKXZ PROC NEAR			; CBaseStream::get_pos, COMDAT
; _this$ = ecx

; 190  : 	U32 get_pos(void){return state.pos_should;}

	mov	eax, DWORD PTR [ecx+12]
	ret	0
?get_pos@CBaseStream@@QAEKXZ ENDP			; CBaseStream::get_pos
_TEXT	ENDS
PUBLIC	?get_pos_at@CBaseStream@@QAEKXZ			; CBaseStream::get_pos_at
; Function compile flags: /Ogty
;	COMDAT ?get_pos_at@CBaseStream@@QAEKXZ
_TEXT	SEGMENT
?get_pos_at@CBaseStream@@QAEKXZ PROC NEAR		; CBaseStream::get_pos_at, COMDAT
; _this$ = ecx

; 191  : 	U32 get_pos_at(void){return state.pos_at;}

	mov	eax, DWORD PTR [ecx+8]
	ret	0
?get_pos_at@CBaseStream@@QAEKXZ ENDP			; CBaseStream::get_pos_at
_TEXT	ENDS
PUBLIC	?get_handle@CBaseStream@@QAEPAXXZ		; CBaseStream::get_handle
; Function compile flags: /Ogty
;	COMDAT ?get_handle@CBaseStream@@QAEPAXXZ
_TEXT	SEGMENT
?get_handle@CBaseStream@@QAEPAXXZ PROC NEAR		; CBaseStream::get_handle, COMDAT
; _this$ = ecx

; 193  : 	XHANDLE get_handle(void){return handle;}

	mov	eax, DWORD PTR [ecx+16]
	ret	0
?get_handle@CBaseStream@@QAEPAXXZ ENDP			; CBaseStream::get_handle
_TEXT	ENDS
PUBLIC	??0CBaseStream@@QAE@XZ				; CBaseStream::CBaseStream
; Function compile flags: /Ogty
;	COMDAT ??0CBaseStream@@QAE@XZ
_TEXT	SEGMENT
??0CBaseStream@@QAE@XZ PROC NEAR			; CBaseStream::CBaseStream, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, -4080				; fffff010H
	or	ecx, 16					; 00000010H
	mov	DWORD PTR [eax+4], ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CBaseStream@@6B@ ; CBaseStream::`vftable'
	ret	0
??0CBaseStream@@QAE@XZ ENDP				; CBaseStream::CBaseStream
_TEXT	ENDS
PUBLIC	??0CBaseStream@@QAE@ABV0@@Z			; CBaseStream::CBaseStream
; Function compile flags: /Ogty
;	COMDAT ??0CBaseStream@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0CBaseStream@@QAE@ABV0@@Z PROC NEAR			; CBaseStream::CBaseStream, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	push	edi
	lea	edx, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	pop	edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CBaseStream@@6B@ ; CBaseStream::`vftable'
	pop	esi
	ret	4
??0CBaseStream@@QAE@ABV0@@Z ENDP			; CBaseStream::CBaseStream
_TEXT	ENDS
PUBLIC	??4CBaseStream@@QAEAAV0@ABV0@@Z			; CBaseStream::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CBaseStream@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CBaseStream@@QAEAAV0@ABV0@@Z PROC NEAR		; CBaseStream::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	push	edi
	lea	edx, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	pop	edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], ecx
	pop	esi
	ret	4
??4CBaseStream@@QAEAAV0@ABV0@@Z ENDP			; CBaseStream::operator=
_TEXT	ENDS
PUBLIC	??2CStdOut@@SAPAXI@Z				; CStdOut::operator new
; Function compile flags: /Ogty
;	COMDAT ??2CStdOut@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2CStdOut@@SAPAXI@Z PROC NEAR				; CStdOut::operator new, COMDAT

; 212  : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2CStdOut@@SAPAXI@Z ENDP				; CStdOut::operator new
_TEXT	ENDS
PUBLIC	??3CStdOut@@SAXPAX@Z				; CStdOut::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3CStdOut@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3CStdOut@@SAXPAX@Z PROC NEAR				; CStdOut::operator delete, COMDAT

; 212  : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3CStdOut@@SAXPAX@Z ENDP				; CStdOut::operator delete
_TEXT	ENDS
PUBLIC	??0CStdOut@@QAE@ABV0@@Z				; CStdOut::CStdOut
PUBLIC	??_7CStdOut@@6B@				; CStdOut::`vftable'
EXTRN	?close@CStdOut@@UAEKXZ:NEAR			; CStdOut::close
;	COMDAT ??_7CStdOut@@6B@
CONST	SEGMENT
??_7CStdOut@@6B@ DD FLAT:?base_init@CBaseStream@@MAEXXZ	; CStdOut::`vftable'
	DD	FLAT:?seek_int@CBaseStream@@MAEJXZ
	DD	FLAT:?close@CStdOut@@UAEKXZ
	DD	FLAT:?ioctl_read@CBaseStream@@UAEKKK@Z
	DD	FLAT:?ioctl_write@CBaseStream@@UAEKKK@Z
	DD	FLAT:?write@CBaseStream@@UAEKPBXK@Z
	DD	FLAT:?write@CBaseStream@@UAEKPBXKAAK@Z
	DD	FLAT:?read@CBaseStream@@UAEKPAXK@Z
	DD	FLAT:?read@CBaseStream@@UAEKPAXKAAK@Z
	DD	FLAT:?flush@CBaseStream@@UAEKXZ
	DD	FLAT:?put@CBaseStream@@UAEKD@Z
	DD	FLAT:??6CBaseStream@@UAEAAV0@D@Z
	DD	FLAT:??6CBaseStream@@UAEAAV0@K@Z
	DD	FLAT:??6CBaseStream@@UAEAAV0@PBD@Z
	DD	FLAT:?pos_rd@CBaseStream@@UAEXKK@Z
	DD	FLAT:?pos_wr@CBaseStream@@UAEXKK@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CStdOut@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0CStdOut@@QAE@ABV0@@Z PROC NEAR			; CStdOut::CStdOut, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	push	edi
	lea	edx, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	pop	edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CStdOut@@6B@ ; CStdOut::`vftable'
	pop	esi
	ret	4
??0CStdOut@@QAE@ABV0@@Z ENDP				; CStdOut::CStdOut
_TEXT	ENDS
PUBLIC	??4CStdOut@@QAEAAV0@ABV0@@Z			; CStdOut::operator=
; Function compile flags: /Ogty
;	COMDAT ??4CStdOut@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4CStdOut@@QAEAAV0@ABV0@@Z PROC NEAR			; CStdOut::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	push	edi
	lea	edx, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	pop	edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	ecx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], ecx
	pop	esi
	ret	4
??4CStdOut@@QAEAAV0@ABV0@@Z ENDP			; CStdOut::operator=
_TEXT	ENDS
PUBLIC	??1CStdOut@@QAE@XZ				; CStdOut::~CStdOut
; Function compile flags: /Ogty
;	COMDAT ??1CStdOut@@QAE@XZ
_TEXT	SEGMENT
??1CStdOut@@QAE@XZ PROC NEAR				; CStdOut::~CStdOut, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR [esi], OFFSET FLAT:??_7CBaseStream@@6B@ ; CBaseStream::`vftable'
	test	ecx, ecx
	je	SHORT $L58483
	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax+12]
$L58483:
	mov	ecx, DWORD PTR [esi+24]
	pop	esi
	test	ecx, ecx
	je	SHORT $L58487
	mov	edx, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [edx+16]
$L58487:
	ret	0
??1CStdOut@@QAE@XZ ENDP					; CStdOut::~CStdOut
_TEXT	ENDS
PUBLIC	?base_init@XFile@@EAEXXZ			; XFile::base_init
; Function compile flags: /Ogty
; File C:\duke4\xcore\filex.h
;	COMDAT ?base_init@XFile@@EAEXXZ
_TEXT	SEGMENT
?base_init@XFile@@EAEXXZ PROC NEAR			; XFile::base_init, COMDAT
; _this$ = ecx

; 12   : 	void base_init(void){CBaseStream::base_init();name=null;}

	push	esi
	mov	esi, ecx
	call	?base_init@CBaseStream@@MAEXXZ		; CBaseStream::base_init
	mov	DWORD PTR [esi+40], 0
	pop	esi
	ret	0
?base_init@XFile@@EAEXXZ ENDP				; XFile::base_init
_TEXT	ENDS
PUBLIC	?seek_int@XFile@@AAEKJ@Z			; XFile::seek_int
EXTRN	?std_seek@XFile@@AAEKJK@Z:NEAR			; XFile::std_seek
; Function compile flags: /Ogty
;	COMDAT ?seek_int@XFile@@AAEKJ@Z
_TEXT	SEGMENT
_delta$ = 8
?seek_int@XFile@@AAEKJ@Z PROC NEAR			; XFile::seek_int, COMDAT
; _this$ = ecx

; 19   : 	U32 seek_int(I32 delta){return std_seek(delta,NS_XFILE::FILE_SEEK_CUR);}

	mov	eax, DWORD PTR _delta$[esp-4]
	push	2
	push	eax
	call	?std_seek@XFile@@AAEKJK@Z		; XFile::std_seek
	ret	4
?seek_int@XFile@@AAEKJ@Z ENDP				; XFile::seek_int
_TEXT	ENDS
PUBLIC	??1XFile@@QAE@XZ				; XFile::~XFile
PUBLIC	??_7XFile@@6BCBaseStream@@@			; XFile::`vftable'
PUBLIC	??_7XFile@@6BCSysObj@@@				; XFile::`vftable'
EXTRN	?std_close@XFile@@AAEKXZ:NEAR			; XFile::std_close
EXTRN	?destroy@XFile@@EAEKXZ:NEAR			; XFile::destroy
EXTRN	?close@XFile@@UAEKXZ:NEAR			; XFile::close
EXTRN	?pos_rd@XFile@@UAEXKK@Z:NEAR			; XFile::pos_rd
EXTRN	?pos_wr@XFile@@UAEXKK@Z:NEAR			; XFile::pos_wr
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File C:\duke4\xcore\xstream.h
xdata$x	SEGMENT
$T58542	DD	0ffffffffH
	DD	FLAT:$L58501
	DD	00H
	DD	FLAT:$L58504
	DD	01H
	DD	FLAT:$L58505
$T58539	DD	019930520H
	DD	03H
	DD	FLAT:$T58542
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7XFile@@6BCBaseStream@@@
CONST	SEGMENT
??_7XFile@@6BCBaseStream@@@ DD FLAT:?base_init@XFile@@EAEXXZ ; XFile::`vftable'
	DD	FLAT:?seek_int@CBaseStream@@MAEJXZ
	DD	FLAT:?close@XFile@@UAEKXZ
	DD	FLAT:?ioctl_read@CBaseStream@@UAEKKK@Z
	DD	FLAT:?ioctl_write@CBaseStream@@UAEKKK@Z
	DD	FLAT:?write@CBaseStream@@UAEKPBXK@Z
	DD	FLAT:?write@CBaseStream@@UAEKPBXKAAK@Z
	DD	FLAT:?read@CBaseStream@@UAEKPAXK@Z
	DD	FLAT:?read@CBaseStream@@UAEKPAXKAAK@Z
	DD	FLAT:?flush@CBaseStream@@UAEKXZ
	DD	FLAT:?put@CBaseStream@@UAEKD@Z
	DD	FLAT:??6CBaseStream@@UAEAAV0@D@Z
	DD	FLAT:??6CBaseStream@@UAEAAV0@K@Z
	DD	FLAT:??6CBaseStream@@UAEAAV0@PBD@Z
	DD	FLAT:?pos_rd@XFile@@UAEXKK@Z
	DD	FLAT:?pos_wr@XFile@@UAEXKK@Z
CONST	ENDS
;	COMDAT ??_7XFile@@6BCSysObj@@@
CONST	SEGMENT
??_7XFile@@6BCSysObj@@@ DD FLAT:?destroy@XFile@@EAEKXZ	; XFile::`vftable'
; Function compile flags: /Ogty
; File C:\duke4\xcore\filex.h
CONST	ENDS
;	COMDAT ??1XFile@@QAE@XZ
_TEXT	SEGMENT
$T58516 = -8
__$EHRec$ = -12
_this$ = -16
??1XFile@@QAE@XZ PROC NEAR				; XFile::~XFile, COMDAT
; _this$ = ecx

; 26   : 	{

	push	-1
	push	$L58540
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR _this$[esp+24], esi
	lea	edi, DWORD PTR [esi+28]
	mov	DWORD PTR [esi], OFFSET FLAT:??_7XFile@@6BCBaseStream@@@ ; XFile::`vftable'
	mov	DWORD PTR [edi], OFFSET FLAT:??_7XFile@@6BCSysObj@@@ ; XFile::`vftable'

; 27   : 		if (is_open())

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR __$EHRec$[esp+32], 2
	test	ah, 1
	je	SHORT $L56516

; 28   : 			std_close();

	call	?std_close@XFile@@AAEKXZ		; XFile::std_close
$L56516:

; 29   : 	}

	mov	ecx, DWORD PTR [esi+40]
	call	@xfree@4
	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [edi], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	mov	ecx, DWORD PTR ?_global@@3PAVXGlobal@@A	; _global
	push	edi
	mov	BYTE PTR __$EHRec$[esp+36], 0
	call	?unreg_global_object@XGlobal@@QAEXPAVCSysObj@@@Z ; XGlobal::unreg_global_object
	mov	ecx, DWORD PTR [esi+20]
	mov	DWORD PTR __$EHRec$[esp+32], -1
	test	ecx, ecx
	mov	DWORD PTR [esi], OFFSET FLAT:??_7CBaseStream@@6B@ ; CBaseStream::`vftable'
	je	SHORT $L58530
	mov	eax, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [eax+12]
$L58530:
	mov	ecx, DWORD PTR [esi+24]
	pop	edi
	test	ecx, ecx
	pop	esi
	je	SHORT $L58534
	mov	edx, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [edx+16]
$L58534:
	mov	ecx, DWORD PTR __$EHRec$[esp+16]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L58501:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBaseStream@@QAE@XZ			; CBaseStream::~CBaseStream
$L58504:
	cmp	DWORD PTR _this$[ebp], 0
	je	$L58502
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	mov	DWORD PTR $T58516[ebp], eax
	jmp	$L58503
$L58502:
	mov	DWORD PTR $T58516[ebp], 0
$L58503:
	mov	ecx, DWORD PTR $T58516[ebp]
	jmp	??1CSysObj@@QAE@XZ			; CSysObj::~CSysObj
$L58505:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1autochar@@QAE@XZ			; autochar::~autochar
$L58540:
	mov	eax, OFFSET FLAT:$T58539
	jmp	___CxxFrameHandler
text$x	ENDS
??1XFile@@QAE@XZ ENDP					; XFile::~XFile
PUBLIC	??2XFile@@SAPAXI@Z				; XFile::operator new
; Function compile flags: /Ogty
;	COMDAT ??2XFile@@SAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2XFile@@SAPAXI@Z PROC NEAR				; XFile::operator new, COMDAT

; 38   : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	@xmalloc@4
??2XFile@@SAPAXI@Z ENDP					; XFile::operator new
_TEXT	ENDS
PUBLIC	??3XFile@@SAXPAX@Z				; XFile::operator delete
; Function compile flags: /Ogty
;	COMDAT ??3XFile@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3XFile@@SAXPAX@Z PROC NEAR				; XFile::operator delete, COMDAT

; 38   : 	XOBJ_DEFINE()

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	@xfree@4
??3XFile@@SAXPAX@Z ENDP					; XFile::operator delete
_TEXT	ENDS
PUBLIC	??0XFile@@QAE@ABV0@@Z				; XFile::XFile
; Function compile flags: /Ogty
;	COMDAT ??0XFile@@QAE@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??0XFile@@QAE@ABV0@@Z PROC NEAR				; XFile::XFile, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	push	edi
	lea	edx, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	pop	edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CBaseStream@@6B@ ; CBaseStream::`vftable'
	mov	edx, DWORD PTR [ecx+32]
	pop	esi
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	DWORD PTR [eax+28], OFFSET FLAT:??_7CSysObj@@6B@ ; CSysObj::`vftable'
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XFile@@6BCBaseStream@@@ ; XFile::`vftable'
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+28], OFFSET FLAT:??_7XFile@@6BCSysObj@@@ ; XFile::`vftable'
	ret	4
??0XFile@@QAE@ABV0@@Z ENDP				; XFile::XFile
_TEXT	ENDS
PUBLIC	??4XFile@@QAEAAV0@ABV0@@Z			; XFile::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XFile@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XFile@@QAEAAV0@ABV0@@Z PROC NEAR			; XFile::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	push	edi
	lea	edx, DWORD PTR [ecx+4]
	lea	esi, DWORD PTR [eax+4]
	mov	edi, DWORD PTR [edx]
	mov	DWORD PTR [esi], edi
	mov	edi, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], edi
	pop	edi
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], edx
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], ecx
	pop	esi
	ret	4
??4XFile@@QAEAAV0@ABV0@@Z ENDP				; XFile::operator=
_TEXT	ENDS
PUBLIC	?has_handle@XFindLevel@@QAEKXZ			; XFindLevel::has_handle
; Function compile flags: /Ogty
;	COMDAT ?has_handle@XFindLevel@@QAEKXZ
_TEXT	SEGMENT
?has_handle@XFindLevel@@QAEKXZ PROC NEAR		; XFindLevel::has_handle, COMDAT
; _this$ = ecx

; 96   : 		if (handle==INVALID_XHANDLE_VALUE)

	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	cmp	edx, -1
	setne	al

; 97   : 			return FALSE;
; 98   : 		return TRUE;
; 99   : 	}

	ret	0
?has_handle@XFindLevel@@QAEKXZ ENDP			; XFindLevel::has_handle
_TEXT	ENDS
PUBLIC	?get_path@XFindLevel@@QAEPBDXZ			; XFindLevel::get_path
; Function compile flags: /Ogty
;	COMDAT ?get_path@XFindLevel@@QAEPBDXZ
_TEXT	SEGMENT
?get_path@XFindLevel@@QAEPBDXZ PROC NEAR		; XFindLevel::get_path, COMDAT
; _this$ = ecx

; 100  : 	CC8 *get_path(void){return path;}

	mov	eax, DWORD PTR [ecx+8]
	ret	0
?get_path@XFindLevel@@QAEPBDXZ ENDP			; XFindLevel::get_path
_TEXT	ENDS
PUBLIC	??4XFindLevel@@QAEAAV0@ABV0@@Z			; XFindLevel::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XFindLevel@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XFindLevel@@QAEAAV0@ABV0@@Z PROC NEAR		; XFindLevel::operator=, COMDAT
; _this$ = ecx
	mov	eax, ecx
	mov	ecx, DWORD PTR ___that$[esp-4]
	push	esi
	mov	edx, eax
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [edx], esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], esi
	pop	esi
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], ecx
	ret	4
??4XFindLevel@@QAEAAV0@ABV0@@Z ENDP			; XFindLevel::operator=
_TEXT	ENDS
PUBLIC	??1XFindLevel@@QAE@XZ				; XFindLevel::~XFindLevel
; Function compile flags: /Ogty
;	COMDAT ??1XFindLevel@@QAE@XZ
_TEXT	SEGMENT
??1XFindLevel@@QAE@XZ PROC NEAR				; XFindLevel::~XFindLevel, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	mov	ecx, DWORD PTR [esi+8]
	call	@xfree@4
	mov	DWORD PTR [esi+8], 0
	mov	ecx, DWORD PTR [esi+4]
	call	@xfree@4
	mov	DWORD PTR [esi+4], 0
	pop	esi
	ret	0
??1XFindLevel@@QAE@XZ ENDP				; XFindLevel::~XFindLevel
_TEXT	ENDS
PUBLIC	??0XFindFile@@QAE@XZ				; XFindFile::XFindFile
; Function compile flags: /Ogty
;	COMDAT ??0XFindFile@@QAE@XZ
_TEXT	SEGMENT
??0XFindFile@@QAE@XZ PROC NEAR				; XFindFile::XFindFile, COMDAT
; _this$ = ecx

; 153  : 	XFindFile(void) : info(null),private_info(null) {}

	mov	eax, ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	edx, DWORD PTR [eax+28]
	and	edx, -16777211				; ff000005H
	or	edx, 16777221				; 01000005H
	mov	DWORD PTR [eax+28], edx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx
	mov	DWORD PTR [eax+40], ecx
	mov	DWORD PTR [eax+44], ecx
	ret	0
??0XFindFile@@QAE@XZ ENDP				; XFindFile::XFindFile
_TEXT	ENDS
PUBLIC	??4XFindFile@@QAEAAV0@ABV0@@Z			; XFindFile::operator=
; Function compile flags: /Ogty
;	COMDAT ??4XFindFile@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
___that$ = 8
??4XFindFile@@QAEAAV0@ABV0@@Z PROC NEAR			; XFindFile::operator=, COMDAT
; _this$ = ecx
	push	esi
	mov	esi, DWORD PTR ___that$[esp]
	mov	eax, ecx
	push	edi
	mov	ecx, 92					; 0000005cH
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi
	ret	4
??4XFindFile@@QAEAAV0@ABV0@@Z ENDP			; XFindFile::operator=
_TEXT	ENDS
END
