; Listing generated by Microsoft (R) Optimizing Compiler Version 12.00.8943.0 

	TITLE	C:\duke4\xcore\winapp.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BF@MBIJ@Cannot?5init?5CPrintfT?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??8@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XListState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XChainState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0XChainState@@QAE@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0MemStats@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?is_locked@XMutex@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0FindState@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_argv@CmdArgs@@QAEPAPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_argc@CmdArgs@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?is_done@XWinApp@@MAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?return_value@XWinApp@@UAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XChain@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?get_head@?$XList@VXStatistic@@@@QAEPAVXStatistic@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XChain@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XChain@VXStatistic@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XList@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@VXStatistic@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_list@?$XList@VXStatistic@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?add_head@?$XList@VXStatistic@@@@QAEPAU_XPos@@PAVXStatistic@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?remove_head@?$XList@VXStatistic@@@@QAEPAVXStatistic@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcBase@VCStrObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XRcBase@VCStrObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XRcPtr@VCPathObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XRcPtr@VCPathObj@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$XList@VXFindLevel@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$XList@VXFindLevel@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSysObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GXFindLevel@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?new_node@?$XList@VXStatistic@@@@IAEPAUXNode@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@VXStatistic@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?free_nodes@?$XList@VXFindLevel@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelRef@?$XRcBase@VCStrObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelRef@?$XRcPtr@VCPathObj@@@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCStrObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPathObj@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7XWinApp@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CMemMap@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7XMutex@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?_winapp@@3PAVXWinApp@@A			; _winapp
_BSS	SEGMENT
?_winapp@@3PAVXWinApp@@A DD 01H DUP (?)			; _winapp
_BSS	ENDS
PUBLIC	??2@YAPAXI@Z					; operator new
EXTRN	__imp_@xmalloc@4:NEAR
; Function compile flags: /Ogty
; File C:\duke4\xcore\xcore.h
;	COMDAT ??2@YAPAXI@Z
_TEXT	SEGMENT
_size$ = 8
??2@YAPAXI@Z PROC NEAR					; operator new, COMDAT

; 129  : __inline void *operator new(size_t size){return xmalloc(size);}

	mov	ecx, DWORD PTR _size$[esp-4]
	jmp	DWORD PTR __imp_@xmalloc@4
??2@YAPAXI@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX@Z					; operator delete
EXTRN	__imp_@xfree@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8
??3@YAXPAX@Z PROC NEAR					; operator delete, COMDAT

; 130  : __inline void operator delete(void *ptr){xfree(ptr);}

	mov	ecx, DWORD PTR _ptr$[esp-4]
	jmp	DWORD PTR __imp_@xfree@4
??3@YAXPAX@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?is_done@XWinApp@@MAEKXZ			; XWinApp::is_done
PUBLIC	?app_init@XWinApp@@MAEKXZ			; XWinApp::app_init
PUBLIC	?app_close@XWinApp@@MAEKXZ			; XWinApp::app_close
PUBLIC	??0XWinApp@@QAE@XZ				; XWinApp::XWinApp
PUBLIC	?return_value@XWinApp@@UAEKXZ			; XWinApp::return_value
PUBLIC	??_7XWinApp@@6B@				; XWinApp::`vftable'
EXTRN	__purecall:NEAR
EXTRN	__imp_?_xapp@@3PAVXApp@@A:DWORD
;	COMDAT ??_7XWinApp@@6B@
; File C:\duke4\xcore\xclass.h
CONST	SEGMENT
??_7XWinApp@@6B@ DD FLAT:?is_done@XWinApp@@MAEKXZ	; XWinApp::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:?app_init@XWinApp@@MAEKXZ
	DD	FLAT:?app_close@XWinApp@@MAEKXZ
	DD	FLAT:?return_value@XWinApp@@UAEKXZ
; Function compile flags: /Ogty
; File C:\duke4\xcore\winapp.cpp
CONST	ENDS
_TEXT	SEGMENT
??0XWinApp@@QAE@XZ PROC NEAR				; XWinApp::XWinApp
; _this$ = ecx

; 7    : {

	mov	edx, DWORD PTR __imp_?_xapp@@3PAVXApp@@A
	mov	eax, ecx
	lea	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx], ecx
	xor	ecx, ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax], OFFSET FLAT:??_7XWinApp@@6B@ ; XWinApp::`vftable'

; 8    : 	_winapp=this;

	mov	DWORD PTR ?_winapp@@3PAVXWinApp@@A, eax	; _winapp

; 9    : }

	ret	0
??0XWinApp@@QAE@XZ ENDP					; XWinApp::XWinApp
; Function compile flags: /Ogty
; File C:\duke4\xcore\winapp.h
_TEXT	ENDS
;	COMDAT ?is_done@XWinApp@@MAEKXZ
_TEXT	SEGMENT
?is_done@XWinApp@@MAEKXZ PROC NEAR			; XWinApp::is_done, COMDAT
; _this$ = ecx

; 50   : 	virtual U32 is_done(void){return run_count;}

	mov	eax, DWORD PTR [ecx+20]
	ret	0
?is_done@XWinApp@@MAEKXZ ENDP				; XWinApp::is_done
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?return_value@XWinApp@@UAEKXZ
_TEXT	SEGMENT
?return_value@XWinApp@@UAEKXZ PROC NEAR			; XWinApp::return_value, COMDAT
; _this$ = ecx

; 65   : 	virtual U32 return_value(void){return 0;}

	xor	eax, eax
	ret	0
?return_value@XWinApp@@UAEKXZ ENDP			; XWinApp::return_value
_TEXT	ENDS
PUBLIC	??1XWinApp@@QAE@XZ				; XWinApp::~XWinApp
; Function compile flags: /Ogty
; File C:\duke4\xcore\winapp.cpp
_TEXT	SEGMENT
??1XWinApp@@QAE@XZ PROC NEAR				; XWinApp::~XWinApp
; _this$ = ecx

; 12   : {

	mov	DWORD PTR [ecx], OFFSET FLAT:??_7XWinApp@@6B@ ; XWinApp::`vftable'

; 13   : 	_winapp=null;
; 14   : }

	mov	eax, DWORD PTR __imp_?_xapp@@3PAVXApp@@A
	mov	DWORD PTR ?_winapp@@3PAVXWinApp@@A, 0	; _winapp
	mov	DWORD PTR [eax], 0
	ret	0
??1XWinApp@@QAE@XZ ENDP					; XWinApp::~XWinApp
; Function compile flags: /Ogty
?app_close@XWinApp@@MAEKXZ PROC NEAR			; XWinApp::app_close
; _this$ = ecx

; 18   : 	return TRUE;

	mov	eax, 1

; 19   : }

	ret	0
?app_close@XWinApp@@MAEKXZ ENDP				; XWinApp::app_close
; Function compile flags: /Ogty
?app_init@XWinApp@@MAEKXZ PROC NEAR			; XWinApp::app_init
; _this$ = ecx

; 23   : 	return TRUE;

	mov	eax, 1

; 24   : }

	ret	0
?app_init@XWinApp@@MAEKXZ ENDP				; XWinApp::app_init
_TEXT	ENDS
PUBLIC	??0CmdArgs@@QAE@PBD@Z				; CmdArgs::CmdArgs
PUBLIC	??1CmdArgs@@QAE@XZ				; CmdArgs::~CmdArgs
PUBLIC	?build_cmd_args@@YAKPBDAAKAAPAPBD@Z		; build_cmd_args
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
xdata$x	SEGMENT
$T57181	DD	0ffffffffH
	DD	FLAT:$L57167
$T57178	DD	019930520H
	DD	01H
	DD	FLAT:$T57181
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
_TEXT	SEGMENT
__$EHRec$ = -12
_cmd_line$ = 8
_argc$ = 12
_argv$ = 16
_cmds$ = -24
?build_cmd_args@@YAKPBDAAKAAPAPBD@Z PROC NEAR		; build_cmd_args

; 27   : {

	push	-1
	push	$L57179
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 12					; 0000000cH

; 28   : 	CmdArgs cmds(cmd_line);

	mov	eax, DWORD PTR _cmd_line$[esp+20]
	lea	ecx, DWORD PTR _cmds$[esp+24]
	push	eax
	call	??0CmdArgs@@QAE@PBD@Z			; CmdArgs::CmdArgs

; 29   : 
; 30   : 	argc=cmds.get_argc();

	mov	ecx, DWORD PTR _argc$[esp+20]
	mov	eax, DWORD PTR _cmds$[esp+24]

; 31   : 	if (!argc)

	test	eax, eax
	mov	DWORD PTR [ecx], eax

; 32   : 		return FALSE;

	lea	ecx, DWORD PTR _cmds$[esp+24]
	mov	DWORD PTR __$EHRec$[esp+32], -1
	jne	SHORT $L56739
	call	??1CmdArgs@@QAE@XZ			; CmdArgs::~CmdArgs
	xor	eax, eax

; 36   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 24					; 00000018H
	ret	0
$L56739:

; 33   : 
; 34   : 	argv=cmds.get_argv();

	mov	edx, DWORD PTR _argv$[esp+20]
	mov	eax, DWORD PTR _cmds$[esp+28]
	mov	DWORD PTR [edx], eax

; 35   : 	return TRUE;

	call	??1CmdArgs@@QAE@XZ			; CmdArgs::~CmdArgs

; 36   : }

	mov	ecx, DWORD PTR __$EHRec$[esp+24]
	mov	eax, 1
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 24					; 00000018H
	ret	0
_TEXT	ENDS
text$x	SEGMENT
$L57167:
	lea	ecx, DWORD PTR _cmds$[ebp]
	jmp	??1CmdArgs@@QAE@XZ			; CmdArgs::~CmdArgs
$L57179:
	mov	eax, OFFSET FLAT:$T57178
	jmp	___CxxFrameHandler
text$x	ENDS
?build_cmd_args@@YAKPBDAAKAAPAPBD@Z ENDP		; build_cmd_args
PUBLIC	?attempt_cmdline_early@XWinApp@@IAEKXZ		; XWinApp::attempt_cmdline_early
; Function compile flags: /Ogty
_TEXT	SEGMENT
?attempt_cmdline_early@XWinApp@@IAEKXZ PROC NEAR	; XWinApp::attempt_cmdline_early
; _this$ = ecx

; 41   : 	build_cmd_args(null,argc,argv);

	lea	eax, DWORD PTR [ecx+12]
	add	ecx, 8
	push	eax
	push	ecx
	push	0
	call	?build_cmd_args@@YAKPBDAAKAAPAPBD@Z	; build_cmd_args
	add	esp, 12					; 0000000cH

; 42   : 	return TRUE;

	mov	eax, 1

; 43   : }

	ret	0
?attempt_cmdline_early@XWinApp@@IAEKXZ ENDP		; XWinApp::attempt_cmdline_early
_TEXT	ENDS
PUBLIC	?run@XWinApp@@IAEKPBD@Z				; XWinApp::run
EXTRN	__imp_@xxx_fatal@4:NEAR
xdata$x	SEGMENT
$T57193	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T57195	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L57187
$T57194	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T57195
$T57190	DD	019930520H
	DD	02H
	DD	FLAT:$T57193
	DD	01H
	DD	FLAT:$T57194
	DD	2 DUP(00H)
xdata$x	ENDS
_DATA	SEGMENT
$SG56756 DB	'XWinApp::run: Uncaught Exception', 00H
; Function compile flags: /Ogty
_DATA	ENDS
_TEXT	SEGMENT
__$EHRec$ = -16
_cmd_line$ = 8
?run@XWinApp@@IAEKPBD@Z PROC NEAR			; XWinApp::run
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L57192
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _cmd_line$[ebp]
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	esi, ecx
	xor	ebx, ebx
$L56752:

; 48   : 	U32 res;
; 49   : 
; 50   : 	while(!is_done())

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $L56753

; 51   : 	{
; 52   : 		try
; 53   : 		{
; 54   : 			build_cmd_args(cmd_line,argc,argv);

	lea	ecx, DWORD PTR [esi+12]
	lea	edx, DWORD PTR [esi+8]
	push	ecx
	push	edx
	push	edi
	mov	DWORD PTR __$EHRec$[ebp+12], ebx
	call	?build_cmd_args@@YAKPBDAAKAAPAPBD@Z	; build_cmd_args

; 55   : 
; 56   : 			if (!app_init())

	mov	eax, DWORD PTR [esi]
	add	esp, 12					; 0000000cH
	mov	ecx, esi
	call	DWORD PTR [eax+8]
	cmp	eax, ebx
	jne	SHORT $L56755
$L57188:

; 57   : 				return FALSE;

	xor	eax, eax

; 68   : 	return TRUE;
; 69   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$L56755:

; 58   : 			res=main();

	mov	edx, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [edx+4]

; 59   : 			app_close();

	mov	eax, DWORD PTR [esi]
	mov	ecx, esi
	call	DWORD PTR [eax+12]

; 65   : 		}
; 66   : 		run_count++;

	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	inc	eax
	mov	DWORD PTR [esi+20], eax

; 67   : 	}

	jmp	SHORT $L56752
$L57187:

; 60   : 		}
; 61   : 		catch(...)
; 62   : 		{
; 63   : 			xxx_fatal("XWinApp::run: Uncaught Exception");

	mov	ecx, OFFSET FLAT:$SG56756
	call	DWORD PTR __imp_@xxx_fatal@4

; 64   : 			return FALSE;

	mov	eax, $L57188
	ret	0
	jmp	SHORT $L57188
$L56753:

; 68   : 	return TRUE;
; 69   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	eax, 1
	mov	DWORD PTR fs:__except_list, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
$L57192:
	mov	eax, OFFSET FLAT:$T57190
	jmp	___CxxFrameHandler
text$x	ENDS
?run@XWinApp@@IAEKPBD@Z ENDP				; XWinApp::run
PUBLIC	?run@XWinApp@@QAEKPAUHINSTANCE__@@0PBDK@Z	; XWinApp::run
; Function compile flags: /Ogty
_TEXT	SEGMENT
_Hinst$ = 8
_CmdLine$ = 16
?run@XWinApp@@QAEKPAUHINSTANCE__@@0PBDK@Z PROC NEAR	; XWinApp::run
; _this$ = ecx

; 73   : 	hinst=Hinst;

	mov	eax, DWORD PTR _Hinst$[esp-4]
	mov	DWORD PTR [ecx+4], eax

; 74   : 	cmd_line=CmdLine;

	mov	eax, DWORD PTR _CmdLine$[esp-4]

; 75   : 	
; 76   : 	return run(cmd_line);

	push	eax
	mov	DWORD PTR [ecx+16], eax
	call	?run@XWinApp@@IAEKPBD@Z			; XWinApp::run

; 77   : }

	ret	16					; 00000010H
?run@XWinApp@@QAEKPAUHINSTANCE__@@0PBDK@Z ENDP		; XWinApp::run
_TEXT	ENDS
PUBLIC	_WinMain@16
EXTRN	__imp__exit:NEAR
EXTRN	__imp_?WinMessage@@YAXPAUHWND__@@PBD@Z:NEAR
_DATA	SEGMENT
	ORG $+3
$SG56772 DB	'WinMain: _winapp variable not initialized', 00H
; Function compile flags: /Ogty
_DATA	ENDS
_TEXT	SEGMENT
_hinst$ = 8
_prev_inst$ = 12
_cmd_line$ = 16
_cmd_show$ = 20
_WinMain@16 PROC NEAR

; 81   : 	if (!_winapp)

	mov	ecx, DWORD PTR ?_winapp@@3PAVXWinApp@@A	; _winapp
	test	ecx, ecx
	jne	SHORT $L56771

; 82   : 	{
; 83   : 		WinMessage(null,"WinMain: _winapp variable not initialized");

	push	OFFSET FLAT:$SG56772
	push	ecx
	call	DWORD PTR __imp_?WinMessage@@YAXPAUHWND__@@PBD@Z
	add	esp, 8

; 84   : 		exit(1);

	push	1
	call	DWORD PTR __imp__exit
$L56771:

; 85   : 	}
; 86   : 
; 87   : 	_winapp->run(hinst,prev_inst,cmd_line,cmd_show);

	mov	eax, DWORD PTR _cmd_show$[esp-4]
	mov	edx, DWORD PTR _cmd_line$[esp-4]
	push	eax
	mov	eax, DWORD PTR _prev_inst$[esp]
	push	edx
	mov	edx, DWORD PTR _hinst$[esp+4]
	push	eax
	push	edx
	call	?run@XWinApp@@QAEKPAUHINSTANCE__@@0PBDK@Z ; XWinApp::run

; 88   : 	
; 89   : 	return _winapp->return_value();

	mov	ecx, DWORD PTR ?_winapp@@3PAVXWinApp@@A	; _winapp
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+16]

; 90   : }

	ret	16					; 00000010H
$L57198:
_WinMain@16 ENDP
_TEXT	ENDS
PUBLIC	?init@CmdArgs@@QAEKPBD@Z			; CmdArgs::init
EXTRN	__imp____p___argc:NEAR
EXTRN	__imp____p___argv:NEAR
; Function compile flags: /Ogty
_TEXT	SEGMENT
?init@CmdArgs@@QAEKPBD@Z PROC NEAR			; CmdArgs::init
; _this$ = ecx

; 94   : {

	push	esi
	mov	esi, ecx

; 95   : 	argc=__argc;

	call	DWORD PTR __imp____p___argc
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [esi], eax

; 96   : 	argv=(CC8 **)__argv;

	call	DWORD PTR __imp____p___argv
	mov	ecx, DWORD PTR [eax]

; 97   : 	arg_mem=null;

	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], ecx

; 98   : 	return TRUE;

	mov	eax, 1
	pop	esi

; 99   : }

	ret	4
?init@CmdArgs@@QAEKPBD@Z ENDP				; CmdArgs::init
_TEXT	ENDS
EXTRN	__imp_@xxx_throw@4:NEAR
_DATA	SEGMENT
	ORG $+2
$SG56783 DB	'CmdArgs: init failed in constructor', 00H
; Function compile flags: /Ogty
_DATA	ENDS
_TEXT	SEGMENT
_cmd_line$ = 8
??0CmdArgs@@QAE@PBD@Z PROC NEAR				; CmdArgs::CmdArgs
; _this$ = ecx

; 104  : 	if (!init(cmd_line))

	mov	eax, DWORD PTR _cmd_line$[esp-4]
	push	esi
	push	eax
	mov	esi, ecx
	call	?init@CmdArgs@@QAEKPBD@Z		; CmdArgs::init
	test	eax, eax
	jne	SHORT $L57201

; 105  : 		xxx_throw("CmdArgs: init failed in constructor");

	mov	ecx, OFFSET FLAT:$SG56783
	call	DWORD PTR __imp_@xxx_throw@4
$L57201:

; 106  : }

	mov	eax, esi
	pop	esi
	ret	4
??0CmdArgs@@QAE@PBD@Z ENDP				; CmdArgs::CmdArgs
; Function compile flags: /Ogty
??1CmdArgs@@QAE@XZ PROC NEAR				; CmdArgs::~CmdArgs
; _this$ = ecx

; 110  : 	if (arg_mem)

	mov	ecx, DWORD PTR [ecx+8]
	test	ecx, ecx
	je	SHORT $L57206

; 111  : 		delete arg_mem;

	jmp	DWORD PTR __imp_@xfree@4
$L57206:

; 112  : }

	ret	0
??1CmdArgs@@QAE@XZ ENDP					; CmdArgs::~CmdArgs
_TEXT	ENDS
END
